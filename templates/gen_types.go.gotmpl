package gen_types

import (
    "github.com/centrifuge/go-substrate-rpc-client/v4/registry"
    pbgear "github.com/streamingfast/firehose-gear/pb/sf/gear/metadata/type/v1"
)

{{- $generator := . }}
{{- $metadata := $generator.Metadata }}
{{- $messages := $generator.Messages }}
{{ range $msg := $messages }}
func {{ $msg.ToFuncName $metadata }}0000000(fields []*registry.DecodedField) {{ $msg.ReturnType $metadata }} {
    {{- template "return" wrap $msg -}}
}

    {{- range $field := $msg.Fields }}
        {{- template "field2func" wrap $field  -}}
    {{- end }} {{/* range fields */}}
{{- end }} {{/* range messages */}}

{{ define "field2func" }}
    {{- $field := .Value }}
    {{- $meta := .Generator.Metadata }}
    {{- $generator := .Generator }}

    {{- $seen := $generator.IsSeen $field.FullTypeName }}
    {{- if not $seen }}
        {{- $ignore:= $generator.Seen $field.FullTypeName }}
        {{/* ---- IsOptional section for any kind of fields ----- */}}
        {{- $isOptional := $generator.IsOptionalField $field }}
            {{- if and $isOptional $field.IsPrimitive }}
            func {{ $field.ToFuncName $meta}}(in *registry.DecodedField) *{{ $field.ReturnType $meta }} {
                var out *{{ $field.GetType }}

                if v, ok := in.Value.({{ $field.GetType }}); ok {
                    if v != {{ $generator.NoneOptionalFieldComparator $field }} {
                        panic("expected none")
                    }
                } else {
                    out = in.Value.(*{{ $field.GetType }})
                }
                return out
            }
            {{- else if $field.IsPrimitive }}
            {{/* DO NOTHING WHEN WE ARE A PRIMITIVE */}}
            {{- else if $generator.IsOneOf $field }}
            func {{ $field.ToFuncName $meta}}(in *registry.DecodedField) {{ $field.ReturnType $meta }} {
                return nil
            }
        {{- end }} {{/* isOptional and isPrimitive */}}
    {{- end }} {{/* not seen */}}
{{ end }}


{{ define "return" }}
    {{- $msg := .Value }}
    {{- $meta := .Generator.Metadata }}
                {{/* check fort repeated, optional, oneOf  */}}
    return {{ $msg.OutputType $meta }}{
        {{- range $i, $field := $msg.Fields }}
            {{- if $field.IsPrimitive }}
                {{ $field.ToGoTypeName }} : {{ $field.OutputType $meta }}(fields[{{$i}}].Value),
            {{- else }}
            {{/* check */}}
                {{ $field.ToGoTypeName }}: {{ $field.ToFuncName $meta }}(fields[{{$i}}].Value),
            {{- end }}
        {{- end}}
    }
{{ end }}