package gen_types

import (
    "reflect"

    "github.com/centrifuge/go-substrate-rpc-client/v4/registry"
    "github.com/centrifuge/go-substrate-rpc-client/v4/types"
    pbgear "github.com/streamingfast/firehose-gear/pb/sf/gear/metadata/type/v1"
)

{{- $generator := . }}
{{- $messages := $generator.Messages }}
{{- $metadata := $generator.Metadata }}

{{- /* ============================= */}}
{{- /* MAIN                          */}}
{{- /* ============================= */}}
{{- range $msg := $messages }}
    {{- template "message" wrap ( newWrapItem "msg" $msg) }}
{{- end }}

{{- /* ============================= */}}
{{- /* MESSAGE                       */}}
{{- /* ============================= */}}
{{ define "message" }}
{{- $msg := .msg }}
{{- $meta := .generator.Metadata }}
{{- $generator := .generator }}
{{- $funcName := $generator.FuncNameForMessage $msg }}
func {{ $funcName }}(in any) {{ $msg.ReturnType $meta }} {
    out := {{$msg.OutputType $meta}}{}

    {{- template "messageFields" wrap ( newWrapItem "fields" $msg.Fields "msg" $msg) }}

    return out //from message
}

{{- template "funcForMessageFieldsTo" wrap ( newWrapItem "fields" $msg.Fields "msg" $msg)}}

{{ end }}


{{- /* ============================= */}}
{{- /* MESSAGE Fields                */}}
{{- /* ============================= */}}
{{ define "messageFields" }}
{{- $fields := .fields }}
{{- $msg := .msg }}
{{- $meta := .generator.Metadata }}
    ff := in.(registry.DecodedFields)
    fields := []*registry.DecodedField(ff)
    _ = fields
{{ range $index, $field := $fields }}
        {{- if $field.IsPrimitive}}
            {{- template "primitiveField" wrap ( newWrapItem "field" $field "index" $index "msg" $msg) }}
        {{- else if $field.IsRepeated }}
            {{- template "repeatedField" wrap ( newWrapItem "field" $field "index" $index "msg" $msg) }}
        {{- else if $field.IsOptional }}
            {{- template "optionalField" wrap ( newWrapItem "field" $field "index" $index "msg" $msg) }}
        {{- else if $field.IsOneOf }}
            {{- template "oneOfField" wrap ( newWrapItem "field" $field "index" $index "msg" $msg) }}
        {{- else }}
            {{- template "field" wrap ( newWrapItem "field" $field "index" $index "msg" $msg) }}
        {{- end }}
    {{- end }}
{{- end }}

{{- /* ============================= */}}
{{- /* Field                         */}}
{{- /* ============================= */}}
{{ define "field" }}
{{- $msg := .msg }}
{{- $field := .field }}
{{- $index := .index }}
{{- $meta := .generator.Metadata }}
{{- $generator := .generator }}
    // field {{ $field.ToFieldName }}
    out.{{ $field.ToFieldName }} = {{ $generator.FuncNameForField $msg $field }}(fields[{{$index}}].Value)
{{- end }}

{{- /* ============================= */}}
{{- /* Primitive Field                */}}
{{- /* ============================= */}}
{{ define "primitiveField" }}
{{- $msg := .msg }}
{{- $field := .field }}
{{- $index := .index }}
{{- $meta := .generator.Metadata }}
{{- $generator := .generator }}
    // primitive field {{ $field.ToFieldName }}
    out.{{ $field.ToFieldName }} = {{ $generator.FuncNameForPrimitive $msg $field }}(fields[{{$index}}].Value)
{{- end }}

{{- /* ============================= */}}
{{- /* Optional Field                */}}
{{- /* ============================= */}}
{{ define "optionalField" }}
{{- $msg := .msg }}
{{- $field := .field }}
{{- $index := .index }}
{{- $meta := .generator.Metadata }}
{{- $generator := .generator }}
    // optional field {{ $field.ToFieldName }}
    out.{{ $field.ToFieldName }} = {{ $generator.FuncNameForOptional $msg $field }}(fields[{{$index}}].Value)
{{- end }}

{{- /* ============================= */}}
{{- /* Repeated Field               */}}
{{- /* ============================= */}}
{{ define "repeatedField" }}
{{- $msg := .msg }}
{{- $field := .field }}
{{- $index := .index }}
{{- $meta := .generator.Metadata }}
{{- $generator := .generator }}
    // repeated field {{ $field.ToFieldName }}
    out.{{ $field.ToFieldName }} = {{ $generator.FuncNameForRepeated $msg $field }}(fields[{{$index}}].Value)
{{- end }}

{{- /* ============================= */}}
{{- /* OneOf Field                   */}}
{{- /* ============================= */}}
{{ define "oneOfField" }}
{{- $field := .field }}
{{- $meta := .generator.Metadata }}
{{- $generator := .generator }}
{{- $index := .index }}
{{- $msg := .msg }}
    // oneOf field {{ $field.ToFieldName }}
     {{ $generator.FuncNameForOneOf  $msg $field }}(out.{{ $field.ToFieldName }}, fields[{{$index}}].Value)
{{- end }}


{{- /* ============================= */}}
{{- /* Func For MESSAGE Fields       */}}
{{- /* ============================= */}}
{{ define "funcForMessageFieldsTo" }}
    {{- $fields := .fields }}
    {{- $msg := .msg }}
    {{- $meta := .generator.Metadata }}
    {{ range $index, $field := $fields }}
        {{- if $field.IsRepeated }}
            {{- template "funcForRepeatedField" wrap ( newWrapItem "field" $field "index" $index "msg" $msg) }}
        {{- else if $field.IsOptional }}
            {{- template "funcForOptionalField" wrap ( newWrapItem "field" $field "index" $index "msg" $msg) }}
        {{- else if $field.IsOneOf }}
            {{- template "funcForOneOfField" wrap ( newWrapItem "field" $field "index" $index "msg" $msg) }}
        {{- else if $field.IsPrimitive }}
        {{- else }}
            {{- template "funcForField" wrap ( newWrapItem "field" $field "index" $index "msg" $msg) }}
        {{- end }}
    {{- end }}
{{- end }}

{{- /* ============================= */}}
{{- /* funcForRepeatedField          */}}
{{- /* ============================= */}}
{{ define "funcForRepeatedField" }}
{{- $generator := .generator }}
{{- $meta := .generator.Metadata }}
{{- $msg := .msg }}
{{- $field := .field }}
{{- $index := .index }}
{{ $funcName := $generator.FuncNameForRepeated $msg $field }}

{{- $seen := $generator.IsSeen $funcName }}
{{- $ignore := $generator.Seen $funcName}}
{{- if and (not $seen) (not $field.Primitive) }}
func {{ $funcName }}(in any) []*{{ $field.ReturnType  $meta }} {
    items := in.([]interface{})

    var out []*{{ $field.ReturnType  $meta }}
    for _, item := range items {
        o := To_{{ $field.FullTypeName }}(item)
        out = append(out, o)
    }
    return nil //funcForRepeatedField
}
{{- end }}
{{- end }}

{{- /* ============================= */}}
{{- /* funcForOptionalField          */}}
{{- /* ============================= */}}
{{ define "funcForOptionalField" }}
{{- $generator := .generator }}
{{- $meta := .generator.Metadata }}
{{- $msg := .msg }}
{{- $field := .field }}
{{- $index := .index }}
{{- $funcName := $generator.FuncNameForOptional $msg $field }}

{{- $seen := $generator.IsSeen $funcName }}
{{- $ignore := $generator.Seen $funcName}}
{{- if and (not $seen) (not $field.Primitive) }}
func {{ $funcName }}(in any) {{ $field.ReturnType  $meta }} {
    return nil //funcForOptionalField
}
{{- end }}
{{- end }}

{{- /* ============================= */}}
{{- /* funcForOneOfField             */}}
{{- /* ============================= */}}
{{ define "funcForOneOfField" }}
{{- $generator := .generator }}
{{- $meta := .generator.Metadata }}
{{- $msg := .msg }}
{{- $field := .field }}
{{- $index := .index }}

{{- $funcName := $generator.FuncNameForOneOf $msg $field }}
{{- $seen := $generator.IsSeen $funcName }}
{{- $ignore := $generator.Seen $funcName}}

{{- if not $seen }}
func {{ $funcName }}(target any, in any)  {
    variantIn := in.(*registry.VariantWTF)
    variantFields := variantIn.Value.(registry.DecodedFields)
    fields := []*registry.DecodedField(variantFields)

    switch variantIn.VariantByte{
    {{- range  $t := $field.Types}}
    case {{ $t.VariantByte }}:
        target = &pbgear.{{$msg.FullTypeName}}_{{$t.ToFieldName}}{
            {{$t.ToFieldName}}: To_{{ $t.FullTypeName }}(fields),
        }
    {{- end }}
    }
}
{{- end }}
{{- end }}

{{- /* ============================= */}}
{{- /* funcForField             */}}
{{- /* ============================= */}}
{{ define "funcForField" }}
{{- $generator := .generator }}
{{- $meta := .generator.Metadata }}
{{- $msg := .msg }}
{{- $field := .field }}
{{- $index := .index }}
{{- $funcName := $generator.FuncNameForField $msg $field }}

{{- $seen := $generator.IsSeen $funcName }}
{{- $ignore := $generator.Seen $funcName}}
{{- if not $seen }}
func {{ $funcName }}(in any) {{ $field.ReturnType  $meta }} {
    return nil //simple field
}
{{- end }}
{{- end }}


func To_bytes(a any) []byte {
    in := a.([]interface{})
    var out []byte
    for _, f := range in {
        u := uint8(f.(types.U8))
        out = append(out, byte(u))
    }
    return out
}

func To_string(i any) string {
    switch v := i.(type) {
    case types.Text:
        return string(v)
    case types.U128:
        return v.String()
    case types.U256:
        return v.String()
    case types.I128:
        return v.String()
    case types.I256:
        return v.String()
    default:
    panic("Unknown type")
    }
}

func To_uint32(i any) uint32 {
    switch v := i.(type) {
    case types.UCompact:
        return uint32(v.Int64())
    case types.U8:
        return uint32(v)
    case types.U16:
        return uint32(v)
    case types.U32:
        return uint32(v)
    default:
        panic("Unknown type")
    }
}

func To_Optional_uint32(i any) *uint32 {
    o := To_uint32(i)
    return &o
}

func To_uint64(a any) uint64 {
    switch v := a.(type) {
    case types.UCompact:
        return uint64(v.Int64())
    case types.U8:
        return uint64(v)
    case types.U16:
        return uint64(v)
    case types.U32:
        return uint64(v)
    case types.U64:
        return uint64(v)
    case uint8:
        return uint64(v)
    case uint16:
        return uint64(v)
    case uint32:
        return uint64(v)
    case uint64:
        return uint64(v)
    default:
        panic("Unknown type")
    }
}

func To_Optional_uint64(i any) *uint64 {
    o := To_uint64(i)
    return &o
}

func To_Optional_string(a any) *string {
    s := To_string(a)
    return &s
}

func To_bool(b any) bool {
    return b.(bool)
}

func To_Optional_bool(b any) *bool {
    o :=  To_bool(b)
    return &o
}

func To_Repeated_uint32(a any) []uint32 {
    panic("To_repeated_uint32")
}

var FuncMap map[string]reflect.Value
func init(){
    FuncMap = make(map[string]reflect.Value)

{{- range $msg := $messages }}
    {{- $funcName := $generator.FuncNameForMessage $msg }}
    FuncMap["{{ $funcName }}"] = reflect.ValueOf({{ $funcName }})
{{- end }}
}
