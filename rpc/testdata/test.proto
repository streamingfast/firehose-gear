syntax = "proto3";
package sf.gear.extrinsics.type.v1;

message Gear {
    oneof CallFunction {
        UploadCode upload_code = 1;
        UploadProgram upload_program = 2;
        CreateProgram create_program = 3;
        SendMessage send_message = 4;
        SendReply send_reply = 5;
        ClaimValue claim_value = 6;
        Run run = 7;
        SetExecuteInherent set_execute_inherent = 8;
    }

    message UploadCode{
        bytes code = 1;
    }

    message UploadProgram {
        bytes code = 1;
        bytes salt = 2;
        bytes init_payload = 3;
        uint64 gas_limit = 4;
        string value = 5; // uint128
        bool keep_alive = 6;
    }

    message CreateProgram {
        bytes code_id = 1; // [32]byte
        bytes salt = 2;
        bytes init_payload = 3;
        uint64 gas_limit = 4;
        string value = 5; // uint128
        bool keep_alive = 6;
    }

    message SendMessage {
        bytes destination = 1; // [32]byte
        bytes payload = 2;
        uint64 gas_limit = 3;
        string value = 4; // uint128
        bool keep_alive = 5;
    }

    message SendReply {
        bytes reply_to_id = 1; // [32]byte
        bytes payload = 2;
        uint64 gas_limit = 3;
        string value = 4; // uint128
        bool keep_alive = 5;
    }

    message ClaimValue {
        bytes message_id = 1; // [32]byte
    }

    message Run {
        optional uint64 max_gas = 1;
    }
    
    message SetExecuteInherent {
        bool value = 1;
    }
}

message System {
	oneof CallFunction {
		Remark remark = 1;
		SetHeapPages set_heap_pages = 2;
		SetCode set_code = 3;
		SetCodeWithoutChecks set_code_without_checks = 4;
		SetStorage set_storage = 5;
		KillStorage kill_storage = 6;
		KillPrefix kill_prefix = 7;
		RemarkWithEvent remark_with_event = 8;
	}
	message Remark {
		bytes remark = 1;
	}
	message SetHeapPages {
		uint32 pages = 1;
	}
	message SetCode {
		bytes code = 1;
	}
	message SetCodeWithoutChecks {
		bytes code = 1;
	}
    message SetStorage {
        repeated Tuple_Items items = 1; 

        message Tuple_Items {
            bytes items_1 = 1;
            bytes items_2 = 2;
        }
    }
	message KillStorage {
		repeated bytes keys = 1;
	}
	message KillPrefix {
		bytes prefix = 1;
		uint32 subkeys = 2;
	}
	message RemarkWithEvent {
		bytes remark = 1;
	}
}

message Timestamp {
	oneof CallFunction {
		Set set = 1;
	}
	message Set {
		uint64 now = 1;
	}
}

message Babe {
    oneof CallFunction {
        ReportEquivocation report_equivocation = 1;
        ReportEquivocationUnsigned report_equivocation_unsigned = 2;
        PlanConfig plan_config = 3;
    }

    message ReportEquivocation {
        EquivocationProof equivocation_proof = 1;

        message EquivocationProof {
            Offender offender = 1;

            message Offender {
                bytes offender = 1;
            }
        }
    }

    message ReportEquivocationUnsigned {
        bytes equivocation_proof = 1;
        bytes key_owner_proof = 2;
    }

    message PlanConfig {
        bytes config = 1;
    }
}

// Params will be inside all the messages
message Params {
    string name = 1;
    string type = 2;

    oneof Value {
        CompactU128 compact_u128 = 3;
        String string = 4;
        VariantEraPaidU32 variant_era_paid_u32 = 5;
    }

    message CompactU128 {
        string value = 1;
    }

    message String {
        string value = 1;
    }

    message VariantEraPaidU32 {
        uint32 value = 1;
    }
}

message Call {
    string name = 1;
    string module = 2; // <- this is the module name (first level)
    Params params = 3;
}

message Block {
    repeated Extrinsic extrinsics = 1;
}

message Extrinsic {
    Field field = 1;
    // oneof CallFunction {
    //     Balance_TransferAllowDeath transfer_allow_death = 1;
    //     Timestamp_Set transfer_allow_death_set = 2;
    // }
}

message Field {
    string name  = 1;

}


//
// in calls_events.proto
//
message Balance_Event_Superbob {}
message Balance_Call_Supermama {}

message Utility_Call_Batch {
    repeated types.PalletUtilityPalletCall calls = 1;
}
message Utility_Call_AsDerivative {
    uint32 index = 1;
    types.VaraRuntimeRuntimeCall call = 2;
}
message Utility_Call_ForceBatch{}

message Utility_Event_BatchInterrupted{}
message Utility_Event_ItemFailed{}


//
// types.proto
//

message VaraRuntimeRuntimeCall {
    oneof variant {
        FrameSystemPalletCall system = 1; // Variant::Index + 1
        PalletUtilityPalletCall utility = 9; // Variant::Index + 1
    }
}

message FrameSystemPalletCall {
  oneof variant {
     bytes remark = 1;

  }
}

message Balance {
    message Event_TransferAllowDeath{
        SPRuntimeMultiAddressMultiAddress dest = 1;
        CompactU128 value = 2;
    }

    message Event_TransferAllowDeath_SPRuntimeMultiAddressMultiAddress {
    
    }
    
    message Event_TransferAllowDeath_CompactU128 {
        string value = 1;
    }    
}



message Timestamp {
    Timestamp_Set set = 1;    

    message Timestamp_Set {
        uint64 now = 1;
    }
}




message Scheduler_Schedule {
    uint32 when = 1;
    optional Tuple_maybe_periodic maybe_periodic = 2;

    message Tuple_maybe_periodic {
        uint32 maybe_periodic_1 = 1;
        uint32 maybe_periodic_2 = 2;
    }
}
















message Identity_Set_Subs_Call {
    repeated Tuple_AccountID_PalletIdentity subs = 1;
    
}

//Vec<Tuple:AccountIdpallet_identity:types:Data>
message Tuple_sp_core_crypto_AccountId32_pallet_identity_types_Data { // 177 -> [0, 144]
    sp_core_crypto_AccountId32 col1 = 1;
    pallet_identity_types_Data col2 = 2;
}

message sp_core_crypto_AccountId32 { // 0
    bytes value = 1;
}

message pallet_identity_types_Data { // 144
    
}

message KillStorageCall {
	repeated Keys keys = 1;    
}

message Keys {
    bytes keys = 1;
}