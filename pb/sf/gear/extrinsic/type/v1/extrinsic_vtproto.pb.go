// Code generated by protoc-gen-go-vtproto. DO NOT EDIT.
// protoc-gen-go-vtproto version: v0.6.0
// source: sf/gear/extrinsic/type/v1/extrinsic.proto

package pbgearextrinsic

import (
	fmt "fmt"
	protohelpers "github.com/planetscale/vtprotobuf/protohelpers"
	v1 "github.com/streamingfast/firehose-gear/pb/sf/gear/metadata/type/v1"
	proto "google.golang.org/protobuf/proto"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

func (m *RuntimeCall) CloneVT() *RuntimeCall {
	if m == nil {
		return (*RuntimeCall)(nil)
	}
	r := new(RuntimeCall)
	if m.Call != nil {
		r.Call = m.Call.(interface{ CloneVT() isRuntimeCall_Call }).CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RuntimeCall) CloneMessageVT() proto.Message {
	return m.CloneVT()
}

func (m *RuntimeCall_BabePlanConfigChangeCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_BabePlanConfigChangeCall)(nil)
	}
	r := new(RuntimeCall_BabePlanConfigChangeCall)
	r.BabePlanConfigChangeCall = m.BabePlanConfigChangeCall.CloneVT()
	return r
}

func (m *RuntimeCall_BabeReportEquivocationCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_BabeReportEquivocationCall)(nil)
	}
	r := new(RuntimeCall_BabeReportEquivocationCall)
	r.BabeReportEquivocationCall = m.BabeReportEquivocationCall.CloneVT()
	return r
}

func (m *RuntimeCall_BabeReportEquivocationUnsignedCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_BabeReportEquivocationUnsignedCall)(nil)
	}
	r := new(RuntimeCall_BabeReportEquivocationUnsignedCall)
	r.BabeReportEquivocationUnsignedCall = m.BabeReportEquivocationUnsignedCall.CloneVT()
	return r
}

func (m *RuntimeCall_BagslistPutInFrontOfCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_BagslistPutInFrontOfCall)(nil)
	}
	r := new(RuntimeCall_BagslistPutInFrontOfCall)
	r.BagslistPutInFrontOfCall = m.BagslistPutInFrontOfCall.CloneVT()
	return r
}

func (m *RuntimeCall_BagslistPutInFrontOfOtherCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_BagslistPutInFrontOfOtherCall)(nil)
	}
	r := new(RuntimeCall_BagslistPutInFrontOfOtherCall)
	r.BagslistPutInFrontOfOtherCall = m.BagslistPutInFrontOfOtherCall.CloneVT()
	return r
}

func (m *RuntimeCall_BagslistRebagCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_BagslistRebagCall)(nil)
	}
	r := new(RuntimeCall_BagslistRebagCall)
	r.BagslistRebagCall = m.BagslistRebagCall.CloneVT()
	return r
}

func (m *RuntimeCall_BalancesForceSetBalanceCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_BalancesForceSetBalanceCall)(nil)
	}
	r := new(RuntimeCall_BalancesForceSetBalanceCall)
	r.BalancesForceSetBalanceCall = m.BalancesForceSetBalanceCall.CloneVT()
	return r
}

func (m *RuntimeCall_BalancesForceTransferCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_BalancesForceTransferCall)(nil)
	}
	r := new(RuntimeCall_BalancesForceTransferCall)
	r.BalancesForceTransferCall = m.BalancesForceTransferCall.CloneVT()
	return r
}

func (m *RuntimeCall_BalancesForceUnreserveCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_BalancesForceUnreserveCall)(nil)
	}
	r := new(RuntimeCall_BalancesForceUnreserveCall)
	r.BalancesForceUnreserveCall = m.BalancesForceUnreserveCall.CloneVT()
	return r
}

func (m *RuntimeCall_BalancesTransferAllCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_BalancesTransferAllCall)(nil)
	}
	r := new(RuntimeCall_BalancesTransferAllCall)
	r.BalancesTransferAllCall = m.BalancesTransferAllCall.CloneVT()
	return r
}

func (m *RuntimeCall_BalancesTransferAllowDeathCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_BalancesTransferAllowDeathCall)(nil)
	}
	r := new(RuntimeCall_BalancesTransferAllowDeathCall)
	r.BalancesTransferAllowDeathCall = m.BalancesTransferAllowDeathCall.CloneVT()
	return r
}

func (m *RuntimeCall_BalancesTransferKeepAliveCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_BalancesTransferKeepAliveCall)(nil)
	}
	r := new(RuntimeCall_BalancesTransferKeepAliveCall)
	r.BalancesTransferKeepAliveCall = m.BalancesTransferKeepAliveCall.CloneVT()
	return r
}

func (m *RuntimeCall_BalancesUpgradeAccountsCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_BalancesUpgradeAccountsCall)(nil)
	}
	r := new(RuntimeCall_BalancesUpgradeAccountsCall)
	r.BalancesUpgradeAccountsCall = m.BalancesUpgradeAccountsCall.CloneVT()
	return r
}

func (m *RuntimeCall_BountiesAcceptCuratorCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_BountiesAcceptCuratorCall)(nil)
	}
	r := new(RuntimeCall_BountiesAcceptCuratorCall)
	r.BountiesAcceptCuratorCall = m.BountiesAcceptCuratorCall.CloneVT()
	return r
}

func (m *RuntimeCall_BountiesApproveBountyCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_BountiesApproveBountyCall)(nil)
	}
	r := new(RuntimeCall_BountiesApproveBountyCall)
	r.BountiesApproveBountyCall = m.BountiesApproveBountyCall.CloneVT()
	return r
}

func (m *RuntimeCall_BountiesAwardBountyCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_BountiesAwardBountyCall)(nil)
	}
	r := new(RuntimeCall_BountiesAwardBountyCall)
	r.BountiesAwardBountyCall = m.BountiesAwardBountyCall.CloneVT()
	return r
}

func (m *RuntimeCall_BountiesClaimBountyCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_BountiesClaimBountyCall)(nil)
	}
	r := new(RuntimeCall_BountiesClaimBountyCall)
	r.BountiesClaimBountyCall = m.BountiesClaimBountyCall.CloneVT()
	return r
}

func (m *RuntimeCall_BountiesCloseBountyCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_BountiesCloseBountyCall)(nil)
	}
	r := new(RuntimeCall_BountiesCloseBountyCall)
	r.BountiesCloseBountyCall = m.BountiesCloseBountyCall.CloneVT()
	return r
}

func (m *RuntimeCall_BountiesExtendBountyExpiryCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_BountiesExtendBountyExpiryCall)(nil)
	}
	r := new(RuntimeCall_BountiesExtendBountyExpiryCall)
	r.BountiesExtendBountyExpiryCall = m.BountiesExtendBountyExpiryCall.CloneVT()
	return r
}

func (m *RuntimeCall_BountiesProposeBountyCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_BountiesProposeBountyCall)(nil)
	}
	r := new(RuntimeCall_BountiesProposeBountyCall)
	r.BountiesProposeBountyCall = m.BountiesProposeBountyCall.CloneVT()
	return r
}

func (m *RuntimeCall_BountiesProposeCuratorCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_BountiesProposeCuratorCall)(nil)
	}
	r := new(RuntimeCall_BountiesProposeCuratorCall)
	r.BountiesProposeCuratorCall = m.BountiesProposeCuratorCall.CloneVT()
	return r
}

func (m *RuntimeCall_BountiesUnassignCuratorCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_BountiesUnassignCuratorCall)(nil)
	}
	r := new(RuntimeCall_BountiesUnassignCuratorCall)
	r.BountiesUnassignCuratorCall = m.BountiesUnassignCuratorCall.CloneVT()
	return r
}

func (m *RuntimeCall_ChildbountiesAcceptCuratorCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_ChildbountiesAcceptCuratorCall)(nil)
	}
	r := new(RuntimeCall_ChildbountiesAcceptCuratorCall)
	r.ChildbountiesAcceptCuratorCall = m.ChildbountiesAcceptCuratorCall.CloneVT()
	return r
}

func (m *RuntimeCall_ChildbountiesAddChildBountyCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_ChildbountiesAddChildBountyCall)(nil)
	}
	r := new(RuntimeCall_ChildbountiesAddChildBountyCall)
	r.ChildbountiesAddChildBountyCall = m.ChildbountiesAddChildBountyCall.CloneVT()
	return r
}

func (m *RuntimeCall_ChildbountiesAwardChildBountyCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_ChildbountiesAwardChildBountyCall)(nil)
	}
	r := new(RuntimeCall_ChildbountiesAwardChildBountyCall)
	r.ChildbountiesAwardChildBountyCall = m.ChildbountiesAwardChildBountyCall.CloneVT()
	return r
}

func (m *RuntimeCall_ChildbountiesClaimChildBountyCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_ChildbountiesClaimChildBountyCall)(nil)
	}
	r := new(RuntimeCall_ChildbountiesClaimChildBountyCall)
	r.ChildbountiesClaimChildBountyCall = m.ChildbountiesClaimChildBountyCall.CloneVT()
	return r
}

func (m *RuntimeCall_ChildbountiesCloseChildBountyCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_ChildbountiesCloseChildBountyCall)(nil)
	}
	r := new(RuntimeCall_ChildbountiesCloseChildBountyCall)
	r.ChildbountiesCloseChildBountyCall = m.ChildbountiesCloseChildBountyCall.CloneVT()
	return r
}

func (m *RuntimeCall_ChildbountiesProposeCuratorCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_ChildbountiesProposeCuratorCall)(nil)
	}
	r := new(RuntimeCall_ChildbountiesProposeCuratorCall)
	r.ChildbountiesProposeCuratorCall = m.ChildbountiesProposeCuratorCall.CloneVT()
	return r
}

func (m *RuntimeCall_ChildbountiesUnassignCuratorCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_ChildbountiesUnassignCuratorCall)(nil)
	}
	r := new(RuntimeCall_ChildbountiesUnassignCuratorCall)
	r.ChildbountiesUnassignCuratorCall = m.ChildbountiesUnassignCuratorCall.CloneVT()
	return r
}

func (m *RuntimeCall_ConvictionvotingDelegateCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_ConvictionvotingDelegateCall)(nil)
	}
	r := new(RuntimeCall_ConvictionvotingDelegateCall)
	r.ConvictionvotingDelegateCall = m.ConvictionvotingDelegateCall.CloneVT()
	return r
}

func (m *RuntimeCall_ConvictionvotingRemoveOtherVoteCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_ConvictionvotingRemoveOtherVoteCall)(nil)
	}
	r := new(RuntimeCall_ConvictionvotingRemoveOtherVoteCall)
	r.ConvictionvotingRemoveOtherVoteCall = m.ConvictionvotingRemoveOtherVoteCall.CloneVT()
	return r
}

func (m *RuntimeCall_ConvictionvotingRemoveVoteCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_ConvictionvotingRemoveVoteCall)(nil)
	}
	r := new(RuntimeCall_ConvictionvotingRemoveVoteCall)
	r.ConvictionvotingRemoveVoteCall = m.ConvictionvotingRemoveVoteCall.CloneVT()
	return r
}

func (m *RuntimeCall_ConvictionvotingUndelegateCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_ConvictionvotingUndelegateCall)(nil)
	}
	r := new(RuntimeCall_ConvictionvotingUndelegateCall)
	r.ConvictionvotingUndelegateCall = m.ConvictionvotingUndelegateCall.CloneVT()
	return r
}

func (m *RuntimeCall_ConvictionvotingUnlockCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_ConvictionvotingUnlockCall)(nil)
	}
	r := new(RuntimeCall_ConvictionvotingUnlockCall)
	r.ConvictionvotingUnlockCall = m.ConvictionvotingUnlockCall.CloneVT()
	return r
}

func (m *RuntimeCall_ConvictionvotingVoteCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_ConvictionvotingVoteCall)(nil)
	}
	r := new(RuntimeCall_ConvictionvotingVoteCall)
	r.ConvictionvotingVoteCall = m.ConvictionvotingVoteCall.CloneVT()
	return r
}

func (m *RuntimeCall_ElectionprovidermultiphaseGovernanceFallbackCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_ElectionprovidermultiphaseGovernanceFallbackCall)(nil)
	}
	r := new(RuntimeCall_ElectionprovidermultiphaseGovernanceFallbackCall)
	r.ElectionprovidermultiphaseGovernanceFallbackCall = m.ElectionprovidermultiphaseGovernanceFallbackCall.CloneVT()
	return r
}

func (m *RuntimeCall_ElectionprovidermultiphaseSetEmergencyElectionResultCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_ElectionprovidermultiphaseSetEmergencyElectionResultCall)(nil)
	}
	r := new(RuntimeCall_ElectionprovidermultiphaseSetEmergencyElectionResultCall)
	r.ElectionprovidermultiphaseSetEmergencyElectionResultCall = m.ElectionprovidermultiphaseSetEmergencyElectionResultCall.CloneVT()
	return r
}

func (m *RuntimeCall_ElectionprovidermultiphaseSetMinimumUntrustedScoreCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_ElectionprovidermultiphaseSetMinimumUntrustedScoreCall)(nil)
	}
	r := new(RuntimeCall_ElectionprovidermultiphaseSetMinimumUntrustedScoreCall)
	r.ElectionprovidermultiphaseSetMinimumUntrustedScoreCall = m.ElectionprovidermultiphaseSetMinimumUntrustedScoreCall.CloneVT()
	return r
}

func (m *RuntimeCall_ElectionprovidermultiphaseSubmitCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_ElectionprovidermultiphaseSubmitCall)(nil)
	}
	r := new(RuntimeCall_ElectionprovidermultiphaseSubmitCall)
	r.ElectionprovidermultiphaseSubmitCall = m.ElectionprovidermultiphaseSubmitCall.CloneVT()
	return r
}

func (m *RuntimeCall_ElectionprovidermultiphaseSubmitUnsignedCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_ElectionprovidermultiphaseSubmitUnsignedCall)(nil)
	}
	r := new(RuntimeCall_ElectionprovidermultiphaseSubmitUnsignedCall)
	r.ElectionprovidermultiphaseSubmitUnsignedCall = m.ElectionprovidermultiphaseSubmitUnsignedCall.CloneVT()
	return r
}

func (m *RuntimeCall_FellowshipcollectiveAddMemberCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_FellowshipcollectiveAddMemberCall)(nil)
	}
	r := new(RuntimeCall_FellowshipcollectiveAddMemberCall)
	r.FellowshipcollectiveAddMemberCall = m.FellowshipcollectiveAddMemberCall.CloneVT()
	return r
}

func (m *RuntimeCall_FellowshipcollectiveCleanupPollCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_FellowshipcollectiveCleanupPollCall)(nil)
	}
	r := new(RuntimeCall_FellowshipcollectiveCleanupPollCall)
	r.FellowshipcollectiveCleanupPollCall = m.FellowshipcollectiveCleanupPollCall.CloneVT()
	return r
}

func (m *RuntimeCall_FellowshipcollectiveDemoteMemberCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_FellowshipcollectiveDemoteMemberCall)(nil)
	}
	r := new(RuntimeCall_FellowshipcollectiveDemoteMemberCall)
	r.FellowshipcollectiveDemoteMemberCall = m.FellowshipcollectiveDemoteMemberCall.CloneVT()
	return r
}

func (m *RuntimeCall_FellowshipcollectivePromoteMemberCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_FellowshipcollectivePromoteMemberCall)(nil)
	}
	r := new(RuntimeCall_FellowshipcollectivePromoteMemberCall)
	r.FellowshipcollectivePromoteMemberCall = m.FellowshipcollectivePromoteMemberCall.CloneVT()
	return r
}

func (m *RuntimeCall_FellowshipcollectiveRemoveMemberCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_FellowshipcollectiveRemoveMemberCall)(nil)
	}
	r := new(RuntimeCall_FellowshipcollectiveRemoveMemberCall)
	r.FellowshipcollectiveRemoveMemberCall = m.FellowshipcollectiveRemoveMemberCall.CloneVT()
	return r
}

func (m *RuntimeCall_FellowshipcollectiveVoteCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_FellowshipcollectiveVoteCall)(nil)
	}
	r := new(RuntimeCall_FellowshipcollectiveVoteCall)
	r.FellowshipcollectiveVoteCall = m.FellowshipcollectiveVoteCall.CloneVT()
	return r
}

func (m *RuntimeCall_FellowshipreferendaCancelCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_FellowshipreferendaCancelCall)(nil)
	}
	r := new(RuntimeCall_FellowshipreferendaCancelCall)
	r.FellowshipreferendaCancelCall = m.FellowshipreferendaCancelCall.CloneVT()
	return r
}

func (m *RuntimeCall_FellowshipreferendaKillCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_FellowshipreferendaKillCall)(nil)
	}
	r := new(RuntimeCall_FellowshipreferendaKillCall)
	r.FellowshipreferendaKillCall = m.FellowshipreferendaKillCall.CloneVT()
	return r
}

func (m *RuntimeCall_FellowshipreferendaNudgeReferendumCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_FellowshipreferendaNudgeReferendumCall)(nil)
	}
	r := new(RuntimeCall_FellowshipreferendaNudgeReferendumCall)
	r.FellowshipreferendaNudgeReferendumCall = m.FellowshipreferendaNudgeReferendumCall.CloneVT()
	return r
}

func (m *RuntimeCall_FellowshipreferendaOneFewerDecidingCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_FellowshipreferendaOneFewerDecidingCall)(nil)
	}
	r := new(RuntimeCall_FellowshipreferendaOneFewerDecidingCall)
	r.FellowshipreferendaOneFewerDecidingCall = m.FellowshipreferendaOneFewerDecidingCall.CloneVT()
	return r
}

func (m *RuntimeCall_FellowshipreferendaPlaceDecisionDepositCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_FellowshipreferendaPlaceDecisionDepositCall)(nil)
	}
	r := new(RuntimeCall_FellowshipreferendaPlaceDecisionDepositCall)
	r.FellowshipreferendaPlaceDecisionDepositCall = m.FellowshipreferendaPlaceDecisionDepositCall.CloneVT()
	return r
}

func (m *RuntimeCall_FellowshipreferendaRefundDecisionDepositCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_FellowshipreferendaRefundDecisionDepositCall)(nil)
	}
	r := new(RuntimeCall_FellowshipreferendaRefundDecisionDepositCall)
	r.FellowshipreferendaRefundDecisionDepositCall = m.FellowshipreferendaRefundDecisionDepositCall.CloneVT()
	return r
}

func (m *RuntimeCall_FellowshipreferendaRefundSubmissionDepositCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_FellowshipreferendaRefundSubmissionDepositCall)(nil)
	}
	r := new(RuntimeCall_FellowshipreferendaRefundSubmissionDepositCall)
	r.FellowshipreferendaRefundSubmissionDepositCall = m.FellowshipreferendaRefundSubmissionDepositCall.CloneVT()
	return r
}

func (m *RuntimeCall_FellowshipreferendaSetMetadataCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_FellowshipreferendaSetMetadataCall)(nil)
	}
	r := new(RuntimeCall_FellowshipreferendaSetMetadataCall)
	r.FellowshipreferendaSetMetadataCall = m.FellowshipreferendaSetMetadataCall.CloneVT()
	return r
}

func (m *RuntimeCall_FellowshipreferendaSubmitCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_FellowshipreferendaSubmitCall)(nil)
	}
	r := new(RuntimeCall_FellowshipreferendaSubmitCall)
	r.FellowshipreferendaSubmitCall = m.FellowshipreferendaSubmitCall.CloneVT()
	return r
}

func (m *RuntimeCall_GearvoucherCallCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_GearvoucherCallCall)(nil)
	}
	r := new(RuntimeCall_GearvoucherCallCall)
	r.GearvoucherCallCall = m.GearvoucherCallCall.CloneVT()
	return r
}

func (m *RuntimeCall_GearvoucherCallDeprecatedCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_GearvoucherCallDeprecatedCall)(nil)
	}
	r := new(RuntimeCall_GearvoucherCallDeprecatedCall)
	r.GearvoucherCallDeprecatedCall = m.GearvoucherCallDeprecatedCall.CloneVT()
	return r
}

func (m *RuntimeCall_GearvoucherDeclineCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_GearvoucherDeclineCall)(nil)
	}
	r := new(RuntimeCall_GearvoucherDeclineCall)
	r.GearvoucherDeclineCall = m.GearvoucherDeclineCall.CloneVT()
	return r
}

func (m *RuntimeCall_GearvoucherIssueCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_GearvoucherIssueCall)(nil)
	}
	r := new(RuntimeCall_GearvoucherIssueCall)
	r.GearvoucherIssueCall = m.GearvoucherIssueCall.CloneVT()
	return r
}

func (m *RuntimeCall_GearvoucherRevokeCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_GearvoucherRevokeCall)(nil)
	}
	r := new(RuntimeCall_GearvoucherRevokeCall)
	r.GearvoucherRevokeCall = m.GearvoucherRevokeCall.CloneVT()
	return r
}

func (m *RuntimeCall_GearvoucherUpdateCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_GearvoucherUpdateCall)(nil)
	}
	r := new(RuntimeCall_GearvoucherUpdateCall)
	r.GearvoucherUpdateCall = m.GearvoucherUpdateCall.CloneVT()
	return r
}

func (m *RuntimeCall_GearClaimValueCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_GearClaimValueCall)(nil)
	}
	r := new(RuntimeCall_GearClaimValueCall)
	r.GearClaimValueCall = m.GearClaimValueCall.CloneVT()
	return r
}

func (m *RuntimeCall_GearCreateProgramCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_GearCreateProgramCall)(nil)
	}
	r := new(RuntimeCall_GearCreateProgramCall)
	r.GearCreateProgramCall = m.GearCreateProgramCall.CloneVT()
	return r
}

func (m *RuntimeCall_GearRunCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_GearRunCall)(nil)
	}
	r := new(RuntimeCall_GearRunCall)
	r.GearRunCall = m.GearRunCall.CloneVT()
	return r
}

func (m *RuntimeCall_GearSendMessageCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_GearSendMessageCall)(nil)
	}
	r := new(RuntimeCall_GearSendMessageCall)
	r.GearSendMessageCall = m.GearSendMessageCall.CloneVT()
	return r
}

func (m *RuntimeCall_GearSendReplyCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_GearSendReplyCall)(nil)
	}
	r := new(RuntimeCall_GearSendReplyCall)
	r.GearSendReplyCall = m.GearSendReplyCall.CloneVT()
	return r
}

func (m *RuntimeCall_GearSetExecuteInherentCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_GearSetExecuteInherentCall)(nil)
	}
	r := new(RuntimeCall_GearSetExecuteInherentCall)
	r.GearSetExecuteInherentCall = m.GearSetExecuteInherentCall.CloneVT()
	return r
}

func (m *RuntimeCall_GearUploadCodeCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_GearUploadCodeCall)(nil)
	}
	r := new(RuntimeCall_GearUploadCodeCall)
	r.GearUploadCodeCall = m.GearUploadCodeCall.CloneVT()
	return r
}

func (m *RuntimeCall_GearUploadProgramCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_GearUploadProgramCall)(nil)
	}
	r := new(RuntimeCall_GearUploadProgramCall)
	r.GearUploadProgramCall = m.GearUploadProgramCall.CloneVT()
	return r
}

func (m *RuntimeCall_GrandpaNoteStalledCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_GrandpaNoteStalledCall)(nil)
	}
	r := new(RuntimeCall_GrandpaNoteStalledCall)
	r.GrandpaNoteStalledCall = m.GrandpaNoteStalledCall.CloneVT()
	return r
}

func (m *RuntimeCall_GrandpaReportEquivocationCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_GrandpaReportEquivocationCall)(nil)
	}
	r := new(RuntimeCall_GrandpaReportEquivocationCall)
	r.GrandpaReportEquivocationCall = m.GrandpaReportEquivocationCall.CloneVT()
	return r
}

func (m *RuntimeCall_GrandpaReportEquivocationUnsignedCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_GrandpaReportEquivocationUnsignedCall)(nil)
	}
	r := new(RuntimeCall_GrandpaReportEquivocationUnsignedCall)
	r.GrandpaReportEquivocationUnsignedCall = m.GrandpaReportEquivocationUnsignedCall.CloneVT()
	return r
}

func (m *RuntimeCall_IdentityAddRegistrarCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_IdentityAddRegistrarCall)(nil)
	}
	r := new(RuntimeCall_IdentityAddRegistrarCall)
	r.IdentityAddRegistrarCall = m.IdentityAddRegistrarCall.CloneVT()
	return r
}

func (m *RuntimeCall_IdentityAddSubCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_IdentityAddSubCall)(nil)
	}
	r := new(RuntimeCall_IdentityAddSubCall)
	r.IdentityAddSubCall = m.IdentityAddSubCall.CloneVT()
	return r
}

func (m *RuntimeCall_IdentityCancelRequestCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_IdentityCancelRequestCall)(nil)
	}
	r := new(RuntimeCall_IdentityCancelRequestCall)
	r.IdentityCancelRequestCall = m.IdentityCancelRequestCall.CloneVT()
	return r
}

func (m *RuntimeCall_IdentityKillIdentityCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_IdentityKillIdentityCall)(nil)
	}
	r := new(RuntimeCall_IdentityKillIdentityCall)
	r.IdentityKillIdentityCall = m.IdentityKillIdentityCall.CloneVT()
	return r
}

func (m *RuntimeCall_IdentityProvideJudgementCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_IdentityProvideJudgementCall)(nil)
	}
	r := new(RuntimeCall_IdentityProvideJudgementCall)
	r.IdentityProvideJudgementCall = m.IdentityProvideJudgementCall.CloneVT()
	return r
}

func (m *RuntimeCall_IdentityRemoveSubCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_IdentityRemoveSubCall)(nil)
	}
	r := new(RuntimeCall_IdentityRemoveSubCall)
	r.IdentityRemoveSubCall = m.IdentityRemoveSubCall.CloneVT()
	return r
}

func (m *RuntimeCall_IdentityRenameSubCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_IdentityRenameSubCall)(nil)
	}
	r := new(RuntimeCall_IdentityRenameSubCall)
	r.IdentityRenameSubCall = m.IdentityRenameSubCall.CloneVT()
	return r
}

func (m *RuntimeCall_IdentityRequestJudgementCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_IdentityRequestJudgementCall)(nil)
	}
	r := new(RuntimeCall_IdentityRequestJudgementCall)
	r.IdentityRequestJudgementCall = m.IdentityRequestJudgementCall.CloneVT()
	return r
}

func (m *RuntimeCall_IdentitySetAccountIdCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_IdentitySetAccountIdCall)(nil)
	}
	r := new(RuntimeCall_IdentitySetAccountIdCall)
	r.IdentitySetAccountIdCall = m.IdentitySetAccountIdCall.CloneVT()
	return r
}

func (m *RuntimeCall_IdentitySetFeeCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_IdentitySetFeeCall)(nil)
	}
	r := new(RuntimeCall_IdentitySetFeeCall)
	r.IdentitySetFeeCall = m.IdentitySetFeeCall.CloneVT()
	return r
}

func (m *RuntimeCall_IdentitySetFieldsCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_IdentitySetFieldsCall)(nil)
	}
	r := new(RuntimeCall_IdentitySetFieldsCall)
	r.IdentitySetFieldsCall = m.IdentitySetFieldsCall.CloneVT()
	return r
}

func (m *RuntimeCall_IdentitySetIdentityCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_IdentitySetIdentityCall)(nil)
	}
	r := new(RuntimeCall_IdentitySetIdentityCall)
	r.IdentitySetIdentityCall = m.IdentitySetIdentityCall.CloneVT()
	return r
}

func (m *RuntimeCall_IdentitySetSubsCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_IdentitySetSubsCall)(nil)
	}
	r := new(RuntimeCall_IdentitySetSubsCall)
	r.IdentitySetSubsCall = m.IdentitySetSubsCall.CloneVT()
	return r
}

func (m *RuntimeCall_ImonlineHeartbeatCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_ImonlineHeartbeatCall)(nil)
	}
	r := new(RuntimeCall_ImonlineHeartbeatCall)
	r.ImonlineHeartbeatCall = m.ImonlineHeartbeatCall.CloneVT()
	return r
}

func (m *RuntimeCall_MultisigApproveAsMultiCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_MultisigApproveAsMultiCall)(nil)
	}
	r := new(RuntimeCall_MultisigApproveAsMultiCall)
	r.MultisigApproveAsMultiCall = m.MultisigApproveAsMultiCall.CloneVT()
	return r
}

func (m *RuntimeCall_MultisigAsMultiCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_MultisigAsMultiCall)(nil)
	}
	r := new(RuntimeCall_MultisigAsMultiCall)
	r.MultisigAsMultiCall = m.MultisigAsMultiCall.CloneVT()
	return r
}

func (m *RuntimeCall_MultisigAsMultiThreshold_1Call) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_MultisigAsMultiThreshold_1Call)(nil)
	}
	r := new(RuntimeCall_MultisigAsMultiThreshold_1Call)
	r.MultisigAsMultiThreshold_1Call = m.MultisigAsMultiThreshold_1Call.CloneVT()
	return r
}

func (m *RuntimeCall_MultisigCancelAsMultiCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_MultisigCancelAsMultiCall)(nil)
	}
	r := new(RuntimeCall_MultisigCancelAsMultiCall)
	r.MultisigCancelAsMultiCall = m.MultisigCancelAsMultiCall.CloneVT()
	return r
}

func (m *RuntimeCall_NominationpoolsAdjustPoolDepositCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_NominationpoolsAdjustPoolDepositCall)(nil)
	}
	r := new(RuntimeCall_NominationpoolsAdjustPoolDepositCall)
	r.NominationpoolsAdjustPoolDepositCall = m.NominationpoolsAdjustPoolDepositCall.CloneVT()
	return r
}

func (m *RuntimeCall_NominationpoolsBondExtraCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_NominationpoolsBondExtraCall)(nil)
	}
	r := new(RuntimeCall_NominationpoolsBondExtraCall)
	r.NominationpoolsBondExtraCall = m.NominationpoolsBondExtraCall.CloneVT()
	return r
}

func (m *RuntimeCall_NominationpoolsBondExtraOtherCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_NominationpoolsBondExtraOtherCall)(nil)
	}
	r := new(RuntimeCall_NominationpoolsBondExtraOtherCall)
	r.NominationpoolsBondExtraOtherCall = m.NominationpoolsBondExtraOtherCall.CloneVT()
	return r
}

func (m *RuntimeCall_NominationpoolsChillCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_NominationpoolsChillCall)(nil)
	}
	r := new(RuntimeCall_NominationpoolsChillCall)
	r.NominationpoolsChillCall = m.NominationpoolsChillCall.CloneVT()
	return r
}

func (m *RuntimeCall_NominationpoolsClaimCommissionCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_NominationpoolsClaimCommissionCall)(nil)
	}
	r := new(RuntimeCall_NominationpoolsClaimCommissionCall)
	r.NominationpoolsClaimCommissionCall = m.NominationpoolsClaimCommissionCall.CloneVT()
	return r
}

func (m *RuntimeCall_NominationpoolsClaimPayoutOtherCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_NominationpoolsClaimPayoutOtherCall)(nil)
	}
	r := new(RuntimeCall_NominationpoolsClaimPayoutOtherCall)
	r.NominationpoolsClaimPayoutOtherCall = m.NominationpoolsClaimPayoutOtherCall.CloneVT()
	return r
}

func (m *RuntimeCall_NominationpoolsCreateCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_NominationpoolsCreateCall)(nil)
	}
	r := new(RuntimeCall_NominationpoolsCreateCall)
	r.NominationpoolsCreateCall = m.NominationpoolsCreateCall.CloneVT()
	return r
}

func (m *RuntimeCall_NominationpoolsCreateWithPoolIdCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_NominationpoolsCreateWithPoolIdCall)(nil)
	}
	r := new(RuntimeCall_NominationpoolsCreateWithPoolIdCall)
	r.NominationpoolsCreateWithPoolIdCall = m.NominationpoolsCreateWithPoolIdCall.CloneVT()
	return r
}

func (m *RuntimeCall_NominationpoolsJoinCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_NominationpoolsJoinCall)(nil)
	}
	r := new(RuntimeCall_NominationpoolsJoinCall)
	r.NominationpoolsJoinCall = m.NominationpoolsJoinCall.CloneVT()
	return r
}

func (m *RuntimeCall_NominationpoolsNominateCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_NominationpoolsNominateCall)(nil)
	}
	r := new(RuntimeCall_NominationpoolsNominateCall)
	r.NominationpoolsNominateCall = m.NominationpoolsNominateCall.CloneVT()
	return r
}

func (m *RuntimeCall_NominationpoolsPoolWithdrawUnbondedCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_NominationpoolsPoolWithdrawUnbondedCall)(nil)
	}
	r := new(RuntimeCall_NominationpoolsPoolWithdrawUnbondedCall)
	r.NominationpoolsPoolWithdrawUnbondedCall = m.NominationpoolsPoolWithdrawUnbondedCall.CloneVT()
	return r
}

func (m *RuntimeCall_NominationpoolsSetClaimPermissionCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_NominationpoolsSetClaimPermissionCall)(nil)
	}
	r := new(RuntimeCall_NominationpoolsSetClaimPermissionCall)
	r.NominationpoolsSetClaimPermissionCall = m.NominationpoolsSetClaimPermissionCall.CloneVT()
	return r
}

func (m *RuntimeCall_NominationpoolsSetCommissionCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_NominationpoolsSetCommissionCall)(nil)
	}
	r := new(RuntimeCall_NominationpoolsSetCommissionCall)
	r.NominationpoolsSetCommissionCall = m.NominationpoolsSetCommissionCall.CloneVT()
	return r
}

func (m *RuntimeCall_NominationpoolsSetCommissionChangeRateCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_NominationpoolsSetCommissionChangeRateCall)(nil)
	}
	r := new(RuntimeCall_NominationpoolsSetCommissionChangeRateCall)
	r.NominationpoolsSetCommissionChangeRateCall = m.NominationpoolsSetCommissionChangeRateCall.CloneVT()
	return r
}

func (m *RuntimeCall_NominationpoolsSetCommissionMaxCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_NominationpoolsSetCommissionMaxCall)(nil)
	}
	r := new(RuntimeCall_NominationpoolsSetCommissionMaxCall)
	r.NominationpoolsSetCommissionMaxCall = m.NominationpoolsSetCommissionMaxCall.CloneVT()
	return r
}

func (m *RuntimeCall_NominationpoolsSetConfigsCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_NominationpoolsSetConfigsCall)(nil)
	}
	r := new(RuntimeCall_NominationpoolsSetConfigsCall)
	r.NominationpoolsSetConfigsCall = m.NominationpoolsSetConfigsCall.CloneVT()
	return r
}

func (m *RuntimeCall_NominationpoolsSetMetadataCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_NominationpoolsSetMetadataCall)(nil)
	}
	r := new(RuntimeCall_NominationpoolsSetMetadataCall)
	r.NominationpoolsSetMetadataCall = m.NominationpoolsSetMetadataCall.CloneVT()
	return r
}

func (m *RuntimeCall_NominationpoolsSetStateCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_NominationpoolsSetStateCall)(nil)
	}
	r := new(RuntimeCall_NominationpoolsSetStateCall)
	r.NominationpoolsSetStateCall = m.NominationpoolsSetStateCall.CloneVT()
	return r
}

func (m *RuntimeCall_NominationpoolsUnbondCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_NominationpoolsUnbondCall)(nil)
	}
	r := new(RuntimeCall_NominationpoolsUnbondCall)
	r.NominationpoolsUnbondCall = m.NominationpoolsUnbondCall.CloneVT()
	return r
}

func (m *RuntimeCall_NominationpoolsUpdateRolesCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_NominationpoolsUpdateRolesCall)(nil)
	}
	r := new(RuntimeCall_NominationpoolsUpdateRolesCall)
	r.NominationpoolsUpdateRolesCall = m.NominationpoolsUpdateRolesCall.CloneVT()
	return r
}

func (m *RuntimeCall_NominationpoolsWithdrawUnbondedCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_NominationpoolsWithdrawUnbondedCall)(nil)
	}
	r := new(RuntimeCall_NominationpoolsWithdrawUnbondedCall)
	r.NominationpoolsWithdrawUnbondedCall = m.NominationpoolsWithdrawUnbondedCall.CloneVT()
	return r
}

func (m *RuntimeCall_PreimageEnsureUpdatedCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_PreimageEnsureUpdatedCall)(nil)
	}
	r := new(RuntimeCall_PreimageEnsureUpdatedCall)
	r.PreimageEnsureUpdatedCall = m.PreimageEnsureUpdatedCall.CloneVT()
	return r
}

func (m *RuntimeCall_PreimageNotePreimageCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_PreimageNotePreimageCall)(nil)
	}
	r := new(RuntimeCall_PreimageNotePreimageCall)
	r.PreimageNotePreimageCall = m.PreimageNotePreimageCall.CloneVT()
	return r
}

func (m *RuntimeCall_PreimageRequestPreimageCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_PreimageRequestPreimageCall)(nil)
	}
	r := new(RuntimeCall_PreimageRequestPreimageCall)
	r.PreimageRequestPreimageCall = m.PreimageRequestPreimageCall.CloneVT()
	return r
}

func (m *RuntimeCall_PreimageUnnotePreimageCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_PreimageUnnotePreimageCall)(nil)
	}
	r := new(RuntimeCall_PreimageUnnotePreimageCall)
	r.PreimageUnnotePreimageCall = m.PreimageUnnotePreimageCall.CloneVT()
	return r
}

func (m *RuntimeCall_PreimageUnrequestPreimageCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_PreimageUnrequestPreimageCall)(nil)
	}
	r := new(RuntimeCall_PreimageUnrequestPreimageCall)
	r.PreimageUnrequestPreimageCall = m.PreimageUnrequestPreimageCall.CloneVT()
	return r
}

func (m *RuntimeCall_ProxyAddProxyCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_ProxyAddProxyCall)(nil)
	}
	r := new(RuntimeCall_ProxyAddProxyCall)
	r.ProxyAddProxyCall = m.ProxyAddProxyCall.CloneVT()
	return r
}

func (m *RuntimeCall_ProxyAnnounceCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_ProxyAnnounceCall)(nil)
	}
	r := new(RuntimeCall_ProxyAnnounceCall)
	r.ProxyAnnounceCall = m.ProxyAnnounceCall.CloneVT()
	return r
}

func (m *RuntimeCall_ProxyCreatePureCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_ProxyCreatePureCall)(nil)
	}
	r := new(RuntimeCall_ProxyCreatePureCall)
	r.ProxyCreatePureCall = m.ProxyCreatePureCall.CloneVT()
	return r
}

func (m *RuntimeCall_ProxyKillPureCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_ProxyKillPureCall)(nil)
	}
	r := new(RuntimeCall_ProxyKillPureCall)
	r.ProxyKillPureCall = m.ProxyKillPureCall.CloneVT()
	return r
}

func (m *RuntimeCall_ProxyProxyAnnouncedCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_ProxyProxyAnnouncedCall)(nil)
	}
	r := new(RuntimeCall_ProxyProxyAnnouncedCall)
	r.ProxyProxyAnnouncedCall = m.ProxyProxyAnnouncedCall.CloneVT()
	return r
}

func (m *RuntimeCall_ProxyProxyCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_ProxyProxyCall)(nil)
	}
	r := new(RuntimeCall_ProxyProxyCall)
	r.ProxyProxyCall = m.ProxyProxyCall.CloneVT()
	return r
}

func (m *RuntimeCall_ProxyRejectAnnouncementCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_ProxyRejectAnnouncementCall)(nil)
	}
	r := new(RuntimeCall_ProxyRejectAnnouncementCall)
	r.ProxyRejectAnnouncementCall = m.ProxyRejectAnnouncementCall.CloneVT()
	return r
}

func (m *RuntimeCall_ProxyRemoveAnnouncementCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_ProxyRemoveAnnouncementCall)(nil)
	}
	r := new(RuntimeCall_ProxyRemoveAnnouncementCall)
	r.ProxyRemoveAnnouncementCall = m.ProxyRemoveAnnouncementCall.CloneVT()
	return r
}

func (m *RuntimeCall_ProxyRemoveProxyCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_ProxyRemoveProxyCall)(nil)
	}
	r := new(RuntimeCall_ProxyRemoveProxyCall)
	r.ProxyRemoveProxyCall = m.ProxyRemoveProxyCall.CloneVT()
	return r
}

func (m *RuntimeCall_ReferendaCancelCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_ReferendaCancelCall)(nil)
	}
	r := new(RuntimeCall_ReferendaCancelCall)
	r.ReferendaCancelCall = m.ReferendaCancelCall.CloneVT()
	return r
}

func (m *RuntimeCall_ReferendaKillCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_ReferendaKillCall)(nil)
	}
	r := new(RuntimeCall_ReferendaKillCall)
	r.ReferendaKillCall = m.ReferendaKillCall.CloneVT()
	return r
}

func (m *RuntimeCall_ReferendaNudgeReferendumCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_ReferendaNudgeReferendumCall)(nil)
	}
	r := new(RuntimeCall_ReferendaNudgeReferendumCall)
	r.ReferendaNudgeReferendumCall = m.ReferendaNudgeReferendumCall.CloneVT()
	return r
}

func (m *RuntimeCall_ReferendaOneFewerDecidingCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_ReferendaOneFewerDecidingCall)(nil)
	}
	r := new(RuntimeCall_ReferendaOneFewerDecidingCall)
	r.ReferendaOneFewerDecidingCall = m.ReferendaOneFewerDecidingCall.CloneVT()
	return r
}

func (m *RuntimeCall_ReferendaPlaceDecisionDepositCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_ReferendaPlaceDecisionDepositCall)(nil)
	}
	r := new(RuntimeCall_ReferendaPlaceDecisionDepositCall)
	r.ReferendaPlaceDecisionDepositCall = m.ReferendaPlaceDecisionDepositCall.CloneVT()
	return r
}

func (m *RuntimeCall_ReferendaRefundDecisionDepositCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_ReferendaRefundDecisionDepositCall)(nil)
	}
	r := new(RuntimeCall_ReferendaRefundDecisionDepositCall)
	r.ReferendaRefundDecisionDepositCall = m.ReferendaRefundDecisionDepositCall.CloneVT()
	return r
}

func (m *RuntimeCall_ReferendaRefundSubmissionDepositCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_ReferendaRefundSubmissionDepositCall)(nil)
	}
	r := new(RuntimeCall_ReferendaRefundSubmissionDepositCall)
	r.ReferendaRefundSubmissionDepositCall = m.ReferendaRefundSubmissionDepositCall.CloneVT()
	return r
}

func (m *RuntimeCall_ReferendaSetMetadataCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_ReferendaSetMetadataCall)(nil)
	}
	r := new(RuntimeCall_ReferendaSetMetadataCall)
	r.ReferendaSetMetadataCall = m.ReferendaSetMetadataCall.CloneVT()
	return r
}

func (m *RuntimeCall_ReferendaSubmitCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_ReferendaSubmitCall)(nil)
	}
	r := new(RuntimeCall_ReferendaSubmitCall)
	r.ReferendaSubmitCall = m.ReferendaSubmitCall.CloneVT()
	return r
}

func (m *RuntimeCall_SchedulerCancelCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_SchedulerCancelCall)(nil)
	}
	r := new(RuntimeCall_SchedulerCancelCall)
	r.SchedulerCancelCall = m.SchedulerCancelCall.CloneVT()
	return r
}

func (m *RuntimeCall_SchedulerCancelNamedCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_SchedulerCancelNamedCall)(nil)
	}
	r := new(RuntimeCall_SchedulerCancelNamedCall)
	r.SchedulerCancelNamedCall = m.SchedulerCancelNamedCall.CloneVT()
	return r
}

func (m *RuntimeCall_SchedulerScheduleAfterCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_SchedulerScheduleAfterCall)(nil)
	}
	r := new(RuntimeCall_SchedulerScheduleAfterCall)
	r.SchedulerScheduleAfterCall = m.SchedulerScheduleAfterCall.CloneVT()
	return r
}

func (m *RuntimeCall_SchedulerScheduleCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_SchedulerScheduleCall)(nil)
	}
	r := new(RuntimeCall_SchedulerScheduleCall)
	r.SchedulerScheduleCall = m.SchedulerScheduleCall.CloneVT()
	return r
}

func (m *RuntimeCall_SchedulerScheduleNamedAfterCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_SchedulerScheduleNamedAfterCall)(nil)
	}
	r := new(RuntimeCall_SchedulerScheduleNamedAfterCall)
	r.SchedulerScheduleNamedAfterCall = m.SchedulerScheduleNamedAfterCall.CloneVT()
	return r
}

func (m *RuntimeCall_SchedulerScheduleNamedCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_SchedulerScheduleNamedCall)(nil)
	}
	r := new(RuntimeCall_SchedulerScheduleNamedCall)
	r.SchedulerScheduleNamedCall = m.SchedulerScheduleNamedCall.CloneVT()
	return r
}

func (m *RuntimeCall_SessionSetKeysCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_SessionSetKeysCall)(nil)
	}
	r := new(RuntimeCall_SessionSetKeysCall)
	r.SessionSetKeysCall = m.SessionSetKeysCall.CloneVT()
	return r
}

func (m *RuntimeCall_StakingrewardsAlignSupplyCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_StakingrewardsAlignSupplyCall)(nil)
	}
	r := new(RuntimeCall_StakingrewardsAlignSupplyCall)
	r.StakingrewardsAlignSupplyCall = m.StakingrewardsAlignSupplyCall.CloneVT()
	return r
}

func (m *RuntimeCall_StakingrewardsForceRefillCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_StakingrewardsForceRefillCall)(nil)
	}
	r := new(RuntimeCall_StakingrewardsForceRefillCall)
	r.StakingrewardsForceRefillCall = m.StakingrewardsForceRefillCall.CloneVT()
	return r
}

func (m *RuntimeCall_StakingrewardsRefillCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_StakingrewardsRefillCall)(nil)
	}
	r := new(RuntimeCall_StakingrewardsRefillCall)
	r.StakingrewardsRefillCall = m.StakingrewardsRefillCall.CloneVT()
	return r
}

func (m *RuntimeCall_StakingrewardsWithdrawCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_StakingrewardsWithdrawCall)(nil)
	}
	r := new(RuntimeCall_StakingrewardsWithdrawCall)
	r.StakingrewardsWithdrawCall = m.StakingrewardsWithdrawCall.CloneVT()
	return r
}

func (m *RuntimeCall_StakingBondCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_StakingBondCall)(nil)
	}
	r := new(RuntimeCall_StakingBondCall)
	r.StakingBondCall = m.StakingBondCall.CloneVT()
	return r
}

func (m *RuntimeCall_StakingBondExtraCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_StakingBondExtraCall)(nil)
	}
	r := new(RuntimeCall_StakingBondExtraCall)
	r.StakingBondExtraCall = m.StakingBondExtraCall.CloneVT()
	return r
}

func (m *RuntimeCall_StakingCancelDeferredSlashCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_StakingCancelDeferredSlashCall)(nil)
	}
	r := new(RuntimeCall_StakingCancelDeferredSlashCall)
	r.StakingCancelDeferredSlashCall = m.StakingCancelDeferredSlashCall.CloneVT()
	return r
}

func (m *RuntimeCall_StakingChillOtherCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_StakingChillOtherCall)(nil)
	}
	r := new(RuntimeCall_StakingChillOtherCall)
	r.StakingChillOtherCall = m.StakingChillOtherCall.CloneVT()
	return r
}

func (m *RuntimeCall_StakingForceApplyMinCommissionCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_StakingForceApplyMinCommissionCall)(nil)
	}
	r := new(RuntimeCall_StakingForceApplyMinCommissionCall)
	r.StakingForceApplyMinCommissionCall = m.StakingForceApplyMinCommissionCall.CloneVT()
	return r
}

func (m *RuntimeCall_StakingForceUnstakeCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_StakingForceUnstakeCall)(nil)
	}
	r := new(RuntimeCall_StakingForceUnstakeCall)
	r.StakingForceUnstakeCall = m.StakingForceUnstakeCall.CloneVT()
	return r
}

func (m *RuntimeCall_StakingIncreaseValidatorCountCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_StakingIncreaseValidatorCountCall)(nil)
	}
	r := new(RuntimeCall_StakingIncreaseValidatorCountCall)
	r.StakingIncreaseValidatorCountCall = m.StakingIncreaseValidatorCountCall.CloneVT()
	return r
}

func (m *RuntimeCall_StakingKickCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_StakingKickCall)(nil)
	}
	r := new(RuntimeCall_StakingKickCall)
	r.StakingKickCall = m.StakingKickCall.CloneVT()
	return r
}

func (m *RuntimeCall_StakingNominateCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_StakingNominateCall)(nil)
	}
	r := new(RuntimeCall_StakingNominateCall)
	r.StakingNominateCall = m.StakingNominateCall.CloneVT()
	return r
}

func (m *RuntimeCall_StakingPayoutStakersCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_StakingPayoutStakersCall)(nil)
	}
	r := new(RuntimeCall_StakingPayoutStakersCall)
	r.StakingPayoutStakersCall = m.StakingPayoutStakersCall.CloneVT()
	return r
}

func (m *RuntimeCall_StakingReapStashCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_StakingReapStashCall)(nil)
	}
	r := new(RuntimeCall_StakingReapStashCall)
	r.StakingReapStashCall = m.StakingReapStashCall.CloneVT()
	return r
}

func (m *RuntimeCall_StakingRebondCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_StakingRebondCall)(nil)
	}
	r := new(RuntimeCall_StakingRebondCall)
	r.StakingRebondCall = m.StakingRebondCall.CloneVT()
	return r
}

func (m *RuntimeCall_StakingScaleValidatorCountCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_StakingScaleValidatorCountCall)(nil)
	}
	r := new(RuntimeCall_StakingScaleValidatorCountCall)
	r.StakingScaleValidatorCountCall = m.StakingScaleValidatorCountCall.CloneVT()
	return r
}

func (m *RuntimeCall_StakingSetInvulnerablesCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_StakingSetInvulnerablesCall)(nil)
	}
	r := new(RuntimeCall_StakingSetInvulnerablesCall)
	r.StakingSetInvulnerablesCall = m.StakingSetInvulnerablesCall.CloneVT()
	return r
}

func (m *RuntimeCall_StakingSetMinCommissionCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_StakingSetMinCommissionCall)(nil)
	}
	r := new(RuntimeCall_StakingSetMinCommissionCall)
	r.StakingSetMinCommissionCall = m.StakingSetMinCommissionCall.CloneVT()
	return r
}

func (m *RuntimeCall_StakingSetPayeeCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_StakingSetPayeeCall)(nil)
	}
	r := new(RuntimeCall_StakingSetPayeeCall)
	r.StakingSetPayeeCall = m.StakingSetPayeeCall.CloneVT()
	return r
}

func (m *RuntimeCall_StakingSetStakingConfigsCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_StakingSetStakingConfigsCall)(nil)
	}
	r := new(RuntimeCall_StakingSetStakingConfigsCall)
	r.StakingSetStakingConfigsCall = m.StakingSetStakingConfigsCall.CloneVT()
	return r
}

func (m *RuntimeCall_StakingSetValidatorCountCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_StakingSetValidatorCountCall)(nil)
	}
	r := new(RuntimeCall_StakingSetValidatorCountCall)
	r.StakingSetValidatorCountCall = m.StakingSetValidatorCountCall.CloneVT()
	return r
}

func (m *RuntimeCall_StakingUnbondCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_StakingUnbondCall)(nil)
	}
	r := new(RuntimeCall_StakingUnbondCall)
	r.StakingUnbondCall = m.StakingUnbondCall.CloneVT()
	return r
}

func (m *RuntimeCall_StakingValidateCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_StakingValidateCall)(nil)
	}
	r := new(RuntimeCall_StakingValidateCall)
	r.StakingValidateCall = m.StakingValidateCall.CloneVT()
	return r
}

func (m *RuntimeCall_StakingWithdrawUnbondedCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_StakingWithdrawUnbondedCall)(nil)
	}
	r := new(RuntimeCall_StakingWithdrawUnbondedCall)
	r.StakingWithdrawUnbondedCall = m.StakingWithdrawUnbondedCall.CloneVT()
	return r
}

func (m *RuntimeCall_SystemKillPrefixCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_SystemKillPrefixCall)(nil)
	}
	r := new(RuntimeCall_SystemKillPrefixCall)
	r.SystemKillPrefixCall = m.SystemKillPrefixCall.CloneVT()
	return r
}

func (m *RuntimeCall_SystemKillStorageCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_SystemKillStorageCall)(nil)
	}
	r := new(RuntimeCall_SystemKillStorageCall)
	r.SystemKillStorageCall = m.SystemKillStorageCall.CloneVT()
	return r
}

func (m *RuntimeCall_SystemRemarkCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_SystemRemarkCall)(nil)
	}
	r := new(RuntimeCall_SystemRemarkCall)
	r.SystemRemarkCall = m.SystemRemarkCall.CloneVT()
	return r
}

func (m *RuntimeCall_SystemRemarkWithEventCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_SystemRemarkWithEventCall)(nil)
	}
	r := new(RuntimeCall_SystemRemarkWithEventCall)
	r.SystemRemarkWithEventCall = m.SystemRemarkWithEventCall.CloneVT()
	return r
}

func (m *RuntimeCall_SystemSetCodeCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_SystemSetCodeCall)(nil)
	}
	r := new(RuntimeCall_SystemSetCodeCall)
	r.SystemSetCodeCall = m.SystemSetCodeCall.CloneVT()
	return r
}

func (m *RuntimeCall_SystemSetCodeWithoutChecksCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_SystemSetCodeWithoutChecksCall)(nil)
	}
	r := new(RuntimeCall_SystemSetCodeWithoutChecksCall)
	r.SystemSetCodeWithoutChecksCall = m.SystemSetCodeWithoutChecksCall.CloneVT()
	return r
}

func (m *RuntimeCall_SystemSetHeapPagesCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_SystemSetHeapPagesCall)(nil)
	}
	r := new(RuntimeCall_SystemSetHeapPagesCall)
	r.SystemSetHeapPagesCall = m.SystemSetHeapPagesCall.CloneVT()
	return r
}

func (m *RuntimeCall_SystemSetStorageCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_SystemSetStorageCall)(nil)
	}
	r := new(RuntimeCall_SystemSetStorageCall)
	r.SystemSetStorageCall = m.SystemSetStorageCall.CloneVT()
	return r
}

func (m *RuntimeCall_TimestampSetCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_TimestampSetCall)(nil)
	}
	r := new(RuntimeCall_TimestampSetCall)
	r.TimestampSetCall = m.TimestampSetCall.CloneVT()
	return r
}

func (m *RuntimeCall_TreasuryApproveProposalCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_TreasuryApproveProposalCall)(nil)
	}
	r := new(RuntimeCall_TreasuryApproveProposalCall)
	r.TreasuryApproveProposalCall = m.TreasuryApproveProposalCall.CloneVT()
	return r
}

func (m *RuntimeCall_TreasuryCheckStatusCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_TreasuryCheckStatusCall)(nil)
	}
	r := new(RuntimeCall_TreasuryCheckStatusCall)
	r.TreasuryCheckStatusCall = m.TreasuryCheckStatusCall.CloneVT()
	return r
}

func (m *RuntimeCall_TreasuryPayoutCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_TreasuryPayoutCall)(nil)
	}
	r := new(RuntimeCall_TreasuryPayoutCall)
	r.TreasuryPayoutCall = m.TreasuryPayoutCall.CloneVT()
	return r
}

func (m *RuntimeCall_TreasuryProposeSpendCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_TreasuryProposeSpendCall)(nil)
	}
	r := new(RuntimeCall_TreasuryProposeSpendCall)
	r.TreasuryProposeSpendCall = m.TreasuryProposeSpendCall.CloneVT()
	return r
}

func (m *RuntimeCall_TreasuryRejectProposalCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_TreasuryRejectProposalCall)(nil)
	}
	r := new(RuntimeCall_TreasuryRejectProposalCall)
	r.TreasuryRejectProposalCall = m.TreasuryRejectProposalCall.CloneVT()
	return r
}

func (m *RuntimeCall_TreasuryRemoveApprovalCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_TreasuryRemoveApprovalCall)(nil)
	}
	r := new(RuntimeCall_TreasuryRemoveApprovalCall)
	r.TreasuryRemoveApprovalCall = m.TreasuryRemoveApprovalCall.CloneVT()
	return r
}

func (m *RuntimeCall_TreasurySpendCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_TreasurySpendCall)(nil)
	}
	r := new(RuntimeCall_TreasurySpendCall)
	r.TreasurySpendCall = m.TreasurySpendCall.CloneVT()
	return r
}

func (m *RuntimeCall_TreasurySpendLocalCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_TreasurySpendLocalCall)(nil)
	}
	r := new(RuntimeCall_TreasurySpendLocalCall)
	r.TreasurySpendLocalCall = m.TreasurySpendLocalCall.CloneVT()
	return r
}

func (m *RuntimeCall_TreasuryVoidSpendCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_TreasuryVoidSpendCall)(nil)
	}
	r := new(RuntimeCall_TreasuryVoidSpendCall)
	r.TreasuryVoidSpendCall = m.TreasuryVoidSpendCall.CloneVT()
	return r
}

func (m *RuntimeCall_UtilityAsDerivativeCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_UtilityAsDerivativeCall)(nil)
	}
	r := new(RuntimeCall_UtilityAsDerivativeCall)
	r.UtilityAsDerivativeCall = m.UtilityAsDerivativeCall.CloneVT()
	return r
}

func (m *RuntimeCall_UtilityBatchAllCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_UtilityBatchAllCall)(nil)
	}
	r := new(RuntimeCall_UtilityBatchAllCall)
	r.UtilityBatchAllCall = m.UtilityBatchAllCall.CloneVT()
	return r
}

func (m *RuntimeCall_UtilityBatchCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_UtilityBatchCall)(nil)
	}
	r := new(RuntimeCall_UtilityBatchCall)
	r.UtilityBatchCall = m.UtilityBatchCall.CloneVT()
	return r
}

func (m *RuntimeCall_UtilityDispatchAsCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_UtilityDispatchAsCall)(nil)
	}
	r := new(RuntimeCall_UtilityDispatchAsCall)
	r.UtilityDispatchAsCall = m.UtilityDispatchAsCall.CloneVT()
	return r
}

func (m *RuntimeCall_UtilityForceBatchCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_UtilityForceBatchCall)(nil)
	}
	r := new(RuntimeCall_UtilityForceBatchCall)
	r.UtilityForceBatchCall = m.UtilityForceBatchCall.CloneVT()
	return r
}

func (m *RuntimeCall_UtilityWithWeightCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_UtilityWithWeightCall)(nil)
	}
	r := new(RuntimeCall_UtilityWithWeightCall)
	r.UtilityWithWeightCall = m.UtilityWithWeightCall.CloneVT()
	return r
}

func (m *RuntimeCall_VestingForceVestedTransferCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_VestingForceVestedTransferCall)(nil)
	}
	r := new(RuntimeCall_VestingForceVestedTransferCall)
	r.VestingForceVestedTransferCall = m.VestingForceVestedTransferCall.CloneVT()
	return r
}

func (m *RuntimeCall_VestingMergeSchedulesCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_VestingMergeSchedulesCall)(nil)
	}
	r := new(RuntimeCall_VestingMergeSchedulesCall)
	r.VestingMergeSchedulesCall = m.VestingMergeSchedulesCall.CloneVT()
	return r
}

func (m *RuntimeCall_VestingVestOtherCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_VestingVestOtherCall)(nil)
	}
	r := new(RuntimeCall_VestingVestOtherCall)
	r.VestingVestOtherCall = m.VestingVestOtherCall.CloneVT()
	return r
}

func (m *RuntimeCall_VestingVestedTransferCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_VestingVestedTransferCall)(nil)
	}
	r := new(RuntimeCall_VestingVestedTransferCall)
	r.VestingVestedTransferCall = m.VestingVestedTransferCall.CloneVT()
	return r
}

func (m *RuntimeCall_WhitelistDispatchWhitelistedCallCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_WhitelistDispatchWhitelistedCallCall)(nil)
	}
	r := new(RuntimeCall_WhitelistDispatchWhitelistedCallCall)
	r.WhitelistDispatchWhitelistedCallCall = m.WhitelistDispatchWhitelistedCallCall.CloneVT()
	return r
}

func (m *RuntimeCall_WhitelistDispatchWhitelistedCallWithPreimageCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_WhitelistDispatchWhitelistedCallWithPreimageCall)(nil)
	}
	r := new(RuntimeCall_WhitelistDispatchWhitelistedCallWithPreimageCall)
	r.WhitelistDispatchWhitelistedCallWithPreimageCall = m.WhitelistDispatchWhitelistedCallWithPreimageCall.CloneVT()
	return r
}

func (m *RuntimeCall_WhitelistRemoveWhitelistedCallCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_WhitelistRemoveWhitelistedCallCall)(nil)
	}
	r := new(RuntimeCall_WhitelistRemoveWhitelistedCallCall)
	r.WhitelistRemoveWhitelistedCallCall = m.WhitelistRemoveWhitelistedCallCall.CloneVT()
	return r
}

func (m *RuntimeCall_WhitelistWhitelistCallCall) CloneVT() isRuntimeCall_Call {
	if m == nil {
		return (*RuntimeCall_WhitelistWhitelistCallCall)(nil)
	}
	r := new(RuntimeCall_WhitelistWhitelistCallCall)
	r.WhitelistWhitelistCallCall = m.WhitelistWhitelistCallCall.CloneVT()
	return r
}

func (this *RuntimeCall) EqualVT(that *RuntimeCall) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Call == nil && that.Call != nil {
		return false
	} else if this.Call != nil {
		if that.Call == nil {
			return false
		}
		if !this.Call.(interface{ EqualVT(isRuntimeCall_Call) bool }).EqualVT(that.Call) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RuntimeCall) EqualMessageVT(thatMsg proto.Message) bool {
	that, ok := thatMsg.(*RuntimeCall)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RuntimeCall_BabePlanConfigChangeCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_BabePlanConfigChangeCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.BabePlanConfigChangeCall, that.BabePlanConfigChangeCall; p != q {
		if p == nil {
			p = &v1.Babe_PlanConfigChangeCall{}
		}
		if q == nil {
			q = &v1.Babe_PlanConfigChangeCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_BabeReportEquivocationCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_BabeReportEquivocationCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.BabeReportEquivocationCall, that.BabeReportEquivocationCall; p != q {
		if p == nil {
			p = &v1.Babe_ReportEquivocationCall{}
		}
		if q == nil {
			q = &v1.Babe_ReportEquivocationCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_BabeReportEquivocationUnsignedCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_BabeReportEquivocationUnsignedCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.BabeReportEquivocationUnsignedCall, that.BabeReportEquivocationUnsignedCall; p != q {
		if p == nil {
			p = &v1.Babe_ReportEquivocationUnsignedCall{}
		}
		if q == nil {
			q = &v1.Babe_ReportEquivocationUnsignedCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_BagslistPutInFrontOfCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_BagslistPutInFrontOfCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.BagslistPutInFrontOfCall, that.BagslistPutInFrontOfCall; p != q {
		if p == nil {
			p = &v1.BagsList_PutInFrontOfCall{}
		}
		if q == nil {
			q = &v1.BagsList_PutInFrontOfCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_BagslistPutInFrontOfOtherCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_BagslistPutInFrontOfOtherCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.BagslistPutInFrontOfOtherCall, that.BagslistPutInFrontOfOtherCall; p != q {
		if p == nil {
			p = &v1.BagsList_PutInFrontOfOtherCall{}
		}
		if q == nil {
			q = &v1.BagsList_PutInFrontOfOtherCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_BagslistRebagCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_BagslistRebagCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.BagslistRebagCall, that.BagslistRebagCall; p != q {
		if p == nil {
			p = &v1.BagsList_RebagCall{}
		}
		if q == nil {
			q = &v1.BagsList_RebagCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_BalancesForceSetBalanceCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_BalancesForceSetBalanceCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.BalancesForceSetBalanceCall, that.BalancesForceSetBalanceCall; p != q {
		if p == nil {
			p = &v1.Balances_ForceSetBalanceCall{}
		}
		if q == nil {
			q = &v1.Balances_ForceSetBalanceCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_BalancesForceTransferCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_BalancesForceTransferCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.BalancesForceTransferCall, that.BalancesForceTransferCall; p != q {
		if p == nil {
			p = &v1.Balances_ForceTransferCall{}
		}
		if q == nil {
			q = &v1.Balances_ForceTransferCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_BalancesForceUnreserveCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_BalancesForceUnreserveCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.BalancesForceUnreserveCall, that.BalancesForceUnreserveCall; p != q {
		if p == nil {
			p = &v1.Balances_ForceUnreserveCall{}
		}
		if q == nil {
			q = &v1.Balances_ForceUnreserveCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_BalancesTransferAllCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_BalancesTransferAllCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.BalancesTransferAllCall, that.BalancesTransferAllCall; p != q {
		if p == nil {
			p = &v1.Balances_TransferAllCall{}
		}
		if q == nil {
			q = &v1.Balances_TransferAllCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_BalancesTransferAllowDeathCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_BalancesTransferAllowDeathCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.BalancesTransferAllowDeathCall, that.BalancesTransferAllowDeathCall; p != q {
		if p == nil {
			p = &v1.Balances_TransferAllowDeathCall{}
		}
		if q == nil {
			q = &v1.Balances_TransferAllowDeathCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_BalancesTransferKeepAliveCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_BalancesTransferKeepAliveCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.BalancesTransferKeepAliveCall, that.BalancesTransferKeepAliveCall; p != q {
		if p == nil {
			p = &v1.Balances_TransferKeepAliveCall{}
		}
		if q == nil {
			q = &v1.Balances_TransferKeepAliveCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_BalancesUpgradeAccountsCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_BalancesUpgradeAccountsCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.BalancesUpgradeAccountsCall, that.BalancesUpgradeAccountsCall; p != q {
		if p == nil {
			p = &v1.Balances_UpgradeAccountsCall{}
		}
		if q == nil {
			q = &v1.Balances_UpgradeAccountsCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_BountiesAcceptCuratorCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_BountiesAcceptCuratorCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.BountiesAcceptCuratorCall, that.BountiesAcceptCuratorCall; p != q {
		if p == nil {
			p = &v1.Bounties_AcceptCuratorCall{}
		}
		if q == nil {
			q = &v1.Bounties_AcceptCuratorCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_BountiesApproveBountyCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_BountiesApproveBountyCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.BountiesApproveBountyCall, that.BountiesApproveBountyCall; p != q {
		if p == nil {
			p = &v1.Bounties_ApproveBountyCall{}
		}
		if q == nil {
			q = &v1.Bounties_ApproveBountyCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_BountiesAwardBountyCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_BountiesAwardBountyCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.BountiesAwardBountyCall, that.BountiesAwardBountyCall; p != q {
		if p == nil {
			p = &v1.Bounties_AwardBountyCall{}
		}
		if q == nil {
			q = &v1.Bounties_AwardBountyCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_BountiesClaimBountyCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_BountiesClaimBountyCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.BountiesClaimBountyCall, that.BountiesClaimBountyCall; p != q {
		if p == nil {
			p = &v1.Bounties_ClaimBountyCall{}
		}
		if q == nil {
			q = &v1.Bounties_ClaimBountyCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_BountiesCloseBountyCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_BountiesCloseBountyCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.BountiesCloseBountyCall, that.BountiesCloseBountyCall; p != q {
		if p == nil {
			p = &v1.Bounties_CloseBountyCall{}
		}
		if q == nil {
			q = &v1.Bounties_CloseBountyCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_BountiesExtendBountyExpiryCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_BountiesExtendBountyExpiryCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.BountiesExtendBountyExpiryCall, that.BountiesExtendBountyExpiryCall; p != q {
		if p == nil {
			p = &v1.Bounties_ExtendBountyExpiryCall{}
		}
		if q == nil {
			q = &v1.Bounties_ExtendBountyExpiryCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_BountiesProposeBountyCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_BountiesProposeBountyCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.BountiesProposeBountyCall, that.BountiesProposeBountyCall; p != q {
		if p == nil {
			p = &v1.Bounties_ProposeBountyCall{}
		}
		if q == nil {
			q = &v1.Bounties_ProposeBountyCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_BountiesProposeCuratorCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_BountiesProposeCuratorCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.BountiesProposeCuratorCall, that.BountiesProposeCuratorCall; p != q {
		if p == nil {
			p = &v1.Bounties_ProposeCuratorCall{}
		}
		if q == nil {
			q = &v1.Bounties_ProposeCuratorCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_BountiesUnassignCuratorCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_BountiesUnassignCuratorCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.BountiesUnassignCuratorCall, that.BountiesUnassignCuratorCall; p != q {
		if p == nil {
			p = &v1.Bounties_UnassignCuratorCall{}
		}
		if q == nil {
			q = &v1.Bounties_UnassignCuratorCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_ChildbountiesAcceptCuratorCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_ChildbountiesAcceptCuratorCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ChildbountiesAcceptCuratorCall, that.ChildbountiesAcceptCuratorCall; p != q {
		if p == nil {
			p = &v1.ChildBounties_AcceptCuratorCall{}
		}
		if q == nil {
			q = &v1.ChildBounties_AcceptCuratorCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_ChildbountiesAddChildBountyCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_ChildbountiesAddChildBountyCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ChildbountiesAddChildBountyCall, that.ChildbountiesAddChildBountyCall; p != q {
		if p == nil {
			p = &v1.ChildBounties_AddChildBountyCall{}
		}
		if q == nil {
			q = &v1.ChildBounties_AddChildBountyCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_ChildbountiesAwardChildBountyCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_ChildbountiesAwardChildBountyCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ChildbountiesAwardChildBountyCall, that.ChildbountiesAwardChildBountyCall; p != q {
		if p == nil {
			p = &v1.ChildBounties_AwardChildBountyCall{}
		}
		if q == nil {
			q = &v1.ChildBounties_AwardChildBountyCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_ChildbountiesClaimChildBountyCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_ChildbountiesClaimChildBountyCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ChildbountiesClaimChildBountyCall, that.ChildbountiesClaimChildBountyCall; p != q {
		if p == nil {
			p = &v1.ChildBounties_ClaimChildBountyCall{}
		}
		if q == nil {
			q = &v1.ChildBounties_ClaimChildBountyCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_ChildbountiesCloseChildBountyCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_ChildbountiesCloseChildBountyCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ChildbountiesCloseChildBountyCall, that.ChildbountiesCloseChildBountyCall; p != q {
		if p == nil {
			p = &v1.ChildBounties_CloseChildBountyCall{}
		}
		if q == nil {
			q = &v1.ChildBounties_CloseChildBountyCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_ChildbountiesProposeCuratorCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_ChildbountiesProposeCuratorCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ChildbountiesProposeCuratorCall, that.ChildbountiesProposeCuratorCall; p != q {
		if p == nil {
			p = &v1.ChildBounties_ProposeCuratorCall{}
		}
		if q == nil {
			q = &v1.ChildBounties_ProposeCuratorCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_ChildbountiesUnassignCuratorCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_ChildbountiesUnassignCuratorCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ChildbountiesUnassignCuratorCall, that.ChildbountiesUnassignCuratorCall; p != q {
		if p == nil {
			p = &v1.ChildBounties_UnassignCuratorCall{}
		}
		if q == nil {
			q = &v1.ChildBounties_UnassignCuratorCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_ConvictionvotingDelegateCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_ConvictionvotingDelegateCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ConvictionvotingDelegateCall, that.ConvictionvotingDelegateCall; p != q {
		if p == nil {
			p = &v1.ConvictionVoting_DelegateCall{}
		}
		if q == nil {
			q = &v1.ConvictionVoting_DelegateCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_ConvictionvotingRemoveOtherVoteCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_ConvictionvotingRemoveOtherVoteCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ConvictionvotingRemoveOtherVoteCall, that.ConvictionvotingRemoveOtherVoteCall; p != q {
		if p == nil {
			p = &v1.ConvictionVoting_RemoveOtherVoteCall{}
		}
		if q == nil {
			q = &v1.ConvictionVoting_RemoveOtherVoteCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_ConvictionvotingRemoveVoteCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_ConvictionvotingRemoveVoteCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ConvictionvotingRemoveVoteCall, that.ConvictionvotingRemoveVoteCall; p != q {
		if p == nil {
			p = &v1.ConvictionVoting_RemoveVoteCall{}
		}
		if q == nil {
			q = &v1.ConvictionVoting_RemoveVoteCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_ConvictionvotingUndelegateCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_ConvictionvotingUndelegateCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ConvictionvotingUndelegateCall, that.ConvictionvotingUndelegateCall; p != q {
		if p == nil {
			p = &v1.ConvictionVoting_UndelegateCall{}
		}
		if q == nil {
			q = &v1.ConvictionVoting_UndelegateCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_ConvictionvotingUnlockCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_ConvictionvotingUnlockCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ConvictionvotingUnlockCall, that.ConvictionvotingUnlockCall; p != q {
		if p == nil {
			p = &v1.ConvictionVoting_UnlockCall{}
		}
		if q == nil {
			q = &v1.ConvictionVoting_UnlockCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_ConvictionvotingVoteCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_ConvictionvotingVoteCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ConvictionvotingVoteCall, that.ConvictionvotingVoteCall; p != q {
		if p == nil {
			p = &v1.ConvictionVoting_VoteCall{}
		}
		if q == nil {
			q = &v1.ConvictionVoting_VoteCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_ElectionprovidermultiphaseGovernanceFallbackCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_ElectionprovidermultiphaseGovernanceFallbackCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ElectionprovidermultiphaseGovernanceFallbackCall, that.ElectionprovidermultiphaseGovernanceFallbackCall; p != q {
		if p == nil {
			p = &v1.ElectionProviderMultiPhase_GovernanceFallbackCall{}
		}
		if q == nil {
			q = &v1.ElectionProviderMultiPhase_GovernanceFallbackCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_ElectionprovidermultiphaseSetEmergencyElectionResultCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_ElectionprovidermultiphaseSetEmergencyElectionResultCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ElectionprovidermultiphaseSetEmergencyElectionResultCall, that.ElectionprovidermultiphaseSetEmergencyElectionResultCall; p != q {
		if p == nil {
			p = &v1.ElectionProviderMultiPhase_SetEmergencyElectionResultCall{}
		}
		if q == nil {
			q = &v1.ElectionProviderMultiPhase_SetEmergencyElectionResultCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_ElectionprovidermultiphaseSetMinimumUntrustedScoreCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_ElectionprovidermultiphaseSetMinimumUntrustedScoreCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ElectionprovidermultiphaseSetMinimumUntrustedScoreCall, that.ElectionprovidermultiphaseSetMinimumUntrustedScoreCall; p != q {
		if p == nil {
			p = &v1.ElectionProviderMultiPhase_SetMinimumUntrustedScoreCall{}
		}
		if q == nil {
			q = &v1.ElectionProviderMultiPhase_SetMinimumUntrustedScoreCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_ElectionprovidermultiphaseSubmitCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_ElectionprovidermultiphaseSubmitCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ElectionprovidermultiphaseSubmitCall, that.ElectionprovidermultiphaseSubmitCall; p != q {
		if p == nil {
			p = &v1.ElectionProviderMultiPhase_SubmitCall{}
		}
		if q == nil {
			q = &v1.ElectionProviderMultiPhase_SubmitCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_ElectionprovidermultiphaseSubmitUnsignedCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_ElectionprovidermultiphaseSubmitUnsignedCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ElectionprovidermultiphaseSubmitUnsignedCall, that.ElectionprovidermultiphaseSubmitUnsignedCall; p != q {
		if p == nil {
			p = &v1.ElectionProviderMultiPhase_SubmitUnsignedCall{}
		}
		if q == nil {
			q = &v1.ElectionProviderMultiPhase_SubmitUnsignedCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_FellowshipcollectiveAddMemberCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_FellowshipcollectiveAddMemberCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.FellowshipcollectiveAddMemberCall, that.FellowshipcollectiveAddMemberCall; p != q {
		if p == nil {
			p = &v1.FellowshipCollective_AddMemberCall{}
		}
		if q == nil {
			q = &v1.FellowshipCollective_AddMemberCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_FellowshipcollectiveCleanupPollCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_FellowshipcollectiveCleanupPollCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.FellowshipcollectiveCleanupPollCall, that.FellowshipcollectiveCleanupPollCall; p != q {
		if p == nil {
			p = &v1.FellowshipCollective_CleanupPollCall{}
		}
		if q == nil {
			q = &v1.FellowshipCollective_CleanupPollCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_FellowshipcollectiveDemoteMemberCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_FellowshipcollectiveDemoteMemberCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.FellowshipcollectiveDemoteMemberCall, that.FellowshipcollectiveDemoteMemberCall; p != q {
		if p == nil {
			p = &v1.FellowshipCollective_DemoteMemberCall{}
		}
		if q == nil {
			q = &v1.FellowshipCollective_DemoteMemberCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_FellowshipcollectivePromoteMemberCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_FellowshipcollectivePromoteMemberCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.FellowshipcollectivePromoteMemberCall, that.FellowshipcollectivePromoteMemberCall; p != q {
		if p == nil {
			p = &v1.FellowshipCollective_PromoteMemberCall{}
		}
		if q == nil {
			q = &v1.FellowshipCollective_PromoteMemberCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_FellowshipcollectiveRemoveMemberCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_FellowshipcollectiveRemoveMemberCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.FellowshipcollectiveRemoveMemberCall, that.FellowshipcollectiveRemoveMemberCall; p != q {
		if p == nil {
			p = &v1.FellowshipCollective_RemoveMemberCall{}
		}
		if q == nil {
			q = &v1.FellowshipCollective_RemoveMemberCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_FellowshipcollectiveVoteCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_FellowshipcollectiveVoteCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.FellowshipcollectiveVoteCall, that.FellowshipcollectiveVoteCall; p != q {
		if p == nil {
			p = &v1.FellowshipCollective_VoteCall{}
		}
		if q == nil {
			q = &v1.FellowshipCollective_VoteCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_FellowshipreferendaCancelCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_FellowshipreferendaCancelCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.FellowshipreferendaCancelCall, that.FellowshipreferendaCancelCall; p != q {
		if p == nil {
			p = &v1.FellowshipReferenda_CancelCall{}
		}
		if q == nil {
			q = &v1.FellowshipReferenda_CancelCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_FellowshipreferendaKillCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_FellowshipreferendaKillCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.FellowshipreferendaKillCall, that.FellowshipreferendaKillCall; p != q {
		if p == nil {
			p = &v1.FellowshipReferenda_KillCall{}
		}
		if q == nil {
			q = &v1.FellowshipReferenda_KillCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_FellowshipreferendaNudgeReferendumCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_FellowshipreferendaNudgeReferendumCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.FellowshipreferendaNudgeReferendumCall, that.FellowshipreferendaNudgeReferendumCall; p != q {
		if p == nil {
			p = &v1.FellowshipReferenda_NudgeReferendumCall{}
		}
		if q == nil {
			q = &v1.FellowshipReferenda_NudgeReferendumCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_FellowshipreferendaOneFewerDecidingCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_FellowshipreferendaOneFewerDecidingCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.FellowshipreferendaOneFewerDecidingCall, that.FellowshipreferendaOneFewerDecidingCall; p != q {
		if p == nil {
			p = &v1.FellowshipReferenda_OneFewerDecidingCall{}
		}
		if q == nil {
			q = &v1.FellowshipReferenda_OneFewerDecidingCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_FellowshipreferendaPlaceDecisionDepositCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_FellowshipreferendaPlaceDecisionDepositCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.FellowshipreferendaPlaceDecisionDepositCall, that.FellowshipreferendaPlaceDecisionDepositCall; p != q {
		if p == nil {
			p = &v1.FellowshipReferenda_PlaceDecisionDepositCall{}
		}
		if q == nil {
			q = &v1.FellowshipReferenda_PlaceDecisionDepositCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_FellowshipreferendaRefundDecisionDepositCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_FellowshipreferendaRefundDecisionDepositCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.FellowshipreferendaRefundDecisionDepositCall, that.FellowshipreferendaRefundDecisionDepositCall; p != q {
		if p == nil {
			p = &v1.FellowshipReferenda_RefundDecisionDepositCall{}
		}
		if q == nil {
			q = &v1.FellowshipReferenda_RefundDecisionDepositCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_FellowshipreferendaRefundSubmissionDepositCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_FellowshipreferendaRefundSubmissionDepositCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.FellowshipreferendaRefundSubmissionDepositCall, that.FellowshipreferendaRefundSubmissionDepositCall; p != q {
		if p == nil {
			p = &v1.FellowshipReferenda_RefundSubmissionDepositCall{}
		}
		if q == nil {
			q = &v1.FellowshipReferenda_RefundSubmissionDepositCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_FellowshipreferendaSetMetadataCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_FellowshipreferendaSetMetadataCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.FellowshipreferendaSetMetadataCall, that.FellowshipreferendaSetMetadataCall; p != q {
		if p == nil {
			p = &v1.FellowshipReferenda_SetMetadataCall{}
		}
		if q == nil {
			q = &v1.FellowshipReferenda_SetMetadataCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_FellowshipreferendaSubmitCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_FellowshipreferendaSubmitCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.FellowshipreferendaSubmitCall, that.FellowshipreferendaSubmitCall; p != q {
		if p == nil {
			p = &v1.FellowshipReferenda_SubmitCall{}
		}
		if q == nil {
			q = &v1.FellowshipReferenda_SubmitCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_GearvoucherCallCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_GearvoucherCallCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.GearvoucherCallCall, that.GearvoucherCallCall; p != q {
		if p == nil {
			p = &v1.GearVoucher_CallCall{}
		}
		if q == nil {
			q = &v1.GearVoucher_CallCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_GearvoucherCallDeprecatedCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_GearvoucherCallDeprecatedCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.GearvoucherCallDeprecatedCall, that.GearvoucherCallDeprecatedCall; p != q {
		if p == nil {
			p = &v1.GearVoucher_CallDeprecatedCall{}
		}
		if q == nil {
			q = &v1.GearVoucher_CallDeprecatedCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_GearvoucherDeclineCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_GearvoucherDeclineCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.GearvoucherDeclineCall, that.GearvoucherDeclineCall; p != q {
		if p == nil {
			p = &v1.GearVoucher_DeclineCall{}
		}
		if q == nil {
			q = &v1.GearVoucher_DeclineCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_GearvoucherIssueCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_GearvoucherIssueCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.GearvoucherIssueCall, that.GearvoucherIssueCall; p != q {
		if p == nil {
			p = &v1.GearVoucher_IssueCall{}
		}
		if q == nil {
			q = &v1.GearVoucher_IssueCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_GearvoucherRevokeCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_GearvoucherRevokeCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.GearvoucherRevokeCall, that.GearvoucherRevokeCall; p != q {
		if p == nil {
			p = &v1.GearVoucher_RevokeCall{}
		}
		if q == nil {
			q = &v1.GearVoucher_RevokeCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_GearvoucherUpdateCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_GearvoucherUpdateCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.GearvoucherUpdateCall, that.GearvoucherUpdateCall; p != q {
		if p == nil {
			p = &v1.GearVoucher_UpdateCall{}
		}
		if q == nil {
			q = &v1.GearVoucher_UpdateCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_GearClaimValueCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_GearClaimValueCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.GearClaimValueCall, that.GearClaimValueCall; p != q {
		if p == nil {
			p = &v1.Gear_ClaimValueCall{}
		}
		if q == nil {
			q = &v1.Gear_ClaimValueCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_GearCreateProgramCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_GearCreateProgramCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.GearCreateProgramCall, that.GearCreateProgramCall; p != q {
		if p == nil {
			p = &v1.Gear_CreateProgramCall{}
		}
		if q == nil {
			q = &v1.Gear_CreateProgramCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_GearRunCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_GearRunCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.GearRunCall, that.GearRunCall; p != q {
		if p == nil {
			p = &v1.Gear_RunCall{}
		}
		if q == nil {
			q = &v1.Gear_RunCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_GearSendMessageCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_GearSendMessageCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.GearSendMessageCall, that.GearSendMessageCall; p != q {
		if p == nil {
			p = &v1.Gear_SendMessageCall{}
		}
		if q == nil {
			q = &v1.Gear_SendMessageCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_GearSendReplyCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_GearSendReplyCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.GearSendReplyCall, that.GearSendReplyCall; p != q {
		if p == nil {
			p = &v1.Gear_SendReplyCall{}
		}
		if q == nil {
			q = &v1.Gear_SendReplyCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_GearSetExecuteInherentCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_GearSetExecuteInherentCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.GearSetExecuteInherentCall, that.GearSetExecuteInherentCall; p != q {
		if p == nil {
			p = &v1.Gear_SetExecuteInherentCall{}
		}
		if q == nil {
			q = &v1.Gear_SetExecuteInherentCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_GearUploadCodeCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_GearUploadCodeCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.GearUploadCodeCall, that.GearUploadCodeCall; p != q {
		if p == nil {
			p = &v1.Gear_UploadCodeCall{}
		}
		if q == nil {
			q = &v1.Gear_UploadCodeCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_GearUploadProgramCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_GearUploadProgramCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.GearUploadProgramCall, that.GearUploadProgramCall; p != q {
		if p == nil {
			p = &v1.Gear_UploadProgramCall{}
		}
		if q == nil {
			q = &v1.Gear_UploadProgramCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_GrandpaNoteStalledCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_GrandpaNoteStalledCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.GrandpaNoteStalledCall, that.GrandpaNoteStalledCall; p != q {
		if p == nil {
			p = &v1.Grandpa_NoteStalledCall{}
		}
		if q == nil {
			q = &v1.Grandpa_NoteStalledCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_GrandpaReportEquivocationCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_GrandpaReportEquivocationCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.GrandpaReportEquivocationCall, that.GrandpaReportEquivocationCall; p != q {
		if p == nil {
			p = &v1.Grandpa_ReportEquivocationCall{}
		}
		if q == nil {
			q = &v1.Grandpa_ReportEquivocationCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_GrandpaReportEquivocationUnsignedCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_GrandpaReportEquivocationUnsignedCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.GrandpaReportEquivocationUnsignedCall, that.GrandpaReportEquivocationUnsignedCall; p != q {
		if p == nil {
			p = &v1.Grandpa_ReportEquivocationUnsignedCall{}
		}
		if q == nil {
			q = &v1.Grandpa_ReportEquivocationUnsignedCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_IdentityAddRegistrarCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_IdentityAddRegistrarCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.IdentityAddRegistrarCall, that.IdentityAddRegistrarCall; p != q {
		if p == nil {
			p = &v1.Identity_AddRegistrarCall{}
		}
		if q == nil {
			q = &v1.Identity_AddRegistrarCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_IdentityAddSubCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_IdentityAddSubCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.IdentityAddSubCall, that.IdentityAddSubCall; p != q {
		if p == nil {
			p = &v1.Identity_AddSubCall{}
		}
		if q == nil {
			q = &v1.Identity_AddSubCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_IdentityCancelRequestCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_IdentityCancelRequestCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.IdentityCancelRequestCall, that.IdentityCancelRequestCall; p != q {
		if p == nil {
			p = &v1.Identity_CancelRequestCall{}
		}
		if q == nil {
			q = &v1.Identity_CancelRequestCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_IdentityKillIdentityCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_IdentityKillIdentityCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.IdentityKillIdentityCall, that.IdentityKillIdentityCall; p != q {
		if p == nil {
			p = &v1.Identity_KillIdentityCall{}
		}
		if q == nil {
			q = &v1.Identity_KillIdentityCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_IdentityProvideJudgementCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_IdentityProvideJudgementCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.IdentityProvideJudgementCall, that.IdentityProvideJudgementCall; p != q {
		if p == nil {
			p = &v1.Identity_ProvideJudgementCall{}
		}
		if q == nil {
			q = &v1.Identity_ProvideJudgementCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_IdentityRemoveSubCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_IdentityRemoveSubCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.IdentityRemoveSubCall, that.IdentityRemoveSubCall; p != q {
		if p == nil {
			p = &v1.Identity_RemoveSubCall{}
		}
		if q == nil {
			q = &v1.Identity_RemoveSubCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_IdentityRenameSubCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_IdentityRenameSubCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.IdentityRenameSubCall, that.IdentityRenameSubCall; p != q {
		if p == nil {
			p = &v1.Identity_RenameSubCall{}
		}
		if q == nil {
			q = &v1.Identity_RenameSubCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_IdentityRequestJudgementCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_IdentityRequestJudgementCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.IdentityRequestJudgementCall, that.IdentityRequestJudgementCall; p != q {
		if p == nil {
			p = &v1.Identity_RequestJudgementCall{}
		}
		if q == nil {
			q = &v1.Identity_RequestJudgementCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_IdentitySetAccountIdCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_IdentitySetAccountIdCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.IdentitySetAccountIdCall, that.IdentitySetAccountIdCall; p != q {
		if p == nil {
			p = &v1.Identity_SetAccountIdCall{}
		}
		if q == nil {
			q = &v1.Identity_SetAccountIdCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_IdentitySetFeeCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_IdentitySetFeeCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.IdentitySetFeeCall, that.IdentitySetFeeCall; p != q {
		if p == nil {
			p = &v1.Identity_SetFeeCall{}
		}
		if q == nil {
			q = &v1.Identity_SetFeeCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_IdentitySetFieldsCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_IdentitySetFieldsCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.IdentitySetFieldsCall, that.IdentitySetFieldsCall; p != q {
		if p == nil {
			p = &v1.Identity_SetFieldsCall{}
		}
		if q == nil {
			q = &v1.Identity_SetFieldsCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_IdentitySetIdentityCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_IdentitySetIdentityCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.IdentitySetIdentityCall, that.IdentitySetIdentityCall; p != q {
		if p == nil {
			p = &v1.Identity_SetIdentityCall{}
		}
		if q == nil {
			q = &v1.Identity_SetIdentityCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_IdentitySetSubsCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_IdentitySetSubsCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.IdentitySetSubsCall, that.IdentitySetSubsCall; p != q {
		if p == nil {
			p = &v1.Identity_SetSubsCall{}
		}
		if q == nil {
			q = &v1.Identity_SetSubsCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_ImonlineHeartbeatCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_ImonlineHeartbeatCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ImonlineHeartbeatCall, that.ImonlineHeartbeatCall; p != q {
		if p == nil {
			p = &v1.ImOnline_HeartbeatCall{}
		}
		if q == nil {
			q = &v1.ImOnline_HeartbeatCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_MultisigApproveAsMultiCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_MultisigApproveAsMultiCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.MultisigApproveAsMultiCall, that.MultisigApproveAsMultiCall; p != q {
		if p == nil {
			p = &v1.Multisig_ApproveAsMultiCall{}
		}
		if q == nil {
			q = &v1.Multisig_ApproveAsMultiCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_MultisigAsMultiCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_MultisigAsMultiCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.MultisigAsMultiCall, that.MultisigAsMultiCall; p != q {
		if p == nil {
			p = &v1.Multisig_AsMultiCall{}
		}
		if q == nil {
			q = &v1.Multisig_AsMultiCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_MultisigAsMultiThreshold_1Call) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_MultisigAsMultiThreshold_1Call)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.MultisigAsMultiThreshold_1Call, that.MultisigAsMultiThreshold_1Call; p != q {
		if p == nil {
			p = &v1.Multisig_AsMultiThreshold1Call{}
		}
		if q == nil {
			q = &v1.Multisig_AsMultiThreshold1Call{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_MultisigCancelAsMultiCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_MultisigCancelAsMultiCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.MultisigCancelAsMultiCall, that.MultisigCancelAsMultiCall; p != q {
		if p == nil {
			p = &v1.Multisig_CancelAsMultiCall{}
		}
		if q == nil {
			q = &v1.Multisig_CancelAsMultiCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_NominationpoolsAdjustPoolDepositCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_NominationpoolsAdjustPoolDepositCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.NominationpoolsAdjustPoolDepositCall, that.NominationpoolsAdjustPoolDepositCall; p != q {
		if p == nil {
			p = &v1.NominationPools_AdjustPoolDepositCall{}
		}
		if q == nil {
			q = &v1.NominationPools_AdjustPoolDepositCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_NominationpoolsBondExtraCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_NominationpoolsBondExtraCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.NominationpoolsBondExtraCall, that.NominationpoolsBondExtraCall; p != q {
		if p == nil {
			p = &v1.NominationPools_BondExtraCall{}
		}
		if q == nil {
			q = &v1.NominationPools_BondExtraCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_NominationpoolsBondExtraOtherCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_NominationpoolsBondExtraOtherCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.NominationpoolsBondExtraOtherCall, that.NominationpoolsBondExtraOtherCall; p != q {
		if p == nil {
			p = &v1.NominationPools_BondExtraOtherCall{}
		}
		if q == nil {
			q = &v1.NominationPools_BondExtraOtherCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_NominationpoolsChillCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_NominationpoolsChillCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.NominationpoolsChillCall, that.NominationpoolsChillCall; p != q {
		if p == nil {
			p = &v1.NominationPools_ChillCall{}
		}
		if q == nil {
			q = &v1.NominationPools_ChillCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_NominationpoolsClaimCommissionCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_NominationpoolsClaimCommissionCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.NominationpoolsClaimCommissionCall, that.NominationpoolsClaimCommissionCall; p != q {
		if p == nil {
			p = &v1.NominationPools_ClaimCommissionCall{}
		}
		if q == nil {
			q = &v1.NominationPools_ClaimCommissionCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_NominationpoolsClaimPayoutOtherCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_NominationpoolsClaimPayoutOtherCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.NominationpoolsClaimPayoutOtherCall, that.NominationpoolsClaimPayoutOtherCall; p != q {
		if p == nil {
			p = &v1.NominationPools_ClaimPayoutOtherCall{}
		}
		if q == nil {
			q = &v1.NominationPools_ClaimPayoutOtherCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_NominationpoolsCreateCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_NominationpoolsCreateCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.NominationpoolsCreateCall, that.NominationpoolsCreateCall; p != q {
		if p == nil {
			p = &v1.NominationPools_CreateCall{}
		}
		if q == nil {
			q = &v1.NominationPools_CreateCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_NominationpoolsCreateWithPoolIdCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_NominationpoolsCreateWithPoolIdCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.NominationpoolsCreateWithPoolIdCall, that.NominationpoolsCreateWithPoolIdCall; p != q {
		if p == nil {
			p = &v1.NominationPools_CreateWithPoolIdCall{}
		}
		if q == nil {
			q = &v1.NominationPools_CreateWithPoolIdCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_NominationpoolsJoinCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_NominationpoolsJoinCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.NominationpoolsJoinCall, that.NominationpoolsJoinCall; p != q {
		if p == nil {
			p = &v1.NominationPools_JoinCall{}
		}
		if q == nil {
			q = &v1.NominationPools_JoinCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_NominationpoolsNominateCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_NominationpoolsNominateCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.NominationpoolsNominateCall, that.NominationpoolsNominateCall; p != q {
		if p == nil {
			p = &v1.NominationPools_NominateCall{}
		}
		if q == nil {
			q = &v1.NominationPools_NominateCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_NominationpoolsPoolWithdrawUnbondedCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_NominationpoolsPoolWithdrawUnbondedCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.NominationpoolsPoolWithdrawUnbondedCall, that.NominationpoolsPoolWithdrawUnbondedCall; p != q {
		if p == nil {
			p = &v1.NominationPools_PoolWithdrawUnbondedCall{}
		}
		if q == nil {
			q = &v1.NominationPools_PoolWithdrawUnbondedCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_NominationpoolsSetClaimPermissionCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_NominationpoolsSetClaimPermissionCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.NominationpoolsSetClaimPermissionCall, that.NominationpoolsSetClaimPermissionCall; p != q {
		if p == nil {
			p = &v1.NominationPools_SetClaimPermissionCall{}
		}
		if q == nil {
			q = &v1.NominationPools_SetClaimPermissionCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_NominationpoolsSetCommissionCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_NominationpoolsSetCommissionCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.NominationpoolsSetCommissionCall, that.NominationpoolsSetCommissionCall; p != q {
		if p == nil {
			p = &v1.NominationPools_SetCommissionCall{}
		}
		if q == nil {
			q = &v1.NominationPools_SetCommissionCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_NominationpoolsSetCommissionChangeRateCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_NominationpoolsSetCommissionChangeRateCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.NominationpoolsSetCommissionChangeRateCall, that.NominationpoolsSetCommissionChangeRateCall; p != q {
		if p == nil {
			p = &v1.NominationPools_SetCommissionChangeRateCall{}
		}
		if q == nil {
			q = &v1.NominationPools_SetCommissionChangeRateCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_NominationpoolsSetCommissionMaxCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_NominationpoolsSetCommissionMaxCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.NominationpoolsSetCommissionMaxCall, that.NominationpoolsSetCommissionMaxCall; p != q {
		if p == nil {
			p = &v1.NominationPools_SetCommissionMaxCall{}
		}
		if q == nil {
			q = &v1.NominationPools_SetCommissionMaxCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_NominationpoolsSetConfigsCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_NominationpoolsSetConfigsCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.NominationpoolsSetConfigsCall, that.NominationpoolsSetConfigsCall; p != q {
		if p == nil {
			p = &v1.NominationPools_SetConfigsCall{}
		}
		if q == nil {
			q = &v1.NominationPools_SetConfigsCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_NominationpoolsSetMetadataCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_NominationpoolsSetMetadataCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.NominationpoolsSetMetadataCall, that.NominationpoolsSetMetadataCall; p != q {
		if p == nil {
			p = &v1.NominationPools_SetMetadataCall{}
		}
		if q == nil {
			q = &v1.NominationPools_SetMetadataCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_NominationpoolsSetStateCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_NominationpoolsSetStateCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.NominationpoolsSetStateCall, that.NominationpoolsSetStateCall; p != q {
		if p == nil {
			p = &v1.NominationPools_SetStateCall{}
		}
		if q == nil {
			q = &v1.NominationPools_SetStateCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_NominationpoolsUnbondCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_NominationpoolsUnbondCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.NominationpoolsUnbondCall, that.NominationpoolsUnbondCall; p != q {
		if p == nil {
			p = &v1.NominationPools_UnbondCall{}
		}
		if q == nil {
			q = &v1.NominationPools_UnbondCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_NominationpoolsUpdateRolesCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_NominationpoolsUpdateRolesCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.NominationpoolsUpdateRolesCall, that.NominationpoolsUpdateRolesCall; p != q {
		if p == nil {
			p = &v1.NominationPools_UpdateRolesCall{}
		}
		if q == nil {
			q = &v1.NominationPools_UpdateRolesCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_NominationpoolsWithdrawUnbondedCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_NominationpoolsWithdrawUnbondedCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.NominationpoolsWithdrawUnbondedCall, that.NominationpoolsWithdrawUnbondedCall; p != q {
		if p == nil {
			p = &v1.NominationPools_WithdrawUnbondedCall{}
		}
		if q == nil {
			q = &v1.NominationPools_WithdrawUnbondedCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_PreimageEnsureUpdatedCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_PreimageEnsureUpdatedCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.PreimageEnsureUpdatedCall, that.PreimageEnsureUpdatedCall; p != q {
		if p == nil {
			p = &v1.Preimage_EnsureUpdatedCall{}
		}
		if q == nil {
			q = &v1.Preimage_EnsureUpdatedCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_PreimageNotePreimageCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_PreimageNotePreimageCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.PreimageNotePreimageCall, that.PreimageNotePreimageCall; p != q {
		if p == nil {
			p = &v1.Preimage_NotePreimageCall{}
		}
		if q == nil {
			q = &v1.Preimage_NotePreimageCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_PreimageRequestPreimageCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_PreimageRequestPreimageCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.PreimageRequestPreimageCall, that.PreimageRequestPreimageCall; p != q {
		if p == nil {
			p = &v1.Preimage_RequestPreimageCall{}
		}
		if q == nil {
			q = &v1.Preimage_RequestPreimageCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_PreimageUnnotePreimageCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_PreimageUnnotePreimageCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.PreimageUnnotePreimageCall, that.PreimageUnnotePreimageCall; p != q {
		if p == nil {
			p = &v1.Preimage_UnnotePreimageCall{}
		}
		if q == nil {
			q = &v1.Preimage_UnnotePreimageCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_PreimageUnrequestPreimageCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_PreimageUnrequestPreimageCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.PreimageUnrequestPreimageCall, that.PreimageUnrequestPreimageCall; p != q {
		if p == nil {
			p = &v1.Preimage_UnrequestPreimageCall{}
		}
		if q == nil {
			q = &v1.Preimage_UnrequestPreimageCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_ProxyAddProxyCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_ProxyAddProxyCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ProxyAddProxyCall, that.ProxyAddProxyCall; p != q {
		if p == nil {
			p = &v1.Proxy_AddProxyCall{}
		}
		if q == nil {
			q = &v1.Proxy_AddProxyCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_ProxyAnnounceCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_ProxyAnnounceCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ProxyAnnounceCall, that.ProxyAnnounceCall; p != q {
		if p == nil {
			p = &v1.Proxy_AnnounceCall{}
		}
		if q == nil {
			q = &v1.Proxy_AnnounceCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_ProxyCreatePureCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_ProxyCreatePureCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ProxyCreatePureCall, that.ProxyCreatePureCall; p != q {
		if p == nil {
			p = &v1.Proxy_CreatePureCall{}
		}
		if q == nil {
			q = &v1.Proxy_CreatePureCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_ProxyKillPureCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_ProxyKillPureCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ProxyKillPureCall, that.ProxyKillPureCall; p != q {
		if p == nil {
			p = &v1.Proxy_KillPureCall{}
		}
		if q == nil {
			q = &v1.Proxy_KillPureCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_ProxyProxyAnnouncedCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_ProxyProxyAnnouncedCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ProxyProxyAnnouncedCall, that.ProxyProxyAnnouncedCall; p != q {
		if p == nil {
			p = &v1.Proxy_ProxyAnnouncedCall{}
		}
		if q == nil {
			q = &v1.Proxy_ProxyAnnouncedCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_ProxyProxyCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_ProxyProxyCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ProxyProxyCall, that.ProxyProxyCall; p != q {
		if p == nil {
			p = &v1.Proxy_ProxyCall{}
		}
		if q == nil {
			q = &v1.Proxy_ProxyCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_ProxyRejectAnnouncementCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_ProxyRejectAnnouncementCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ProxyRejectAnnouncementCall, that.ProxyRejectAnnouncementCall; p != q {
		if p == nil {
			p = &v1.Proxy_RejectAnnouncementCall{}
		}
		if q == nil {
			q = &v1.Proxy_RejectAnnouncementCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_ProxyRemoveAnnouncementCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_ProxyRemoveAnnouncementCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ProxyRemoveAnnouncementCall, that.ProxyRemoveAnnouncementCall; p != q {
		if p == nil {
			p = &v1.Proxy_RemoveAnnouncementCall{}
		}
		if q == nil {
			q = &v1.Proxy_RemoveAnnouncementCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_ProxyRemoveProxyCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_ProxyRemoveProxyCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ProxyRemoveProxyCall, that.ProxyRemoveProxyCall; p != q {
		if p == nil {
			p = &v1.Proxy_RemoveProxyCall{}
		}
		if q == nil {
			q = &v1.Proxy_RemoveProxyCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_ReferendaCancelCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_ReferendaCancelCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ReferendaCancelCall, that.ReferendaCancelCall; p != q {
		if p == nil {
			p = &v1.Referenda_CancelCall{}
		}
		if q == nil {
			q = &v1.Referenda_CancelCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_ReferendaKillCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_ReferendaKillCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ReferendaKillCall, that.ReferendaKillCall; p != q {
		if p == nil {
			p = &v1.Referenda_KillCall{}
		}
		if q == nil {
			q = &v1.Referenda_KillCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_ReferendaNudgeReferendumCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_ReferendaNudgeReferendumCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ReferendaNudgeReferendumCall, that.ReferendaNudgeReferendumCall; p != q {
		if p == nil {
			p = &v1.Referenda_NudgeReferendumCall{}
		}
		if q == nil {
			q = &v1.Referenda_NudgeReferendumCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_ReferendaOneFewerDecidingCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_ReferendaOneFewerDecidingCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ReferendaOneFewerDecidingCall, that.ReferendaOneFewerDecidingCall; p != q {
		if p == nil {
			p = &v1.Referenda_OneFewerDecidingCall{}
		}
		if q == nil {
			q = &v1.Referenda_OneFewerDecidingCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_ReferendaPlaceDecisionDepositCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_ReferendaPlaceDecisionDepositCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ReferendaPlaceDecisionDepositCall, that.ReferendaPlaceDecisionDepositCall; p != q {
		if p == nil {
			p = &v1.Referenda_PlaceDecisionDepositCall{}
		}
		if q == nil {
			q = &v1.Referenda_PlaceDecisionDepositCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_ReferendaRefundDecisionDepositCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_ReferendaRefundDecisionDepositCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ReferendaRefundDecisionDepositCall, that.ReferendaRefundDecisionDepositCall; p != q {
		if p == nil {
			p = &v1.Referenda_RefundDecisionDepositCall{}
		}
		if q == nil {
			q = &v1.Referenda_RefundDecisionDepositCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_ReferendaRefundSubmissionDepositCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_ReferendaRefundSubmissionDepositCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ReferendaRefundSubmissionDepositCall, that.ReferendaRefundSubmissionDepositCall; p != q {
		if p == nil {
			p = &v1.Referenda_RefundSubmissionDepositCall{}
		}
		if q == nil {
			q = &v1.Referenda_RefundSubmissionDepositCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_ReferendaSetMetadataCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_ReferendaSetMetadataCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ReferendaSetMetadataCall, that.ReferendaSetMetadataCall; p != q {
		if p == nil {
			p = &v1.Referenda_SetMetadataCall{}
		}
		if q == nil {
			q = &v1.Referenda_SetMetadataCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_ReferendaSubmitCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_ReferendaSubmitCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.ReferendaSubmitCall, that.ReferendaSubmitCall; p != q {
		if p == nil {
			p = &v1.Referenda_SubmitCall{}
		}
		if q == nil {
			q = &v1.Referenda_SubmitCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_SchedulerCancelCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_SchedulerCancelCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.SchedulerCancelCall, that.SchedulerCancelCall; p != q {
		if p == nil {
			p = &v1.Scheduler_CancelCall{}
		}
		if q == nil {
			q = &v1.Scheduler_CancelCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_SchedulerCancelNamedCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_SchedulerCancelNamedCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.SchedulerCancelNamedCall, that.SchedulerCancelNamedCall; p != q {
		if p == nil {
			p = &v1.Scheduler_CancelNamedCall{}
		}
		if q == nil {
			q = &v1.Scheduler_CancelNamedCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_SchedulerScheduleAfterCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_SchedulerScheduleAfterCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.SchedulerScheduleAfterCall, that.SchedulerScheduleAfterCall; p != q {
		if p == nil {
			p = &v1.Scheduler_ScheduleAfterCall{}
		}
		if q == nil {
			q = &v1.Scheduler_ScheduleAfterCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_SchedulerScheduleCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_SchedulerScheduleCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.SchedulerScheduleCall, that.SchedulerScheduleCall; p != q {
		if p == nil {
			p = &v1.Scheduler_ScheduleCall{}
		}
		if q == nil {
			q = &v1.Scheduler_ScheduleCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_SchedulerScheduleNamedAfterCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_SchedulerScheduleNamedAfterCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.SchedulerScheduleNamedAfterCall, that.SchedulerScheduleNamedAfterCall; p != q {
		if p == nil {
			p = &v1.Scheduler_ScheduleNamedAfterCall{}
		}
		if q == nil {
			q = &v1.Scheduler_ScheduleNamedAfterCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_SchedulerScheduleNamedCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_SchedulerScheduleNamedCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.SchedulerScheduleNamedCall, that.SchedulerScheduleNamedCall; p != q {
		if p == nil {
			p = &v1.Scheduler_ScheduleNamedCall{}
		}
		if q == nil {
			q = &v1.Scheduler_ScheduleNamedCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_SessionSetKeysCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_SessionSetKeysCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.SessionSetKeysCall, that.SessionSetKeysCall; p != q {
		if p == nil {
			p = &v1.Session_SetKeysCall{}
		}
		if q == nil {
			q = &v1.Session_SetKeysCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_StakingrewardsAlignSupplyCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_StakingrewardsAlignSupplyCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.StakingrewardsAlignSupplyCall, that.StakingrewardsAlignSupplyCall; p != q {
		if p == nil {
			p = &v1.StakingRewards_AlignSupplyCall{}
		}
		if q == nil {
			q = &v1.StakingRewards_AlignSupplyCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_StakingrewardsForceRefillCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_StakingrewardsForceRefillCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.StakingrewardsForceRefillCall, that.StakingrewardsForceRefillCall; p != q {
		if p == nil {
			p = &v1.StakingRewards_ForceRefillCall{}
		}
		if q == nil {
			q = &v1.StakingRewards_ForceRefillCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_StakingrewardsRefillCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_StakingrewardsRefillCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.StakingrewardsRefillCall, that.StakingrewardsRefillCall; p != q {
		if p == nil {
			p = &v1.StakingRewards_RefillCall{}
		}
		if q == nil {
			q = &v1.StakingRewards_RefillCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_StakingrewardsWithdrawCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_StakingrewardsWithdrawCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.StakingrewardsWithdrawCall, that.StakingrewardsWithdrawCall; p != q {
		if p == nil {
			p = &v1.StakingRewards_WithdrawCall{}
		}
		if q == nil {
			q = &v1.StakingRewards_WithdrawCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_StakingBondCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_StakingBondCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.StakingBondCall, that.StakingBondCall; p != q {
		if p == nil {
			p = &v1.Staking_BondCall{}
		}
		if q == nil {
			q = &v1.Staking_BondCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_StakingBondExtraCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_StakingBondExtraCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.StakingBondExtraCall, that.StakingBondExtraCall; p != q {
		if p == nil {
			p = &v1.Staking_BondExtraCall{}
		}
		if q == nil {
			q = &v1.Staking_BondExtraCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_StakingCancelDeferredSlashCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_StakingCancelDeferredSlashCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.StakingCancelDeferredSlashCall, that.StakingCancelDeferredSlashCall; p != q {
		if p == nil {
			p = &v1.Staking_CancelDeferredSlashCall{}
		}
		if q == nil {
			q = &v1.Staking_CancelDeferredSlashCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_StakingChillOtherCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_StakingChillOtherCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.StakingChillOtherCall, that.StakingChillOtherCall; p != q {
		if p == nil {
			p = &v1.Staking_ChillOtherCall{}
		}
		if q == nil {
			q = &v1.Staking_ChillOtherCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_StakingForceApplyMinCommissionCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_StakingForceApplyMinCommissionCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.StakingForceApplyMinCommissionCall, that.StakingForceApplyMinCommissionCall; p != q {
		if p == nil {
			p = &v1.Staking_ForceApplyMinCommissionCall{}
		}
		if q == nil {
			q = &v1.Staking_ForceApplyMinCommissionCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_StakingForceUnstakeCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_StakingForceUnstakeCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.StakingForceUnstakeCall, that.StakingForceUnstakeCall; p != q {
		if p == nil {
			p = &v1.Staking_ForceUnstakeCall{}
		}
		if q == nil {
			q = &v1.Staking_ForceUnstakeCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_StakingIncreaseValidatorCountCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_StakingIncreaseValidatorCountCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.StakingIncreaseValidatorCountCall, that.StakingIncreaseValidatorCountCall; p != q {
		if p == nil {
			p = &v1.Staking_IncreaseValidatorCountCall{}
		}
		if q == nil {
			q = &v1.Staking_IncreaseValidatorCountCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_StakingKickCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_StakingKickCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.StakingKickCall, that.StakingKickCall; p != q {
		if p == nil {
			p = &v1.Staking_KickCall{}
		}
		if q == nil {
			q = &v1.Staking_KickCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_StakingNominateCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_StakingNominateCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.StakingNominateCall, that.StakingNominateCall; p != q {
		if p == nil {
			p = &v1.Staking_NominateCall{}
		}
		if q == nil {
			q = &v1.Staking_NominateCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_StakingPayoutStakersCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_StakingPayoutStakersCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.StakingPayoutStakersCall, that.StakingPayoutStakersCall; p != q {
		if p == nil {
			p = &v1.Staking_PayoutStakersCall{}
		}
		if q == nil {
			q = &v1.Staking_PayoutStakersCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_StakingReapStashCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_StakingReapStashCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.StakingReapStashCall, that.StakingReapStashCall; p != q {
		if p == nil {
			p = &v1.Staking_ReapStashCall{}
		}
		if q == nil {
			q = &v1.Staking_ReapStashCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_StakingRebondCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_StakingRebondCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.StakingRebondCall, that.StakingRebondCall; p != q {
		if p == nil {
			p = &v1.Staking_RebondCall{}
		}
		if q == nil {
			q = &v1.Staking_RebondCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_StakingScaleValidatorCountCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_StakingScaleValidatorCountCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.StakingScaleValidatorCountCall, that.StakingScaleValidatorCountCall; p != q {
		if p == nil {
			p = &v1.Staking_ScaleValidatorCountCall{}
		}
		if q == nil {
			q = &v1.Staking_ScaleValidatorCountCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_StakingSetInvulnerablesCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_StakingSetInvulnerablesCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.StakingSetInvulnerablesCall, that.StakingSetInvulnerablesCall; p != q {
		if p == nil {
			p = &v1.Staking_SetInvulnerablesCall{}
		}
		if q == nil {
			q = &v1.Staking_SetInvulnerablesCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_StakingSetMinCommissionCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_StakingSetMinCommissionCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.StakingSetMinCommissionCall, that.StakingSetMinCommissionCall; p != q {
		if p == nil {
			p = &v1.Staking_SetMinCommissionCall{}
		}
		if q == nil {
			q = &v1.Staking_SetMinCommissionCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_StakingSetPayeeCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_StakingSetPayeeCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.StakingSetPayeeCall, that.StakingSetPayeeCall; p != q {
		if p == nil {
			p = &v1.Staking_SetPayeeCall{}
		}
		if q == nil {
			q = &v1.Staking_SetPayeeCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_StakingSetStakingConfigsCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_StakingSetStakingConfigsCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.StakingSetStakingConfigsCall, that.StakingSetStakingConfigsCall; p != q {
		if p == nil {
			p = &v1.Staking_SetStakingConfigsCall{}
		}
		if q == nil {
			q = &v1.Staking_SetStakingConfigsCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_StakingSetValidatorCountCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_StakingSetValidatorCountCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.StakingSetValidatorCountCall, that.StakingSetValidatorCountCall; p != q {
		if p == nil {
			p = &v1.Staking_SetValidatorCountCall{}
		}
		if q == nil {
			q = &v1.Staking_SetValidatorCountCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_StakingUnbondCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_StakingUnbondCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.StakingUnbondCall, that.StakingUnbondCall; p != q {
		if p == nil {
			p = &v1.Staking_UnbondCall{}
		}
		if q == nil {
			q = &v1.Staking_UnbondCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_StakingValidateCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_StakingValidateCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.StakingValidateCall, that.StakingValidateCall; p != q {
		if p == nil {
			p = &v1.Staking_ValidateCall{}
		}
		if q == nil {
			q = &v1.Staking_ValidateCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_StakingWithdrawUnbondedCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_StakingWithdrawUnbondedCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.StakingWithdrawUnbondedCall, that.StakingWithdrawUnbondedCall; p != q {
		if p == nil {
			p = &v1.Staking_WithdrawUnbondedCall{}
		}
		if q == nil {
			q = &v1.Staking_WithdrawUnbondedCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_SystemKillPrefixCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_SystemKillPrefixCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.SystemKillPrefixCall, that.SystemKillPrefixCall; p != q {
		if p == nil {
			p = &v1.System_KillPrefixCall{}
		}
		if q == nil {
			q = &v1.System_KillPrefixCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_SystemKillStorageCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_SystemKillStorageCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.SystemKillStorageCall, that.SystemKillStorageCall; p != q {
		if p == nil {
			p = &v1.System_KillStorageCall{}
		}
		if q == nil {
			q = &v1.System_KillStorageCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_SystemRemarkCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_SystemRemarkCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.SystemRemarkCall, that.SystemRemarkCall; p != q {
		if p == nil {
			p = &v1.System_RemarkCall{}
		}
		if q == nil {
			q = &v1.System_RemarkCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_SystemRemarkWithEventCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_SystemRemarkWithEventCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.SystemRemarkWithEventCall, that.SystemRemarkWithEventCall; p != q {
		if p == nil {
			p = &v1.System_RemarkWithEventCall{}
		}
		if q == nil {
			q = &v1.System_RemarkWithEventCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_SystemSetCodeCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_SystemSetCodeCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.SystemSetCodeCall, that.SystemSetCodeCall; p != q {
		if p == nil {
			p = &v1.System_SetCodeCall{}
		}
		if q == nil {
			q = &v1.System_SetCodeCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_SystemSetCodeWithoutChecksCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_SystemSetCodeWithoutChecksCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.SystemSetCodeWithoutChecksCall, that.SystemSetCodeWithoutChecksCall; p != q {
		if p == nil {
			p = &v1.System_SetCodeWithoutChecksCall{}
		}
		if q == nil {
			q = &v1.System_SetCodeWithoutChecksCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_SystemSetHeapPagesCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_SystemSetHeapPagesCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.SystemSetHeapPagesCall, that.SystemSetHeapPagesCall; p != q {
		if p == nil {
			p = &v1.System_SetHeapPagesCall{}
		}
		if q == nil {
			q = &v1.System_SetHeapPagesCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_SystemSetStorageCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_SystemSetStorageCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.SystemSetStorageCall, that.SystemSetStorageCall; p != q {
		if p == nil {
			p = &v1.System_SetStorageCall{}
		}
		if q == nil {
			q = &v1.System_SetStorageCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_TimestampSetCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_TimestampSetCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.TimestampSetCall, that.TimestampSetCall; p != q {
		if p == nil {
			p = &v1.Timestamp_SetCall{}
		}
		if q == nil {
			q = &v1.Timestamp_SetCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_TreasuryApproveProposalCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_TreasuryApproveProposalCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.TreasuryApproveProposalCall, that.TreasuryApproveProposalCall; p != q {
		if p == nil {
			p = &v1.Treasury_ApproveProposalCall{}
		}
		if q == nil {
			q = &v1.Treasury_ApproveProposalCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_TreasuryCheckStatusCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_TreasuryCheckStatusCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.TreasuryCheckStatusCall, that.TreasuryCheckStatusCall; p != q {
		if p == nil {
			p = &v1.Treasury_CheckStatusCall{}
		}
		if q == nil {
			q = &v1.Treasury_CheckStatusCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_TreasuryPayoutCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_TreasuryPayoutCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.TreasuryPayoutCall, that.TreasuryPayoutCall; p != q {
		if p == nil {
			p = &v1.Treasury_PayoutCall{}
		}
		if q == nil {
			q = &v1.Treasury_PayoutCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_TreasuryProposeSpendCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_TreasuryProposeSpendCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.TreasuryProposeSpendCall, that.TreasuryProposeSpendCall; p != q {
		if p == nil {
			p = &v1.Treasury_ProposeSpendCall{}
		}
		if q == nil {
			q = &v1.Treasury_ProposeSpendCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_TreasuryRejectProposalCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_TreasuryRejectProposalCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.TreasuryRejectProposalCall, that.TreasuryRejectProposalCall; p != q {
		if p == nil {
			p = &v1.Treasury_RejectProposalCall{}
		}
		if q == nil {
			q = &v1.Treasury_RejectProposalCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_TreasuryRemoveApprovalCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_TreasuryRemoveApprovalCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.TreasuryRemoveApprovalCall, that.TreasuryRemoveApprovalCall; p != q {
		if p == nil {
			p = &v1.Treasury_RemoveApprovalCall{}
		}
		if q == nil {
			q = &v1.Treasury_RemoveApprovalCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_TreasurySpendCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_TreasurySpendCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.TreasurySpendCall, that.TreasurySpendCall; p != q {
		if p == nil {
			p = &v1.Treasury_SpendCall{}
		}
		if q == nil {
			q = &v1.Treasury_SpendCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_TreasurySpendLocalCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_TreasurySpendLocalCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.TreasurySpendLocalCall, that.TreasurySpendLocalCall; p != q {
		if p == nil {
			p = &v1.Treasury_SpendLocalCall{}
		}
		if q == nil {
			q = &v1.Treasury_SpendLocalCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_TreasuryVoidSpendCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_TreasuryVoidSpendCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.TreasuryVoidSpendCall, that.TreasuryVoidSpendCall; p != q {
		if p == nil {
			p = &v1.Treasury_VoidSpendCall{}
		}
		if q == nil {
			q = &v1.Treasury_VoidSpendCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_UtilityAsDerivativeCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_UtilityAsDerivativeCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.UtilityAsDerivativeCall, that.UtilityAsDerivativeCall; p != q {
		if p == nil {
			p = &v1.Utility_AsDerivativeCall{}
		}
		if q == nil {
			q = &v1.Utility_AsDerivativeCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_UtilityBatchAllCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_UtilityBatchAllCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.UtilityBatchAllCall, that.UtilityBatchAllCall; p != q {
		if p == nil {
			p = &v1.Utility_BatchAllCall{}
		}
		if q == nil {
			q = &v1.Utility_BatchAllCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_UtilityBatchCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_UtilityBatchCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.UtilityBatchCall, that.UtilityBatchCall; p != q {
		if p == nil {
			p = &v1.Utility_BatchCall{}
		}
		if q == nil {
			q = &v1.Utility_BatchCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_UtilityDispatchAsCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_UtilityDispatchAsCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.UtilityDispatchAsCall, that.UtilityDispatchAsCall; p != q {
		if p == nil {
			p = &v1.Utility_DispatchAsCall{}
		}
		if q == nil {
			q = &v1.Utility_DispatchAsCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_UtilityForceBatchCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_UtilityForceBatchCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.UtilityForceBatchCall, that.UtilityForceBatchCall; p != q {
		if p == nil {
			p = &v1.Utility_ForceBatchCall{}
		}
		if q == nil {
			q = &v1.Utility_ForceBatchCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_UtilityWithWeightCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_UtilityWithWeightCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.UtilityWithWeightCall, that.UtilityWithWeightCall; p != q {
		if p == nil {
			p = &v1.Utility_WithWeightCall{}
		}
		if q == nil {
			q = &v1.Utility_WithWeightCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_VestingForceVestedTransferCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_VestingForceVestedTransferCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.VestingForceVestedTransferCall, that.VestingForceVestedTransferCall; p != q {
		if p == nil {
			p = &v1.Vesting_ForceVestedTransferCall{}
		}
		if q == nil {
			q = &v1.Vesting_ForceVestedTransferCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_VestingMergeSchedulesCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_VestingMergeSchedulesCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.VestingMergeSchedulesCall, that.VestingMergeSchedulesCall; p != q {
		if p == nil {
			p = &v1.Vesting_MergeSchedulesCall{}
		}
		if q == nil {
			q = &v1.Vesting_MergeSchedulesCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_VestingVestOtherCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_VestingVestOtherCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.VestingVestOtherCall, that.VestingVestOtherCall; p != q {
		if p == nil {
			p = &v1.Vesting_VestOtherCall{}
		}
		if q == nil {
			q = &v1.Vesting_VestOtherCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_VestingVestedTransferCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_VestingVestedTransferCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.VestingVestedTransferCall, that.VestingVestedTransferCall; p != q {
		if p == nil {
			p = &v1.Vesting_VestedTransferCall{}
		}
		if q == nil {
			q = &v1.Vesting_VestedTransferCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_WhitelistDispatchWhitelistedCallCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_WhitelistDispatchWhitelistedCallCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.WhitelistDispatchWhitelistedCallCall, that.WhitelistDispatchWhitelistedCallCall; p != q {
		if p == nil {
			p = &v1.Whitelist_DispatchWhitelistedCallCall{}
		}
		if q == nil {
			q = &v1.Whitelist_DispatchWhitelistedCallCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_WhitelistDispatchWhitelistedCallWithPreimageCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_WhitelistDispatchWhitelistedCallWithPreimageCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.WhitelistDispatchWhitelistedCallWithPreimageCall, that.WhitelistDispatchWhitelistedCallWithPreimageCall; p != q {
		if p == nil {
			p = &v1.Whitelist_DispatchWhitelistedCallWithPreimageCall{}
		}
		if q == nil {
			q = &v1.Whitelist_DispatchWhitelistedCallWithPreimageCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_WhitelistRemoveWhitelistedCallCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_WhitelistRemoveWhitelistedCallCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.WhitelistRemoveWhitelistedCallCall, that.WhitelistRemoveWhitelistedCallCall; p != q {
		if p == nil {
			p = &v1.Whitelist_RemoveWhitelistedCallCall{}
		}
		if q == nil {
			q = &v1.Whitelist_RemoveWhitelistedCallCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *RuntimeCall_WhitelistWhitelistCallCall) EqualVT(thatIface isRuntimeCall_Call) bool {
	that, ok := thatIface.(*RuntimeCall_WhitelistWhitelistCallCall)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.WhitelistWhitelistCallCall, that.WhitelistWhitelistCallCall; p != q {
		if p == nil {
			p = &v1.Whitelist_WhitelistCallCall{}
		}
		if q == nil {
			q = &v1.Whitelist_WhitelistCallCall{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (m *RuntimeCall) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RuntimeCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if vtmsg, ok := m.Call.(interface {
		MarshalToSizedBufferVT([]byte) (int, error)
	}); ok {
		size, err := vtmsg.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	return len(dAtA) - i, nil
}

func (m *RuntimeCall_BabePlanConfigChangeCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_BabePlanConfigChangeCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BabePlanConfigChangeCall != nil {
		size, err := m.BabePlanConfigChangeCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_BabeReportEquivocationCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_BabeReportEquivocationCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BabeReportEquivocationCall != nil {
		size, err := m.BabeReportEquivocationCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_BabeReportEquivocationUnsignedCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_BabeReportEquivocationUnsignedCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BabeReportEquivocationUnsignedCall != nil {
		size, err := m.BabeReportEquivocationUnsignedCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_BagslistPutInFrontOfCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_BagslistPutInFrontOfCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BagslistPutInFrontOfCall != nil {
		size, err := m.BagslistPutInFrontOfCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_BagslistPutInFrontOfOtherCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_BagslistPutInFrontOfOtherCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BagslistPutInFrontOfOtherCall != nil {
		size, err := m.BagslistPutInFrontOfOtherCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_BagslistRebagCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_BagslistRebagCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BagslistRebagCall != nil {
		size, err := m.BagslistRebagCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_BalancesForceSetBalanceCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_BalancesForceSetBalanceCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BalancesForceSetBalanceCall != nil {
		size, err := m.BalancesForceSetBalanceCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_BalancesForceTransferCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_BalancesForceTransferCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BalancesForceTransferCall != nil {
		size, err := m.BalancesForceTransferCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_BalancesForceUnreserveCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_BalancesForceUnreserveCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BalancesForceUnreserveCall != nil {
		size, err := m.BalancesForceUnreserveCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_BalancesTransferAllCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_BalancesTransferAllCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BalancesTransferAllCall != nil {
		size, err := m.BalancesTransferAllCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_BalancesTransferAllowDeathCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_BalancesTransferAllowDeathCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BalancesTransferAllowDeathCall != nil {
		size, err := m.BalancesTransferAllowDeathCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_BalancesTransferKeepAliveCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_BalancesTransferKeepAliveCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BalancesTransferKeepAliveCall != nil {
		size, err := m.BalancesTransferKeepAliveCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_BalancesUpgradeAccountsCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_BalancesUpgradeAccountsCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BalancesUpgradeAccountsCall != nil {
		size, err := m.BalancesUpgradeAccountsCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_BountiesAcceptCuratorCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_BountiesAcceptCuratorCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BountiesAcceptCuratorCall != nil {
		size, err := m.BountiesAcceptCuratorCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_BountiesApproveBountyCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_BountiesApproveBountyCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BountiesApproveBountyCall != nil {
		size, err := m.BountiesApproveBountyCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_BountiesAwardBountyCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_BountiesAwardBountyCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BountiesAwardBountyCall != nil {
		size, err := m.BountiesAwardBountyCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_BountiesClaimBountyCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_BountiesClaimBountyCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BountiesClaimBountyCall != nil {
		size, err := m.BountiesClaimBountyCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_BountiesCloseBountyCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_BountiesCloseBountyCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BountiesCloseBountyCall != nil {
		size, err := m.BountiesCloseBountyCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_BountiesExtendBountyExpiryCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_BountiesExtendBountyExpiryCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BountiesExtendBountyExpiryCall != nil {
		size, err := m.BountiesExtendBountyExpiryCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_BountiesProposeBountyCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_BountiesProposeBountyCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BountiesProposeBountyCall != nil {
		size, err := m.BountiesProposeBountyCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_BountiesProposeCuratorCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_BountiesProposeCuratorCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BountiesProposeCuratorCall != nil {
		size, err := m.BountiesProposeCuratorCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_BountiesUnassignCuratorCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_BountiesUnassignCuratorCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BountiesUnassignCuratorCall != nil {
		size, err := m.BountiesUnassignCuratorCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ChildbountiesAcceptCuratorCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_ChildbountiesAcceptCuratorCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ChildbountiesAcceptCuratorCall != nil {
		size, err := m.ChildbountiesAcceptCuratorCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ChildbountiesAddChildBountyCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_ChildbountiesAddChildBountyCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ChildbountiesAddChildBountyCall != nil {
		size, err := m.ChildbountiesAddChildBountyCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ChildbountiesAwardChildBountyCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_ChildbountiesAwardChildBountyCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ChildbountiesAwardChildBountyCall != nil {
		size, err := m.ChildbountiesAwardChildBountyCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ChildbountiesClaimChildBountyCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_ChildbountiesClaimChildBountyCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ChildbountiesClaimChildBountyCall != nil {
		size, err := m.ChildbountiesClaimChildBountyCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ChildbountiesCloseChildBountyCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_ChildbountiesCloseChildBountyCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ChildbountiesCloseChildBountyCall != nil {
		size, err := m.ChildbountiesCloseChildBountyCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ChildbountiesProposeCuratorCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_ChildbountiesProposeCuratorCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ChildbountiesProposeCuratorCall != nil {
		size, err := m.ChildbountiesProposeCuratorCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ChildbountiesUnassignCuratorCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_ChildbountiesUnassignCuratorCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ChildbountiesUnassignCuratorCall != nil {
		size, err := m.ChildbountiesUnassignCuratorCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ConvictionvotingDelegateCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_ConvictionvotingDelegateCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ConvictionvotingDelegateCall != nil {
		size, err := m.ConvictionvotingDelegateCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ConvictionvotingRemoveOtherVoteCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_ConvictionvotingRemoveOtherVoteCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ConvictionvotingRemoveOtherVoteCall != nil {
		size, err := m.ConvictionvotingRemoveOtherVoteCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ConvictionvotingRemoveVoteCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_ConvictionvotingRemoveVoteCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ConvictionvotingRemoveVoteCall != nil {
		size, err := m.ConvictionvotingRemoveVoteCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ConvictionvotingUndelegateCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_ConvictionvotingUndelegateCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ConvictionvotingUndelegateCall != nil {
		size, err := m.ConvictionvotingUndelegateCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ConvictionvotingUnlockCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_ConvictionvotingUnlockCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ConvictionvotingUnlockCall != nil {
		size, err := m.ConvictionvotingUnlockCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ConvictionvotingVoteCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_ConvictionvotingVoteCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ConvictionvotingVoteCall != nil {
		size, err := m.ConvictionvotingVoteCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ElectionprovidermultiphaseGovernanceFallbackCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_ElectionprovidermultiphaseGovernanceFallbackCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ElectionprovidermultiphaseGovernanceFallbackCall != nil {
		size, err := m.ElectionprovidermultiphaseGovernanceFallbackCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ElectionprovidermultiphaseSetEmergencyElectionResultCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_ElectionprovidermultiphaseSetEmergencyElectionResultCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ElectionprovidermultiphaseSetEmergencyElectionResultCall != nil {
		size, err := m.ElectionprovidermultiphaseSetEmergencyElectionResultCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ElectionprovidermultiphaseSetMinimumUntrustedScoreCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_ElectionprovidermultiphaseSetMinimumUntrustedScoreCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ElectionprovidermultiphaseSetMinimumUntrustedScoreCall != nil {
		size, err := m.ElectionprovidermultiphaseSetMinimumUntrustedScoreCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ElectionprovidermultiphaseSubmitCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_ElectionprovidermultiphaseSubmitCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ElectionprovidermultiphaseSubmitCall != nil {
		size, err := m.ElectionprovidermultiphaseSubmitCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ElectionprovidermultiphaseSubmitUnsignedCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_ElectionprovidermultiphaseSubmitUnsignedCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ElectionprovidermultiphaseSubmitUnsignedCall != nil {
		size, err := m.ElectionprovidermultiphaseSubmitUnsignedCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_FellowshipcollectiveAddMemberCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_FellowshipcollectiveAddMemberCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FellowshipcollectiveAddMemberCall != nil {
		size, err := m.FellowshipcollectiveAddMemberCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_FellowshipcollectiveCleanupPollCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_FellowshipcollectiveCleanupPollCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FellowshipcollectiveCleanupPollCall != nil {
		size, err := m.FellowshipcollectiveCleanupPollCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_FellowshipcollectiveDemoteMemberCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_FellowshipcollectiveDemoteMemberCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FellowshipcollectiveDemoteMemberCall != nil {
		size, err := m.FellowshipcollectiveDemoteMemberCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_FellowshipcollectivePromoteMemberCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_FellowshipcollectivePromoteMemberCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FellowshipcollectivePromoteMemberCall != nil {
		size, err := m.FellowshipcollectivePromoteMemberCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_FellowshipcollectiveRemoveMemberCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_FellowshipcollectiveRemoveMemberCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FellowshipcollectiveRemoveMemberCall != nil {
		size, err := m.FellowshipcollectiveRemoveMemberCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_FellowshipcollectiveVoteCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_FellowshipcollectiveVoteCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FellowshipcollectiveVoteCall != nil {
		size, err := m.FellowshipcollectiveVoteCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_FellowshipreferendaCancelCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_FellowshipreferendaCancelCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FellowshipreferendaCancelCall != nil {
		size, err := m.FellowshipreferendaCancelCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_FellowshipreferendaKillCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_FellowshipreferendaKillCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FellowshipreferendaKillCall != nil {
		size, err := m.FellowshipreferendaKillCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_FellowshipreferendaNudgeReferendumCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_FellowshipreferendaNudgeReferendumCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FellowshipreferendaNudgeReferendumCall != nil {
		size, err := m.FellowshipreferendaNudgeReferendumCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_FellowshipreferendaOneFewerDecidingCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_FellowshipreferendaOneFewerDecidingCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FellowshipreferendaOneFewerDecidingCall != nil {
		size, err := m.FellowshipreferendaOneFewerDecidingCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_FellowshipreferendaPlaceDecisionDepositCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_FellowshipreferendaPlaceDecisionDepositCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FellowshipreferendaPlaceDecisionDepositCall != nil {
		size, err := m.FellowshipreferendaPlaceDecisionDepositCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_FellowshipreferendaRefundDecisionDepositCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_FellowshipreferendaRefundDecisionDepositCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FellowshipreferendaRefundDecisionDepositCall != nil {
		size, err := m.FellowshipreferendaRefundDecisionDepositCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_FellowshipreferendaRefundSubmissionDepositCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_FellowshipreferendaRefundSubmissionDepositCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FellowshipreferendaRefundSubmissionDepositCall != nil {
		size, err := m.FellowshipreferendaRefundSubmissionDepositCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_FellowshipreferendaSetMetadataCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_FellowshipreferendaSetMetadataCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FellowshipreferendaSetMetadataCall != nil {
		size, err := m.FellowshipreferendaSetMetadataCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_FellowshipreferendaSubmitCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_FellowshipreferendaSubmitCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FellowshipreferendaSubmitCall != nil {
		size, err := m.FellowshipreferendaSubmitCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_GearvoucherCallCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_GearvoucherCallCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GearvoucherCallCall != nil {
		size, err := m.GearvoucherCallCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_GearvoucherCallDeprecatedCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_GearvoucherCallDeprecatedCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GearvoucherCallDeprecatedCall != nil {
		size, err := m.GearvoucherCallDeprecatedCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_GearvoucherDeclineCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_GearvoucherDeclineCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GearvoucherDeclineCall != nil {
		size, err := m.GearvoucherDeclineCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_GearvoucherIssueCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_GearvoucherIssueCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GearvoucherIssueCall != nil {
		size, err := m.GearvoucherIssueCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_GearvoucherRevokeCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_GearvoucherRevokeCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GearvoucherRevokeCall != nil {
		size, err := m.GearvoucherRevokeCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_GearvoucherUpdateCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_GearvoucherUpdateCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GearvoucherUpdateCall != nil {
		size, err := m.GearvoucherUpdateCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_GearClaimValueCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_GearClaimValueCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GearClaimValueCall != nil {
		size, err := m.GearClaimValueCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_GearCreateProgramCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_GearCreateProgramCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GearCreateProgramCall != nil {
		size, err := m.GearCreateProgramCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_GearRunCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_GearRunCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GearRunCall != nil {
		size, err := m.GearRunCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_GearSendMessageCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_GearSendMessageCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GearSendMessageCall != nil {
		size, err := m.GearSendMessageCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_GearSendReplyCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_GearSendReplyCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GearSendReplyCall != nil {
		size, err := m.GearSendReplyCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_GearSetExecuteInherentCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_GearSetExecuteInherentCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GearSetExecuteInherentCall != nil {
		size, err := m.GearSetExecuteInherentCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_GearUploadCodeCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_GearUploadCodeCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GearUploadCodeCall != nil {
		size, err := m.GearUploadCodeCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_GearUploadProgramCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_GearUploadProgramCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GearUploadProgramCall != nil {
		size, err := m.GearUploadProgramCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_GrandpaNoteStalledCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_GrandpaNoteStalledCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GrandpaNoteStalledCall != nil {
		size, err := m.GrandpaNoteStalledCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_GrandpaReportEquivocationCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_GrandpaReportEquivocationCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GrandpaReportEquivocationCall != nil {
		size, err := m.GrandpaReportEquivocationCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_GrandpaReportEquivocationUnsignedCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_GrandpaReportEquivocationUnsignedCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GrandpaReportEquivocationUnsignedCall != nil {
		size, err := m.GrandpaReportEquivocationUnsignedCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_IdentityAddRegistrarCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_IdentityAddRegistrarCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IdentityAddRegistrarCall != nil {
		size, err := m.IdentityAddRegistrarCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_IdentityAddSubCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_IdentityAddSubCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IdentityAddSubCall != nil {
		size, err := m.IdentityAddSubCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_IdentityCancelRequestCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_IdentityCancelRequestCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IdentityCancelRequestCall != nil {
		size, err := m.IdentityCancelRequestCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_IdentityKillIdentityCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_IdentityKillIdentityCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IdentityKillIdentityCall != nil {
		size, err := m.IdentityKillIdentityCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_IdentityProvideJudgementCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_IdentityProvideJudgementCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IdentityProvideJudgementCall != nil {
		size, err := m.IdentityProvideJudgementCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_IdentityRemoveSubCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_IdentityRemoveSubCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IdentityRemoveSubCall != nil {
		size, err := m.IdentityRemoveSubCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_IdentityRenameSubCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_IdentityRenameSubCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IdentityRenameSubCall != nil {
		size, err := m.IdentityRenameSubCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_IdentityRequestJudgementCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_IdentityRequestJudgementCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IdentityRequestJudgementCall != nil {
		size, err := m.IdentityRequestJudgementCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_IdentitySetAccountIdCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_IdentitySetAccountIdCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IdentitySetAccountIdCall != nil {
		size, err := m.IdentitySetAccountIdCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_IdentitySetFeeCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_IdentitySetFeeCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IdentitySetFeeCall != nil {
		size, err := m.IdentitySetFeeCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_IdentitySetFieldsCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_IdentitySetFieldsCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IdentitySetFieldsCall != nil {
		size, err := m.IdentitySetFieldsCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_IdentitySetIdentityCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_IdentitySetIdentityCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IdentitySetIdentityCall != nil {
		size, err := m.IdentitySetIdentityCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_IdentitySetSubsCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_IdentitySetSubsCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IdentitySetSubsCall != nil {
		size, err := m.IdentitySetSubsCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ImonlineHeartbeatCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_ImonlineHeartbeatCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ImonlineHeartbeatCall != nil {
		size, err := m.ImonlineHeartbeatCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_MultisigApproveAsMultiCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_MultisigApproveAsMultiCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MultisigApproveAsMultiCall != nil {
		size, err := m.MultisigApproveAsMultiCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_MultisigAsMultiCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_MultisigAsMultiCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MultisigAsMultiCall != nil {
		size, err := m.MultisigAsMultiCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_MultisigAsMultiThreshold_1Call) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_MultisigAsMultiThreshold_1Call) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MultisigAsMultiThreshold_1Call != nil {
		size, err := m.MultisigAsMultiThreshold_1Call.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_MultisigCancelAsMultiCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_MultisigCancelAsMultiCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MultisigCancelAsMultiCall != nil {
		size, err := m.MultisigCancelAsMultiCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_NominationpoolsAdjustPoolDepositCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_NominationpoolsAdjustPoolDepositCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NominationpoolsAdjustPoolDepositCall != nil {
		size, err := m.NominationpoolsAdjustPoolDepositCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_NominationpoolsBondExtraCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_NominationpoolsBondExtraCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NominationpoolsBondExtraCall != nil {
		size, err := m.NominationpoolsBondExtraCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_NominationpoolsBondExtraOtherCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_NominationpoolsBondExtraOtherCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NominationpoolsBondExtraOtherCall != nil {
		size, err := m.NominationpoolsBondExtraOtherCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_NominationpoolsChillCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_NominationpoolsChillCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NominationpoolsChillCall != nil {
		size, err := m.NominationpoolsChillCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_NominationpoolsClaimCommissionCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_NominationpoolsClaimCommissionCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NominationpoolsClaimCommissionCall != nil {
		size, err := m.NominationpoolsClaimCommissionCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_NominationpoolsClaimPayoutOtherCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_NominationpoolsClaimPayoutOtherCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NominationpoolsClaimPayoutOtherCall != nil {
		size, err := m.NominationpoolsClaimPayoutOtherCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_NominationpoolsCreateCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_NominationpoolsCreateCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NominationpoolsCreateCall != nil {
		size, err := m.NominationpoolsCreateCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_NominationpoolsCreateWithPoolIdCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_NominationpoolsCreateWithPoolIdCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NominationpoolsCreateWithPoolIdCall != nil {
		size, err := m.NominationpoolsCreateWithPoolIdCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_NominationpoolsJoinCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_NominationpoolsJoinCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NominationpoolsJoinCall != nil {
		size, err := m.NominationpoolsJoinCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_NominationpoolsNominateCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_NominationpoolsNominateCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NominationpoolsNominateCall != nil {
		size, err := m.NominationpoolsNominateCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_NominationpoolsPoolWithdrawUnbondedCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_NominationpoolsPoolWithdrawUnbondedCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NominationpoolsPoolWithdrawUnbondedCall != nil {
		size, err := m.NominationpoolsPoolWithdrawUnbondedCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_NominationpoolsSetClaimPermissionCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_NominationpoolsSetClaimPermissionCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NominationpoolsSetClaimPermissionCall != nil {
		size, err := m.NominationpoolsSetClaimPermissionCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_NominationpoolsSetCommissionCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_NominationpoolsSetCommissionCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NominationpoolsSetCommissionCall != nil {
		size, err := m.NominationpoolsSetCommissionCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_NominationpoolsSetCommissionChangeRateCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_NominationpoolsSetCommissionChangeRateCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NominationpoolsSetCommissionChangeRateCall != nil {
		size, err := m.NominationpoolsSetCommissionChangeRateCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_NominationpoolsSetCommissionMaxCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_NominationpoolsSetCommissionMaxCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NominationpoolsSetCommissionMaxCall != nil {
		size, err := m.NominationpoolsSetCommissionMaxCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_NominationpoolsSetConfigsCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_NominationpoolsSetConfigsCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NominationpoolsSetConfigsCall != nil {
		size, err := m.NominationpoolsSetConfigsCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_NominationpoolsSetMetadataCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_NominationpoolsSetMetadataCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NominationpoolsSetMetadataCall != nil {
		size, err := m.NominationpoolsSetMetadataCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_NominationpoolsSetStateCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_NominationpoolsSetStateCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NominationpoolsSetStateCall != nil {
		size, err := m.NominationpoolsSetStateCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_NominationpoolsUnbondCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_NominationpoolsUnbondCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NominationpoolsUnbondCall != nil {
		size, err := m.NominationpoolsUnbondCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_NominationpoolsUpdateRolesCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_NominationpoolsUpdateRolesCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NominationpoolsUpdateRolesCall != nil {
		size, err := m.NominationpoolsUpdateRolesCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_NominationpoolsWithdrawUnbondedCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_NominationpoolsWithdrawUnbondedCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NominationpoolsWithdrawUnbondedCall != nil {
		size, err := m.NominationpoolsWithdrawUnbondedCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_PreimageEnsureUpdatedCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_PreimageEnsureUpdatedCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PreimageEnsureUpdatedCall != nil {
		size, err := m.PreimageEnsureUpdatedCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_PreimageNotePreimageCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_PreimageNotePreimageCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PreimageNotePreimageCall != nil {
		size, err := m.PreimageNotePreimageCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_PreimageRequestPreimageCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_PreimageRequestPreimageCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PreimageRequestPreimageCall != nil {
		size, err := m.PreimageRequestPreimageCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_PreimageUnnotePreimageCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_PreimageUnnotePreimageCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PreimageUnnotePreimageCall != nil {
		size, err := m.PreimageUnnotePreimageCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_PreimageUnrequestPreimageCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_PreimageUnrequestPreimageCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PreimageUnrequestPreimageCall != nil {
		size, err := m.PreimageUnrequestPreimageCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ProxyAddProxyCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_ProxyAddProxyCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProxyAddProxyCall != nil {
		size, err := m.ProxyAddProxyCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ProxyAnnounceCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_ProxyAnnounceCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProxyAnnounceCall != nil {
		size, err := m.ProxyAnnounceCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ProxyCreatePureCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_ProxyCreatePureCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProxyCreatePureCall != nil {
		size, err := m.ProxyCreatePureCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ProxyKillPureCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_ProxyKillPureCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProxyKillPureCall != nil {
		size, err := m.ProxyKillPureCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ProxyProxyAnnouncedCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_ProxyProxyAnnouncedCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProxyProxyAnnouncedCall != nil {
		size, err := m.ProxyProxyAnnouncedCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ProxyProxyCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_ProxyProxyCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProxyProxyCall != nil {
		size, err := m.ProxyProxyCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ProxyRejectAnnouncementCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_ProxyRejectAnnouncementCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProxyRejectAnnouncementCall != nil {
		size, err := m.ProxyRejectAnnouncementCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ProxyRemoveAnnouncementCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_ProxyRemoveAnnouncementCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProxyRemoveAnnouncementCall != nil {
		size, err := m.ProxyRemoveAnnouncementCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ProxyRemoveProxyCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_ProxyRemoveProxyCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProxyRemoveProxyCall != nil {
		size, err := m.ProxyRemoveProxyCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ReferendaCancelCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_ReferendaCancelCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ReferendaCancelCall != nil {
		size, err := m.ReferendaCancelCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ReferendaKillCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_ReferendaKillCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ReferendaKillCall != nil {
		size, err := m.ReferendaKillCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ReferendaNudgeReferendumCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_ReferendaNudgeReferendumCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ReferendaNudgeReferendumCall != nil {
		size, err := m.ReferendaNudgeReferendumCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ReferendaOneFewerDecidingCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_ReferendaOneFewerDecidingCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ReferendaOneFewerDecidingCall != nil {
		size, err := m.ReferendaOneFewerDecidingCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ReferendaPlaceDecisionDepositCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_ReferendaPlaceDecisionDepositCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ReferendaPlaceDecisionDepositCall != nil {
		size, err := m.ReferendaPlaceDecisionDepositCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ReferendaRefundDecisionDepositCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_ReferendaRefundDecisionDepositCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ReferendaRefundDecisionDepositCall != nil {
		size, err := m.ReferendaRefundDecisionDepositCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ReferendaRefundSubmissionDepositCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_ReferendaRefundSubmissionDepositCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ReferendaRefundSubmissionDepositCall != nil {
		size, err := m.ReferendaRefundSubmissionDepositCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ReferendaSetMetadataCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_ReferendaSetMetadataCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ReferendaSetMetadataCall != nil {
		size, err := m.ReferendaSetMetadataCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ReferendaSubmitCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_ReferendaSubmitCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ReferendaSubmitCall != nil {
		size, err := m.ReferendaSubmitCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_SchedulerCancelCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_SchedulerCancelCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SchedulerCancelCall != nil {
		size, err := m.SchedulerCancelCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_SchedulerCancelNamedCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_SchedulerCancelNamedCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SchedulerCancelNamedCall != nil {
		size, err := m.SchedulerCancelNamedCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_SchedulerScheduleAfterCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_SchedulerScheduleAfterCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SchedulerScheduleAfterCall != nil {
		size, err := m.SchedulerScheduleAfterCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_SchedulerScheduleCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_SchedulerScheduleCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SchedulerScheduleCall != nil {
		size, err := m.SchedulerScheduleCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_SchedulerScheduleNamedAfterCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_SchedulerScheduleNamedAfterCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SchedulerScheduleNamedAfterCall != nil {
		size, err := m.SchedulerScheduleNamedAfterCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_SchedulerScheduleNamedCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_SchedulerScheduleNamedCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SchedulerScheduleNamedCall != nil {
		size, err := m.SchedulerScheduleNamedCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_SessionSetKeysCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_SessionSetKeysCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SessionSetKeysCall != nil {
		size, err := m.SessionSetKeysCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_StakingrewardsAlignSupplyCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_StakingrewardsAlignSupplyCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StakingrewardsAlignSupplyCall != nil {
		size, err := m.StakingrewardsAlignSupplyCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_StakingrewardsForceRefillCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_StakingrewardsForceRefillCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StakingrewardsForceRefillCall != nil {
		size, err := m.StakingrewardsForceRefillCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_StakingrewardsRefillCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_StakingrewardsRefillCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StakingrewardsRefillCall != nil {
		size, err := m.StakingrewardsRefillCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_StakingrewardsWithdrawCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_StakingrewardsWithdrawCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StakingrewardsWithdrawCall != nil {
		size, err := m.StakingrewardsWithdrawCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_StakingBondCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_StakingBondCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StakingBondCall != nil {
		size, err := m.StakingBondCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_StakingBondExtraCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_StakingBondExtraCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StakingBondExtraCall != nil {
		size, err := m.StakingBondExtraCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_StakingCancelDeferredSlashCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_StakingCancelDeferredSlashCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StakingCancelDeferredSlashCall != nil {
		size, err := m.StakingCancelDeferredSlashCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_StakingChillOtherCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_StakingChillOtherCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StakingChillOtherCall != nil {
		size, err := m.StakingChillOtherCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_StakingForceApplyMinCommissionCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_StakingForceApplyMinCommissionCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StakingForceApplyMinCommissionCall != nil {
		size, err := m.StakingForceApplyMinCommissionCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_StakingForceUnstakeCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_StakingForceUnstakeCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StakingForceUnstakeCall != nil {
		size, err := m.StakingForceUnstakeCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_StakingIncreaseValidatorCountCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_StakingIncreaseValidatorCountCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StakingIncreaseValidatorCountCall != nil {
		size, err := m.StakingIncreaseValidatorCountCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_StakingKickCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_StakingKickCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StakingKickCall != nil {
		size, err := m.StakingKickCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_StakingNominateCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_StakingNominateCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StakingNominateCall != nil {
		size, err := m.StakingNominateCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_StakingPayoutStakersCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_StakingPayoutStakersCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StakingPayoutStakersCall != nil {
		size, err := m.StakingPayoutStakersCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_StakingReapStashCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_StakingReapStashCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StakingReapStashCall != nil {
		size, err := m.StakingReapStashCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_StakingRebondCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_StakingRebondCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StakingRebondCall != nil {
		size, err := m.StakingRebondCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_StakingScaleValidatorCountCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_StakingScaleValidatorCountCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StakingScaleValidatorCountCall != nil {
		size, err := m.StakingScaleValidatorCountCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_StakingSetInvulnerablesCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_StakingSetInvulnerablesCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StakingSetInvulnerablesCall != nil {
		size, err := m.StakingSetInvulnerablesCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_StakingSetMinCommissionCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_StakingSetMinCommissionCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StakingSetMinCommissionCall != nil {
		size, err := m.StakingSetMinCommissionCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_StakingSetPayeeCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_StakingSetPayeeCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StakingSetPayeeCall != nil {
		size, err := m.StakingSetPayeeCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_StakingSetStakingConfigsCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_StakingSetStakingConfigsCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StakingSetStakingConfigsCall != nil {
		size, err := m.StakingSetStakingConfigsCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_StakingSetValidatorCountCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_StakingSetValidatorCountCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StakingSetValidatorCountCall != nil {
		size, err := m.StakingSetValidatorCountCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_StakingUnbondCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_StakingUnbondCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StakingUnbondCall != nil {
		size, err := m.StakingUnbondCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_StakingValidateCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_StakingValidateCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StakingValidateCall != nil {
		size, err := m.StakingValidateCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_StakingWithdrawUnbondedCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_StakingWithdrawUnbondedCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StakingWithdrawUnbondedCall != nil {
		size, err := m.StakingWithdrawUnbondedCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_SystemKillPrefixCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_SystemKillPrefixCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SystemKillPrefixCall != nil {
		size, err := m.SystemKillPrefixCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_SystemKillStorageCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_SystemKillStorageCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SystemKillStorageCall != nil {
		size, err := m.SystemKillStorageCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_SystemRemarkCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_SystemRemarkCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SystemRemarkCall != nil {
		size, err := m.SystemRemarkCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_SystemRemarkWithEventCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_SystemRemarkWithEventCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SystemRemarkWithEventCall != nil {
		size, err := m.SystemRemarkWithEventCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_SystemSetCodeCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_SystemSetCodeCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SystemSetCodeCall != nil {
		size, err := m.SystemSetCodeCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_SystemSetCodeWithoutChecksCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_SystemSetCodeWithoutChecksCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SystemSetCodeWithoutChecksCall != nil {
		size, err := m.SystemSetCodeWithoutChecksCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_SystemSetHeapPagesCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_SystemSetHeapPagesCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SystemSetHeapPagesCall != nil {
		size, err := m.SystemSetHeapPagesCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_SystemSetStorageCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_SystemSetStorageCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SystemSetStorageCall != nil {
		size, err := m.SystemSetStorageCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_TimestampSetCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_TimestampSetCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TimestampSetCall != nil {
		size, err := m.TimestampSetCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_TreasuryApproveProposalCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_TreasuryApproveProposalCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TreasuryApproveProposalCall != nil {
		size, err := m.TreasuryApproveProposalCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xb
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_TreasuryCheckStatusCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_TreasuryCheckStatusCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TreasuryCheckStatusCall != nil {
		size, err := m.TreasuryCheckStatusCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xb
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_TreasuryPayoutCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_TreasuryPayoutCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TreasuryPayoutCall != nil {
		size, err := m.TreasuryPayoutCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xb
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_TreasuryProposeSpendCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_TreasuryProposeSpendCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TreasuryProposeSpendCall != nil {
		size, err := m.TreasuryProposeSpendCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xb
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_TreasuryRejectProposalCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_TreasuryRejectProposalCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TreasuryRejectProposalCall != nil {
		size, err := m.TreasuryRejectProposalCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xb
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_TreasuryRemoveApprovalCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_TreasuryRemoveApprovalCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TreasuryRemoveApprovalCall != nil {
		size, err := m.TreasuryRemoveApprovalCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xb
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_TreasurySpendCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_TreasurySpendCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TreasurySpendCall != nil {
		size, err := m.TreasurySpendCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xb
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_TreasurySpendLocalCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_TreasurySpendLocalCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TreasurySpendLocalCall != nil {
		size, err := m.TreasurySpendLocalCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xb
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_TreasuryVoidSpendCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_TreasuryVoidSpendCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TreasuryVoidSpendCall != nil {
		size, err := m.TreasuryVoidSpendCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xb
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_UtilityAsDerivativeCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_UtilityAsDerivativeCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UtilityAsDerivativeCall != nil {
		size, err := m.UtilityAsDerivativeCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xb
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_UtilityBatchAllCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_UtilityBatchAllCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UtilityBatchAllCall != nil {
		size, err := m.UtilityBatchAllCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xb
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_UtilityBatchCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_UtilityBatchCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UtilityBatchCall != nil {
		size, err := m.UtilityBatchCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xb
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_UtilityDispatchAsCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_UtilityDispatchAsCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UtilityDispatchAsCall != nil {
		size, err := m.UtilityDispatchAsCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xb
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_UtilityForceBatchCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_UtilityForceBatchCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UtilityForceBatchCall != nil {
		size, err := m.UtilityForceBatchCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xb
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_UtilityWithWeightCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_UtilityWithWeightCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UtilityWithWeightCall != nil {
		size, err := m.UtilityWithWeightCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xb
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_VestingForceVestedTransferCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_VestingForceVestedTransferCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VestingForceVestedTransferCall != nil {
		size, err := m.VestingForceVestedTransferCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xb
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_VestingMergeSchedulesCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_VestingMergeSchedulesCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VestingMergeSchedulesCall != nil {
		size, err := m.VestingMergeSchedulesCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_VestingVestOtherCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_VestingVestOtherCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VestingVestOtherCall != nil {
		size, err := m.VestingVestOtherCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_VestingVestedTransferCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_VestingVestedTransferCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VestingVestedTransferCall != nil {
		size, err := m.VestingVestedTransferCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_WhitelistDispatchWhitelistedCallCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_WhitelistDispatchWhitelistedCallCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WhitelistDispatchWhitelistedCallCall != nil {
		size, err := m.WhitelistDispatchWhitelistedCallCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_WhitelistDispatchWhitelistedCallWithPreimageCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_WhitelistDispatchWhitelistedCallWithPreimageCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WhitelistDispatchWhitelistedCallWithPreimageCall != nil {
		size, err := m.WhitelistDispatchWhitelistedCallWithPreimageCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_WhitelistRemoveWhitelistedCallCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_WhitelistRemoveWhitelistedCallCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WhitelistRemoveWhitelistedCallCall != nil {
		size, err := m.WhitelistRemoveWhitelistedCallCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_WhitelistWhitelistCallCall) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RuntimeCall_WhitelistWhitelistCallCall) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WhitelistWhitelistCallCall != nil {
		size, err := m.WhitelistWhitelistCallCall.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall) MarshalVTStrict() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVTStrict(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RuntimeCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if msg, ok := m.Call.(*RuntimeCall_WhitelistWhitelistCallCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_WhitelistRemoveWhitelistedCallCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_WhitelistDispatchWhitelistedCallWithPreimageCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_WhitelistDispatchWhitelistedCallCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_VestingVestedTransferCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_VestingVestOtherCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_VestingMergeSchedulesCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_VestingForceVestedTransferCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_UtilityWithWeightCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_UtilityForceBatchCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_UtilityDispatchAsCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_UtilityBatchCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_UtilityBatchAllCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_UtilityAsDerivativeCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_TreasuryVoidSpendCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_TreasurySpendLocalCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_TreasurySpendCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_TreasuryRemoveApprovalCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_TreasuryRejectProposalCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_TreasuryProposeSpendCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_TreasuryPayoutCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_TreasuryCheckStatusCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_TreasuryApproveProposalCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_TimestampSetCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_SystemSetStorageCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_SystemSetHeapPagesCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_SystemSetCodeWithoutChecksCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_SystemSetCodeCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_SystemRemarkWithEventCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_SystemRemarkCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_SystemKillStorageCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_SystemKillPrefixCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_StakingWithdrawUnbondedCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_StakingValidateCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_StakingUnbondCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_StakingSetValidatorCountCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_StakingSetStakingConfigsCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_StakingSetPayeeCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_StakingSetMinCommissionCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_StakingSetInvulnerablesCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_StakingScaleValidatorCountCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_StakingRebondCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_StakingReapStashCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_StakingPayoutStakersCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_StakingNominateCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_StakingKickCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_StakingIncreaseValidatorCountCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_StakingForceUnstakeCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_StakingForceApplyMinCommissionCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_StakingChillOtherCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_StakingCancelDeferredSlashCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_StakingBondExtraCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_StakingBondCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_StakingrewardsWithdrawCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_StakingrewardsRefillCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_StakingrewardsForceRefillCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_StakingrewardsAlignSupplyCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_SessionSetKeysCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_SchedulerScheduleNamedCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_SchedulerScheduleNamedAfterCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_SchedulerScheduleCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_SchedulerScheduleAfterCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_SchedulerCancelNamedCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_SchedulerCancelCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_ReferendaSubmitCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_ReferendaSetMetadataCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_ReferendaRefundSubmissionDepositCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_ReferendaRefundDecisionDepositCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_ReferendaPlaceDecisionDepositCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_ReferendaOneFewerDecidingCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_ReferendaNudgeReferendumCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_ReferendaKillCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_ReferendaCancelCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_ProxyRemoveProxyCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_ProxyRemoveAnnouncementCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_ProxyRejectAnnouncementCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_ProxyProxyCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_ProxyProxyAnnouncedCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_ProxyKillPureCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_ProxyCreatePureCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_ProxyAnnounceCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_ProxyAddProxyCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_PreimageUnrequestPreimageCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_PreimageUnnotePreimageCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_PreimageRequestPreimageCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_PreimageNotePreimageCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_PreimageEnsureUpdatedCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_NominationpoolsWithdrawUnbondedCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_NominationpoolsUpdateRolesCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_NominationpoolsUnbondCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_NominationpoolsSetStateCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_NominationpoolsSetMetadataCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_NominationpoolsSetConfigsCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_NominationpoolsSetCommissionMaxCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_NominationpoolsSetCommissionChangeRateCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_NominationpoolsSetCommissionCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_NominationpoolsSetClaimPermissionCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_NominationpoolsPoolWithdrawUnbondedCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_NominationpoolsNominateCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_NominationpoolsJoinCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_NominationpoolsCreateWithPoolIdCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_NominationpoolsCreateCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_NominationpoolsClaimPayoutOtherCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_NominationpoolsClaimCommissionCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_NominationpoolsChillCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_NominationpoolsBondExtraOtherCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_NominationpoolsBondExtraCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_NominationpoolsAdjustPoolDepositCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_MultisigCancelAsMultiCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_MultisigAsMultiThreshold_1Call); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_MultisigAsMultiCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_MultisigApproveAsMultiCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_ImonlineHeartbeatCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_IdentitySetSubsCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_IdentitySetIdentityCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_IdentitySetFieldsCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_IdentitySetFeeCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_IdentitySetAccountIdCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_IdentityRequestJudgementCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_IdentityRenameSubCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_IdentityRemoveSubCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_IdentityProvideJudgementCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_IdentityKillIdentityCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_IdentityCancelRequestCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_IdentityAddSubCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_IdentityAddRegistrarCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_GrandpaReportEquivocationUnsignedCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_GrandpaReportEquivocationCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_GrandpaNoteStalledCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_GearUploadProgramCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_GearUploadCodeCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_GearSetExecuteInherentCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_GearSendReplyCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_GearSendMessageCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_GearRunCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_GearCreateProgramCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_GearClaimValueCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_GearvoucherUpdateCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_GearvoucherRevokeCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_GearvoucherIssueCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_GearvoucherDeclineCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_GearvoucherCallDeprecatedCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_GearvoucherCallCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_FellowshipreferendaSubmitCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_FellowshipreferendaSetMetadataCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_FellowshipreferendaRefundSubmissionDepositCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_FellowshipreferendaRefundDecisionDepositCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_FellowshipreferendaPlaceDecisionDepositCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_FellowshipreferendaOneFewerDecidingCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_FellowshipreferendaNudgeReferendumCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_FellowshipreferendaKillCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_FellowshipreferendaCancelCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_FellowshipcollectiveVoteCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_FellowshipcollectiveRemoveMemberCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_FellowshipcollectivePromoteMemberCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_FellowshipcollectiveDemoteMemberCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_FellowshipcollectiveCleanupPollCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_FellowshipcollectiveAddMemberCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_ElectionprovidermultiphaseSubmitUnsignedCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_ElectionprovidermultiphaseSubmitCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_ElectionprovidermultiphaseSetMinimumUntrustedScoreCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_ElectionprovidermultiphaseSetEmergencyElectionResultCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_ElectionprovidermultiphaseGovernanceFallbackCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_ConvictionvotingVoteCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_ConvictionvotingUnlockCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_ConvictionvotingUndelegateCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_ConvictionvotingRemoveVoteCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_ConvictionvotingRemoveOtherVoteCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_ConvictionvotingDelegateCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_ChildbountiesUnassignCuratorCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_ChildbountiesProposeCuratorCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_ChildbountiesCloseChildBountyCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_ChildbountiesClaimChildBountyCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_ChildbountiesAwardChildBountyCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_ChildbountiesAddChildBountyCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_ChildbountiesAcceptCuratorCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_BountiesUnassignCuratorCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_BountiesProposeCuratorCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_BountiesProposeBountyCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_BountiesExtendBountyExpiryCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_BountiesCloseBountyCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_BountiesClaimBountyCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_BountiesAwardBountyCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_BountiesApproveBountyCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_BountiesAcceptCuratorCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_BalancesUpgradeAccountsCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_BalancesTransferKeepAliveCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_BalancesTransferAllowDeathCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_BalancesTransferAllCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_BalancesForceUnreserveCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_BalancesForceTransferCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_BalancesForceSetBalanceCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_BagslistRebagCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_BagslistPutInFrontOfOtherCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_BagslistPutInFrontOfCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_BabeReportEquivocationUnsignedCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_BabeReportEquivocationCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	if msg, ok := m.Call.(*RuntimeCall_BabePlanConfigChangeCall); ok {
		size, err := msg.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	return len(dAtA) - i, nil
}

func (m *RuntimeCall_BabePlanConfigChangeCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_BabePlanConfigChangeCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BabePlanConfigChangeCall != nil {
		size, err := m.BabePlanConfigChangeCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_BabeReportEquivocationCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_BabeReportEquivocationCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BabeReportEquivocationCall != nil {
		size, err := m.BabeReportEquivocationCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_BabeReportEquivocationUnsignedCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_BabeReportEquivocationUnsignedCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BabeReportEquivocationUnsignedCall != nil {
		size, err := m.BabeReportEquivocationUnsignedCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_BagslistPutInFrontOfCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_BagslistPutInFrontOfCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BagslistPutInFrontOfCall != nil {
		size, err := m.BagslistPutInFrontOfCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_BagslistPutInFrontOfOtherCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_BagslistPutInFrontOfOtherCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BagslistPutInFrontOfOtherCall != nil {
		size, err := m.BagslistPutInFrontOfOtherCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_BagslistRebagCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_BagslistRebagCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BagslistRebagCall != nil {
		size, err := m.BagslistRebagCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_BalancesForceSetBalanceCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_BalancesForceSetBalanceCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BalancesForceSetBalanceCall != nil {
		size, err := m.BalancesForceSetBalanceCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_BalancesForceTransferCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_BalancesForceTransferCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BalancesForceTransferCall != nil {
		size, err := m.BalancesForceTransferCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_BalancesForceUnreserveCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_BalancesForceUnreserveCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BalancesForceUnreserveCall != nil {
		size, err := m.BalancesForceUnreserveCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_BalancesTransferAllCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_BalancesTransferAllCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BalancesTransferAllCall != nil {
		size, err := m.BalancesTransferAllCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_BalancesTransferAllowDeathCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_BalancesTransferAllowDeathCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BalancesTransferAllowDeathCall != nil {
		size, err := m.BalancesTransferAllowDeathCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_BalancesTransferKeepAliveCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_BalancesTransferKeepAliveCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BalancesTransferKeepAliveCall != nil {
		size, err := m.BalancesTransferKeepAliveCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_BalancesUpgradeAccountsCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_BalancesUpgradeAccountsCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BalancesUpgradeAccountsCall != nil {
		size, err := m.BalancesUpgradeAccountsCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_BountiesAcceptCuratorCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_BountiesAcceptCuratorCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BountiesAcceptCuratorCall != nil {
		size, err := m.BountiesAcceptCuratorCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_BountiesApproveBountyCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_BountiesApproveBountyCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BountiesApproveBountyCall != nil {
		size, err := m.BountiesApproveBountyCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_BountiesAwardBountyCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_BountiesAwardBountyCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BountiesAwardBountyCall != nil {
		size, err := m.BountiesAwardBountyCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_BountiesClaimBountyCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_BountiesClaimBountyCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BountiesClaimBountyCall != nil {
		size, err := m.BountiesClaimBountyCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_BountiesCloseBountyCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_BountiesCloseBountyCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BountiesCloseBountyCall != nil {
		size, err := m.BountiesCloseBountyCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_BountiesExtendBountyExpiryCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_BountiesExtendBountyExpiryCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BountiesExtendBountyExpiryCall != nil {
		size, err := m.BountiesExtendBountyExpiryCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_BountiesProposeBountyCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_BountiesProposeBountyCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BountiesProposeBountyCall != nil {
		size, err := m.BountiesProposeBountyCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_BountiesProposeCuratorCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_BountiesProposeCuratorCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BountiesProposeCuratorCall != nil {
		size, err := m.BountiesProposeCuratorCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_BountiesUnassignCuratorCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_BountiesUnassignCuratorCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BountiesUnassignCuratorCall != nil {
		size, err := m.BountiesUnassignCuratorCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ChildbountiesAcceptCuratorCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_ChildbountiesAcceptCuratorCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ChildbountiesAcceptCuratorCall != nil {
		size, err := m.ChildbountiesAcceptCuratorCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ChildbountiesAddChildBountyCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_ChildbountiesAddChildBountyCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ChildbountiesAddChildBountyCall != nil {
		size, err := m.ChildbountiesAddChildBountyCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ChildbountiesAwardChildBountyCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_ChildbountiesAwardChildBountyCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ChildbountiesAwardChildBountyCall != nil {
		size, err := m.ChildbountiesAwardChildBountyCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ChildbountiesClaimChildBountyCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_ChildbountiesClaimChildBountyCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ChildbountiesClaimChildBountyCall != nil {
		size, err := m.ChildbountiesClaimChildBountyCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ChildbountiesCloseChildBountyCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_ChildbountiesCloseChildBountyCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ChildbountiesCloseChildBountyCall != nil {
		size, err := m.ChildbountiesCloseChildBountyCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ChildbountiesProposeCuratorCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_ChildbountiesProposeCuratorCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ChildbountiesProposeCuratorCall != nil {
		size, err := m.ChildbountiesProposeCuratorCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ChildbountiesUnassignCuratorCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_ChildbountiesUnassignCuratorCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ChildbountiesUnassignCuratorCall != nil {
		size, err := m.ChildbountiesUnassignCuratorCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ConvictionvotingDelegateCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_ConvictionvotingDelegateCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ConvictionvotingDelegateCall != nil {
		size, err := m.ConvictionvotingDelegateCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ConvictionvotingRemoveOtherVoteCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_ConvictionvotingRemoveOtherVoteCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ConvictionvotingRemoveOtherVoteCall != nil {
		size, err := m.ConvictionvotingRemoveOtherVoteCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ConvictionvotingRemoveVoteCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_ConvictionvotingRemoveVoteCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ConvictionvotingRemoveVoteCall != nil {
		size, err := m.ConvictionvotingRemoveVoteCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ConvictionvotingUndelegateCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_ConvictionvotingUndelegateCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ConvictionvotingUndelegateCall != nil {
		size, err := m.ConvictionvotingUndelegateCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ConvictionvotingUnlockCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_ConvictionvotingUnlockCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ConvictionvotingUnlockCall != nil {
		size, err := m.ConvictionvotingUnlockCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ConvictionvotingVoteCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_ConvictionvotingVoteCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ConvictionvotingVoteCall != nil {
		size, err := m.ConvictionvotingVoteCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ElectionprovidermultiphaseGovernanceFallbackCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_ElectionprovidermultiphaseGovernanceFallbackCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ElectionprovidermultiphaseGovernanceFallbackCall != nil {
		size, err := m.ElectionprovidermultiphaseGovernanceFallbackCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ElectionprovidermultiphaseSetEmergencyElectionResultCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_ElectionprovidermultiphaseSetEmergencyElectionResultCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ElectionprovidermultiphaseSetEmergencyElectionResultCall != nil {
		size, err := m.ElectionprovidermultiphaseSetEmergencyElectionResultCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ElectionprovidermultiphaseSetMinimumUntrustedScoreCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_ElectionprovidermultiphaseSetMinimumUntrustedScoreCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ElectionprovidermultiphaseSetMinimumUntrustedScoreCall != nil {
		size, err := m.ElectionprovidermultiphaseSetMinimumUntrustedScoreCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ElectionprovidermultiphaseSubmitCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_ElectionprovidermultiphaseSubmitCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ElectionprovidermultiphaseSubmitCall != nil {
		size, err := m.ElectionprovidermultiphaseSubmitCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ElectionprovidermultiphaseSubmitUnsignedCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_ElectionprovidermultiphaseSubmitUnsignedCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ElectionprovidermultiphaseSubmitUnsignedCall != nil {
		size, err := m.ElectionprovidermultiphaseSubmitUnsignedCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_FellowshipcollectiveAddMemberCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_FellowshipcollectiveAddMemberCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FellowshipcollectiveAddMemberCall != nil {
		size, err := m.FellowshipcollectiveAddMemberCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_FellowshipcollectiveCleanupPollCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_FellowshipcollectiveCleanupPollCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FellowshipcollectiveCleanupPollCall != nil {
		size, err := m.FellowshipcollectiveCleanupPollCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_FellowshipcollectiveDemoteMemberCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_FellowshipcollectiveDemoteMemberCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FellowshipcollectiveDemoteMemberCall != nil {
		size, err := m.FellowshipcollectiveDemoteMemberCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_FellowshipcollectivePromoteMemberCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_FellowshipcollectivePromoteMemberCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FellowshipcollectivePromoteMemberCall != nil {
		size, err := m.FellowshipcollectivePromoteMemberCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_FellowshipcollectiveRemoveMemberCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_FellowshipcollectiveRemoveMemberCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FellowshipcollectiveRemoveMemberCall != nil {
		size, err := m.FellowshipcollectiveRemoveMemberCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_FellowshipcollectiveVoteCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_FellowshipcollectiveVoteCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FellowshipcollectiveVoteCall != nil {
		size, err := m.FellowshipcollectiveVoteCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_FellowshipreferendaCancelCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_FellowshipreferendaCancelCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FellowshipreferendaCancelCall != nil {
		size, err := m.FellowshipreferendaCancelCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_FellowshipreferendaKillCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_FellowshipreferendaKillCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FellowshipreferendaKillCall != nil {
		size, err := m.FellowshipreferendaKillCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_FellowshipreferendaNudgeReferendumCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_FellowshipreferendaNudgeReferendumCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FellowshipreferendaNudgeReferendumCall != nil {
		size, err := m.FellowshipreferendaNudgeReferendumCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_FellowshipreferendaOneFewerDecidingCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_FellowshipreferendaOneFewerDecidingCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FellowshipreferendaOneFewerDecidingCall != nil {
		size, err := m.FellowshipreferendaOneFewerDecidingCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_FellowshipreferendaPlaceDecisionDepositCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_FellowshipreferendaPlaceDecisionDepositCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FellowshipreferendaPlaceDecisionDepositCall != nil {
		size, err := m.FellowshipreferendaPlaceDecisionDepositCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_FellowshipreferendaRefundDecisionDepositCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_FellowshipreferendaRefundDecisionDepositCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FellowshipreferendaRefundDecisionDepositCall != nil {
		size, err := m.FellowshipreferendaRefundDecisionDepositCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_FellowshipreferendaRefundSubmissionDepositCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_FellowshipreferendaRefundSubmissionDepositCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FellowshipreferendaRefundSubmissionDepositCall != nil {
		size, err := m.FellowshipreferendaRefundSubmissionDepositCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_FellowshipreferendaSetMetadataCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_FellowshipreferendaSetMetadataCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FellowshipreferendaSetMetadataCall != nil {
		size, err := m.FellowshipreferendaSetMetadataCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_FellowshipreferendaSubmitCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_FellowshipreferendaSubmitCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FellowshipreferendaSubmitCall != nil {
		size, err := m.FellowshipreferendaSubmitCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_GearvoucherCallCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_GearvoucherCallCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GearvoucherCallCall != nil {
		size, err := m.GearvoucherCallCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_GearvoucherCallDeprecatedCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_GearvoucherCallDeprecatedCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GearvoucherCallDeprecatedCall != nil {
		size, err := m.GearvoucherCallDeprecatedCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_GearvoucherDeclineCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_GearvoucherDeclineCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GearvoucherDeclineCall != nil {
		size, err := m.GearvoucherDeclineCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_GearvoucherIssueCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_GearvoucherIssueCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GearvoucherIssueCall != nil {
		size, err := m.GearvoucherIssueCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_GearvoucherRevokeCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_GearvoucherRevokeCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GearvoucherRevokeCall != nil {
		size, err := m.GearvoucherRevokeCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_GearvoucherUpdateCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_GearvoucherUpdateCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GearvoucherUpdateCall != nil {
		size, err := m.GearvoucherUpdateCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_GearClaimValueCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_GearClaimValueCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GearClaimValueCall != nil {
		size, err := m.GearClaimValueCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_GearCreateProgramCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_GearCreateProgramCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GearCreateProgramCall != nil {
		size, err := m.GearCreateProgramCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_GearRunCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_GearRunCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GearRunCall != nil {
		size, err := m.GearRunCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_GearSendMessageCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_GearSendMessageCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GearSendMessageCall != nil {
		size, err := m.GearSendMessageCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_GearSendReplyCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_GearSendReplyCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GearSendReplyCall != nil {
		size, err := m.GearSendReplyCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_GearSetExecuteInherentCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_GearSetExecuteInherentCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GearSetExecuteInherentCall != nil {
		size, err := m.GearSetExecuteInherentCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_GearUploadCodeCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_GearUploadCodeCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GearUploadCodeCall != nil {
		size, err := m.GearUploadCodeCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_GearUploadProgramCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_GearUploadProgramCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GearUploadProgramCall != nil {
		size, err := m.GearUploadProgramCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_GrandpaNoteStalledCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_GrandpaNoteStalledCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GrandpaNoteStalledCall != nil {
		size, err := m.GrandpaNoteStalledCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_GrandpaReportEquivocationCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_GrandpaReportEquivocationCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GrandpaReportEquivocationCall != nil {
		size, err := m.GrandpaReportEquivocationCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_GrandpaReportEquivocationUnsignedCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_GrandpaReportEquivocationUnsignedCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GrandpaReportEquivocationUnsignedCall != nil {
		size, err := m.GrandpaReportEquivocationUnsignedCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_IdentityAddRegistrarCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_IdentityAddRegistrarCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IdentityAddRegistrarCall != nil {
		size, err := m.IdentityAddRegistrarCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_IdentityAddSubCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_IdentityAddSubCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IdentityAddSubCall != nil {
		size, err := m.IdentityAddSubCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_IdentityCancelRequestCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_IdentityCancelRequestCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IdentityCancelRequestCall != nil {
		size, err := m.IdentityCancelRequestCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_IdentityKillIdentityCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_IdentityKillIdentityCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IdentityKillIdentityCall != nil {
		size, err := m.IdentityKillIdentityCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_IdentityProvideJudgementCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_IdentityProvideJudgementCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IdentityProvideJudgementCall != nil {
		size, err := m.IdentityProvideJudgementCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_IdentityRemoveSubCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_IdentityRemoveSubCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IdentityRemoveSubCall != nil {
		size, err := m.IdentityRemoveSubCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_IdentityRenameSubCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_IdentityRenameSubCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IdentityRenameSubCall != nil {
		size, err := m.IdentityRenameSubCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_IdentityRequestJudgementCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_IdentityRequestJudgementCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IdentityRequestJudgementCall != nil {
		size, err := m.IdentityRequestJudgementCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_IdentitySetAccountIdCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_IdentitySetAccountIdCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IdentitySetAccountIdCall != nil {
		size, err := m.IdentitySetAccountIdCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_IdentitySetFeeCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_IdentitySetFeeCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IdentitySetFeeCall != nil {
		size, err := m.IdentitySetFeeCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_IdentitySetFieldsCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_IdentitySetFieldsCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IdentitySetFieldsCall != nil {
		size, err := m.IdentitySetFieldsCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_IdentitySetIdentityCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_IdentitySetIdentityCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IdentitySetIdentityCall != nil {
		size, err := m.IdentitySetIdentityCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_IdentitySetSubsCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_IdentitySetSubsCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IdentitySetSubsCall != nil {
		size, err := m.IdentitySetSubsCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ImonlineHeartbeatCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_ImonlineHeartbeatCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ImonlineHeartbeatCall != nil {
		size, err := m.ImonlineHeartbeatCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_MultisigApproveAsMultiCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_MultisigApproveAsMultiCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MultisigApproveAsMultiCall != nil {
		size, err := m.MultisigApproveAsMultiCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_MultisigAsMultiCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_MultisigAsMultiCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MultisigAsMultiCall != nil {
		size, err := m.MultisigAsMultiCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_MultisigAsMultiThreshold_1Call) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_MultisigAsMultiThreshold_1Call) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MultisigAsMultiThreshold_1Call != nil {
		size, err := m.MultisigAsMultiThreshold_1Call.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_MultisigCancelAsMultiCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_MultisigCancelAsMultiCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MultisigCancelAsMultiCall != nil {
		size, err := m.MultisigCancelAsMultiCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_NominationpoolsAdjustPoolDepositCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_NominationpoolsAdjustPoolDepositCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NominationpoolsAdjustPoolDepositCall != nil {
		size, err := m.NominationpoolsAdjustPoolDepositCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_NominationpoolsBondExtraCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_NominationpoolsBondExtraCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NominationpoolsBondExtraCall != nil {
		size, err := m.NominationpoolsBondExtraCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_NominationpoolsBondExtraOtherCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_NominationpoolsBondExtraOtherCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NominationpoolsBondExtraOtherCall != nil {
		size, err := m.NominationpoolsBondExtraOtherCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_NominationpoolsChillCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_NominationpoolsChillCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NominationpoolsChillCall != nil {
		size, err := m.NominationpoolsChillCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_NominationpoolsClaimCommissionCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_NominationpoolsClaimCommissionCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NominationpoolsClaimCommissionCall != nil {
		size, err := m.NominationpoolsClaimCommissionCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_NominationpoolsClaimPayoutOtherCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_NominationpoolsClaimPayoutOtherCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NominationpoolsClaimPayoutOtherCall != nil {
		size, err := m.NominationpoolsClaimPayoutOtherCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_NominationpoolsCreateCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_NominationpoolsCreateCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NominationpoolsCreateCall != nil {
		size, err := m.NominationpoolsCreateCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_NominationpoolsCreateWithPoolIdCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_NominationpoolsCreateWithPoolIdCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NominationpoolsCreateWithPoolIdCall != nil {
		size, err := m.NominationpoolsCreateWithPoolIdCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_NominationpoolsJoinCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_NominationpoolsJoinCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NominationpoolsJoinCall != nil {
		size, err := m.NominationpoolsJoinCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_NominationpoolsNominateCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_NominationpoolsNominateCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NominationpoolsNominateCall != nil {
		size, err := m.NominationpoolsNominateCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_NominationpoolsPoolWithdrawUnbondedCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_NominationpoolsPoolWithdrawUnbondedCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NominationpoolsPoolWithdrawUnbondedCall != nil {
		size, err := m.NominationpoolsPoolWithdrawUnbondedCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_NominationpoolsSetClaimPermissionCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_NominationpoolsSetClaimPermissionCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NominationpoolsSetClaimPermissionCall != nil {
		size, err := m.NominationpoolsSetClaimPermissionCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_NominationpoolsSetCommissionCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_NominationpoolsSetCommissionCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NominationpoolsSetCommissionCall != nil {
		size, err := m.NominationpoolsSetCommissionCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_NominationpoolsSetCommissionChangeRateCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_NominationpoolsSetCommissionChangeRateCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NominationpoolsSetCommissionChangeRateCall != nil {
		size, err := m.NominationpoolsSetCommissionChangeRateCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_NominationpoolsSetCommissionMaxCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_NominationpoolsSetCommissionMaxCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NominationpoolsSetCommissionMaxCall != nil {
		size, err := m.NominationpoolsSetCommissionMaxCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_NominationpoolsSetConfigsCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_NominationpoolsSetConfigsCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NominationpoolsSetConfigsCall != nil {
		size, err := m.NominationpoolsSetConfigsCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_NominationpoolsSetMetadataCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_NominationpoolsSetMetadataCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NominationpoolsSetMetadataCall != nil {
		size, err := m.NominationpoolsSetMetadataCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_NominationpoolsSetStateCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_NominationpoolsSetStateCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NominationpoolsSetStateCall != nil {
		size, err := m.NominationpoolsSetStateCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_NominationpoolsUnbondCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_NominationpoolsUnbondCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NominationpoolsUnbondCall != nil {
		size, err := m.NominationpoolsUnbondCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_NominationpoolsUpdateRolesCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_NominationpoolsUpdateRolesCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NominationpoolsUpdateRolesCall != nil {
		size, err := m.NominationpoolsUpdateRolesCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_NominationpoolsWithdrawUnbondedCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_NominationpoolsWithdrawUnbondedCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NominationpoolsWithdrawUnbondedCall != nil {
		size, err := m.NominationpoolsWithdrawUnbondedCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_PreimageEnsureUpdatedCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_PreimageEnsureUpdatedCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PreimageEnsureUpdatedCall != nil {
		size, err := m.PreimageEnsureUpdatedCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_PreimageNotePreimageCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_PreimageNotePreimageCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PreimageNotePreimageCall != nil {
		size, err := m.PreimageNotePreimageCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_PreimageRequestPreimageCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_PreimageRequestPreimageCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PreimageRequestPreimageCall != nil {
		size, err := m.PreimageRequestPreimageCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_PreimageUnnotePreimageCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_PreimageUnnotePreimageCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PreimageUnnotePreimageCall != nil {
		size, err := m.PreimageUnnotePreimageCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_PreimageUnrequestPreimageCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_PreimageUnrequestPreimageCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PreimageUnrequestPreimageCall != nil {
		size, err := m.PreimageUnrequestPreimageCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ProxyAddProxyCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_ProxyAddProxyCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProxyAddProxyCall != nil {
		size, err := m.ProxyAddProxyCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ProxyAnnounceCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_ProxyAnnounceCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProxyAnnounceCall != nil {
		size, err := m.ProxyAnnounceCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ProxyCreatePureCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_ProxyCreatePureCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProxyCreatePureCall != nil {
		size, err := m.ProxyCreatePureCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ProxyKillPureCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_ProxyKillPureCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProxyKillPureCall != nil {
		size, err := m.ProxyKillPureCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ProxyProxyAnnouncedCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_ProxyProxyAnnouncedCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProxyProxyAnnouncedCall != nil {
		size, err := m.ProxyProxyAnnouncedCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ProxyProxyCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_ProxyProxyCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProxyProxyCall != nil {
		size, err := m.ProxyProxyCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ProxyRejectAnnouncementCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_ProxyRejectAnnouncementCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProxyRejectAnnouncementCall != nil {
		size, err := m.ProxyRejectAnnouncementCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ProxyRemoveAnnouncementCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_ProxyRemoveAnnouncementCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProxyRemoveAnnouncementCall != nil {
		size, err := m.ProxyRemoveAnnouncementCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ProxyRemoveProxyCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_ProxyRemoveProxyCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProxyRemoveProxyCall != nil {
		size, err := m.ProxyRemoveProxyCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ReferendaCancelCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_ReferendaCancelCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ReferendaCancelCall != nil {
		size, err := m.ReferendaCancelCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ReferendaKillCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_ReferendaKillCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ReferendaKillCall != nil {
		size, err := m.ReferendaKillCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ReferendaNudgeReferendumCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_ReferendaNudgeReferendumCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ReferendaNudgeReferendumCall != nil {
		size, err := m.ReferendaNudgeReferendumCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ReferendaOneFewerDecidingCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_ReferendaOneFewerDecidingCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ReferendaOneFewerDecidingCall != nil {
		size, err := m.ReferendaOneFewerDecidingCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ReferendaPlaceDecisionDepositCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_ReferendaPlaceDecisionDepositCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ReferendaPlaceDecisionDepositCall != nil {
		size, err := m.ReferendaPlaceDecisionDepositCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ReferendaRefundDecisionDepositCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_ReferendaRefundDecisionDepositCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ReferendaRefundDecisionDepositCall != nil {
		size, err := m.ReferendaRefundDecisionDepositCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ReferendaRefundSubmissionDepositCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_ReferendaRefundSubmissionDepositCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ReferendaRefundSubmissionDepositCall != nil {
		size, err := m.ReferendaRefundSubmissionDepositCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ReferendaSetMetadataCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_ReferendaSetMetadataCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ReferendaSetMetadataCall != nil {
		size, err := m.ReferendaSetMetadataCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_ReferendaSubmitCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_ReferendaSubmitCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ReferendaSubmitCall != nil {
		size, err := m.ReferendaSubmitCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_SchedulerCancelCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_SchedulerCancelCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SchedulerCancelCall != nil {
		size, err := m.SchedulerCancelCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_SchedulerCancelNamedCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_SchedulerCancelNamedCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SchedulerCancelNamedCall != nil {
		size, err := m.SchedulerCancelNamedCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_SchedulerScheduleAfterCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_SchedulerScheduleAfterCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SchedulerScheduleAfterCall != nil {
		size, err := m.SchedulerScheduleAfterCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_SchedulerScheduleCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_SchedulerScheduleCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SchedulerScheduleCall != nil {
		size, err := m.SchedulerScheduleCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_SchedulerScheduleNamedAfterCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_SchedulerScheduleNamedAfterCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SchedulerScheduleNamedAfterCall != nil {
		size, err := m.SchedulerScheduleNamedAfterCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_SchedulerScheduleNamedCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_SchedulerScheduleNamedCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SchedulerScheduleNamedCall != nil {
		size, err := m.SchedulerScheduleNamedCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_SessionSetKeysCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_SessionSetKeysCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SessionSetKeysCall != nil {
		size, err := m.SessionSetKeysCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_StakingrewardsAlignSupplyCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_StakingrewardsAlignSupplyCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StakingrewardsAlignSupplyCall != nil {
		size, err := m.StakingrewardsAlignSupplyCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_StakingrewardsForceRefillCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_StakingrewardsForceRefillCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StakingrewardsForceRefillCall != nil {
		size, err := m.StakingrewardsForceRefillCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x8
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_StakingrewardsRefillCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_StakingrewardsRefillCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StakingrewardsRefillCall != nil {
		size, err := m.StakingrewardsRefillCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_StakingrewardsWithdrawCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_StakingrewardsWithdrawCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StakingrewardsWithdrawCall != nil {
		size, err := m.StakingrewardsWithdrawCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_StakingBondCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_StakingBondCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StakingBondCall != nil {
		size, err := m.StakingBondCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_StakingBondExtraCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_StakingBondExtraCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StakingBondExtraCall != nil {
		size, err := m.StakingBondExtraCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_StakingCancelDeferredSlashCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_StakingCancelDeferredSlashCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StakingCancelDeferredSlashCall != nil {
		size, err := m.StakingCancelDeferredSlashCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_StakingChillOtherCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_StakingChillOtherCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StakingChillOtherCall != nil {
		size, err := m.StakingChillOtherCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_StakingForceApplyMinCommissionCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_StakingForceApplyMinCommissionCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StakingForceApplyMinCommissionCall != nil {
		size, err := m.StakingForceApplyMinCommissionCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_StakingForceUnstakeCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_StakingForceUnstakeCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StakingForceUnstakeCall != nil {
		size, err := m.StakingForceUnstakeCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_StakingIncreaseValidatorCountCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_StakingIncreaseValidatorCountCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StakingIncreaseValidatorCountCall != nil {
		size, err := m.StakingIncreaseValidatorCountCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_StakingKickCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_StakingKickCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StakingKickCall != nil {
		size, err := m.StakingKickCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_StakingNominateCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_StakingNominateCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StakingNominateCall != nil {
		size, err := m.StakingNominateCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_StakingPayoutStakersCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_StakingPayoutStakersCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StakingPayoutStakersCall != nil {
		size, err := m.StakingPayoutStakersCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_StakingReapStashCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_StakingReapStashCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StakingReapStashCall != nil {
		size, err := m.StakingReapStashCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_StakingRebondCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_StakingRebondCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StakingRebondCall != nil {
		size, err := m.StakingRebondCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_StakingScaleValidatorCountCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_StakingScaleValidatorCountCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StakingScaleValidatorCountCall != nil {
		size, err := m.StakingScaleValidatorCountCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_StakingSetInvulnerablesCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_StakingSetInvulnerablesCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StakingSetInvulnerablesCall != nil {
		size, err := m.StakingSetInvulnerablesCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x9
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_StakingSetMinCommissionCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_StakingSetMinCommissionCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StakingSetMinCommissionCall != nil {
		size, err := m.StakingSetMinCommissionCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_StakingSetPayeeCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_StakingSetPayeeCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StakingSetPayeeCall != nil {
		size, err := m.StakingSetPayeeCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_StakingSetStakingConfigsCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_StakingSetStakingConfigsCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StakingSetStakingConfigsCall != nil {
		size, err := m.StakingSetStakingConfigsCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_StakingSetValidatorCountCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_StakingSetValidatorCountCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StakingSetValidatorCountCall != nil {
		size, err := m.StakingSetValidatorCountCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_StakingUnbondCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_StakingUnbondCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StakingUnbondCall != nil {
		size, err := m.StakingUnbondCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_StakingValidateCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_StakingValidateCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StakingValidateCall != nil {
		size, err := m.StakingValidateCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_StakingWithdrawUnbondedCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_StakingWithdrawUnbondedCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StakingWithdrawUnbondedCall != nil {
		size, err := m.StakingWithdrawUnbondedCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_SystemKillPrefixCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_SystemKillPrefixCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SystemKillPrefixCall != nil {
		size, err := m.SystemKillPrefixCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_SystemKillStorageCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_SystemKillStorageCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SystemKillStorageCall != nil {
		size, err := m.SystemKillStorageCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_SystemRemarkCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_SystemRemarkCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SystemRemarkCall != nil {
		size, err := m.SystemRemarkCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_SystemRemarkWithEventCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_SystemRemarkWithEventCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SystemRemarkWithEventCall != nil {
		size, err := m.SystemRemarkWithEventCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_SystemSetCodeCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_SystemSetCodeCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SystemSetCodeCall != nil {
		size, err := m.SystemSetCodeCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_SystemSetCodeWithoutChecksCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_SystemSetCodeWithoutChecksCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SystemSetCodeWithoutChecksCall != nil {
		size, err := m.SystemSetCodeWithoutChecksCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_SystemSetHeapPagesCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_SystemSetHeapPagesCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SystemSetHeapPagesCall != nil {
		size, err := m.SystemSetHeapPagesCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_SystemSetStorageCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_SystemSetStorageCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SystemSetStorageCall != nil {
		size, err := m.SystemSetStorageCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_TimestampSetCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_TimestampSetCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TimestampSetCall != nil {
		size, err := m.TimestampSetCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_TreasuryApproveProposalCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_TreasuryApproveProposalCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TreasuryApproveProposalCall != nil {
		size, err := m.TreasuryApproveProposalCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xb
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_TreasuryCheckStatusCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_TreasuryCheckStatusCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TreasuryCheckStatusCall != nil {
		size, err := m.TreasuryCheckStatusCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xb
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_TreasuryPayoutCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_TreasuryPayoutCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TreasuryPayoutCall != nil {
		size, err := m.TreasuryPayoutCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xb
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_TreasuryProposeSpendCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_TreasuryProposeSpendCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TreasuryProposeSpendCall != nil {
		size, err := m.TreasuryProposeSpendCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xb
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_TreasuryRejectProposalCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_TreasuryRejectProposalCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TreasuryRejectProposalCall != nil {
		size, err := m.TreasuryRejectProposalCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xb
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_TreasuryRemoveApprovalCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_TreasuryRemoveApprovalCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TreasuryRemoveApprovalCall != nil {
		size, err := m.TreasuryRemoveApprovalCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xb
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_TreasurySpendCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_TreasurySpendCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TreasurySpendCall != nil {
		size, err := m.TreasurySpendCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xb
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_TreasurySpendLocalCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_TreasurySpendLocalCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TreasurySpendLocalCall != nil {
		size, err := m.TreasurySpendLocalCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xb
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_TreasuryVoidSpendCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_TreasuryVoidSpendCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TreasuryVoidSpendCall != nil {
		size, err := m.TreasuryVoidSpendCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xb
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_UtilityAsDerivativeCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_UtilityAsDerivativeCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UtilityAsDerivativeCall != nil {
		size, err := m.UtilityAsDerivativeCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xb
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_UtilityBatchAllCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_UtilityBatchAllCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UtilityBatchAllCall != nil {
		size, err := m.UtilityBatchAllCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xb
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_UtilityBatchCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_UtilityBatchCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UtilityBatchCall != nil {
		size, err := m.UtilityBatchCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xb
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_UtilityDispatchAsCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_UtilityDispatchAsCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UtilityDispatchAsCall != nil {
		size, err := m.UtilityDispatchAsCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xb
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_UtilityForceBatchCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_UtilityForceBatchCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UtilityForceBatchCall != nil {
		size, err := m.UtilityForceBatchCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xb
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_UtilityWithWeightCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_UtilityWithWeightCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UtilityWithWeightCall != nil {
		size, err := m.UtilityWithWeightCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xb
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_VestingForceVestedTransferCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_VestingForceVestedTransferCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VestingForceVestedTransferCall != nil {
		size, err := m.VestingForceVestedTransferCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xb
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_VestingMergeSchedulesCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_VestingMergeSchedulesCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VestingMergeSchedulesCall != nil {
		size, err := m.VestingMergeSchedulesCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_VestingVestOtherCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_VestingVestOtherCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VestingVestOtherCall != nil {
		size, err := m.VestingVestOtherCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_VestingVestedTransferCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_VestingVestedTransferCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.VestingVestedTransferCall != nil {
		size, err := m.VestingVestedTransferCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_WhitelistDispatchWhitelistedCallCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_WhitelistDispatchWhitelistedCallCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WhitelistDispatchWhitelistedCallCall != nil {
		size, err := m.WhitelistDispatchWhitelistedCallCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_WhitelistDispatchWhitelistedCallWithPreimageCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_WhitelistDispatchWhitelistedCallWithPreimageCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WhitelistDispatchWhitelistedCallWithPreimageCall != nil {
		size, err := m.WhitelistDispatchWhitelistedCallWithPreimageCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_WhitelistRemoveWhitelistedCallCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_WhitelistRemoveWhitelistedCallCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WhitelistRemoveWhitelistedCallCall != nil {
		size, err := m.WhitelistRemoveWhitelistedCallCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall_WhitelistWhitelistCallCall) MarshalToVTStrict(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVTStrict(dAtA[:size])
}

func (m *RuntimeCall_WhitelistWhitelistCallCall) MarshalToSizedBufferVTStrict(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WhitelistWhitelistCallCall != nil {
		size, err := m.WhitelistWhitelistCallCall.MarshalToSizedBufferVTStrict(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protohelpers.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *RuntimeCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if vtmsg, ok := m.Call.(interface{ SizeVT() int }); ok {
		n += vtmsg.SizeVT()
	}
	n += len(m.unknownFields)
	return n
}

func (m *RuntimeCall_BabePlanConfigChangeCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BabePlanConfigChangeCall != nil {
		l = m.BabePlanConfigChangeCall.SizeVT()
		n += 1 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_BabeReportEquivocationCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BabeReportEquivocationCall != nil {
		l = m.BabeReportEquivocationCall.SizeVT()
		n += 1 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_BabeReportEquivocationUnsignedCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BabeReportEquivocationUnsignedCall != nil {
		l = m.BabeReportEquivocationUnsignedCall.SizeVT()
		n += 1 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_BagslistPutInFrontOfCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BagslistPutInFrontOfCall != nil {
		l = m.BagslistPutInFrontOfCall.SizeVT()
		n += 1 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_BagslistPutInFrontOfOtherCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BagslistPutInFrontOfOtherCall != nil {
		l = m.BagslistPutInFrontOfOtherCall.SizeVT()
		n += 1 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_BagslistRebagCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BagslistRebagCall != nil {
		l = m.BagslistRebagCall.SizeVT()
		n += 1 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_BalancesForceSetBalanceCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BalancesForceSetBalanceCall != nil {
		l = m.BalancesForceSetBalanceCall.SizeVT()
		n += 1 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_BalancesForceTransferCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BalancesForceTransferCall != nil {
		l = m.BalancesForceTransferCall.SizeVT()
		n += 1 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_BalancesForceUnreserveCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BalancesForceUnreserveCall != nil {
		l = m.BalancesForceUnreserveCall.SizeVT()
		n += 1 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_BalancesTransferAllCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BalancesTransferAllCall != nil {
		l = m.BalancesTransferAllCall.SizeVT()
		n += 1 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_BalancesTransferAllowDeathCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BalancesTransferAllowDeathCall != nil {
		l = m.BalancesTransferAllowDeathCall.SizeVT()
		n += 1 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_BalancesTransferKeepAliveCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BalancesTransferKeepAliveCall != nil {
		l = m.BalancesTransferKeepAliveCall.SizeVT()
		n += 1 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_BalancesUpgradeAccountsCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BalancesUpgradeAccountsCall != nil {
		l = m.BalancesUpgradeAccountsCall.SizeVT()
		n += 1 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_BountiesAcceptCuratorCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BountiesAcceptCuratorCall != nil {
		l = m.BountiesAcceptCuratorCall.SizeVT()
		n += 1 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_BountiesApproveBountyCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BountiesApproveBountyCall != nil {
		l = m.BountiesApproveBountyCall.SizeVT()
		n += 1 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_BountiesAwardBountyCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BountiesAwardBountyCall != nil {
		l = m.BountiesAwardBountyCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_BountiesClaimBountyCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BountiesClaimBountyCall != nil {
		l = m.BountiesClaimBountyCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_BountiesCloseBountyCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BountiesCloseBountyCall != nil {
		l = m.BountiesCloseBountyCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_BountiesExtendBountyExpiryCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BountiesExtendBountyExpiryCall != nil {
		l = m.BountiesExtendBountyExpiryCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_BountiesProposeBountyCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BountiesProposeBountyCall != nil {
		l = m.BountiesProposeBountyCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_BountiesProposeCuratorCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BountiesProposeCuratorCall != nil {
		l = m.BountiesProposeCuratorCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_BountiesUnassignCuratorCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BountiesUnassignCuratorCall != nil {
		l = m.BountiesUnassignCuratorCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_ChildbountiesAcceptCuratorCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChildbountiesAcceptCuratorCall != nil {
		l = m.ChildbountiesAcceptCuratorCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_ChildbountiesAddChildBountyCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChildbountiesAddChildBountyCall != nil {
		l = m.ChildbountiesAddChildBountyCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_ChildbountiesAwardChildBountyCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChildbountiesAwardChildBountyCall != nil {
		l = m.ChildbountiesAwardChildBountyCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_ChildbountiesClaimChildBountyCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChildbountiesClaimChildBountyCall != nil {
		l = m.ChildbountiesClaimChildBountyCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_ChildbountiesCloseChildBountyCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChildbountiesCloseChildBountyCall != nil {
		l = m.ChildbountiesCloseChildBountyCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_ChildbountiesProposeCuratorCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChildbountiesProposeCuratorCall != nil {
		l = m.ChildbountiesProposeCuratorCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_ChildbountiesUnassignCuratorCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChildbountiesUnassignCuratorCall != nil {
		l = m.ChildbountiesUnassignCuratorCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_ConvictionvotingDelegateCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConvictionvotingDelegateCall != nil {
		l = m.ConvictionvotingDelegateCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_ConvictionvotingRemoveOtherVoteCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConvictionvotingRemoveOtherVoteCall != nil {
		l = m.ConvictionvotingRemoveOtherVoteCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_ConvictionvotingRemoveVoteCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConvictionvotingRemoveVoteCall != nil {
		l = m.ConvictionvotingRemoveVoteCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_ConvictionvotingUndelegateCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConvictionvotingUndelegateCall != nil {
		l = m.ConvictionvotingUndelegateCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_ConvictionvotingUnlockCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConvictionvotingUnlockCall != nil {
		l = m.ConvictionvotingUnlockCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_ConvictionvotingVoteCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConvictionvotingVoteCall != nil {
		l = m.ConvictionvotingVoteCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_ElectionprovidermultiphaseGovernanceFallbackCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ElectionprovidermultiphaseGovernanceFallbackCall != nil {
		l = m.ElectionprovidermultiphaseGovernanceFallbackCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_ElectionprovidermultiphaseSetEmergencyElectionResultCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ElectionprovidermultiphaseSetEmergencyElectionResultCall != nil {
		l = m.ElectionprovidermultiphaseSetEmergencyElectionResultCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_ElectionprovidermultiphaseSetMinimumUntrustedScoreCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ElectionprovidermultiphaseSetMinimumUntrustedScoreCall != nil {
		l = m.ElectionprovidermultiphaseSetMinimumUntrustedScoreCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_ElectionprovidermultiphaseSubmitCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ElectionprovidermultiphaseSubmitCall != nil {
		l = m.ElectionprovidermultiphaseSubmitCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_ElectionprovidermultiphaseSubmitUnsignedCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ElectionprovidermultiphaseSubmitUnsignedCall != nil {
		l = m.ElectionprovidermultiphaseSubmitUnsignedCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_FellowshipcollectiveAddMemberCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FellowshipcollectiveAddMemberCall != nil {
		l = m.FellowshipcollectiveAddMemberCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_FellowshipcollectiveCleanupPollCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FellowshipcollectiveCleanupPollCall != nil {
		l = m.FellowshipcollectiveCleanupPollCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_FellowshipcollectiveDemoteMemberCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FellowshipcollectiveDemoteMemberCall != nil {
		l = m.FellowshipcollectiveDemoteMemberCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_FellowshipcollectivePromoteMemberCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FellowshipcollectivePromoteMemberCall != nil {
		l = m.FellowshipcollectivePromoteMemberCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_FellowshipcollectiveRemoveMemberCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FellowshipcollectiveRemoveMemberCall != nil {
		l = m.FellowshipcollectiveRemoveMemberCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_FellowshipcollectiveVoteCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FellowshipcollectiveVoteCall != nil {
		l = m.FellowshipcollectiveVoteCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_FellowshipreferendaCancelCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FellowshipreferendaCancelCall != nil {
		l = m.FellowshipreferendaCancelCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_FellowshipreferendaKillCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FellowshipreferendaKillCall != nil {
		l = m.FellowshipreferendaKillCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_FellowshipreferendaNudgeReferendumCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FellowshipreferendaNudgeReferendumCall != nil {
		l = m.FellowshipreferendaNudgeReferendumCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_FellowshipreferendaOneFewerDecidingCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FellowshipreferendaOneFewerDecidingCall != nil {
		l = m.FellowshipreferendaOneFewerDecidingCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_FellowshipreferendaPlaceDecisionDepositCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FellowshipreferendaPlaceDecisionDepositCall != nil {
		l = m.FellowshipreferendaPlaceDecisionDepositCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_FellowshipreferendaRefundDecisionDepositCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FellowshipreferendaRefundDecisionDepositCall != nil {
		l = m.FellowshipreferendaRefundDecisionDepositCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_FellowshipreferendaRefundSubmissionDepositCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FellowshipreferendaRefundSubmissionDepositCall != nil {
		l = m.FellowshipreferendaRefundSubmissionDepositCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_FellowshipreferendaSetMetadataCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FellowshipreferendaSetMetadataCall != nil {
		l = m.FellowshipreferendaSetMetadataCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_FellowshipreferendaSubmitCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FellowshipreferendaSubmitCall != nil {
		l = m.FellowshipreferendaSubmitCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_GearvoucherCallCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GearvoucherCallCall != nil {
		l = m.GearvoucherCallCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_GearvoucherCallDeprecatedCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GearvoucherCallDeprecatedCall != nil {
		l = m.GearvoucherCallDeprecatedCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_GearvoucherDeclineCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GearvoucherDeclineCall != nil {
		l = m.GearvoucherDeclineCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_GearvoucherIssueCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GearvoucherIssueCall != nil {
		l = m.GearvoucherIssueCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_GearvoucherRevokeCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GearvoucherRevokeCall != nil {
		l = m.GearvoucherRevokeCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_GearvoucherUpdateCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GearvoucherUpdateCall != nil {
		l = m.GearvoucherUpdateCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_GearClaimValueCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GearClaimValueCall != nil {
		l = m.GearClaimValueCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_GearCreateProgramCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GearCreateProgramCall != nil {
		l = m.GearCreateProgramCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_GearRunCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GearRunCall != nil {
		l = m.GearRunCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_GearSendMessageCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GearSendMessageCall != nil {
		l = m.GearSendMessageCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_GearSendReplyCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GearSendReplyCall != nil {
		l = m.GearSendReplyCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_GearSetExecuteInherentCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GearSetExecuteInherentCall != nil {
		l = m.GearSetExecuteInherentCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_GearUploadCodeCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GearUploadCodeCall != nil {
		l = m.GearUploadCodeCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_GearUploadProgramCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GearUploadProgramCall != nil {
		l = m.GearUploadProgramCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_GrandpaNoteStalledCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GrandpaNoteStalledCall != nil {
		l = m.GrandpaNoteStalledCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_GrandpaReportEquivocationCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GrandpaReportEquivocationCall != nil {
		l = m.GrandpaReportEquivocationCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_GrandpaReportEquivocationUnsignedCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GrandpaReportEquivocationUnsignedCall != nil {
		l = m.GrandpaReportEquivocationUnsignedCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_IdentityAddRegistrarCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IdentityAddRegistrarCall != nil {
		l = m.IdentityAddRegistrarCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_IdentityAddSubCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IdentityAddSubCall != nil {
		l = m.IdentityAddSubCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_IdentityCancelRequestCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IdentityCancelRequestCall != nil {
		l = m.IdentityCancelRequestCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_IdentityKillIdentityCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IdentityKillIdentityCall != nil {
		l = m.IdentityKillIdentityCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_IdentityProvideJudgementCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IdentityProvideJudgementCall != nil {
		l = m.IdentityProvideJudgementCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_IdentityRemoveSubCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IdentityRemoveSubCall != nil {
		l = m.IdentityRemoveSubCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_IdentityRenameSubCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IdentityRenameSubCall != nil {
		l = m.IdentityRenameSubCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_IdentityRequestJudgementCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IdentityRequestJudgementCall != nil {
		l = m.IdentityRequestJudgementCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_IdentitySetAccountIdCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IdentitySetAccountIdCall != nil {
		l = m.IdentitySetAccountIdCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_IdentitySetFeeCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IdentitySetFeeCall != nil {
		l = m.IdentitySetFeeCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_IdentitySetFieldsCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IdentitySetFieldsCall != nil {
		l = m.IdentitySetFieldsCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_IdentitySetIdentityCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IdentitySetIdentityCall != nil {
		l = m.IdentitySetIdentityCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_IdentitySetSubsCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IdentitySetSubsCall != nil {
		l = m.IdentitySetSubsCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_ImonlineHeartbeatCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ImonlineHeartbeatCall != nil {
		l = m.ImonlineHeartbeatCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_MultisigApproveAsMultiCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MultisigApproveAsMultiCall != nil {
		l = m.MultisigApproveAsMultiCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_MultisigAsMultiCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MultisigAsMultiCall != nil {
		l = m.MultisigAsMultiCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_MultisigAsMultiThreshold_1Call) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MultisigAsMultiThreshold_1Call != nil {
		l = m.MultisigAsMultiThreshold_1Call.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_MultisigCancelAsMultiCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MultisigCancelAsMultiCall != nil {
		l = m.MultisigCancelAsMultiCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_NominationpoolsAdjustPoolDepositCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NominationpoolsAdjustPoolDepositCall != nil {
		l = m.NominationpoolsAdjustPoolDepositCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_NominationpoolsBondExtraCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NominationpoolsBondExtraCall != nil {
		l = m.NominationpoolsBondExtraCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_NominationpoolsBondExtraOtherCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NominationpoolsBondExtraOtherCall != nil {
		l = m.NominationpoolsBondExtraOtherCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_NominationpoolsChillCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NominationpoolsChillCall != nil {
		l = m.NominationpoolsChillCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_NominationpoolsClaimCommissionCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NominationpoolsClaimCommissionCall != nil {
		l = m.NominationpoolsClaimCommissionCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_NominationpoolsClaimPayoutOtherCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NominationpoolsClaimPayoutOtherCall != nil {
		l = m.NominationpoolsClaimPayoutOtherCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_NominationpoolsCreateCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NominationpoolsCreateCall != nil {
		l = m.NominationpoolsCreateCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_NominationpoolsCreateWithPoolIdCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NominationpoolsCreateWithPoolIdCall != nil {
		l = m.NominationpoolsCreateWithPoolIdCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_NominationpoolsJoinCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NominationpoolsJoinCall != nil {
		l = m.NominationpoolsJoinCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_NominationpoolsNominateCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NominationpoolsNominateCall != nil {
		l = m.NominationpoolsNominateCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_NominationpoolsPoolWithdrawUnbondedCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NominationpoolsPoolWithdrawUnbondedCall != nil {
		l = m.NominationpoolsPoolWithdrawUnbondedCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_NominationpoolsSetClaimPermissionCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NominationpoolsSetClaimPermissionCall != nil {
		l = m.NominationpoolsSetClaimPermissionCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_NominationpoolsSetCommissionCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NominationpoolsSetCommissionCall != nil {
		l = m.NominationpoolsSetCommissionCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_NominationpoolsSetCommissionChangeRateCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NominationpoolsSetCommissionChangeRateCall != nil {
		l = m.NominationpoolsSetCommissionChangeRateCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_NominationpoolsSetCommissionMaxCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NominationpoolsSetCommissionMaxCall != nil {
		l = m.NominationpoolsSetCommissionMaxCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_NominationpoolsSetConfigsCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NominationpoolsSetConfigsCall != nil {
		l = m.NominationpoolsSetConfigsCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_NominationpoolsSetMetadataCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NominationpoolsSetMetadataCall != nil {
		l = m.NominationpoolsSetMetadataCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_NominationpoolsSetStateCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NominationpoolsSetStateCall != nil {
		l = m.NominationpoolsSetStateCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_NominationpoolsUnbondCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NominationpoolsUnbondCall != nil {
		l = m.NominationpoolsUnbondCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_NominationpoolsUpdateRolesCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NominationpoolsUpdateRolesCall != nil {
		l = m.NominationpoolsUpdateRolesCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_NominationpoolsWithdrawUnbondedCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NominationpoolsWithdrawUnbondedCall != nil {
		l = m.NominationpoolsWithdrawUnbondedCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_PreimageEnsureUpdatedCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PreimageEnsureUpdatedCall != nil {
		l = m.PreimageEnsureUpdatedCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_PreimageNotePreimageCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PreimageNotePreimageCall != nil {
		l = m.PreimageNotePreimageCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_PreimageRequestPreimageCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PreimageRequestPreimageCall != nil {
		l = m.PreimageRequestPreimageCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_PreimageUnnotePreimageCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PreimageUnnotePreimageCall != nil {
		l = m.PreimageUnnotePreimageCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_PreimageUnrequestPreimageCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PreimageUnrequestPreimageCall != nil {
		l = m.PreimageUnrequestPreimageCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_ProxyAddProxyCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProxyAddProxyCall != nil {
		l = m.ProxyAddProxyCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_ProxyAnnounceCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProxyAnnounceCall != nil {
		l = m.ProxyAnnounceCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_ProxyCreatePureCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProxyCreatePureCall != nil {
		l = m.ProxyCreatePureCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_ProxyKillPureCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProxyKillPureCall != nil {
		l = m.ProxyKillPureCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_ProxyProxyAnnouncedCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProxyProxyAnnouncedCall != nil {
		l = m.ProxyProxyAnnouncedCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_ProxyProxyCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProxyProxyCall != nil {
		l = m.ProxyProxyCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_ProxyRejectAnnouncementCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProxyRejectAnnouncementCall != nil {
		l = m.ProxyRejectAnnouncementCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_ProxyRemoveAnnouncementCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProxyRemoveAnnouncementCall != nil {
		l = m.ProxyRemoveAnnouncementCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_ProxyRemoveProxyCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProxyRemoveProxyCall != nil {
		l = m.ProxyRemoveProxyCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_ReferendaCancelCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReferendaCancelCall != nil {
		l = m.ReferendaCancelCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_ReferendaKillCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReferendaKillCall != nil {
		l = m.ReferendaKillCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_ReferendaNudgeReferendumCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReferendaNudgeReferendumCall != nil {
		l = m.ReferendaNudgeReferendumCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_ReferendaOneFewerDecidingCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReferendaOneFewerDecidingCall != nil {
		l = m.ReferendaOneFewerDecidingCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_ReferendaPlaceDecisionDepositCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReferendaPlaceDecisionDepositCall != nil {
		l = m.ReferendaPlaceDecisionDepositCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_ReferendaRefundDecisionDepositCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReferendaRefundDecisionDepositCall != nil {
		l = m.ReferendaRefundDecisionDepositCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_ReferendaRefundSubmissionDepositCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReferendaRefundSubmissionDepositCall != nil {
		l = m.ReferendaRefundSubmissionDepositCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_ReferendaSetMetadataCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReferendaSetMetadataCall != nil {
		l = m.ReferendaSetMetadataCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_ReferendaSubmitCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReferendaSubmitCall != nil {
		l = m.ReferendaSubmitCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_SchedulerCancelCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SchedulerCancelCall != nil {
		l = m.SchedulerCancelCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_SchedulerCancelNamedCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SchedulerCancelNamedCall != nil {
		l = m.SchedulerCancelNamedCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_SchedulerScheduleAfterCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SchedulerScheduleAfterCall != nil {
		l = m.SchedulerScheduleAfterCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_SchedulerScheduleCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SchedulerScheduleCall != nil {
		l = m.SchedulerScheduleCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_SchedulerScheduleNamedAfterCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SchedulerScheduleNamedAfterCall != nil {
		l = m.SchedulerScheduleNamedAfterCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_SchedulerScheduleNamedCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SchedulerScheduleNamedCall != nil {
		l = m.SchedulerScheduleNamedCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_SessionSetKeysCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SessionSetKeysCall != nil {
		l = m.SessionSetKeysCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_StakingrewardsAlignSupplyCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StakingrewardsAlignSupplyCall != nil {
		l = m.StakingrewardsAlignSupplyCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_StakingrewardsForceRefillCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StakingrewardsForceRefillCall != nil {
		l = m.StakingrewardsForceRefillCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_StakingrewardsRefillCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StakingrewardsRefillCall != nil {
		l = m.StakingrewardsRefillCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_StakingrewardsWithdrawCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StakingrewardsWithdrawCall != nil {
		l = m.StakingrewardsWithdrawCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_StakingBondCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StakingBondCall != nil {
		l = m.StakingBondCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_StakingBondExtraCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StakingBondExtraCall != nil {
		l = m.StakingBondExtraCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_StakingCancelDeferredSlashCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StakingCancelDeferredSlashCall != nil {
		l = m.StakingCancelDeferredSlashCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_StakingChillOtherCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StakingChillOtherCall != nil {
		l = m.StakingChillOtherCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_StakingForceApplyMinCommissionCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StakingForceApplyMinCommissionCall != nil {
		l = m.StakingForceApplyMinCommissionCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_StakingForceUnstakeCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StakingForceUnstakeCall != nil {
		l = m.StakingForceUnstakeCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_StakingIncreaseValidatorCountCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StakingIncreaseValidatorCountCall != nil {
		l = m.StakingIncreaseValidatorCountCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_StakingKickCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StakingKickCall != nil {
		l = m.StakingKickCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_StakingNominateCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StakingNominateCall != nil {
		l = m.StakingNominateCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_StakingPayoutStakersCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StakingPayoutStakersCall != nil {
		l = m.StakingPayoutStakersCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_StakingReapStashCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StakingReapStashCall != nil {
		l = m.StakingReapStashCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_StakingRebondCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StakingRebondCall != nil {
		l = m.StakingRebondCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_StakingScaleValidatorCountCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StakingScaleValidatorCountCall != nil {
		l = m.StakingScaleValidatorCountCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_StakingSetInvulnerablesCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StakingSetInvulnerablesCall != nil {
		l = m.StakingSetInvulnerablesCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_StakingSetMinCommissionCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StakingSetMinCommissionCall != nil {
		l = m.StakingSetMinCommissionCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_StakingSetPayeeCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StakingSetPayeeCall != nil {
		l = m.StakingSetPayeeCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_StakingSetStakingConfigsCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StakingSetStakingConfigsCall != nil {
		l = m.StakingSetStakingConfigsCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_StakingSetValidatorCountCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StakingSetValidatorCountCall != nil {
		l = m.StakingSetValidatorCountCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_StakingUnbondCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StakingUnbondCall != nil {
		l = m.StakingUnbondCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_StakingValidateCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StakingValidateCall != nil {
		l = m.StakingValidateCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_StakingWithdrawUnbondedCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StakingWithdrawUnbondedCall != nil {
		l = m.StakingWithdrawUnbondedCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_SystemKillPrefixCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SystemKillPrefixCall != nil {
		l = m.SystemKillPrefixCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_SystemKillStorageCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SystemKillStorageCall != nil {
		l = m.SystemKillStorageCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_SystemRemarkCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SystemRemarkCall != nil {
		l = m.SystemRemarkCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_SystemRemarkWithEventCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SystemRemarkWithEventCall != nil {
		l = m.SystemRemarkWithEventCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_SystemSetCodeCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SystemSetCodeCall != nil {
		l = m.SystemSetCodeCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_SystemSetCodeWithoutChecksCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SystemSetCodeWithoutChecksCall != nil {
		l = m.SystemSetCodeWithoutChecksCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_SystemSetHeapPagesCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SystemSetHeapPagesCall != nil {
		l = m.SystemSetHeapPagesCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_SystemSetStorageCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SystemSetStorageCall != nil {
		l = m.SystemSetStorageCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_TimestampSetCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TimestampSetCall != nil {
		l = m.TimestampSetCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_TreasuryApproveProposalCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TreasuryApproveProposalCall != nil {
		l = m.TreasuryApproveProposalCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_TreasuryCheckStatusCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TreasuryCheckStatusCall != nil {
		l = m.TreasuryCheckStatusCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_TreasuryPayoutCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TreasuryPayoutCall != nil {
		l = m.TreasuryPayoutCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_TreasuryProposeSpendCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TreasuryProposeSpendCall != nil {
		l = m.TreasuryProposeSpendCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_TreasuryRejectProposalCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TreasuryRejectProposalCall != nil {
		l = m.TreasuryRejectProposalCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_TreasuryRemoveApprovalCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TreasuryRemoveApprovalCall != nil {
		l = m.TreasuryRemoveApprovalCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_TreasurySpendCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TreasurySpendCall != nil {
		l = m.TreasurySpendCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_TreasurySpendLocalCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TreasurySpendLocalCall != nil {
		l = m.TreasurySpendLocalCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_TreasuryVoidSpendCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TreasuryVoidSpendCall != nil {
		l = m.TreasuryVoidSpendCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_UtilityAsDerivativeCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UtilityAsDerivativeCall != nil {
		l = m.UtilityAsDerivativeCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_UtilityBatchAllCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UtilityBatchAllCall != nil {
		l = m.UtilityBatchAllCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_UtilityBatchCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UtilityBatchCall != nil {
		l = m.UtilityBatchCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_UtilityDispatchAsCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UtilityDispatchAsCall != nil {
		l = m.UtilityDispatchAsCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_UtilityForceBatchCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UtilityForceBatchCall != nil {
		l = m.UtilityForceBatchCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_UtilityWithWeightCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UtilityWithWeightCall != nil {
		l = m.UtilityWithWeightCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_VestingForceVestedTransferCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VestingForceVestedTransferCall != nil {
		l = m.VestingForceVestedTransferCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_VestingMergeSchedulesCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VestingMergeSchedulesCall != nil {
		l = m.VestingMergeSchedulesCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_VestingVestOtherCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VestingVestOtherCall != nil {
		l = m.VestingVestOtherCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_VestingVestedTransferCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VestingVestedTransferCall != nil {
		l = m.VestingVestedTransferCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_WhitelistDispatchWhitelistedCallCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WhitelistDispatchWhitelistedCallCall != nil {
		l = m.WhitelistDispatchWhitelistedCallCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_WhitelistDispatchWhitelistedCallWithPreimageCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WhitelistDispatchWhitelistedCallWithPreimageCall != nil {
		l = m.WhitelistDispatchWhitelistedCallWithPreimageCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_WhitelistRemoveWhitelistedCallCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WhitelistRemoveWhitelistedCallCall != nil {
		l = m.WhitelistRemoveWhitelistedCallCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall_WhitelistWhitelistCallCall) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WhitelistWhitelistCallCall != nil {
		l = m.WhitelistWhitelistCallCall.SizeVT()
		n += 2 + l + protohelpers.SizeOfVarint(uint64(l))
	}
	return n
}
func (m *RuntimeCall) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protohelpers.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RuntimeCall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RuntimeCall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BabePlanConfigChangeCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_BabePlanConfigChangeCall); ok {
				if err := oneof.BabePlanConfigChangeCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Babe_PlanConfigChangeCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_BabePlanConfigChangeCall{BabePlanConfigChangeCall: v}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BabeReportEquivocationCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_BabeReportEquivocationCall); ok {
				if err := oneof.BabeReportEquivocationCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Babe_ReportEquivocationCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_BabeReportEquivocationCall{BabeReportEquivocationCall: v}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BabeReportEquivocationUnsignedCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_BabeReportEquivocationUnsignedCall); ok {
				if err := oneof.BabeReportEquivocationUnsignedCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Babe_ReportEquivocationUnsignedCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_BabeReportEquivocationUnsignedCall{BabeReportEquivocationUnsignedCall: v}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BagslistPutInFrontOfCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_BagslistPutInFrontOfCall); ok {
				if err := oneof.BagslistPutInFrontOfCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.BagsList_PutInFrontOfCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_BagslistPutInFrontOfCall{BagslistPutInFrontOfCall: v}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BagslistPutInFrontOfOtherCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_BagslistPutInFrontOfOtherCall); ok {
				if err := oneof.BagslistPutInFrontOfOtherCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.BagsList_PutInFrontOfOtherCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_BagslistPutInFrontOfOtherCall{BagslistPutInFrontOfOtherCall: v}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BagslistRebagCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_BagslistRebagCall); ok {
				if err := oneof.BagslistRebagCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.BagsList_RebagCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_BagslistRebagCall{BagslistRebagCall: v}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BalancesForceSetBalanceCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_BalancesForceSetBalanceCall); ok {
				if err := oneof.BalancesForceSetBalanceCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Balances_ForceSetBalanceCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_BalancesForceSetBalanceCall{BalancesForceSetBalanceCall: v}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BalancesForceTransferCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_BalancesForceTransferCall); ok {
				if err := oneof.BalancesForceTransferCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Balances_ForceTransferCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_BalancesForceTransferCall{BalancesForceTransferCall: v}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BalancesForceUnreserveCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_BalancesForceUnreserveCall); ok {
				if err := oneof.BalancesForceUnreserveCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Balances_ForceUnreserveCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_BalancesForceUnreserveCall{BalancesForceUnreserveCall: v}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BalancesTransferAllCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_BalancesTransferAllCall); ok {
				if err := oneof.BalancesTransferAllCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Balances_TransferAllCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_BalancesTransferAllCall{BalancesTransferAllCall: v}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BalancesTransferAllowDeathCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_BalancesTransferAllowDeathCall); ok {
				if err := oneof.BalancesTransferAllowDeathCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Balances_TransferAllowDeathCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_BalancesTransferAllowDeathCall{BalancesTransferAllowDeathCall: v}
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BalancesTransferKeepAliveCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_BalancesTransferKeepAliveCall); ok {
				if err := oneof.BalancesTransferKeepAliveCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Balances_TransferKeepAliveCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_BalancesTransferKeepAliveCall{BalancesTransferKeepAliveCall: v}
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BalancesUpgradeAccountsCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_BalancesUpgradeAccountsCall); ok {
				if err := oneof.BalancesUpgradeAccountsCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Balances_UpgradeAccountsCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_BalancesUpgradeAccountsCall{BalancesUpgradeAccountsCall: v}
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BountiesAcceptCuratorCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_BountiesAcceptCuratorCall); ok {
				if err := oneof.BountiesAcceptCuratorCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Bounties_AcceptCuratorCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_BountiesAcceptCuratorCall{BountiesAcceptCuratorCall: v}
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BountiesApproveBountyCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_BountiesApproveBountyCall); ok {
				if err := oneof.BountiesApproveBountyCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Bounties_ApproveBountyCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_BountiesApproveBountyCall{BountiesApproveBountyCall: v}
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BountiesAwardBountyCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_BountiesAwardBountyCall); ok {
				if err := oneof.BountiesAwardBountyCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Bounties_AwardBountyCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_BountiesAwardBountyCall{BountiesAwardBountyCall: v}
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BountiesClaimBountyCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_BountiesClaimBountyCall); ok {
				if err := oneof.BountiesClaimBountyCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Bounties_ClaimBountyCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_BountiesClaimBountyCall{BountiesClaimBountyCall: v}
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BountiesCloseBountyCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_BountiesCloseBountyCall); ok {
				if err := oneof.BountiesCloseBountyCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Bounties_CloseBountyCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_BountiesCloseBountyCall{BountiesCloseBountyCall: v}
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BountiesExtendBountyExpiryCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_BountiesExtendBountyExpiryCall); ok {
				if err := oneof.BountiesExtendBountyExpiryCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Bounties_ExtendBountyExpiryCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_BountiesExtendBountyExpiryCall{BountiesExtendBountyExpiryCall: v}
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BountiesProposeBountyCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_BountiesProposeBountyCall); ok {
				if err := oneof.BountiesProposeBountyCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Bounties_ProposeBountyCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_BountiesProposeBountyCall{BountiesProposeBountyCall: v}
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BountiesProposeCuratorCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_BountiesProposeCuratorCall); ok {
				if err := oneof.BountiesProposeCuratorCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Bounties_ProposeCuratorCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_BountiesProposeCuratorCall{BountiesProposeCuratorCall: v}
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BountiesUnassignCuratorCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_BountiesUnassignCuratorCall); ok {
				if err := oneof.BountiesUnassignCuratorCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Bounties_UnassignCuratorCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_BountiesUnassignCuratorCall{BountiesUnassignCuratorCall: v}
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildbountiesAcceptCuratorCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ChildbountiesAcceptCuratorCall); ok {
				if err := oneof.ChildbountiesAcceptCuratorCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.ChildBounties_AcceptCuratorCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ChildbountiesAcceptCuratorCall{ChildbountiesAcceptCuratorCall: v}
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildbountiesAddChildBountyCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ChildbountiesAddChildBountyCall); ok {
				if err := oneof.ChildbountiesAddChildBountyCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.ChildBounties_AddChildBountyCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ChildbountiesAddChildBountyCall{ChildbountiesAddChildBountyCall: v}
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildbountiesAwardChildBountyCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ChildbountiesAwardChildBountyCall); ok {
				if err := oneof.ChildbountiesAwardChildBountyCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.ChildBounties_AwardChildBountyCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ChildbountiesAwardChildBountyCall{ChildbountiesAwardChildBountyCall: v}
			}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildbountiesClaimChildBountyCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ChildbountiesClaimChildBountyCall); ok {
				if err := oneof.ChildbountiesClaimChildBountyCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.ChildBounties_ClaimChildBountyCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ChildbountiesClaimChildBountyCall{ChildbountiesClaimChildBountyCall: v}
			}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildbountiesCloseChildBountyCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ChildbountiesCloseChildBountyCall); ok {
				if err := oneof.ChildbountiesCloseChildBountyCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.ChildBounties_CloseChildBountyCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ChildbountiesCloseChildBountyCall{ChildbountiesCloseChildBountyCall: v}
			}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildbountiesProposeCuratorCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ChildbountiesProposeCuratorCall); ok {
				if err := oneof.ChildbountiesProposeCuratorCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.ChildBounties_ProposeCuratorCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ChildbountiesProposeCuratorCall{ChildbountiesProposeCuratorCall: v}
			}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildbountiesUnassignCuratorCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ChildbountiesUnassignCuratorCall); ok {
				if err := oneof.ChildbountiesUnassignCuratorCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.ChildBounties_UnassignCuratorCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ChildbountiesUnassignCuratorCall{ChildbountiesUnassignCuratorCall: v}
			}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvictionvotingDelegateCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ConvictionvotingDelegateCall); ok {
				if err := oneof.ConvictionvotingDelegateCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.ConvictionVoting_DelegateCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ConvictionvotingDelegateCall{ConvictionvotingDelegateCall: v}
			}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvictionvotingRemoveOtherVoteCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ConvictionvotingRemoveOtherVoteCall); ok {
				if err := oneof.ConvictionvotingRemoveOtherVoteCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.ConvictionVoting_RemoveOtherVoteCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ConvictionvotingRemoveOtherVoteCall{ConvictionvotingRemoveOtherVoteCall: v}
			}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvictionvotingRemoveVoteCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ConvictionvotingRemoveVoteCall); ok {
				if err := oneof.ConvictionvotingRemoveVoteCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.ConvictionVoting_RemoveVoteCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ConvictionvotingRemoveVoteCall{ConvictionvotingRemoveVoteCall: v}
			}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvictionvotingUndelegateCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ConvictionvotingUndelegateCall); ok {
				if err := oneof.ConvictionvotingUndelegateCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.ConvictionVoting_UndelegateCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ConvictionvotingUndelegateCall{ConvictionvotingUndelegateCall: v}
			}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvictionvotingUnlockCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ConvictionvotingUnlockCall); ok {
				if err := oneof.ConvictionvotingUnlockCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.ConvictionVoting_UnlockCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ConvictionvotingUnlockCall{ConvictionvotingUnlockCall: v}
			}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvictionvotingVoteCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ConvictionvotingVoteCall); ok {
				if err := oneof.ConvictionvotingVoteCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.ConvictionVoting_VoteCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ConvictionvotingVoteCall{ConvictionvotingVoteCall: v}
			}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElectionprovidermultiphaseGovernanceFallbackCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ElectionprovidermultiphaseGovernanceFallbackCall); ok {
				if err := oneof.ElectionprovidermultiphaseGovernanceFallbackCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.ElectionProviderMultiPhase_GovernanceFallbackCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ElectionprovidermultiphaseGovernanceFallbackCall{ElectionprovidermultiphaseGovernanceFallbackCall: v}
			}
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElectionprovidermultiphaseSetEmergencyElectionResultCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ElectionprovidermultiphaseSetEmergencyElectionResultCall); ok {
				if err := oneof.ElectionprovidermultiphaseSetEmergencyElectionResultCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.ElectionProviderMultiPhase_SetEmergencyElectionResultCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ElectionprovidermultiphaseSetEmergencyElectionResultCall{ElectionprovidermultiphaseSetEmergencyElectionResultCall: v}
			}
			iNdEx = postIndex
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElectionprovidermultiphaseSetMinimumUntrustedScoreCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ElectionprovidermultiphaseSetMinimumUntrustedScoreCall); ok {
				if err := oneof.ElectionprovidermultiphaseSetMinimumUntrustedScoreCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.ElectionProviderMultiPhase_SetMinimumUntrustedScoreCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ElectionprovidermultiphaseSetMinimumUntrustedScoreCall{ElectionprovidermultiphaseSetMinimumUntrustedScoreCall: v}
			}
			iNdEx = postIndex
		case 39:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElectionprovidermultiphaseSubmitCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ElectionprovidermultiphaseSubmitCall); ok {
				if err := oneof.ElectionprovidermultiphaseSubmitCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.ElectionProviderMultiPhase_SubmitCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ElectionprovidermultiphaseSubmitCall{ElectionprovidermultiphaseSubmitCall: v}
			}
			iNdEx = postIndex
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElectionprovidermultiphaseSubmitUnsignedCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ElectionprovidermultiphaseSubmitUnsignedCall); ok {
				if err := oneof.ElectionprovidermultiphaseSubmitUnsignedCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.ElectionProviderMultiPhase_SubmitUnsignedCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ElectionprovidermultiphaseSubmitUnsignedCall{ElectionprovidermultiphaseSubmitUnsignedCall: v}
			}
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FellowshipcollectiveAddMemberCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_FellowshipcollectiveAddMemberCall); ok {
				if err := oneof.FellowshipcollectiveAddMemberCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.FellowshipCollective_AddMemberCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_FellowshipcollectiveAddMemberCall{FellowshipcollectiveAddMemberCall: v}
			}
			iNdEx = postIndex
		case 42:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FellowshipcollectiveCleanupPollCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_FellowshipcollectiveCleanupPollCall); ok {
				if err := oneof.FellowshipcollectiveCleanupPollCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.FellowshipCollective_CleanupPollCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_FellowshipcollectiveCleanupPollCall{FellowshipcollectiveCleanupPollCall: v}
			}
			iNdEx = postIndex
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FellowshipcollectiveDemoteMemberCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_FellowshipcollectiveDemoteMemberCall); ok {
				if err := oneof.FellowshipcollectiveDemoteMemberCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.FellowshipCollective_DemoteMemberCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_FellowshipcollectiveDemoteMemberCall{FellowshipcollectiveDemoteMemberCall: v}
			}
			iNdEx = postIndex
		case 44:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FellowshipcollectivePromoteMemberCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_FellowshipcollectivePromoteMemberCall); ok {
				if err := oneof.FellowshipcollectivePromoteMemberCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.FellowshipCollective_PromoteMemberCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_FellowshipcollectivePromoteMemberCall{FellowshipcollectivePromoteMemberCall: v}
			}
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FellowshipcollectiveRemoveMemberCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_FellowshipcollectiveRemoveMemberCall); ok {
				if err := oneof.FellowshipcollectiveRemoveMemberCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.FellowshipCollective_RemoveMemberCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_FellowshipcollectiveRemoveMemberCall{FellowshipcollectiveRemoveMemberCall: v}
			}
			iNdEx = postIndex
		case 46:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FellowshipcollectiveVoteCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_FellowshipcollectiveVoteCall); ok {
				if err := oneof.FellowshipcollectiveVoteCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.FellowshipCollective_VoteCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_FellowshipcollectiveVoteCall{FellowshipcollectiveVoteCall: v}
			}
			iNdEx = postIndex
		case 47:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FellowshipreferendaCancelCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_FellowshipreferendaCancelCall); ok {
				if err := oneof.FellowshipreferendaCancelCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.FellowshipReferenda_CancelCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_FellowshipreferendaCancelCall{FellowshipreferendaCancelCall: v}
			}
			iNdEx = postIndex
		case 48:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FellowshipreferendaKillCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_FellowshipreferendaKillCall); ok {
				if err := oneof.FellowshipreferendaKillCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.FellowshipReferenda_KillCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_FellowshipreferendaKillCall{FellowshipreferendaKillCall: v}
			}
			iNdEx = postIndex
		case 49:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FellowshipreferendaNudgeReferendumCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_FellowshipreferendaNudgeReferendumCall); ok {
				if err := oneof.FellowshipreferendaNudgeReferendumCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.FellowshipReferenda_NudgeReferendumCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_FellowshipreferendaNudgeReferendumCall{FellowshipreferendaNudgeReferendumCall: v}
			}
			iNdEx = postIndex
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FellowshipreferendaOneFewerDecidingCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_FellowshipreferendaOneFewerDecidingCall); ok {
				if err := oneof.FellowshipreferendaOneFewerDecidingCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.FellowshipReferenda_OneFewerDecidingCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_FellowshipreferendaOneFewerDecidingCall{FellowshipreferendaOneFewerDecidingCall: v}
			}
			iNdEx = postIndex
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FellowshipreferendaPlaceDecisionDepositCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_FellowshipreferendaPlaceDecisionDepositCall); ok {
				if err := oneof.FellowshipreferendaPlaceDecisionDepositCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.FellowshipReferenda_PlaceDecisionDepositCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_FellowshipreferendaPlaceDecisionDepositCall{FellowshipreferendaPlaceDecisionDepositCall: v}
			}
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FellowshipreferendaRefundDecisionDepositCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_FellowshipreferendaRefundDecisionDepositCall); ok {
				if err := oneof.FellowshipreferendaRefundDecisionDepositCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.FellowshipReferenda_RefundDecisionDepositCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_FellowshipreferendaRefundDecisionDepositCall{FellowshipreferendaRefundDecisionDepositCall: v}
			}
			iNdEx = postIndex
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FellowshipreferendaRefundSubmissionDepositCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_FellowshipreferendaRefundSubmissionDepositCall); ok {
				if err := oneof.FellowshipreferendaRefundSubmissionDepositCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.FellowshipReferenda_RefundSubmissionDepositCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_FellowshipreferendaRefundSubmissionDepositCall{FellowshipreferendaRefundSubmissionDepositCall: v}
			}
			iNdEx = postIndex
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FellowshipreferendaSetMetadataCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_FellowshipreferendaSetMetadataCall); ok {
				if err := oneof.FellowshipreferendaSetMetadataCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.FellowshipReferenda_SetMetadataCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_FellowshipreferendaSetMetadataCall{FellowshipreferendaSetMetadataCall: v}
			}
			iNdEx = postIndex
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FellowshipreferendaSubmitCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_FellowshipreferendaSubmitCall); ok {
				if err := oneof.FellowshipreferendaSubmitCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.FellowshipReferenda_SubmitCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_FellowshipreferendaSubmitCall{FellowshipreferendaSubmitCall: v}
			}
			iNdEx = postIndex
		case 56:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GearvoucherCallCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_GearvoucherCallCall); ok {
				if err := oneof.GearvoucherCallCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.GearVoucher_CallCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_GearvoucherCallCall{GearvoucherCallCall: v}
			}
			iNdEx = postIndex
		case 57:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GearvoucherCallDeprecatedCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_GearvoucherCallDeprecatedCall); ok {
				if err := oneof.GearvoucherCallDeprecatedCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.GearVoucher_CallDeprecatedCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_GearvoucherCallDeprecatedCall{GearvoucherCallDeprecatedCall: v}
			}
			iNdEx = postIndex
		case 58:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GearvoucherDeclineCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_GearvoucherDeclineCall); ok {
				if err := oneof.GearvoucherDeclineCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.GearVoucher_DeclineCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_GearvoucherDeclineCall{GearvoucherDeclineCall: v}
			}
			iNdEx = postIndex
		case 59:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GearvoucherIssueCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_GearvoucherIssueCall); ok {
				if err := oneof.GearvoucherIssueCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.GearVoucher_IssueCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_GearvoucherIssueCall{GearvoucherIssueCall: v}
			}
			iNdEx = postIndex
		case 60:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GearvoucherRevokeCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_GearvoucherRevokeCall); ok {
				if err := oneof.GearvoucherRevokeCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.GearVoucher_RevokeCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_GearvoucherRevokeCall{GearvoucherRevokeCall: v}
			}
			iNdEx = postIndex
		case 61:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GearvoucherUpdateCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_GearvoucherUpdateCall); ok {
				if err := oneof.GearvoucherUpdateCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.GearVoucher_UpdateCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_GearvoucherUpdateCall{GearvoucherUpdateCall: v}
			}
			iNdEx = postIndex
		case 62:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GearClaimValueCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_GearClaimValueCall); ok {
				if err := oneof.GearClaimValueCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Gear_ClaimValueCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_GearClaimValueCall{GearClaimValueCall: v}
			}
			iNdEx = postIndex
		case 63:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GearCreateProgramCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_GearCreateProgramCall); ok {
				if err := oneof.GearCreateProgramCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Gear_CreateProgramCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_GearCreateProgramCall{GearCreateProgramCall: v}
			}
			iNdEx = postIndex
		case 64:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GearRunCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_GearRunCall); ok {
				if err := oneof.GearRunCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Gear_RunCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_GearRunCall{GearRunCall: v}
			}
			iNdEx = postIndex
		case 65:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GearSendMessageCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_GearSendMessageCall); ok {
				if err := oneof.GearSendMessageCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Gear_SendMessageCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_GearSendMessageCall{GearSendMessageCall: v}
			}
			iNdEx = postIndex
		case 66:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GearSendReplyCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_GearSendReplyCall); ok {
				if err := oneof.GearSendReplyCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Gear_SendReplyCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_GearSendReplyCall{GearSendReplyCall: v}
			}
			iNdEx = postIndex
		case 67:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GearSetExecuteInherentCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_GearSetExecuteInherentCall); ok {
				if err := oneof.GearSetExecuteInherentCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Gear_SetExecuteInherentCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_GearSetExecuteInherentCall{GearSetExecuteInherentCall: v}
			}
			iNdEx = postIndex
		case 68:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GearUploadCodeCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_GearUploadCodeCall); ok {
				if err := oneof.GearUploadCodeCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Gear_UploadCodeCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_GearUploadCodeCall{GearUploadCodeCall: v}
			}
			iNdEx = postIndex
		case 69:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GearUploadProgramCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_GearUploadProgramCall); ok {
				if err := oneof.GearUploadProgramCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Gear_UploadProgramCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_GearUploadProgramCall{GearUploadProgramCall: v}
			}
			iNdEx = postIndex
		case 70:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrandpaNoteStalledCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_GrandpaNoteStalledCall); ok {
				if err := oneof.GrandpaNoteStalledCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Grandpa_NoteStalledCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_GrandpaNoteStalledCall{GrandpaNoteStalledCall: v}
			}
			iNdEx = postIndex
		case 71:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrandpaReportEquivocationCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_GrandpaReportEquivocationCall); ok {
				if err := oneof.GrandpaReportEquivocationCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Grandpa_ReportEquivocationCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_GrandpaReportEquivocationCall{GrandpaReportEquivocationCall: v}
			}
			iNdEx = postIndex
		case 72:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrandpaReportEquivocationUnsignedCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_GrandpaReportEquivocationUnsignedCall); ok {
				if err := oneof.GrandpaReportEquivocationUnsignedCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Grandpa_ReportEquivocationUnsignedCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_GrandpaReportEquivocationUnsignedCall{GrandpaReportEquivocationUnsignedCall: v}
			}
			iNdEx = postIndex
		case 73:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityAddRegistrarCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_IdentityAddRegistrarCall); ok {
				if err := oneof.IdentityAddRegistrarCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Identity_AddRegistrarCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_IdentityAddRegistrarCall{IdentityAddRegistrarCall: v}
			}
			iNdEx = postIndex
		case 74:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityAddSubCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_IdentityAddSubCall); ok {
				if err := oneof.IdentityAddSubCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Identity_AddSubCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_IdentityAddSubCall{IdentityAddSubCall: v}
			}
			iNdEx = postIndex
		case 75:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityCancelRequestCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_IdentityCancelRequestCall); ok {
				if err := oneof.IdentityCancelRequestCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Identity_CancelRequestCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_IdentityCancelRequestCall{IdentityCancelRequestCall: v}
			}
			iNdEx = postIndex
		case 76:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityKillIdentityCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_IdentityKillIdentityCall); ok {
				if err := oneof.IdentityKillIdentityCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Identity_KillIdentityCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_IdentityKillIdentityCall{IdentityKillIdentityCall: v}
			}
			iNdEx = postIndex
		case 77:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityProvideJudgementCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_IdentityProvideJudgementCall); ok {
				if err := oneof.IdentityProvideJudgementCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Identity_ProvideJudgementCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_IdentityProvideJudgementCall{IdentityProvideJudgementCall: v}
			}
			iNdEx = postIndex
		case 78:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityRemoveSubCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_IdentityRemoveSubCall); ok {
				if err := oneof.IdentityRemoveSubCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Identity_RemoveSubCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_IdentityRemoveSubCall{IdentityRemoveSubCall: v}
			}
			iNdEx = postIndex
		case 79:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityRenameSubCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_IdentityRenameSubCall); ok {
				if err := oneof.IdentityRenameSubCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Identity_RenameSubCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_IdentityRenameSubCall{IdentityRenameSubCall: v}
			}
			iNdEx = postIndex
		case 80:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityRequestJudgementCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_IdentityRequestJudgementCall); ok {
				if err := oneof.IdentityRequestJudgementCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Identity_RequestJudgementCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_IdentityRequestJudgementCall{IdentityRequestJudgementCall: v}
			}
			iNdEx = postIndex
		case 81:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentitySetAccountIdCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_IdentitySetAccountIdCall); ok {
				if err := oneof.IdentitySetAccountIdCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Identity_SetAccountIdCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_IdentitySetAccountIdCall{IdentitySetAccountIdCall: v}
			}
			iNdEx = postIndex
		case 82:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentitySetFeeCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_IdentitySetFeeCall); ok {
				if err := oneof.IdentitySetFeeCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Identity_SetFeeCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_IdentitySetFeeCall{IdentitySetFeeCall: v}
			}
			iNdEx = postIndex
		case 83:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentitySetFieldsCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_IdentitySetFieldsCall); ok {
				if err := oneof.IdentitySetFieldsCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Identity_SetFieldsCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_IdentitySetFieldsCall{IdentitySetFieldsCall: v}
			}
			iNdEx = postIndex
		case 84:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentitySetIdentityCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_IdentitySetIdentityCall); ok {
				if err := oneof.IdentitySetIdentityCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Identity_SetIdentityCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_IdentitySetIdentityCall{IdentitySetIdentityCall: v}
			}
			iNdEx = postIndex
		case 85:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentitySetSubsCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_IdentitySetSubsCall); ok {
				if err := oneof.IdentitySetSubsCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Identity_SetSubsCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_IdentitySetSubsCall{IdentitySetSubsCall: v}
			}
			iNdEx = postIndex
		case 86:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImonlineHeartbeatCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ImonlineHeartbeatCall); ok {
				if err := oneof.ImonlineHeartbeatCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.ImOnline_HeartbeatCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ImonlineHeartbeatCall{ImonlineHeartbeatCall: v}
			}
			iNdEx = postIndex
		case 87:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultisigApproveAsMultiCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_MultisigApproveAsMultiCall); ok {
				if err := oneof.MultisigApproveAsMultiCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Multisig_ApproveAsMultiCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_MultisigApproveAsMultiCall{MultisigApproveAsMultiCall: v}
			}
			iNdEx = postIndex
		case 88:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultisigAsMultiCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_MultisigAsMultiCall); ok {
				if err := oneof.MultisigAsMultiCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Multisig_AsMultiCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_MultisigAsMultiCall{MultisigAsMultiCall: v}
			}
			iNdEx = postIndex
		case 89:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultisigAsMultiThreshold_1Call", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_MultisigAsMultiThreshold_1Call); ok {
				if err := oneof.MultisigAsMultiThreshold_1Call.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Multisig_AsMultiThreshold1Call{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_MultisigAsMultiThreshold_1Call{MultisigAsMultiThreshold_1Call: v}
			}
			iNdEx = postIndex
		case 90:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultisigCancelAsMultiCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_MultisigCancelAsMultiCall); ok {
				if err := oneof.MultisigCancelAsMultiCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Multisig_CancelAsMultiCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_MultisigCancelAsMultiCall{MultisigCancelAsMultiCall: v}
			}
			iNdEx = postIndex
		case 91:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NominationpoolsAdjustPoolDepositCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_NominationpoolsAdjustPoolDepositCall); ok {
				if err := oneof.NominationpoolsAdjustPoolDepositCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.NominationPools_AdjustPoolDepositCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_NominationpoolsAdjustPoolDepositCall{NominationpoolsAdjustPoolDepositCall: v}
			}
			iNdEx = postIndex
		case 92:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NominationpoolsBondExtraCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_NominationpoolsBondExtraCall); ok {
				if err := oneof.NominationpoolsBondExtraCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.NominationPools_BondExtraCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_NominationpoolsBondExtraCall{NominationpoolsBondExtraCall: v}
			}
			iNdEx = postIndex
		case 93:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NominationpoolsBondExtraOtherCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_NominationpoolsBondExtraOtherCall); ok {
				if err := oneof.NominationpoolsBondExtraOtherCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.NominationPools_BondExtraOtherCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_NominationpoolsBondExtraOtherCall{NominationpoolsBondExtraOtherCall: v}
			}
			iNdEx = postIndex
		case 94:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NominationpoolsChillCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_NominationpoolsChillCall); ok {
				if err := oneof.NominationpoolsChillCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.NominationPools_ChillCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_NominationpoolsChillCall{NominationpoolsChillCall: v}
			}
			iNdEx = postIndex
		case 95:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NominationpoolsClaimCommissionCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_NominationpoolsClaimCommissionCall); ok {
				if err := oneof.NominationpoolsClaimCommissionCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.NominationPools_ClaimCommissionCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_NominationpoolsClaimCommissionCall{NominationpoolsClaimCommissionCall: v}
			}
			iNdEx = postIndex
		case 96:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NominationpoolsClaimPayoutOtherCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_NominationpoolsClaimPayoutOtherCall); ok {
				if err := oneof.NominationpoolsClaimPayoutOtherCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.NominationPools_ClaimPayoutOtherCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_NominationpoolsClaimPayoutOtherCall{NominationpoolsClaimPayoutOtherCall: v}
			}
			iNdEx = postIndex
		case 97:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NominationpoolsCreateCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_NominationpoolsCreateCall); ok {
				if err := oneof.NominationpoolsCreateCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.NominationPools_CreateCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_NominationpoolsCreateCall{NominationpoolsCreateCall: v}
			}
			iNdEx = postIndex
		case 98:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NominationpoolsCreateWithPoolIdCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_NominationpoolsCreateWithPoolIdCall); ok {
				if err := oneof.NominationpoolsCreateWithPoolIdCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.NominationPools_CreateWithPoolIdCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_NominationpoolsCreateWithPoolIdCall{NominationpoolsCreateWithPoolIdCall: v}
			}
			iNdEx = postIndex
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NominationpoolsJoinCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_NominationpoolsJoinCall); ok {
				if err := oneof.NominationpoolsJoinCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.NominationPools_JoinCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_NominationpoolsJoinCall{NominationpoolsJoinCall: v}
			}
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NominationpoolsNominateCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_NominationpoolsNominateCall); ok {
				if err := oneof.NominationpoolsNominateCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.NominationPools_NominateCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_NominationpoolsNominateCall{NominationpoolsNominateCall: v}
			}
			iNdEx = postIndex
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NominationpoolsPoolWithdrawUnbondedCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_NominationpoolsPoolWithdrawUnbondedCall); ok {
				if err := oneof.NominationpoolsPoolWithdrawUnbondedCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.NominationPools_PoolWithdrawUnbondedCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_NominationpoolsPoolWithdrawUnbondedCall{NominationpoolsPoolWithdrawUnbondedCall: v}
			}
			iNdEx = postIndex
		case 102:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NominationpoolsSetClaimPermissionCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_NominationpoolsSetClaimPermissionCall); ok {
				if err := oneof.NominationpoolsSetClaimPermissionCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.NominationPools_SetClaimPermissionCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_NominationpoolsSetClaimPermissionCall{NominationpoolsSetClaimPermissionCall: v}
			}
			iNdEx = postIndex
		case 103:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NominationpoolsSetCommissionCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_NominationpoolsSetCommissionCall); ok {
				if err := oneof.NominationpoolsSetCommissionCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.NominationPools_SetCommissionCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_NominationpoolsSetCommissionCall{NominationpoolsSetCommissionCall: v}
			}
			iNdEx = postIndex
		case 104:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NominationpoolsSetCommissionChangeRateCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_NominationpoolsSetCommissionChangeRateCall); ok {
				if err := oneof.NominationpoolsSetCommissionChangeRateCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.NominationPools_SetCommissionChangeRateCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_NominationpoolsSetCommissionChangeRateCall{NominationpoolsSetCommissionChangeRateCall: v}
			}
			iNdEx = postIndex
		case 105:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NominationpoolsSetCommissionMaxCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_NominationpoolsSetCommissionMaxCall); ok {
				if err := oneof.NominationpoolsSetCommissionMaxCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.NominationPools_SetCommissionMaxCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_NominationpoolsSetCommissionMaxCall{NominationpoolsSetCommissionMaxCall: v}
			}
			iNdEx = postIndex
		case 106:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NominationpoolsSetConfigsCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_NominationpoolsSetConfigsCall); ok {
				if err := oneof.NominationpoolsSetConfigsCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.NominationPools_SetConfigsCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_NominationpoolsSetConfigsCall{NominationpoolsSetConfigsCall: v}
			}
			iNdEx = postIndex
		case 107:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NominationpoolsSetMetadataCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_NominationpoolsSetMetadataCall); ok {
				if err := oneof.NominationpoolsSetMetadataCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.NominationPools_SetMetadataCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_NominationpoolsSetMetadataCall{NominationpoolsSetMetadataCall: v}
			}
			iNdEx = postIndex
		case 108:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NominationpoolsSetStateCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_NominationpoolsSetStateCall); ok {
				if err := oneof.NominationpoolsSetStateCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.NominationPools_SetStateCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_NominationpoolsSetStateCall{NominationpoolsSetStateCall: v}
			}
			iNdEx = postIndex
		case 109:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NominationpoolsUnbondCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_NominationpoolsUnbondCall); ok {
				if err := oneof.NominationpoolsUnbondCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.NominationPools_UnbondCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_NominationpoolsUnbondCall{NominationpoolsUnbondCall: v}
			}
			iNdEx = postIndex
		case 110:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NominationpoolsUpdateRolesCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_NominationpoolsUpdateRolesCall); ok {
				if err := oneof.NominationpoolsUpdateRolesCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.NominationPools_UpdateRolesCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_NominationpoolsUpdateRolesCall{NominationpoolsUpdateRolesCall: v}
			}
			iNdEx = postIndex
		case 111:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NominationpoolsWithdrawUnbondedCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_NominationpoolsWithdrawUnbondedCall); ok {
				if err := oneof.NominationpoolsWithdrawUnbondedCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.NominationPools_WithdrawUnbondedCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_NominationpoolsWithdrawUnbondedCall{NominationpoolsWithdrawUnbondedCall: v}
			}
			iNdEx = postIndex
		case 112:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreimageEnsureUpdatedCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_PreimageEnsureUpdatedCall); ok {
				if err := oneof.PreimageEnsureUpdatedCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Preimage_EnsureUpdatedCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_PreimageEnsureUpdatedCall{PreimageEnsureUpdatedCall: v}
			}
			iNdEx = postIndex
		case 113:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreimageNotePreimageCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_PreimageNotePreimageCall); ok {
				if err := oneof.PreimageNotePreimageCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Preimage_NotePreimageCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_PreimageNotePreimageCall{PreimageNotePreimageCall: v}
			}
			iNdEx = postIndex
		case 114:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreimageRequestPreimageCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_PreimageRequestPreimageCall); ok {
				if err := oneof.PreimageRequestPreimageCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Preimage_RequestPreimageCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_PreimageRequestPreimageCall{PreimageRequestPreimageCall: v}
			}
			iNdEx = postIndex
		case 115:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreimageUnnotePreimageCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_PreimageUnnotePreimageCall); ok {
				if err := oneof.PreimageUnnotePreimageCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Preimage_UnnotePreimageCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_PreimageUnnotePreimageCall{PreimageUnnotePreimageCall: v}
			}
			iNdEx = postIndex
		case 116:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreimageUnrequestPreimageCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_PreimageUnrequestPreimageCall); ok {
				if err := oneof.PreimageUnrequestPreimageCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Preimage_UnrequestPreimageCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_PreimageUnrequestPreimageCall{PreimageUnrequestPreimageCall: v}
			}
			iNdEx = postIndex
		case 117:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyAddProxyCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ProxyAddProxyCall); ok {
				if err := oneof.ProxyAddProxyCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Proxy_AddProxyCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ProxyAddProxyCall{ProxyAddProxyCall: v}
			}
			iNdEx = postIndex
		case 118:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyAnnounceCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ProxyAnnounceCall); ok {
				if err := oneof.ProxyAnnounceCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Proxy_AnnounceCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ProxyAnnounceCall{ProxyAnnounceCall: v}
			}
			iNdEx = postIndex
		case 119:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyCreatePureCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ProxyCreatePureCall); ok {
				if err := oneof.ProxyCreatePureCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Proxy_CreatePureCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ProxyCreatePureCall{ProxyCreatePureCall: v}
			}
			iNdEx = postIndex
		case 120:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyKillPureCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ProxyKillPureCall); ok {
				if err := oneof.ProxyKillPureCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Proxy_KillPureCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ProxyKillPureCall{ProxyKillPureCall: v}
			}
			iNdEx = postIndex
		case 121:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyProxyAnnouncedCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ProxyProxyAnnouncedCall); ok {
				if err := oneof.ProxyProxyAnnouncedCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Proxy_ProxyAnnouncedCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ProxyProxyAnnouncedCall{ProxyProxyAnnouncedCall: v}
			}
			iNdEx = postIndex
		case 122:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyProxyCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ProxyProxyCall); ok {
				if err := oneof.ProxyProxyCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Proxy_ProxyCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ProxyProxyCall{ProxyProxyCall: v}
			}
			iNdEx = postIndex
		case 123:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyRejectAnnouncementCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ProxyRejectAnnouncementCall); ok {
				if err := oneof.ProxyRejectAnnouncementCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Proxy_RejectAnnouncementCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ProxyRejectAnnouncementCall{ProxyRejectAnnouncementCall: v}
			}
			iNdEx = postIndex
		case 124:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyRemoveAnnouncementCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ProxyRemoveAnnouncementCall); ok {
				if err := oneof.ProxyRemoveAnnouncementCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Proxy_RemoveAnnouncementCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ProxyRemoveAnnouncementCall{ProxyRemoveAnnouncementCall: v}
			}
			iNdEx = postIndex
		case 125:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyRemoveProxyCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ProxyRemoveProxyCall); ok {
				if err := oneof.ProxyRemoveProxyCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Proxy_RemoveProxyCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ProxyRemoveProxyCall{ProxyRemoveProxyCall: v}
			}
			iNdEx = postIndex
		case 126:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferendaCancelCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ReferendaCancelCall); ok {
				if err := oneof.ReferendaCancelCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Referenda_CancelCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ReferendaCancelCall{ReferendaCancelCall: v}
			}
			iNdEx = postIndex
		case 127:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferendaKillCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ReferendaKillCall); ok {
				if err := oneof.ReferendaKillCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Referenda_KillCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ReferendaKillCall{ReferendaKillCall: v}
			}
			iNdEx = postIndex
		case 128:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferendaNudgeReferendumCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ReferendaNudgeReferendumCall); ok {
				if err := oneof.ReferendaNudgeReferendumCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Referenda_NudgeReferendumCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ReferendaNudgeReferendumCall{ReferendaNudgeReferendumCall: v}
			}
			iNdEx = postIndex
		case 129:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferendaOneFewerDecidingCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ReferendaOneFewerDecidingCall); ok {
				if err := oneof.ReferendaOneFewerDecidingCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Referenda_OneFewerDecidingCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ReferendaOneFewerDecidingCall{ReferendaOneFewerDecidingCall: v}
			}
			iNdEx = postIndex
		case 130:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferendaPlaceDecisionDepositCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ReferendaPlaceDecisionDepositCall); ok {
				if err := oneof.ReferendaPlaceDecisionDepositCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Referenda_PlaceDecisionDepositCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ReferendaPlaceDecisionDepositCall{ReferendaPlaceDecisionDepositCall: v}
			}
			iNdEx = postIndex
		case 131:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferendaRefundDecisionDepositCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ReferendaRefundDecisionDepositCall); ok {
				if err := oneof.ReferendaRefundDecisionDepositCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Referenda_RefundDecisionDepositCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ReferendaRefundDecisionDepositCall{ReferendaRefundDecisionDepositCall: v}
			}
			iNdEx = postIndex
		case 132:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferendaRefundSubmissionDepositCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ReferendaRefundSubmissionDepositCall); ok {
				if err := oneof.ReferendaRefundSubmissionDepositCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Referenda_RefundSubmissionDepositCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ReferendaRefundSubmissionDepositCall{ReferendaRefundSubmissionDepositCall: v}
			}
			iNdEx = postIndex
		case 133:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferendaSetMetadataCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ReferendaSetMetadataCall); ok {
				if err := oneof.ReferendaSetMetadataCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Referenda_SetMetadataCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ReferendaSetMetadataCall{ReferendaSetMetadataCall: v}
			}
			iNdEx = postIndex
		case 134:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferendaSubmitCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ReferendaSubmitCall); ok {
				if err := oneof.ReferendaSubmitCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Referenda_SubmitCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ReferendaSubmitCall{ReferendaSubmitCall: v}
			}
			iNdEx = postIndex
		case 135:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchedulerCancelCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_SchedulerCancelCall); ok {
				if err := oneof.SchedulerCancelCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Scheduler_CancelCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_SchedulerCancelCall{SchedulerCancelCall: v}
			}
			iNdEx = postIndex
		case 136:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchedulerCancelNamedCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_SchedulerCancelNamedCall); ok {
				if err := oneof.SchedulerCancelNamedCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Scheduler_CancelNamedCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_SchedulerCancelNamedCall{SchedulerCancelNamedCall: v}
			}
			iNdEx = postIndex
		case 137:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchedulerScheduleAfterCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_SchedulerScheduleAfterCall); ok {
				if err := oneof.SchedulerScheduleAfterCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Scheduler_ScheduleAfterCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_SchedulerScheduleAfterCall{SchedulerScheduleAfterCall: v}
			}
			iNdEx = postIndex
		case 138:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchedulerScheduleCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_SchedulerScheduleCall); ok {
				if err := oneof.SchedulerScheduleCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Scheduler_ScheduleCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_SchedulerScheduleCall{SchedulerScheduleCall: v}
			}
			iNdEx = postIndex
		case 139:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchedulerScheduleNamedAfterCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_SchedulerScheduleNamedAfterCall); ok {
				if err := oneof.SchedulerScheduleNamedAfterCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Scheduler_ScheduleNamedAfterCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_SchedulerScheduleNamedAfterCall{SchedulerScheduleNamedAfterCall: v}
			}
			iNdEx = postIndex
		case 140:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchedulerScheduleNamedCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_SchedulerScheduleNamedCall); ok {
				if err := oneof.SchedulerScheduleNamedCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Scheduler_ScheduleNamedCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_SchedulerScheduleNamedCall{SchedulerScheduleNamedCall: v}
			}
			iNdEx = postIndex
		case 141:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionSetKeysCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_SessionSetKeysCall); ok {
				if err := oneof.SessionSetKeysCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Session_SetKeysCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_SessionSetKeysCall{SessionSetKeysCall: v}
			}
			iNdEx = postIndex
		case 142:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingrewardsAlignSupplyCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_StakingrewardsAlignSupplyCall); ok {
				if err := oneof.StakingrewardsAlignSupplyCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.StakingRewards_AlignSupplyCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_StakingrewardsAlignSupplyCall{StakingrewardsAlignSupplyCall: v}
			}
			iNdEx = postIndex
		case 143:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingrewardsForceRefillCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_StakingrewardsForceRefillCall); ok {
				if err := oneof.StakingrewardsForceRefillCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.StakingRewards_ForceRefillCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_StakingrewardsForceRefillCall{StakingrewardsForceRefillCall: v}
			}
			iNdEx = postIndex
		case 144:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingrewardsRefillCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_StakingrewardsRefillCall); ok {
				if err := oneof.StakingrewardsRefillCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.StakingRewards_RefillCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_StakingrewardsRefillCall{StakingrewardsRefillCall: v}
			}
			iNdEx = postIndex
		case 145:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingrewardsWithdrawCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_StakingrewardsWithdrawCall); ok {
				if err := oneof.StakingrewardsWithdrawCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.StakingRewards_WithdrawCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_StakingrewardsWithdrawCall{StakingrewardsWithdrawCall: v}
			}
			iNdEx = postIndex
		case 146:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingBondCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_StakingBondCall); ok {
				if err := oneof.StakingBondCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Staking_BondCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_StakingBondCall{StakingBondCall: v}
			}
			iNdEx = postIndex
		case 147:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingBondExtraCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_StakingBondExtraCall); ok {
				if err := oneof.StakingBondExtraCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Staking_BondExtraCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_StakingBondExtraCall{StakingBondExtraCall: v}
			}
			iNdEx = postIndex
		case 148:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingCancelDeferredSlashCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_StakingCancelDeferredSlashCall); ok {
				if err := oneof.StakingCancelDeferredSlashCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Staking_CancelDeferredSlashCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_StakingCancelDeferredSlashCall{StakingCancelDeferredSlashCall: v}
			}
			iNdEx = postIndex
		case 149:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingChillOtherCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_StakingChillOtherCall); ok {
				if err := oneof.StakingChillOtherCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Staking_ChillOtherCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_StakingChillOtherCall{StakingChillOtherCall: v}
			}
			iNdEx = postIndex
		case 150:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingForceApplyMinCommissionCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_StakingForceApplyMinCommissionCall); ok {
				if err := oneof.StakingForceApplyMinCommissionCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Staking_ForceApplyMinCommissionCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_StakingForceApplyMinCommissionCall{StakingForceApplyMinCommissionCall: v}
			}
			iNdEx = postIndex
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingForceUnstakeCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_StakingForceUnstakeCall); ok {
				if err := oneof.StakingForceUnstakeCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Staking_ForceUnstakeCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_StakingForceUnstakeCall{StakingForceUnstakeCall: v}
			}
			iNdEx = postIndex
		case 152:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingIncreaseValidatorCountCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_StakingIncreaseValidatorCountCall); ok {
				if err := oneof.StakingIncreaseValidatorCountCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Staking_IncreaseValidatorCountCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_StakingIncreaseValidatorCountCall{StakingIncreaseValidatorCountCall: v}
			}
			iNdEx = postIndex
		case 153:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingKickCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_StakingKickCall); ok {
				if err := oneof.StakingKickCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Staking_KickCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_StakingKickCall{StakingKickCall: v}
			}
			iNdEx = postIndex
		case 154:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingNominateCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_StakingNominateCall); ok {
				if err := oneof.StakingNominateCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Staking_NominateCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_StakingNominateCall{StakingNominateCall: v}
			}
			iNdEx = postIndex
		case 155:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingPayoutStakersCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_StakingPayoutStakersCall); ok {
				if err := oneof.StakingPayoutStakersCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Staking_PayoutStakersCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_StakingPayoutStakersCall{StakingPayoutStakersCall: v}
			}
			iNdEx = postIndex
		case 156:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingReapStashCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_StakingReapStashCall); ok {
				if err := oneof.StakingReapStashCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Staking_ReapStashCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_StakingReapStashCall{StakingReapStashCall: v}
			}
			iNdEx = postIndex
		case 157:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingRebondCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_StakingRebondCall); ok {
				if err := oneof.StakingRebondCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Staking_RebondCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_StakingRebondCall{StakingRebondCall: v}
			}
			iNdEx = postIndex
		case 158:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingScaleValidatorCountCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_StakingScaleValidatorCountCall); ok {
				if err := oneof.StakingScaleValidatorCountCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Staking_ScaleValidatorCountCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_StakingScaleValidatorCountCall{StakingScaleValidatorCountCall: v}
			}
			iNdEx = postIndex
		case 159:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingSetInvulnerablesCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_StakingSetInvulnerablesCall); ok {
				if err := oneof.StakingSetInvulnerablesCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Staking_SetInvulnerablesCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_StakingSetInvulnerablesCall{StakingSetInvulnerablesCall: v}
			}
			iNdEx = postIndex
		case 160:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingSetMinCommissionCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_StakingSetMinCommissionCall); ok {
				if err := oneof.StakingSetMinCommissionCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Staking_SetMinCommissionCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_StakingSetMinCommissionCall{StakingSetMinCommissionCall: v}
			}
			iNdEx = postIndex
		case 161:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingSetPayeeCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_StakingSetPayeeCall); ok {
				if err := oneof.StakingSetPayeeCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Staking_SetPayeeCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_StakingSetPayeeCall{StakingSetPayeeCall: v}
			}
			iNdEx = postIndex
		case 162:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingSetStakingConfigsCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_StakingSetStakingConfigsCall); ok {
				if err := oneof.StakingSetStakingConfigsCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Staking_SetStakingConfigsCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_StakingSetStakingConfigsCall{StakingSetStakingConfigsCall: v}
			}
			iNdEx = postIndex
		case 163:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingSetValidatorCountCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_StakingSetValidatorCountCall); ok {
				if err := oneof.StakingSetValidatorCountCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Staking_SetValidatorCountCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_StakingSetValidatorCountCall{StakingSetValidatorCountCall: v}
			}
			iNdEx = postIndex
		case 164:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingUnbondCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_StakingUnbondCall); ok {
				if err := oneof.StakingUnbondCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Staking_UnbondCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_StakingUnbondCall{StakingUnbondCall: v}
			}
			iNdEx = postIndex
		case 165:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingValidateCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_StakingValidateCall); ok {
				if err := oneof.StakingValidateCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Staking_ValidateCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_StakingValidateCall{StakingValidateCall: v}
			}
			iNdEx = postIndex
		case 166:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingWithdrawUnbondedCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_StakingWithdrawUnbondedCall); ok {
				if err := oneof.StakingWithdrawUnbondedCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Staking_WithdrawUnbondedCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_StakingWithdrawUnbondedCall{StakingWithdrawUnbondedCall: v}
			}
			iNdEx = postIndex
		case 167:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemKillPrefixCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_SystemKillPrefixCall); ok {
				if err := oneof.SystemKillPrefixCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.System_KillPrefixCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_SystemKillPrefixCall{SystemKillPrefixCall: v}
			}
			iNdEx = postIndex
		case 168:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemKillStorageCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_SystemKillStorageCall); ok {
				if err := oneof.SystemKillStorageCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.System_KillStorageCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_SystemKillStorageCall{SystemKillStorageCall: v}
			}
			iNdEx = postIndex
		case 169:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemRemarkCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_SystemRemarkCall); ok {
				if err := oneof.SystemRemarkCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.System_RemarkCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_SystemRemarkCall{SystemRemarkCall: v}
			}
			iNdEx = postIndex
		case 170:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemRemarkWithEventCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_SystemRemarkWithEventCall); ok {
				if err := oneof.SystemRemarkWithEventCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.System_RemarkWithEventCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_SystemRemarkWithEventCall{SystemRemarkWithEventCall: v}
			}
			iNdEx = postIndex
		case 171:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemSetCodeCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_SystemSetCodeCall); ok {
				if err := oneof.SystemSetCodeCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.System_SetCodeCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_SystemSetCodeCall{SystemSetCodeCall: v}
			}
			iNdEx = postIndex
		case 172:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemSetCodeWithoutChecksCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_SystemSetCodeWithoutChecksCall); ok {
				if err := oneof.SystemSetCodeWithoutChecksCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.System_SetCodeWithoutChecksCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_SystemSetCodeWithoutChecksCall{SystemSetCodeWithoutChecksCall: v}
			}
			iNdEx = postIndex
		case 173:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemSetHeapPagesCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_SystemSetHeapPagesCall); ok {
				if err := oneof.SystemSetHeapPagesCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.System_SetHeapPagesCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_SystemSetHeapPagesCall{SystemSetHeapPagesCall: v}
			}
			iNdEx = postIndex
		case 174:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemSetStorageCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_SystemSetStorageCall); ok {
				if err := oneof.SystemSetStorageCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.System_SetStorageCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_SystemSetStorageCall{SystemSetStorageCall: v}
			}
			iNdEx = postIndex
		case 175:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimestampSetCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_TimestampSetCall); ok {
				if err := oneof.TimestampSetCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Timestamp_SetCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_TimestampSetCall{TimestampSetCall: v}
			}
			iNdEx = postIndex
		case 176:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TreasuryApproveProposalCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_TreasuryApproveProposalCall); ok {
				if err := oneof.TreasuryApproveProposalCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Treasury_ApproveProposalCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_TreasuryApproveProposalCall{TreasuryApproveProposalCall: v}
			}
			iNdEx = postIndex
		case 177:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TreasuryCheckStatusCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_TreasuryCheckStatusCall); ok {
				if err := oneof.TreasuryCheckStatusCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Treasury_CheckStatusCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_TreasuryCheckStatusCall{TreasuryCheckStatusCall: v}
			}
			iNdEx = postIndex
		case 178:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TreasuryPayoutCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_TreasuryPayoutCall); ok {
				if err := oneof.TreasuryPayoutCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Treasury_PayoutCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_TreasuryPayoutCall{TreasuryPayoutCall: v}
			}
			iNdEx = postIndex
		case 179:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TreasuryProposeSpendCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_TreasuryProposeSpendCall); ok {
				if err := oneof.TreasuryProposeSpendCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Treasury_ProposeSpendCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_TreasuryProposeSpendCall{TreasuryProposeSpendCall: v}
			}
			iNdEx = postIndex
		case 180:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TreasuryRejectProposalCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_TreasuryRejectProposalCall); ok {
				if err := oneof.TreasuryRejectProposalCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Treasury_RejectProposalCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_TreasuryRejectProposalCall{TreasuryRejectProposalCall: v}
			}
			iNdEx = postIndex
		case 181:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TreasuryRemoveApprovalCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_TreasuryRemoveApprovalCall); ok {
				if err := oneof.TreasuryRemoveApprovalCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Treasury_RemoveApprovalCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_TreasuryRemoveApprovalCall{TreasuryRemoveApprovalCall: v}
			}
			iNdEx = postIndex
		case 182:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TreasurySpendCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_TreasurySpendCall); ok {
				if err := oneof.TreasurySpendCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Treasury_SpendCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_TreasurySpendCall{TreasurySpendCall: v}
			}
			iNdEx = postIndex
		case 183:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TreasurySpendLocalCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_TreasurySpendLocalCall); ok {
				if err := oneof.TreasurySpendLocalCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Treasury_SpendLocalCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_TreasurySpendLocalCall{TreasurySpendLocalCall: v}
			}
			iNdEx = postIndex
		case 184:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TreasuryVoidSpendCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_TreasuryVoidSpendCall); ok {
				if err := oneof.TreasuryVoidSpendCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Treasury_VoidSpendCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_TreasuryVoidSpendCall{TreasuryVoidSpendCall: v}
			}
			iNdEx = postIndex
		case 185:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UtilityAsDerivativeCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_UtilityAsDerivativeCall); ok {
				if err := oneof.UtilityAsDerivativeCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Utility_AsDerivativeCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_UtilityAsDerivativeCall{UtilityAsDerivativeCall: v}
			}
			iNdEx = postIndex
		case 186:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UtilityBatchAllCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_UtilityBatchAllCall); ok {
				if err := oneof.UtilityBatchAllCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Utility_BatchAllCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_UtilityBatchAllCall{UtilityBatchAllCall: v}
			}
			iNdEx = postIndex
		case 187:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UtilityBatchCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_UtilityBatchCall); ok {
				if err := oneof.UtilityBatchCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Utility_BatchCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_UtilityBatchCall{UtilityBatchCall: v}
			}
			iNdEx = postIndex
		case 188:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UtilityDispatchAsCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_UtilityDispatchAsCall); ok {
				if err := oneof.UtilityDispatchAsCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Utility_DispatchAsCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_UtilityDispatchAsCall{UtilityDispatchAsCall: v}
			}
			iNdEx = postIndex
		case 189:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UtilityForceBatchCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_UtilityForceBatchCall); ok {
				if err := oneof.UtilityForceBatchCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Utility_ForceBatchCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_UtilityForceBatchCall{UtilityForceBatchCall: v}
			}
			iNdEx = postIndex
		case 190:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UtilityWithWeightCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_UtilityWithWeightCall); ok {
				if err := oneof.UtilityWithWeightCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Utility_WithWeightCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_UtilityWithWeightCall{UtilityWithWeightCall: v}
			}
			iNdEx = postIndex
		case 191:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingForceVestedTransferCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_VestingForceVestedTransferCall); ok {
				if err := oneof.VestingForceVestedTransferCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Vesting_ForceVestedTransferCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_VestingForceVestedTransferCall{VestingForceVestedTransferCall: v}
			}
			iNdEx = postIndex
		case 192:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingMergeSchedulesCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_VestingMergeSchedulesCall); ok {
				if err := oneof.VestingMergeSchedulesCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Vesting_MergeSchedulesCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_VestingMergeSchedulesCall{VestingMergeSchedulesCall: v}
			}
			iNdEx = postIndex
		case 193:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingVestOtherCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_VestingVestOtherCall); ok {
				if err := oneof.VestingVestOtherCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Vesting_VestOtherCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_VestingVestOtherCall{VestingVestOtherCall: v}
			}
			iNdEx = postIndex
		case 194:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingVestedTransferCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_VestingVestedTransferCall); ok {
				if err := oneof.VestingVestedTransferCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Vesting_VestedTransferCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_VestingVestedTransferCall{VestingVestedTransferCall: v}
			}
			iNdEx = postIndex
		case 195:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhitelistDispatchWhitelistedCallCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_WhitelistDispatchWhitelistedCallCall); ok {
				if err := oneof.WhitelistDispatchWhitelistedCallCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Whitelist_DispatchWhitelistedCallCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_WhitelistDispatchWhitelistedCallCall{WhitelistDispatchWhitelistedCallCall: v}
			}
			iNdEx = postIndex
		case 196:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhitelistDispatchWhitelistedCallWithPreimageCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_WhitelistDispatchWhitelistedCallWithPreimageCall); ok {
				if err := oneof.WhitelistDispatchWhitelistedCallWithPreimageCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Whitelist_DispatchWhitelistedCallWithPreimageCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_WhitelistDispatchWhitelistedCallWithPreimageCall{WhitelistDispatchWhitelistedCallWithPreimageCall: v}
			}
			iNdEx = postIndex
		case 197:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhitelistRemoveWhitelistedCallCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_WhitelistRemoveWhitelistedCallCall); ok {
				if err := oneof.WhitelistRemoveWhitelistedCallCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Whitelist_RemoveWhitelistedCallCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_WhitelistRemoveWhitelistedCallCall{WhitelistRemoveWhitelistedCallCall: v}
			}
			iNdEx = postIndex
		case 198:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhitelistWhitelistCallCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_WhitelistWhitelistCallCall); ok {
				if err := oneof.WhitelistWhitelistCallCall.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Whitelist_WhitelistCallCall{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_WhitelistWhitelistCallCall{WhitelistWhitelistCallCall: v}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protohelpers.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protohelpers.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RuntimeCall) UnmarshalVTUnsafe(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protohelpers.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RuntimeCall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RuntimeCall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BabePlanConfigChangeCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_BabePlanConfigChangeCall); ok {
				if err := oneof.BabePlanConfigChangeCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Babe_PlanConfigChangeCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_BabePlanConfigChangeCall{BabePlanConfigChangeCall: v}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BabeReportEquivocationCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_BabeReportEquivocationCall); ok {
				if err := oneof.BabeReportEquivocationCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Babe_ReportEquivocationCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_BabeReportEquivocationCall{BabeReportEquivocationCall: v}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BabeReportEquivocationUnsignedCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_BabeReportEquivocationUnsignedCall); ok {
				if err := oneof.BabeReportEquivocationUnsignedCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Babe_ReportEquivocationUnsignedCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_BabeReportEquivocationUnsignedCall{BabeReportEquivocationUnsignedCall: v}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BagslistPutInFrontOfCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_BagslistPutInFrontOfCall); ok {
				if err := oneof.BagslistPutInFrontOfCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.BagsList_PutInFrontOfCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_BagslistPutInFrontOfCall{BagslistPutInFrontOfCall: v}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BagslistPutInFrontOfOtherCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_BagslistPutInFrontOfOtherCall); ok {
				if err := oneof.BagslistPutInFrontOfOtherCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.BagsList_PutInFrontOfOtherCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_BagslistPutInFrontOfOtherCall{BagslistPutInFrontOfOtherCall: v}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BagslistRebagCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_BagslistRebagCall); ok {
				if err := oneof.BagslistRebagCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.BagsList_RebagCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_BagslistRebagCall{BagslistRebagCall: v}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BalancesForceSetBalanceCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_BalancesForceSetBalanceCall); ok {
				if err := oneof.BalancesForceSetBalanceCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Balances_ForceSetBalanceCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_BalancesForceSetBalanceCall{BalancesForceSetBalanceCall: v}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BalancesForceTransferCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_BalancesForceTransferCall); ok {
				if err := oneof.BalancesForceTransferCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Balances_ForceTransferCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_BalancesForceTransferCall{BalancesForceTransferCall: v}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BalancesForceUnreserveCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_BalancesForceUnreserveCall); ok {
				if err := oneof.BalancesForceUnreserveCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Balances_ForceUnreserveCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_BalancesForceUnreserveCall{BalancesForceUnreserveCall: v}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BalancesTransferAllCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_BalancesTransferAllCall); ok {
				if err := oneof.BalancesTransferAllCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Balances_TransferAllCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_BalancesTransferAllCall{BalancesTransferAllCall: v}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BalancesTransferAllowDeathCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_BalancesTransferAllowDeathCall); ok {
				if err := oneof.BalancesTransferAllowDeathCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Balances_TransferAllowDeathCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_BalancesTransferAllowDeathCall{BalancesTransferAllowDeathCall: v}
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BalancesTransferKeepAliveCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_BalancesTransferKeepAliveCall); ok {
				if err := oneof.BalancesTransferKeepAliveCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Balances_TransferKeepAliveCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_BalancesTransferKeepAliveCall{BalancesTransferKeepAliveCall: v}
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BalancesUpgradeAccountsCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_BalancesUpgradeAccountsCall); ok {
				if err := oneof.BalancesUpgradeAccountsCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Balances_UpgradeAccountsCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_BalancesUpgradeAccountsCall{BalancesUpgradeAccountsCall: v}
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BountiesAcceptCuratorCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_BountiesAcceptCuratorCall); ok {
				if err := oneof.BountiesAcceptCuratorCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Bounties_AcceptCuratorCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_BountiesAcceptCuratorCall{BountiesAcceptCuratorCall: v}
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BountiesApproveBountyCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_BountiesApproveBountyCall); ok {
				if err := oneof.BountiesApproveBountyCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Bounties_ApproveBountyCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_BountiesApproveBountyCall{BountiesApproveBountyCall: v}
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BountiesAwardBountyCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_BountiesAwardBountyCall); ok {
				if err := oneof.BountiesAwardBountyCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Bounties_AwardBountyCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_BountiesAwardBountyCall{BountiesAwardBountyCall: v}
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BountiesClaimBountyCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_BountiesClaimBountyCall); ok {
				if err := oneof.BountiesClaimBountyCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Bounties_ClaimBountyCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_BountiesClaimBountyCall{BountiesClaimBountyCall: v}
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BountiesCloseBountyCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_BountiesCloseBountyCall); ok {
				if err := oneof.BountiesCloseBountyCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Bounties_CloseBountyCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_BountiesCloseBountyCall{BountiesCloseBountyCall: v}
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BountiesExtendBountyExpiryCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_BountiesExtendBountyExpiryCall); ok {
				if err := oneof.BountiesExtendBountyExpiryCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Bounties_ExtendBountyExpiryCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_BountiesExtendBountyExpiryCall{BountiesExtendBountyExpiryCall: v}
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BountiesProposeBountyCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_BountiesProposeBountyCall); ok {
				if err := oneof.BountiesProposeBountyCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Bounties_ProposeBountyCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_BountiesProposeBountyCall{BountiesProposeBountyCall: v}
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BountiesProposeCuratorCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_BountiesProposeCuratorCall); ok {
				if err := oneof.BountiesProposeCuratorCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Bounties_ProposeCuratorCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_BountiesProposeCuratorCall{BountiesProposeCuratorCall: v}
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BountiesUnassignCuratorCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_BountiesUnassignCuratorCall); ok {
				if err := oneof.BountiesUnassignCuratorCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Bounties_UnassignCuratorCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_BountiesUnassignCuratorCall{BountiesUnassignCuratorCall: v}
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildbountiesAcceptCuratorCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ChildbountiesAcceptCuratorCall); ok {
				if err := oneof.ChildbountiesAcceptCuratorCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.ChildBounties_AcceptCuratorCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ChildbountiesAcceptCuratorCall{ChildbountiesAcceptCuratorCall: v}
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildbountiesAddChildBountyCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ChildbountiesAddChildBountyCall); ok {
				if err := oneof.ChildbountiesAddChildBountyCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.ChildBounties_AddChildBountyCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ChildbountiesAddChildBountyCall{ChildbountiesAddChildBountyCall: v}
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildbountiesAwardChildBountyCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ChildbountiesAwardChildBountyCall); ok {
				if err := oneof.ChildbountiesAwardChildBountyCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.ChildBounties_AwardChildBountyCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ChildbountiesAwardChildBountyCall{ChildbountiesAwardChildBountyCall: v}
			}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildbountiesClaimChildBountyCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ChildbountiesClaimChildBountyCall); ok {
				if err := oneof.ChildbountiesClaimChildBountyCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.ChildBounties_ClaimChildBountyCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ChildbountiesClaimChildBountyCall{ChildbountiesClaimChildBountyCall: v}
			}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildbountiesCloseChildBountyCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ChildbountiesCloseChildBountyCall); ok {
				if err := oneof.ChildbountiesCloseChildBountyCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.ChildBounties_CloseChildBountyCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ChildbountiesCloseChildBountyCall{ChildbountiesCloseChildBountyCall: v}
			}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildbountiesProposeCuratorCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ChildbountiesProposeCuratorCall); ok {
				if err := oneof.ChildbountiesProposeCuratorCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.ChildBounties_ProposeCuratorCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ChildbountiesProposeCuratorCall{ChildbountiesProposeCuratorCall: v}
			}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildbountiesUnassignCuratorCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ChildbountiesUnassignCuratorCall); ok {
				if err := oneof.ChildbountiesUnassignCuratorCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.ChildBounties_UnassignCuratorCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ChildbountiesUnassignCuratorCall{ChildbountiesUnassignCuratorCall: v}
			}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvictionvotingDelegateCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ConvictionvotingDelegateCall); ok {
				if err := oneof.ConvictionvotingDelegateCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.ConvictionVoting_DelegateCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ConvictionvotingDelegateCall{ConvictionvotingDelegateCall: v}
			}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvictionvotingRemoveOtherVoteCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ConvictionvotingRemoveOtherVoteCall); ok {
				if err := oneof.ConvictionvotingRemoveOtherVoteCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.ConvictionVoting_RemoveOtherVoteCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ConvictionvotingRemoveOtherVoteCall{ConvictionvotingRemoveOtherVoteCall: v}
			}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvictionvotingRemoveVoteCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ConvictionvotingRemoveVoteCall); ok {
				if err := oneof.ConvictionvotingRemoveVoteCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.ConvictionVoting_RemoveVoteCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ConvictionvotingRemoveVoteCall{ConvictionvotingRemoveVoteCall: v}
			}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvictionvotingUndelegateCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ConvictionvotingUndelegateCall); ok {
				if err := oneof.ConvictionvotingUndelegateCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.ConvictionVoting_UndelegateCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ConvictionvotingUndelegateCall{ConvictionvotingUndelegateCall: v}
			}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvictionvotingUnlockCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ConvictionvotingUnlockCall); ok {
				if err := oneof.ConvictionvotingUnlockCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.ConvictionVoting_UnlockCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ConvictionvotingUnlockCall{ConvictionvotingUnlockCall: v}
			}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvictionvotingVoteCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ConvictionvotingVoteCall); ok {
				if err := oneof.ConvictionvotingVoteCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.ConvictionVoting_VoteCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ConvictionvotingVoteCall{ConvictionvotingVoteCall: v}
			}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElectionprovidermultiphaseGovernanceFallbackCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ElectionprovidermultiphaseGovernanceFallbackCall); ok {
				if err := oneof.ElectionprovidermultiphaseGovernanceFallbackCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.ElectionProviderMultiPhase_GovernanceFallbackCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ElectionprovidermultiphaseGovernanceFallbackCall{ElectionprovidermultiphaseGovernanceFallbackCall: v}
			}
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElectionprovidermultiphaseSetEmergencyElectionResultCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ElectionprovidermultiphaseSetEmergencyElectionResultCall); ok {
				if err := oneof.ElectionprovidermultiphaseSetEmergencyElectionResultCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.ElectionProviderMultiPhase_SetEmergencyElectionResultCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ElectionprovidermultiphaseSetEmergencyElectionResultCall{ElectionprovidermultiphaseSetEmergencyElectionResultCall: v}
			}
			iNdEx = postIndex
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElectionprovidermultiphaseSetMinimumUntrustedScoreCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ElectionprovidermultiphaseSetMinimumUntrustedScoreCall); ok {
				if err := oneof.ElectionprovidermultiphaseSetMinimumUntrustedScoreCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.ElectionProviderMultiPhase_SetMinimumUntrustedScoreCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ElectionprovidermultiphaseSetMinimumUntrustedScoreCall{ElectionprovidermultiphaseSetMinimumUntrustedScoreCall: v}
			}
			iNdEx = postIndex
		case 39:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElectionprovidermultiphaseSubmitCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ElectionprovidermultiphaseSubmitCall); ok {
				if err := oneof.ElectionprovidermultiphaseSubmitCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.ElectionProviderMultiPhase_SubmitCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ElectionprovidermultiphaseSubmitCall{ElectionprovidermultiphaseSubmitCall: v}
			}
			iNdEx = postIndex
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElectionprovidermultiphaseSubmitUnsignedCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ElectionprovidermultiphaseSubmitUnsignedCall); ok {
				if err := oneof.ElectionprovidermultiphaseSubmitUnsignedCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.ElectionProviderMultiPhase_SubmitUnsignedCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ElectionprovidermultiphaseSubmitUnsignedCall{ElectionprovidermultiphaseSubmitUnsignedCall: v}
			}
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FellowshipcollectiveAddMemberCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_FellowshipcollectiveAddMemberCall); ok {
				if err := oneof.FellowshipcollectiveAddMemberCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.FellowshipCollective_AddMemberCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_FellowshipcollectiveAddMemberCall{FellowshipcollectiveAddMemberCall: v}
			}
			iNdEx = postIndex
		case 42:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FellowshipcollectiveCleanupPollCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_FellowshipcollectiveCleanupPollCall); ok {
				if err := oneof.FellowshipcollectiveCleanupPollCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.FellowshipCollective_CleanupPollCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_FellowshipcollectiveCleanupPollCall{FellowshipcollectiveCleanupPollCall: v}
			}
			iNdEx = postIndex
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FellowshipcollectiveDemoteMemberCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_FellowshipcollectiveDemoteMemberCall); ok {
				if err := oneof.FellowshipcollectiveDemoteMemberCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.FellowshipCollective_DemoteMemberCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_FellowshipcollectiveDemoteMemberCall{FellowshipcollectiveDemoteMemberCall: v}
			}
			iNdEx = postIndex
		case 44:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FellowshipcollectivePromoteMemberCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_FellowshipcollectivePromoteMemberCall); ok {
				if err := oneof.FellowshipcollectivePromoteMemberCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.FellowshipCollective_PromoteMemberCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_FellowshipcollectivePromoteMemberCall{FellowshipcollectivePromoteMemberCall: v}
			}
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FellowshipcollectiveRemoveMemberCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_FellowshipcollectiveRemoveMemberCall); ok {
				if err := oneof.FellowshipcollectiveRemoveMemberCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.FellowshipCollective_RemoveMemberCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_FellowshipcollectiveRemoveMemberCall{FellowshipcollectiveRemoveMemberCall: v}
			}
			iNdEx = postIndex
		case 46:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FellowshipcollectiveVoteCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_FellowshipcollectiveVoteCall); ok {
				if err := oneof.FellowshipcollectiveVoteCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.FellowshipCollective_VoteCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_FellowshipcollectiveVoteCall{FellowshipcollectiveVoteCall: v}
			}
			iNdEx = postIndex
		case 47:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FellowshipreferendaCancelCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_FellowshipreferendaCancelCall); ok {
				if err := oneof.FellowshipreferendaCancelCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.FellowshipReferenda_CancelCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_FellowshipreferendaCancelCall{FellowshipreferendaCancelCall: v}
			}
			iNdEx = postIndex
		case 48:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FellowshipreferendaKillCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_FellowshipreferendaKillCall); ok {
				if err := oneof.FellowshipreferendaKillCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.FellowshipReferenda_KillCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_FellowshipreferendaKillCall{FellowshipreferendaKillCall: v}
			}
			iNdEx = postIndex
		case 49:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FellowshipreferendaNudgeReferendumCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_FellowshipreferendaNudgeReferendumCall); ok {
				if err := oneof.FellowshipreferendaNudgeReferendumCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.FellowshipReferenda_NudgeReferendumCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_FellowshipreferendaNudgeReferendumCall{FellowshipreferendaNudgeReferendumCall: v}
			}
			iNdEx = postIndex
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FellowshipreferendaOneFewerDecidingCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_FellowshipreferendaOneFewerDecidingCall); ok {
				if err := oneof.FellowshipreferendaOneFewerDecidingCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.FellowshipReferenda_OneFewerDecidingCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_FellowshipreferendaOneFewerDecidingCall{FellowshipreferendaOneFewerDecidingCall: v}
			}
			iNdEx = postIndex
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FellowshipreferendaPlaceDecisionDepositCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_FellowshipreferendaPlaceDecisionDepositCall); ok {
				if err := oneof.FellowshipreferendaPlaceDecisionDepositCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.FellowshipReferenda_PlaceDecisionDepositCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_FellowshipreferendaPlaceDecisionDepositCall{FellowshipreferendaPlaceDecisionDepositCall: v}
			}
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FellowshipreferendaRefundDecisionDepositCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_FellowshipreferendaRefundDecisionDepositCall); ok {
				if err := oneof.FellowshipreferendaRefundDecisionDepositCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.FellowshipReferenda_RefundDecisionDepositCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_FellowshipreferendaRefundDecisionDepositCall{FellowshipreferendaRefundDecisionDepositCall: v}
			}
			iNdEx = postIndex
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FellowshipreferendaRefundSubmissionDepositCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_FellowshipreferendaRefundSubmissionDepositCall); ok {
				if err := oneof.FellowshipreferendaRefundSubmissionDepositCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.FellowshipReferenda_RefundSubmissionDepositCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_FellowshipreferendaRefundSubmissionDepositCall{FellowshipreferendaRefundSubmissionDepositCall: v}
			}
			iNdEx = postIndex
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FellowshipreferendaSetMetadataCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_FellowshipreferendaSetMetadataCall); ok {
				if err := oneof.FellowshipreferendaSetMetadataCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.FellowshipReferenda_SetMetadataCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_FellowshipreferendaSetMetadataCall{FellowshipreferendaSetMetadataCall: v}
			}
			iNdEx = postIndex
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FellowshipreferendaSubmitCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_FellowshipreferendaSubmitCall); ok {
				if err := oneof.FellowshipreferendaSubmitCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.FellowshipReferenda_SubmitCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_FellowshipreferendaSubmitCall{FellowshipreferendaSubmitCall: v}
			}
			iNdEx = postIndex
		case 56:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GearvoucherCallCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_GearvoucherCallCall); ok {
				if err := oneof.GearvoucherCallCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.GearVoucher_CallCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_GearvoucherCallCall{GearvoucherCallCall: v}
			}
			iNdEx = postIndex
		case 57:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GearvoucherCallDeprecatedCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_GearvoucherCallDeprecatedCall); ok {
				if err := oneof.GearvoucherCallDeprecatedCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.GearVoucher_CallDeprecatedCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_GearvoucherCallDeprecatedCall{GearvoucherCallDeprecatedCall: v}
			}
			iNdEx = postIndex
		case 58:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GearvoucherDeclineCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_GearvoucherDeclineCall); ok {
				if err := oneof.GearvoucherDeclineCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.GearVoucher_DeclineCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_GearvoucherDeclineCall{GearvoucherDeclineCall: v}
			}
			iNdEx = postIndex
		case 59:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GearvoucherIssueCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_GearvoucherIssueCall); ok {
				if err := oneof.GearvoucherIssueCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.GearVoucher_IssueCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_GearvoucherIssueCall{GearvoucherIssueCall: v}
			}
			iNdEx = postIndex
		case 60:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GearvoucherRevokeCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_GearvoucherRevokeCall); ok {
				if err := oneof.GearvoucherRevokeCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.GearVoucher_RevokeCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_GearvoucherRevokeCall{GearvoucherRevokeCall: v}
			}
			iNdEx = postIndex
		case 61:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GearvoucherUpdateCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_GearvoucherUpdateCall); ok {
				if err := oneof.GearvoucherUpdateCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.GearVoucher_UpdateCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_GearvoucherUpdateCall{GearvoucherUpdateCall: v}
			}
			iNdEx = postIndex
		case 62:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GearClaimValueCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_GearClaimValueCall); ok {
				if err := oneof.GearClaimValueCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Gear_ClaimValueCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_GearClaimValueCall{GearClaimValueCall: v}
			}
			iNdEx = postIndex
		case 63:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GearCreateProgramCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_GearCreateProgramCall); ok {
				if err := oneof.GearCreateProgramCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Gear_CreateProgramCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_GearCreateProgramCall{GearCreateProgramCall: v}
			}
			iNdEx = postIndex
		case 64:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GearRunCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_GearRunCall); ok {
				if err := oneof.GearRunCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Gear_RunCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_GearRunCall{GearRunCall: v}
			}
			iNdEx = postIndex
		case 65:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GearSendMessageCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_GearSendMessageCall); ok {
				if err := oneof.GearSendMessageCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Gear_SendMessageCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_GearSendMessageCall{GearSendMessageCall: v}
			}
			iNdEx = postIndex
		case 66:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GearSendReplyCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_GearSendReplyCall); ok {
				if err := oneof.GearSendReplyCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Gear_SendReplyCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_GearSendReplyCall{GearSendReplyCall: v}
			}
			iNdEx = postIndex
		case 67:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GearSetExecuteInherentCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_GearSetExecuteInherentCall); ok {
				if err := oneof.GearSetExecuteInherentCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Gear_SetExecuteInherentCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_GearSetExecuteInherentCall{GearSetExecuteInherentCall: v}
			}
			iNdEx = postIndex
		case 68:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GearUploadCodeCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_GearUploadCodeCall); ok {
				if err := oneof.GearUploadCodeCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Gear_UploadCodeCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_GearUploadCodeCall{GearUploadCodeCall: v}
			}
			iNdEx = postIndex
		case 69:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GearUploadProgramCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_GearUploadProgramCall); ok {
				if err := oneof.GearUploadProgramCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Gear_UploadProgramCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_GearUploadProgramCall{GearUploadProgramCall: v}
			}
			iNdEx = postIndex
		case 70:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrandpaNoteStalledCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_GrandpaNoteStalledCall); ok {
				if err := oneof.GrandpaNoteStalledCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Grandpa_NoteStalledCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_GrandpaNoteStalledCall{GrandpaNoteStalledCall: v}
			}
			iNdEx = postIndex
		case 71:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrandpaReportEquivocationCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_GrandpaReportEquivocationCall); ok {
				if err := oneof.GrandpaReportEquivocationCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Grandpa_ReportEquivocationCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_GrandpaReportEquivocationCall{GrandpaReportEquivocationCall: v}
			}
			iNdEx = postIndex
		case 72:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrandpaReportEquivocationUnsignedCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_GrandpaReportEquivocationUnsignedCall); ok {
				if err := oneof.GrandpaReportEquivocationUnsignedCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Grandpa_ReportEquivocationUnsignedCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_GrandpaReportEquivocationUnsignedCall{GrandpaReportEquivocationUnsignedCall: v}
			}
			iNdEx = postIndex
		case 73:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityAddRegistrarCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_IdentityAddRegistrarCall); ok {
				if err := oneof.IdentityAddRegistrarCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Identity_AddRegistrarCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_IdentityAddRegistrarCall{IdentityAddRegistrarCall: v}
			}
			iNdEx = postIndex
		case 74:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityAddSubCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_IdentityAddSubCall); ok {
				if err := oneof.IdentityAddSubCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Identity_AddSubCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_IdentityAddSubCall{IdentityAddSubCall: v}
			}
			iNdEx = postIndex
		case 75:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityCancelRequestCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_IdentityCancelRequestCall); ok {
				if err := oneof.IdentityCancelRequestCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Identity_CancelRequestCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_IdentityCancelRequestCall{IdentityCancelRequestCall: v}
			}
			iNdEx = postIndex
		case 76:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityKillIdentityCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_IdentityKillIdentityCall); ok {
				if err := oneof.IdentityKillIdentityCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Identity_KillIdentityCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_IdentityKillIdentityCall{IdentityKillIdentityCall: v}
			}
			iNdEx = postIndex
		case 77:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityProvideJudgementCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_IdentityProvideJudgementCall); ok {
				if err := oneof.IdentityProvideJudgementCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Identity_ProvideJudgementCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_IdentityProvideJudgementCall{IdentityProvideJudgementCall: v}
			}
			iNdEx = postIndex
		case 78:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityRemoveSubCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_IdentityRemoveSubCall); ok {
				if err := oneof.IdentityRemoveSubCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Identity_RemoveSubCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_IdentityRemoveSubCall{IdentityRemoveSubCall: v}
			}
			iNdEx = postIndex
		case 79:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityRenameSubCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_IdentityRenameSubCall); ok {
				if err := oneof.IdentityRenameSubCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Identity_RenameSubCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_IdentityRenameSubCall{IdentityRenameSubCall: v}
			}
			iNdEx = postIndex
		case 80:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityRequestJudgementCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_IdentityRequestJudgementCall); ok {
				if err := oneof.IdentityRequestJudgementCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Identity_RequestJudgementCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_IdentityRequestJudgementCall{IdentityRequestJudgementCall: v}
			}
			iNdEx = postIndex
		case 81:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentitySetAccountIdCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_IdentitySetAccountIdCall); ok {
				if err := oneof.IdentitySetAccountIdCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Identity_SetAccountIdCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_IdentitySetAccountIdCall{IdentitySetAccountIdCall: v}
			}
			iNdEx = postIndex
		case 82:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentitySetFeeCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_IdentitySetFeeCall); ok {
				if err := oneof.IdentitySetFeeCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Identity_SetFeeCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_IdentitySetFeeCall{IdentitySetFeeCall: v}
			}
			iNdEx = postIndex
		case 83:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentitySetFieldsCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_IdentitySetFieldsCall); ok {
				if err := oneof.IdentitySetFieldsCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Identity_SetFieldsCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_IdentitySetFieldsCall{IdentitySetFieldsCall: v}
			}
			iNdEx = postIndex
		case 84:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentitySetIdentityCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_IdentitySetIdentityCall); ok {
				if err := oneof.IdentitySetIdentityCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Identity_SetIdentityCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_IdentitySetIdentityCall{IdentitySetIdentityCall: v}
			}
			iNdEx = postIndex
		case 85:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentitySetSubsCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_IdentitySetSubsCall); ok {
				if err := oneof.IdentitySetSubsCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Identity_SetSubsCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_IdentitySetSubsCall{IdentitySetSubsCall: v}
			}
			iNdEx = postIndex
		case 86:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImonlineHeartbeatCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ImonlineHeartbeatCall); ok {
				if err := oneof.ImonlineHeartbeatCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.ImOnline_HeartbeatCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ImonlineHeartbeatCall{ImonlineHeartbeatCall: v}
			}
			iNdEx = postIndex
		case 87:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultisigApproveAsMultiCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_MultisigApproveAsMultiCall); ok {
				if err := oneof.MultisigApproveAsMultiCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Multisig_ApproveAsMultiCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_MultisigApproveAsMultiCall{MultisigApproveAsMultiCall: v}
			}
			iNdEx = postIndex
		case 88:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultisigAsMultiCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_MultisigAsMultiCall); ok {
				if err := oneof.MultisigAsMultiCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Multisig_AsMultiCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_MultisigAsMultiCall{MultisigAsMultiCall: v}
			}
			iNdEx = postIndex
		case 89:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultisigAsMultiThreshold_1Call", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_MultisigAsMultiThreshold_1Call); ok {
				if err := oneof.MultisigAsMultiThreshold_1Call.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Multisig_AsMultiThreshold1Call{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_MultisigAsMultiThreshold_1Call{MultisigAsMultiThreshold_1Call: v}
			}
			iNdEx = postIndex
		case 90:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultisigCancelAsMultiCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_MultisigCancelAsMultiCall); ok {
				if err := oneof.MultisigCancelAsMultiCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Multisig_CancelAsMultiCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_MultisigCancelAsMultiCall{MultisigCancelAsMultiCall: v}
			}
			iNdEx = postIndex
		case 91:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NominationpoolsAdjustPoolDepositCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_NominationpoolsAdjustPoolDepositCall); ok {
				if err := oneof.NominationpoolsAdjustPoolDepositCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.NominationPools_AdjustPoolDepositCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_NominationpoolsAdjustPoolDepositCall{NominationpoolsAdjustPoolDepositCall: v}
			}
			iNdEx = postIndex
		case 92:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NominationpoolsBondExtraCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_NominationpoolsBondExtraCall); ok {
				if err := oneof.NominationpoolsBondExtraCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.NominationPools_BondExtraCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_NominationpoolsBondExtraCall{NominationpoolsBondExtraCall: v}
			}
			iNdEx = postIndex
		case 93:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NominationpoolsBondExtraOtherCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_NominationpoolsBondExtraOtherCall); ok {
				if err := oneof.NominationpoolsBondExtraOtherCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.NominationPools_BondExtraOtherCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_NominationpoolsBondExtraOtherCall{NominationpoolsBondExtraOtherCall: v}
			}
			iNdEx = postIndex
		case 94:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NominationpoolsChillCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_NominationpoolsChillCall); ok {
				if err := oneof.NominationpoolsChillCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.NominationPools_ChillCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_NominationpoolsChillCall{NominationpoolsChillCall: v}
			}
			iNdEx = postIndex
		case 95:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NominationpoolsClaimCommissionCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_NominationpoolsClaimCommissionCall); ok {
				if err := oneof.NominationpoolsClaimCommissionCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.NominationPools_ClaimCommissionCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_NominationpoolsClaimCommissionCall{NominationpoolsClaimCommissionCall: v}
			}
			iNdEx = postIndex
		case 96:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NominationpoolsClaimPayoutOtherCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_NominationpoolsClaimPayoutOtherCall); ok {
				if err := oneof.NominationpoolsClaimPayoutOtherCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.NominationPools_ClaimPayoutOtherCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_NominationpoolsClaimPayoutOtherCall{NominationpoolsClaimPayoutOtherCall: v}
			}
			iNdEx = postIndex
		case 97:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NominationpoolsCreateCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_NominationpoolsCreateCall); ok {
				if err := oneof.NominationpoolsCreateCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.NominationPools_CreateCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_NominationpoolsCreateCall{NominationpoolsCreateCall: v}
			}
			iNdEx = postIndex
		case 98:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NominationpoolsCreateWithPoolIdCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_NominationpoolsCreateWithPoolIdCall); ok {
				if err := oneof.NominationpoolsCreateWithPoolIdCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.NominationPools_CreateWithPoolIdCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_NominationpoolsCreateWithPoolIdCall{NominationpoolsCreateWithPoolIdCall: v}
			}
			iNdEx = postIndex
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NominationpoolsJoinCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_NominationpoolsJoinCall); ok {
				if err := oneof.NominationpoolsJoinCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.NominationPools_JoinCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_NominationpoolsJoinCall{NominationpoolsJoinCall: v}
			}
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NominationpoolsNominateCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_NominationpoolsNominateCall); ok {
				if err := oneof.NominationpoolsNominateCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.NominationPools_NominateCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_NominationpoolsNominateCall{NominationpoolsNominateCall: v}
			}
			iNdEx = postIndex
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NominationpoolsPoolWithdrawUnbondedCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_NominationpoolsPoolWithdrawUnbondedCall); ok {
				if err := oneof.NominationpoolsPoolWithdrawUnbondedCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.NominationPools_PoolWithdrawUnbondedCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_NominationpoolsPoolWithdrawUnbondedCall{NominationpoolsPoolWithdrawUnbondedCall: v}
			}
			iNdEx = postIndex
		case 102:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NominationpoolsSetClaimPermissionCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_NominationpoolsSetClaimPermissionCall); ok {
				if err := oneof.NominationpoolsSetClaimPermissionCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.NominationPools_SetClaimPermissionCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_NominationpoolsSetClaimPermissionCall{NominationpoolsSetClaimPermissionCall: v}
			}
			iNdEx = postIndex
		case 103:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NominationpoolsSetCommissionCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_NominationpoolsSetCommissionCall); ok {
				if err := oneof.NominationpoolsSetCommissionCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.NominationPools_SetCommissionCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_NominationpoolsSetCommissionCall{NominationpoolsSetCommissionCall: v}
			}
			iNdEx = postIndex
		case 104:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NominationpoolsSetCommissionChangeRateCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_NominationpoolsSetCommissionChangeRateCall); ok {
				if err := oneof.NominationpoolsSetCommissionChangeRateCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.NominationPools_SetCommissionChangeRateCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_NominationpoolsSetCommissionChangeRateCall{NominationpoolsSetCommissionChangeRateCall: v}
			}
			iNdEx = postIndex
		case 105:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NominationpoolsSetCommissionMaxCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_NominationpoolsSetCommissionMaxCall); ok {
				if err := oneof.NominationpoolsSetCommissionMaxCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.NominationPools_SetCommissionMaxCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_NominationpoolsSetCommissionMaxCall{NominationpoolsSetCommissionMaxCall: v}
			}
			iNdEx = postIndex
		case 106:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NominationpoolsSetConfigsCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_NominationpoolsSetConfigsCall); ok {
				if err := oneof.NominationpoolsSetConfigsCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.NominationPools_SetConfigsCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_NominationpoolsSetConfigsCall{NominationpoolsSetConfigsCall: v}
			}
			iNdEx = postIndex
		case 107:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NominationpoolsSetMetadataCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_NominationpoolsSetMetadataCall); ok {
				if err := oneof.NominationpoolsSetMetadataCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.NominationPools_SetMetadataCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_NominationpoolsSetMetadataCall{NominationpoolsSetMetadataCall: v}
			}
			iNdEx = postIndex
		case 108:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NominationpoolsSetStateCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_NominationpoolsSetStateCall); ok {
				if err := oneof.NominationpoolsSetStateCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.NominationPools_SetStateCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_NominationpoolsSetStateCall{NominationpoolsSetStateCall: v}
			}
			iNdEx = postIndex
		case 109:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NominationpoolsUnbondCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_NominationpoolsUnbondCall); ok {
				if err := oneof.NominationpoolsUnbondCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.NominationPools_UnbondCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_NominationpoolsUnbondCall{NominationpoolsUnbondCall: v}
			}
			iNdEx = postIndex
		case 110:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NominationpoolsUpdateRolesCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_NominationpoolsUpdateRolesCall); ok {
				if err := oneof.NominationpoolsUpdateRolesCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.NominationPools_UpdateRolesCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_NominationpoolsUpdateRolesCall{NominationpoolsUpdateRolesCall: v}
			}
			iNdEx = postIndex
		case 111:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NominationpoolsWithdrawUnbondedCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_NominationpoolsWithdrawUnbondedCall); ok {
				if err := oneof.NominationpoolsWithdrawUnbondedCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.NominationPools_WithdrawUnbondedCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_NominationpoolsWithdrawUnbondedCall{NominationpoolsWithdrawUnbondedCall: v}
			}
			iNdEx = postIndex
		case 112:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreimageEnsureUpdatedCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_PreimageEnsureUpdatedCall); ok {
				if err := oneof.PreimageEnsureUpdatedCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Preimage_EnsureUpdatedCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_PreimageEnsureUpdatedCall{PreimageEnsureUpdatedCall: v}
			}
			iNdEx = postIndex
		case 113:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreimageNotePreimageCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_PreimageNotePreimageCall); ok {
				if err := oneof.PreimageNotePreimageCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Preimage_NotePreimageCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_PreimageNotePreimageCall{PreimageNotePreimageCall: v}
			}
			iNdEx = postIndex
		case 114:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreimageRequestPreimageCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_PreimageRequestPreimageCall); ok {
				if err := oneof.PreimageRequestPreimageCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Preimage_RequestPreimageCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_PreimageRequestPreimageCall{PreimageRequestPreimageCall: v}
			}
			iNdEx = postIndex
		case 115:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreimageUnnotePreimageCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_PreimageUnnotePreimageCall); ok {
				if err := oneof.PreimageUnnotePreimageCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Preimage_UnnotePreimageCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_PreimageUnnotePreimageCall{PreimageUnnotePreimageCall: v}
			}
			iNdEx = postIndex
		case 116:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreimageUnrequestPreimageCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_PreimageUnrequestPreimageCall); ok {
				if err := oneof.PreimageUnrequestPreimageCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Preimage_UnrequestPreimageCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_PreimageUnrequestPreimageCall{PreimageUnrequestPreimageCall: v}
			}
			iNdEx = postIndex
		case 117:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyAddProxyCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ProxyAddProxyCall); ok {
				if err := oneof.ProxyAddProxyCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Proxy_AddProxyCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ProxyAddProxyCall{ProxyAddProxyCall: v}
			}
			iNdEx = postIndex
		case 118:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyAnnounceCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ProxyAnnounceCall); ok {
				if err := oneof.ProxyAnnounceCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Proxy_AnnounceCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ProxyAnnounceCall{ProxyAnnounceCall: v}
			}
			iNdEx = postIndex
		case 119:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyCreatePureCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ProxyCreatePureCall); ok {
				if err := oneof.ProxyCreatePureCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Proxy_CreatePureCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ProxyCreatePureCall{ProxyCreatePureCall: v}
			}
			iNdEx = postIndex
		case 120:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyKillPureCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ProxyKillPureCall); ok {
				if err := oneof.ProxyKillPureCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Proxy_KillPureCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ProxyKillPureCall{ProxyKillPureCall: v}
			}
			iNdEx = postIndex
		case 121:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyProxyAnnouncedCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ProxyProxyAnnouncedCall); ok {
				if err := oneof.ProxyProxyAnnouncedCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Proxy_ProxyAnnouncedCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ProxyProxyAnnouncedCall{ProxyProxyAnnouncedCall: v}
			}
			iNdEx = postIndex
		case 122:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyProxyCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ProxyProxyCall); ok {
				if err := oneof.ProxyProxyCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Proxy_ProxyCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ProxyProxyCall{ProxyProxyCall: v}
			}
			iNdEx = postIndex
		case 123:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyRejectAnnouncementCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ProxyRejectAnnouncementCall); ok {
				if err := oneof.ProxyRejectAnnouncementCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Proxy_RejectAnnouncementCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ProxyRejectAnnouncementCall{ProxyRejectAnnouncementCall: v}
			}
			iNdEx = postIndex
		case 124:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyRemoveAnnouncementCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ProxyRemoveAnnouncementCall); ok {
				if err := oneof.ProxyRemoveAnnouncementCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Proxy_RemoveAnnouncementCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ProxyRemoveAnnouncementCall{ProxyRemoveAnnouncementCall: v}
			}
			iNdEx = postIndex
		case 125:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyRemoveProxyCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ProxyRemoveProxyCall); ok {
				if err := oneof.ProxyRemoveProxyCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Proxy_RemoveProxyCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ProxyRemoveProxyCall{ProxyRemoveProxyCall: v}
			}
			iNdEx = postIndex
		case 126:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferendaCancelCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ReferendaCancelCall); ok {
				if err := oneof.ReferendaCancelCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Referenda_CancelCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ReferendaCancelCall{ReferendaCancelCall: v}
			}
			iNdEx = postIndex
		case 127:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferendaKillCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ReferendaKillCall); ok {
				if err := oneof.ReferendaKillCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Referenda_KillCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ReferendaKillCall{ReferendaKillCall: v}
			}
			iNdEx = postIndex
		case 128:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferendaNudgeReferendumCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ReferendaNudgeReferendumCall); ok {
				if err := oneof.ReferendaNudgeReferendumCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Referenda_NudgeReferendumCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ReferendaNudgeReferendumCall{ReferendaNudgeReferendumCall: v}
			}
			iNdEx = postIndex
		case 129:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferendaOneFewerDecidingCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ReferendaOneFewerDecidingCall); ok {
				if err := oneof.ReferendaOneFewerDecidingCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Referenda_OneFewerDecidingCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ReferendaOneFewerDecidingCall{ReferendaOneFewerDecidingCall: v}
			}
			iNdEx = postIndex
		case 130:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferendaPlaceDecisionDepositCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ReferendaPlaceDecisionDepositCall); ok {
				if err := oneof.ReferendaPlaceDecisionDepositCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Referenda_PlaceDecisionDepositCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ReferendaPlaceDecisionDepositCall{ReferendaPlaceDecisionDepositCall: v}
			}
			iNdEx = postIndex
		case 131:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferendaRefundDecisionDepositCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ReferendaRefundDecisionDepositCall); ok {
				if err := oneof.ReferendaRefundDecisionDepositCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Referenda_RefundDecisionDepositCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ReferendaRefundDecisionDepositCall{ReferendaRefundDecisionDepositCall: v}
			}
			iNdEx = postIndex
		case 132:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferendaRefundSubmissionDepositCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ReferendaRefundSubmissionDepositCall); ok {
				if err := oneof.ReferendaRefundSubmissionDepositCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Referenda_RefundSubmissionDepositCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ReferendaRefundSubmissionDepositCall{ReferendaRefundSubmissionDepositCall: v}
			}
			iNdEx = postIndex
		case 133:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferendaSetMetadataCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ReferendaSetMetadataCall); ok {
				if err := oneof.ReferendaSetMetadataCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Referenda_SetMetadataCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ReferendaSetMetadataCall{ReferendaSetMetadataCall: v}
			}
			iNdEx = postIndex
		case 134:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferendaSubmitCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_ReferendaSubmitCall); ok {
				if err := oneof.ReferendaSubmitCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Referenda_SubmitCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_ReferendaSubmitCall{ReferendaSubmitCall: v}
			}
			iNdEx = postIndex
		case 135:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchedulerCancelCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_SchedulerCancelCall); ok {
				if err := oneof.SchedulerCancelCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Scheduler_CancelCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_SchedulerCancelCall{SchedulerCancelCall: v}
			}
			iNdEx = postIndex
		case 136:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchedulerCancelNamedCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_SchedulerCancelNamedCall); ok {
				if err := oneof.SchedulerCancelNamedCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Scheduler_CancelNamedCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_SchedulerCancelNamedCall{SchedulerCancelNamedCall: v}
			}
			iNdEx = postIndex
		case 137:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchedulerScheduleAfterCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_SchedulerScheduleAfterCall); ok {
				if err := oneof.SchedulerScheduleAfterCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Scheduler_ScheduleAfterCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_SchedulerScheduleAfterCall{SchedulerScheduleAfterCall: v}
			}
			iNdEx = postIndex
		case 138:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchedulerScheduleCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_SchedulerScheduleCall); ok {
				if err := oneof.SchedulerScheduleCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Scheduler_ScheduleCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_SchedulerScheduleCall{SchedulerScheduleCall: v}
			}
			iNdEx = postIndex
		case 139:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchedulerScheduleNamedAfterCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_SchedulerScheduleNamedAfterCall); ok {
				if err := oneof.SchedulerScheduleNamedAfterCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Scheduler_ScheduleNamedAfterCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_SchedulerScheduleNamedAfterCall{SchedulerScheduleNamedAfterCall: v}
			}
			iNdEx = postIndex
		case 140:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchedulerScheduleNamedCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_SchedulerScheduleNamedCall); ok {
				if err := oneof.SchedulerScheduleNamedCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Scheduler_ScheduleNamedCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_SchedulerScheduleNamedCall{SchedulerScheduleNamedCall: v}
			}
			iNdEx = postIndex
		case 141:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionSetKeysCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_SessionSetKeysCall); ok {
				if err := oneof.SessionSetKeysCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Session_SetKeysCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_SessionSetKeysCall{SessionSetKeysCall: v}
			}
			iNdEx = postIndex
		case 142:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingrewardsAlignSupplyCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_StakingrewardsAlignSupplyCall); ok {
				if err := oneof.StakingrewardsAlignSupplyCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.StakingRewards_AlignSupplyCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_StakingrewardsAlignSupplyCall{StakingrewardsAlignSupplyCall: v}
			}
			iNdEx = postIndex
		case 143:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingrewardsForceRefillCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_StakingrewardsForceRefillCall); ok {
				if err := oneof.StakingrewardsForceRefillCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.StakingRewards_ForceRefillCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_StakingrewardsForceRefillCall{StakingrewardsForceRefillCall: v}
			}
			iNdEx = postIndex
		case 144:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingrewardsRefillCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_StakingrewardsRefillCall); ok {
				if err := oneof.StakingrewardsRefillCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.StakingRewards_RefillCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_StakingrewardsRefillCall{StakingrewardsRefillCall: v}
			}
			iNdEx = postIndex
		case 145:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingrewardsWithdrawCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_StakingrewardsWithdrawCall); ok {
				if err := oneof.StakingrewardsWithdrawCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.StakingRewards_WithdrawCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_StakingrewardsWithdrawCall{StakingrewardsWithdrawCall: v}
			}
			iNdEx = postIndex
		case 146:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingBondCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_StakingBondCall); ok {
				if err := oneof.StakingBondCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Staking_BondCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_StakingBondCall{StakingBondCall: v}
			}
			iNdEx = postIndex
		case 147:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingBondExtraCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_StakingBondExtraCall); ok {
				if err := oneof.StakingBondExtraCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Staking_BondExtraCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_StakingBondExtraCall{StakingBondExtraCall: v}
			}
			iNdEx = postIndex
		case 148:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingCancelDeferredSlashCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_StakingCancelDeferredSlashCall); ok {
				if err := oneof.StakingCancelDeferredSlashCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Staking_CancelDeferredSlashCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_StakingCancelDeferredSlashCall{StakingCancelDeferredSlashCall: v}
			}
			iNdEx = postIndex
		case 149:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingChillOtherCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_StakingChillOtherCall); ok {
				if err := oneof.StakingChillOtherCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Staking_ChillOtherCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_StakingChillOtherCall{StakingChillOtherCall: v}
			}
			iNdEx = postIndex
		case 150:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingForceApplyMinCommissionCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_StakingForceApplyMinCommissionCall); ok {
				if err := oneof.StakingForceApplyMinCommissionCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Staking_ForceApplyMinCommissionCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_StakingForceApplyMinCommissionCall{StakingForceApplyMinCommissionCall: v}
			}
			iNdEx = postIndex
		case 151:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingForceUnstakeCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_StakingForceUnstakeCall); ok {
				if err := oneof.StakingForceUnstakeCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Staking_ForceUnstakeCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_StakingForceUnstakeCall{StakingForceUnstakeCall: v}
			}
			iNdEx = postIndex
		case 152:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingIncreaseValidatorCountCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_StakingIncreaseValidatorCountCall); ok {
				if err := oneof.StakingIncreaseValidatorCountCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Staking_IncreaseValidatorCountCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_StakingIncreaseValidatorCountCall{StakingIncreaseValidatorCountCall: v}
			}
			iNdEx = postIndex
		case 153:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingKickCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_StakingKickCall); ok {
				if err := oneof.StakingKickCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Staking_KickCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_StakingKickCall{StakingKickCall: v}
			}
			iNdEx = postIndex
		case 154:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingNominateCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_StakingNominateCall); ok {
				if err := oneof.StakingNominateCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Staking_NominateCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_StakingNominateCall{StakingNominateCall: v}
			}
			iNdEx = postIndex
		case 155:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingPayoutStakersCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_StakingPayoutStakersCall); ok {
				if err := oneof.StakingPayoutStakersCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Staking_PayoutStakersCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_StakingPayoutStakersCall{StakingPayoutStakersCall: v}
			}
			iNdEx = postIndex
		case 156:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingReapStashCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_StakingReapStashCall); ok {
				if err := oneof.StakingReapStashCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Staking_ReapStashCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_StakingReapStashCall{StakingReapStashCall: v}
			}
			iNdEx = postIndex
		case 157:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingRebondCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_StakingRebondCall); ok {
				if err := oneof.StakingRebondCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Staking_RebondCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_StakingRebondCall{StakingRebondCall: v}
			}
			iNdEx = postIndex
		case 158:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingScaleValidatorCountCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_StakingScaleValidatorCountCall); ok {
				if err := oneof.StakingScaleValidatorCountCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Staking_ScaleValidatorCountCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_StakingScaleValidatorCountCall{StakingScaleValidatorCountCall: v}
			}
			iNdEx = postIndex
		case 159:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingSetInvulnerablesCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_StakingSetInvulnerablesCall); ok {
				if err := oneof.StakingSetInvulnerablesCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Staking_SetInvulnerablesCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_StakingSetInvulnerablesCall{StakingSetInvulnerablesCall: v}
			}
			iNdEx = postIndex
		case 160:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingSetMinCommissionCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_StakingSetMinCommissionCall); ok {
				if err := oneof.StakingSetMinCommissionCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Staking_SetMinCommissionCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_StakingSetMinCommissionCall{StakingSetMinCommissionCall: v}
			}
			iNdEx = postIndex
		case 161:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingSetPayeeCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_StakingSetPayeeCall); ok {
				if err := oneof.StakingSetPayeeCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Staking_SetPayeeCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_StakingSetPayeeCall{StakingSetPayeeCall: v}
			}
			iNdEx = postIndex
		case 162:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingSetStakingConfigsCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_StakingSetStakingConfigsCall); ok {
				if err := oneof.StakingSetStakingConfigsCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Staking_SetStakingConfigsCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_StakingSetStakingConfigsCall{StakingSetStakingConfigsCall: v}
			}
			iNdEx = postIndex
		case 163:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingSetValidatorCountCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_StakingSetValidatorCountCall); ok {
				if err := oneof.StakingSetValidatorCountCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Staking_SetValidatorCountCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_StakingSetValidatorCountCall{StakingSetValidatorCountCall: v}
			}
			iNdEx = postIndex
		case 164:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingUnbondCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_StakingUnbondCall); ok {
				if err := oneof.StakingUnbondCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Staking_UnbondCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_StakingUnbondCall{StakingUnbondCall: v}
			}
			iNdEx = postIndex
		case 165:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingValidateCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_StakingValidateCall); ok {
				if err := oneof.StakingValidateCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Staking_ValidateCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_StakingValidateCall{StakingValidateCall: v}
			}
			iNdEx = postIndex
		case 166:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingWithdrawUnbondedCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_StakingWithdrawUnbondedCall); ok {
				if err := oneof.StakingWithdrawUnbondedCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Staking_WithdrawUnbondedCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_StakingWithdrawUnbondedCall{StakingWithdrawUnbondedCall: v}
			}
			iNdEx = postIndex
		case 167:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemKillPrefixCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_SystemKillPrefixCall); ok {
				if err := oneof.SystemKillPrefixCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.System_KillPrefixCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_SystemKillPrefixCall{SystemKillPrefixCall: v}
			}
			iNdEx = postIndex
		case 168:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemKillStorageCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_SystemKillStorageCall); ok {
				if err := oneof.SystemKillStorageCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.System_KillStorageCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_SystemKillStorageCall{SystemKillStorageCall: v}
			}
			iNdEx = postIndex
		case 169:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemRemarkCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_SystemRemarkCall); ok {
				if err := oneof.SystemRemarkCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.System_RemarkCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_SystemRemarkCall{SystemRemarkCall: v}
			}
			iNdEx = postIndex
		case 170:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemRemarkWithEventCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_SystemRemarkWithEventCall); ok {
				if err := oneof.SystemRemarkWithEventCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.System_RemarkWithEventCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_SystemRemarkWithEventCall{SystemRemarkWithEventCall: v}
			}
			iNdEx = postIndex
		case 171:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemSetCodeCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_SystemSetCodeCall); ok {
				if err := oneof.SystemSetCodeCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.System_SetCodeCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_SystemSetCodeCall{SystemSetCodeCall: v}
			}
			iNdEx = postIndex
		case 172:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemSetCodeWithoutChecksCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_SystemSetCodeWithoutChecksCall); ok {
				if err := oneof.SystemSetCodeWithoutChecksCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.System_SetCodeWithoutChecksCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_SystemSetCodeWithoutChecksCall{SystemSetCodeWithoutChecksCall: v}
			}
			iNdEx = postIndex
		case 173:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemSetHeapPagesCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_SystemSetHeapPagesCall); ok {
				if err := oneof.SystemSetHeapPagesCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.System_SetHeapPagesCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_SystemSetHeapPagesCall{SystemSetHeapPagesCall: v}
			}
			iNdEx = postIndex
		case 174:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemSetStorageCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_SystemSetStorageCall); ok {
				if err := oneof.SystemSetStorageCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.System_SetStorageCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_SystemSetStorageCall{SystemSetStorageCall: v}
			}
			iNdEx = postIndex
		case 175:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimestampSetCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_TimestampSetCall); ok {
				if err := oneof.TimestampSetCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Timestamp_SetCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_TimestampSetCall{TimestampSetCall: v}
			}
			iNdEx = postIndex
		case 176:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TreasuryApproveProposalCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_TreasuryApproveProposalCall); ok {
				if err := oneof.TreasuryApproveProposalCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Treasury_ApproveProposalCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_TreasuryApproveProposalCall{TreasuryApproveProposalCall: v}
			}
			iNdEx = postIndex
		case 177:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TreasuryCheckStatusCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_TreasuryCheckStatusCall); ok {
				if err := oneof.TreasuryCheckStatusCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Treasury_CheckStatusCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_TreasuryCheckStatusCall{TreasuryCheckStatusCall: v}
			}
			iNdEx = postIndex
		case 178:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TreasuryPayoutCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_TreasuryPayoutCall); ok {
				if err := oneof.TreasuryPayoutCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Treasury_PayoutCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_TreasuryPayoutCall{TreasuryPayoutCall: v}
			}
			iNdEx = postIndex
		case 179:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TreasuryProposeSpendCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_TreasuryProposeSpendCall); ok {
				if err := oneof.TreasuryProposeSpendCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Treasury_ProposeSpendCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_TreasuryProposeSpendCall{TreasuryProposeSpendCall: v}
			}
			iNdEx = postIndex
		case 180:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TreasuryRejectProposalCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_TreasuryRejectProposalCall); ok {
				if err := oneof.TreasuryRejectProposalCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Treasury_RejectProposalCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_TreasuryRejectProposalCall{TreasuryRejectProposalCall: v}
			}
			iNdEx = postIndex
		case 181:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TreasuryRemoveApprovalCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_TreasuryRemoveApprovalCall); ok {
				if err := oneof.TreasuryRemoveApprovalCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Treasury_RemoveApprovalCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_TreasuryRemoveApprovalCall{TreasuryRemoveApprovalCall: v}
			}
			iNdEx = postIndex
		case 182:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TreasurySpendCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_TreasurySpendCall); ok {
				if err := oneof.TreasurySpendCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Treasury_SpendCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_TreasurySpendCall{TreasurySpendCall: v}
			}
			iNdEx = postIndex
		case 183:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TreasurySpendLocalCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_TreasurySpendLocalCall); ok {
				if err := oneof.TreasurySpendLocalCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Treasury_SpendLocalCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_TreasurySpendLocalCall{TreasurySpendLocalCall: v}
			}
			iNdEx = postIndex
		case 184:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TreasuryVoidSpendCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_TreasuryVoidSpendCall); ok {
				if err := oneof.TreasuryVoidSpendCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Treasury_VoidSpendCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_TreasuryVoidSpendCall{TreasuryVoidSpendCall: v}
			}
			iNdEx = postIndex
		case 185:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UtilityAsDerivativeCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_UtilityAsDerivativeCall); ok {
				if err := oneof.UtilityAsDerivativeCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Utility_AsDerivativeCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_UtilityAsDerivativeCall{UtilityAsDerivativeCall: v}
			}
			iNdEx = postIndex
		case 186:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UtilityBatchAllCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_UtilityBatchAllCall); ok {
				if err := oneof.UtilityBatchAllCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Utility_BatchAllCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_UtilityBatchAllCall{UtilityBatchAllCall: v}
			}
			iNdEx = postIndex
		case 187:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UtilityBatchCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_UtilityBatchCall); ok {
				if err := oneof.UtilityBatchCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Utility_BatchCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_UtilityBatchCall{UtilityBatchCall: v}
			}
			iNdEx = postIndex
		case 188:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UtilityDispatchAsCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_UtilityDispatchAsCall); ok {
				if err := oneof.UtilityDispatchAsCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Utility_DispatchAsCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_UtilityDispatchAsCall{UtilityDispatchAsCall: v}
			}
			iNdEx = postIndex
		case 189:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UtilityForceBatchCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_UtilityForceBatchCall); ok {
				if err := oneof.UtilityForceBatchCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Utility_ForceBatchCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_UtilityForceBatchCall{UtilityForceBatchCall: v}
			}
			iNdEx = postIndex
		case 190:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UtilityWithWeightCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_UtilityWithWeightCall); ok {
				if err := oneof.UtilityWithWeightCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Utility_WithWeightCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_UtilityWithWeightCall{UtilityWithWeightCall: v}
			}
			iNdEx = postIndex
		case 191:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingForceVestedTransferCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_VestingForceVestedTransferCall); ok {
				if err := oneof.VestingForceVestedTransferCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Vesting_ForceVestedTransferCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_VestingForceVestedTransferCall{VestingForceVestedTransferCall: v}
			}
			iNdEx = postIndex
		case 192:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingMergeSchedulesCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_VestingMergeSchedulesCall); ok {
				if err := oneof.VestingMergeSchedulesCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Vesting_MergeSchedulesCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_VestingMergeSchedulesCall{VestingMergeSchedulesCall: v}
			}
			iNdEx = postIndex
		case 193:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingVestOtherCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_VestingVestOtherCall); ok {
				if err := oneof.VestingVestOtherCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Vesting_VestOtherCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_VestingVestOtherCall{VestingVestOtherCall: v}
			}
			iNdEx = postIndex
		case 194:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingVestedTransferCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_VestingVestedTransferCall); ok {
				if err := oneof.VestingVestedTransferCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Vesting_VestedTransferCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_VestingVestedTransferCall{VestingVestedTransferCall: v}
			}
			iNdEx = postIndex
		case 195:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhitelistDispatchWhitelistedCallCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_WhitelistDispatchWhitelistedCallCall); ok {
				if err := oneof.WhitelistDispatchWhitelistedCallCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Whitelist_DispatchWhitelistedCallCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_WhitelistDispatchWhitelistedCallCall{WhitelistDispatchWhitelistedCallCall: v}
			}
			iNdEx = postIndex
		case 196:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhitelistDispatchWhitelistedCallWithPreimageCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_WhitelistDispatchWhitelistedCallWithPreimageCall); ok {
				if err := oneof.WhitelistDispatchWhitelistedCallWithPreimageCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Whitelist_DispatchWhitelistedCallWithPreimageCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_WhitelistDispatchWhitelistedCallWithPreimageCall{WhitelistDispatchWhitelistedCallWithPreimageCall: v}
			}
			iNdEx = postIndex
		case 197:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhitelistRemoveWhitelistedCallCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_WhitelistRemoveWhitelistedCallCall); ok {
				if err := oneof.WhitelistRemoveWhitelistedCallCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Whitelist_RemoveWhitelistedCallCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_WhitelistRemoveWhitelistedCallCall{WhitelistRemoveWhitelistedCallCall: v}
			}
			iNdEx = postIndex
		case 198:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhitelistWhitelistCallCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protohelpers.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protohelpers.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protohelpers.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Call.(*RuntimeCall_WhitelistWhitelistCallCall); ok {
				if err := oneof.WhitelistWhitelistCallCall.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &v1.Whitelist_WhitelistCallCall{}
				if err := v.UnmarshalVTUnsafe(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Call = &RuntimeCall_WhitelistWhitelistCallCall{WhitelistWhitelistCallCall: v}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protohelpers.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protohelpers.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
