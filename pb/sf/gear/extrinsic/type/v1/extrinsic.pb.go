// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: sf/gear/extrinsic/type/v1/extrinsic.proto

package pbgearextrinsic

import (
	v1 "github.com/streamingfast/firehose-gear/pb/sf/gear/metadata/type/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RuntimeCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Call:
	//
	//	*RuntimeCall_BabePlanConfigChangeCall
	//	*RuntimeCall_BabeReportEquivocationCall
	//	*RuntimeCall_BabeReportEquivocationUnsignedCall
	//	*RuntimeCall_BagslistPutInFrontOfCall
	//	*RuntimeCall_BagslistPutInFrontOfOtherCall
	//	*RuntimeCall_BagslistRebagCall
	//	*RuntimeCall_BalancesForceSetBalanceCall
	//	*RuntimeCall_BalancesForceTransferCall
	//	*RuntimeCall_BalancesForceUnreserveCall
	//	*RuntimeCall_BalancesTransferAllCall
	//	*RuntimeCall_BalancesTransferAllowDeathCall
	//	*RuntimeCall_BalancesTransferKeepAliveCall
	//	*RuntimeCall_BalancesUpgradeAccountsCall
	//	*RuntimeCall_BountiesAcceptCuratorCall
	//	*RuntimeCall_BountiesApproveBountyCall
	//	*RuntimeCall_BountiesAwardBountyCall
	//	*RuntimeCall_BountiesClaimBountyCall
	//	*RuntimeCall_BountiesCloseBountyCall
	//	*RuntimeCall_BountiesExtendBountyExpiryCall
	//	*RuntimeCall_BountiesProposeBountyCall
	//	*RuntimeCall_BountiesProposeCuratorCall
	//	*RuntimeCall_BountiesUnassignCuratorCall
	//	*RuntimeCall_ChildbountiesAcceptCuratorCall
	//	*RuntimeCall_ChildbountiesAddChildBountyCall
	//	*RuntimeCall_ChildbountiesAwardChildBountyCall
	//	*RuntimeCall_ChildbountiesClaimChildBountyCall
	//	*RuntimeCall_ChildbountiesCloseChildBountyCall
	//	*RuntimeCall_ChildbountiesProposeCuratorCall
	//	*RuntimeCall_ChildbountiesUnassignCuratorCall
	//	*RuntimeCall_ConvictionvotingDelegateCall
	//	*RuntimeCall_ConvictionvotingRemoveOtherVoteCall
	//	*RuntimeCall_ConvictionvotingRemoveVoteCall
	//	*RuntimeCall_ConvictionvotingUndelegateCall
	//	*RuntimeCall_ConvictionvotingUnlockCall
	//	*RuntimeCall_ConvictionvotingVoteCall
	//	*RuntimeCall_ElectionprovidermultiphaseGovernanceFallbackCall
	//	*RuntimeCall_ElectionprovidermultiphaseSetEmergencyElectionResultCall
	//	*RuntimeCall_ElectionprovidermultiphaseSetMinimumUntrustedScoreCall
	//	*RuntimeCall_ElectionprovidermultiphaseSubmitCall
	//	*RuntimeCall_ElectionprovidermultiphaseSubmitUnsignedCall
	//	*RuntimeCall_FellowshipcollectiveAddMemberCall
	//	*RuntimeCall_FellowshipcollectiveCleanupPollCall
	//	*RuntimeCall_FellowshipcollectiveDemoteMemberCall
	//	*RuntimeCall_FellowshipcollectivePromoteMemberCall
	//	*RuntimeCall_FellowshipcollectiveRemoveMemberCall
	//	*RuntimeCall_FellowshipcollectiveVoteCall
	//	*RuntimeCall_FellowshipreferendaCancelCall
	//	*RuntimeCall_FellowshipreferendaKillCall
	//	*RuntimeCall_FellowshipreferendaNudgeReferendumCall
	//	*RuntimeCall_FellowshipreferendaOneFewerDecidingCall
	//	*RuntimeCall_FellowshipreferendaPlaceDecisionDepositCall
	//	*RuntimeCall_FellowshipreferendaRefundDecisionDepositCall
	//	*RuntimeCall_FellowshipreferendaRefundSubmissionDepositCall
	//	*RuntimeCall_FellowshipreferendaSetMetadataCall
	//	*RuntimeCall_FellowshipreferendaSubmitCall
	//	*RuntimeCall_GearvoucherCallCall
	//	*RuntimeCall_GearvoucherCallDeprecatedCall
	//	*RuntimeCall_GearvoucherDeclineCall
	//	*RuntimeCall_GearvoucherIssueCall
	//	*RuntimeCall_GearvoucherRevokeCall
	//	*RuntimeCall_GearvoucherUpdateCall
	//	*RuntimeCall_GearClaimValueCall
	//	*RuntimeCall_GearCreateProgramCall
	//	*RuntimeCall_GearRunCall
	//	*RuntimeCall_GearSendMessageCall
	//	*RuntimeCall_GearSendReplyCall
	//	*RuntimeCall_GearSetExecuteInherentCall
	//	*RuntimeCall_GearUploadCodeCall
	//	*RuntimeCall_GearUploadProgramCall
	//	*RuntimeCall_GrandpaNoteStalledCall
	//	*RuntimeCall_GrandpaReportEquivocationCall
	//	*RuntimeCall_GrandpaReportEquivocationUnsignedCall
	//	*RuntimeCall_IdentityAddRegistrarCall
	//	*RuntimeCall_IdentityAddSubCall
	//	*RuntimeCall_IdentityCancelRequestCall
	//	*RuntimeCall_IdentityKillIdentityCall
	//	*RuntimeCall_IdentityProvideJudgementCall
	//	*RuntimeCall_IdentityRemoveSubCall
	//	*RuntimeCall_IdentityRenameSubCall
	//	*RuntimeCall_IdentityRequestJudgementCall
	//	*RuntimeCall_IdentitySetAccountIdCall
	//	*RuntimeCall_IdentitySetFeeCall
	//	*RuntimeCall_IdentitySetFieldsCall
	//	*RuntimeCall_IdentitySetIdentityCall
	//	*RuntimeCall_IdentitySetSubsCall
	//	*RuntimeCall_ImonlineHeartbeatCall
	//	*RuntimeCall_MultisigApproveAsMultiCall
	//	*RuntimeCall_MultisigAsMultiCall
	//	*RuntimeCall_MultisigAsMultiThreshold_1Call
	//	*RuntimeCall_MultisigCancelAsMultiCall
	//	*RuntimeCall_NominationpoolsAdjustPoolDepositCall
	//	*RuntimeCall_NominationpoolsBondExtraCall
	//	*RuntimeCall_NominationpoolsBondExtraOtherCall
	//	*RuntimeCall_NominationpoolsChillCall
	//	*RuntimeCall_NominationpoolsClaimCommissionCall
	//	*RuntimeCall_NominationpoolsClaimPayoutOtherCall
	//	*RuntimeCall_NominationpoolsCreateCall
	//	*RuntimeCall_NominationpoolsCreateWithPoolIdCall
	//	*RuntimeCall_NominationpoolsJoinCall
	//	*RuntimeCall_NominationpoolsNominateCall
	//	*RuntimeCall_NominationpoolsPoolWithdrawUnbondedCall
	//	*RuntimeCall_NominationpoolsSetClaimPermissionCall
	//	*RuntimeCall_NominationpoolsSetCommissionCall
	//	*RuntimeCall_NominationpoolsSetCommissionChangeRateCall
	//	*RuntimeCall_NominationpoolsSetCommissionMaxCall
	//	*RuntimeCall_NominationpoolsSetConfigsCall
	//	*RuntimeCall_NominationpoolsSetMetadataCall
	//	*RuntimeCall_NominationpoolsSetStateCall
	//	*RuntimeCall_NominationpoolsUnbondCall
	//	*RuntimeCall_NominationpoolsUpdateRolesCall
	//	*RuntimeCall_NominationpoolsWithdrawUnbondedCall
	//	*RuntimeCall_PreimageEnsureUpdatedCall
	//	*RuntimeCall_PreimageNotePreimageCall
	//	*RuntimeCall_PreimageRequestPreimageCall
	//	*RuntimeCall_PreimageUnnotePreimageCall
	//	*RuntimeCall_PreimageUnrequestPreimageCall
	//	*RuntimeCall_ProxyAddProxyCall
	//	*RuntimeCall_ProxyAnnounceCall
	//	*RuntimeCall_ProxyCreatePureCall
	//	*RuntimeCall_ProxyKillPureCall
	//	*RuntimeCall_ProxyProxyAnnouncedCall
	//	*RuntimeCall_ProxyProxyCall
	//	*RuntimeCall_ProxyRejectAnnouncementCall
	//	*RuntimeCall_ProxyRemoveAnnouncementCall
	//	*RuntimeCall_ProxyRemoveProxyCall
	//	*RuntimeCall_ReferendaCancelCall
	//	*RuntimeCall_ReferendaKillCall
	//	*RuntimeCall_ReferendaNudgeReferendumCall
	//	*RuntimeCall_ReferendaOneFewerDecidingCall
	//	*RuntimeCall_ReferendaPlaceDecisionDepositCall
	//	*RuntimeCall_ReferendaRefundDecisionDepositCall
	//	*RuntimeCall_ReferendaRefundSubmissionDepositCall
	//	*RuntimeCall_ReferendaSetMetadataCall
	//	*RuntimeCall_ReferendaSubmitCall
	//	*RuntimeCall_SchedulerCancelCall
	//	*RuntimeCall_SchedulerCancelNamedCall
	//	*RuntimeCall_SchedulerScheduleAfterCall
	//	*RuntimeCall_SchedulerScheduleCall
	//	*RuntimeCall_SchedulerScheduleNamedAfterCall
	//	*RuntimeCall_SchedulerScheduleNamedCall
	//	*RuntimeCall_SessionSetKeysCall
	//	*RuntimeCall_StakingrewardsAlignSupplyCall
	//	*RuntimeCall_StakingrewardsForceRefillCall
	//	*RuntimeCall_StakingrewardsRefillCall
	//	*RuntimeCall_StakingrewardsWithdrawCall
	//	*RuntimeCall_StakingBondCall
	//	*RuntimeCall_StakingBondExtraCall
	//	*RuntimeCall_StakingCancelDeferredSlashCall
	//	*RuntimeCall_StakingChillOtherCall
	//	*RuntimeCall_StakingForceApplyMinCommissionCall
	//	*RuntimeCall_StakingForceUnstakeCall
	//	*RuntimeCall_StakingIncreaseValidatorCountCall
	//	*RuntimeCall_StakingKickCall
	//	*RuntimeCall_StakingNominateCall
	//	*RuntimeCall_StakingPayoutStakersCall
	//	*RuntimeCall_StakingReapStashCall
	//	*RuntimeCall_StakingRebondCall
	//	*RuntimeCall_StakingScaleValidatorCountCall
	//	*RuntimeCall_StakingSetInvulnerablesCall
	//	*RuntimeCall_StakingSetMinCommissionCall
	//	*RuntimeCall_StakingSetPayeeCall
	//	*RuntimeCall_StakingSetStakingConfigsCall
	//	*RuntimeCall_StakingSetValidatorCountCall
	//	*RuntimeCall_StakingUnbondCall
	//	*RuntimeCall_StakingValidateCall
	//	*RuntimeCall_StakingWithdrawUnbondedCall
	//	*RuntimeCall_SystemKillPrefixCall
	//	*RuntimeCall_SystemKillStorageCall
	//	*RuntimeCall_SystemRemarkCall
	//	*RuntimeCall_SystemRemarkWithEventCall
	//	*RuntimeCall_SystemSetCodeCall
	//	*RuntimeCall_SystemSetCodeWithoutChecksCall
	//	*RuntimeCall_SystemSetHeapPagesCall
	//	*RuntimeCall_SystemSetStorageCall
	//	*RuntimeCall_TimestampSetCall
	//	*RuntimeCall_TreasuryApproveProposalCall
	//	*RuntimeCall_TreasuryCheckStatusCall
	//	*RuntimeCall_TreasuryPayoutCall
	//	*RuntimeCall_TreasuryProposeSpendCall
	//	*RuntimeCall_TreasuryRejectProposalCall
	//	*RuntimeCall_TreasuryRemoveApprovalCall
	//	*RuntimeCall_TreasurySpendCall
	//	*RuntimeCall_TreasurySpendLocalCall
	//	*RuntimeCall_TreasuryVoidSpendCall
	//	*RuntimeCall_UtilityAsDerivativeCall
	//	*RuntimeCall_UtilityBatchAllCall
	//	*RuntimeCall_UtilityBatchCall
	//	*RuntimeCall_UtilityDispatchAsCall
	//	*RuntimeCall_UtilityForceBatchCall
	//	*RuntimeCall_UtilityWithWeightCall
	//	*RuntimeCall_VestingForceVestedTransferCall
	//	*RuntimeCall_VestingMergeSchedulesCall
	//	*RuntimeCall_VestingVestOtherCall
	//	*RuntimeCall_VestingVestedTransferCall
	//	*RuntimeCall_WhitelistDispatchWhitelistedCallCall
	//	*RuntimeCall_WhitelistDispatchWhitelistedCallWithPreimageCall
	//	*RuntimeCall_WhitelistRemoveWhitelistedCallCall
	//	*RuntimeCall_WhitelistWhitelistCallCall
	Call isRuntimeCall_Call `protobuf_oneof:"call"`
}

func (x *RuntimeCall) Reset() {
	*x = RuntimeCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_extrinsic_type_v1_extrinsic_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuntimeCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeCall) ProtoMessage() {}

func (x *RuntimeCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_extrinsic_type_v1_extrinsic_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeCall.ProtoReflect.Descriptor instead.
func (*RuntimeCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_extrinsic_type_v1_extrinsic_proto_rawDescGZIP(), []int{0}
}

func (m *RuntimeCall) GetCall() isRuntimeCall_Call {
	if m != nil {
		return m.Call
	}
	return nil
}

func (x *RuntimeCall) GetBabePlanConfigChangeCall() *v1.Babe_PlanConfigChangeCall {
	if x, ok := x.GetCall().(*RuntimeCall_BabePlanConfigChangeCall); ok {
		return x.BabePlanConfigChangeCall
	}
	return nil
}

func (x *RuntimeCall) GetBabeReportEquivocationCall() *v1.Babe_ReportEquivocationCall {
	if x, ok := x.GetCall().(*RuntimeCall_BabeReportEquivocationCall); ok {
		return x.BabeReportEquivocationCall
	}
	return nil
}

func (x *RuntimeCall) GetBabeReportEquivocationUnsignedCall() *v1.Babe_ReportEquivocationUnsignedCall {
	if x, ok := x.GetCall().(*RuntimeCall_BabeReportEquivocationUnsignedCall); ok {
		return x.BabeReportEquivocationUnsignedCall
	}
	return nil
}

func (x *RuntimeCall) GetBagslistPutInFrontOfCall() *v1.BagsList_PutInFrontOfCall {
	if x, ok := x.GetCall().(*RuntimeCall_BagslistPutInFrontOfCall); ok {
		return x.BagslistPutInFrontOfCall
	}
	return nil
}

func (x *RuntimeCall) GetBagslistPutInFrontOfOtherCall() *v1.BagsList_PutInFrontOfOtherCall {
	if x, ok := x.GetCall().(*RuntimeCall_BagslistPutInFrontOfOtherCall); ok {
		return x.BagslistPutInFrontOfOtherCall
	}
	return nil
}

func (x *RuntimeCall) GetBagslistRebagCall() *v1.BagsList_RebagCall {
	if x, ok := x.GetCall().(*RuntimeCall_BagslistRebagCall); ok {
		return x.BagslistRebagCall
	}
	return nil
}

func (x *RuntimeCall) GetBalancesForceSetBalanceCall() *v1.Balances_ForceSetBalanceCall {
	if x, ok := x.GetCall().(*RuntimeCall_BalancesForceSetBalanceCall); ok {
		return x.BalancesForceSetBalanceCall
	}
	return nil
}

func (x *RuntimeCall) GetBalancesForceTransferCall() *v1.Balances_ForceTransferCall {
	if x, ok := x.GetCall().(*RuntimeCall_BalancesForceTransferCall); ok {
		return x.BalancesForceTransferCall
	}
	return nil
}

func (x *RuntimeCall) GetBalancesForceUnreserveCall() *v1.Balances_ForceUnreserveCall {
	if x, ok := x.GetCall().(*RuntimeCall_BalancesForceUnreserveCall); ok {
		return x.BalancesForceUnreserveCall
	}
	return nil
}

func (x *RuntimeCall) GetBalancesTransferAllCall() *v1.Balances_TransferAllCall {
	if x, ok := x.GetCall().(*RuntimeCall_BalancesTransferAllCall); ok {
		return x.BalancesTransferAllCall
	}
	return nil
}

func (x *RuntimeCall) GetBalancesTransferAllowDeathCall() *v1.Balances_TransferAllowDeathCall {
	if x, ok := x.GetCall().(*RuntimeCall_BalancesTransferAllowDeathCall); ok {
		return x.BalancesTransferAllowDeathCall
	}
	return nil
}

func (x *RuntimeCall) GetBalancesTransferKeepAliveCall() *v1.Balances_TransferKeepAliveCall {
	if x, ok := x.GetCall().(*RuntimeCall_BalancesTransferKeepAliveCall); ok {
		return x.BalancesTransferKeepAliveCall
	}
	return nil
}

func (x *RuntimeCall) GetBalancesUpgradeAccountsCall() *v1.Balances_UpgradeAccountsCall {
	if x, ok := x.GetCall().(*RuntimeCall_BalancesUpgradeAccountsCall); ok {
		return x.BalancesUpgradeAccountsCall
	}
	return nil
}

func (x *RuntimeCall) GetBountiesAcceptCuratorCall() *v1.Bounties_AcceptCuratorCall {
	if x, ok := x.GetCall().(*RuntimeCall_BountiesAcceptCuratorCall); ok {
		return x.BountiesAcceptCuratorCall
	}
	return nil
}

func (x *RuntimeCall) GetBountiesApproveBountyCall() *v1.Bounties_ApproveBountyCall {
	if x, ok := x.GetCall().(*RuntimeCall_BountiesApproveBountyCall); ok {
		return x.BountiesApproveBountyCall
	}
	return nil
}

func (x *RuntimeCall) GetBountiesAwardBountyCall() *v1.Bounties_AwardBountyCall {
	if x, ok := x.GetCall().(*RuntimeCall_BountiesAwardBountyCall); ok {
		return x.BountiesAwardBountyCall
	}
	return nil
}

func (x *RuntimeCall) GetBountiesClaimBountyCall() *v1.Bounties_ClaimBountyCall {
	if x, ok := x.GetCall().(*RuntimeCall_BountiesClaimBountyCall); ok {
		return x.BountiesClaimBountyCall
	}
	return nil
}

func (x *RuntimeCall) GetBountiesCloseBountyCall() *v1.Bounties_CloseBountyCall {
	if x, ok := x.GetCall().(*RuntimeCall_BountiesCloseBountyCall); ok {
		return x.BountiesCloseBountyCall
	}
	return nil
}

func (x *RuntimeCall) GetBountiesExtendBountyExpiryCall() *v1.Bounties_ExtendBountyExpiryCall {
	if x, ok := x.GetCall().(*RuntimeCall_BountiesExtendBountyExpiryCall); ok {
		return x.BountiesExtendBountyExpiryCall
	}
	return nil
}

func (x *RuntimeCall) GetBountiesProposeBountyCall() *v1.Bounties_ProposeBountyCall {
	if x, ok := x.GetCall().(*RuntimeCall_BountiesProposeBountyCall); ok {
		return x.BountiesProposeBountyCall
	}
	return nil
}

func (x *RuntimeCall) GetBountiesProposeCuratorCall() *v1.Bounties_ProposeCuratorCall {
	if x, ok := x.GetCall().(*RuntimeCall_BountiesProposeCuratorCall); ok {
		return x.BountiesProposeCuratorCall
	}
	return nil
}

func (x *RuntimeCall) GetBountiesUnassignCuratorCall() *v1.Bounties_UnassignCuratorCall {
	if x, ok := x.GetCall().(*RuntimeCall_BountiesUnassignCuratorCall); ok {
		return x.BountiesUnassignCuratorCall
	}
	return nil
}

func (x *RuntimeCall) GetChildbountiesAcceptCuratorCall() *v1.ChildBounties_AcceptCuratorCall {
	if x, ok := x.GetCall().(*RuntimeCall_ChildbountiesAcceptCuratorCall); ok {
		return x.ChildbountiesAcceptCuratorCall
	}
	return nil
}

func (x *RuntimeCall) GetChildbountiesAddChildBountyCall() *v1.ChildBounties_AddChildBountyCall {
	if x, ok := x.GetCall().(*RuntimeCall_ChildbountiesAddChildBountyCall); ok {
		return x.ChildbountiesAddChildBountyCall
	}
	return nil
}

func (x *RuntimeCall) GetChildbountiesAwardChildBountyCall() *v1.ChildBounties_AwardChildBountyCall {
	if x, ok := x.GetCall().(*RuntimeCall_ChildbountiesAwardChildBountyCall); ok {
		return x.ChildbountiesAwardChildBountyCall
	}
	return nil
}

func (x *RuntimeCall) GetChildbountiesClaimChildBountyCall() *v1.ChildBounties_ClaimChildBountyCall {
	if x, ok := x.GetCall().(*RuntimeCall_ChildbountiesClaimChildBountyCall); ok {
		return x.ChildbountiesClaimChildBountyCall
	}
	return nil
}

func (x *RuntimeCall) GetChildbountiesCloseChildBountyCall() *v1.ChildBounties_CloseChildBountyCall {
	if x, ok := x.GetCall().(*RuntimeCall_ChildbountiesCloseChildBountyCall); ok {
		return x.ChildbountiesCloseChildBountyCall
	}
	return nil
}

func (x *RuntimeCall) GetChildbountiesProposeCuratorCall() *v1.ChildBounties_ProposeCuratorCall {
	if x, ok := x.GetCall().(*RuntimeCall_ChildbountiesProposeCuratorCall); ok {
		return x.ChildbountiesProposeCuratorCall
	}
	return nil
}

func (x *RuntimeCall) GetChildbountiesUnassignCuratorCall() *v1.ChildBounties_UnassignCuratorCall {
	if x, ok := x.GetCall().(*RuntimeCall_ChildbountiesUnassignCuratorCall); ok {
		return x.ChildbountiesUnassignCuratorCall
	}
	return nil
}

func (x *RuntimeCall) GetConvictionvotingDelegateCall() *v1.ConvictionVoting_DelegateCall {
	if x, ok := x.GetCall().(*RuntimeCall_ConvictionvotingDelegateCall); ok {
		return x.ConvictionvotingDelegateCall
	}
	return nil
}

func (x *RuntimeCall) GetConvictionvotingRemoveOtherVoteCall() *v1.ConvictionVoting_RemoveOtherVoteCall {
	if x, ok := x.GetCall().(*RuntimeCall_ConvictionvotingRemoveOtherVoteCall); ok {
		return x.ConvictionvotingRemoveOtherVoteCall
	}
	return nil
}

func (x *RuntimeCall) GetConvictionvotingRemoveVoteCall() *v1.ConvictionVoting_RemoveVoteCall {
	if x, ok := x.GetCall().(*RuntimeCall_ConvictionvotingRemoveVoteCall); ok {
		return x.ConvictionvotingRemoveVoteCall
	}
	return nil
}

func (x *RuntimeCall) GetConvictionvotingUndelegateCall() *v1.ConvictionVoting_UndelegateCall {
	if x, ok := x.GetCall().(*RuntimeCall_ConvictionvotingUndelegateCall); ok {
		return x.ConvictionvotingUndelegateCall
	}
	return nil
}

func (x *RuntimeCall) GetConvictionvotingUnlockCall() *v1.ConvictionVoting_UnlockCall {
	if x, ok := x.GetCall().(*RuntimeCall_ConvictionvotingUnlockCall); ok {
		return x.ConvictionvotingUnlockCall
	}
	return nil
}

func (x *RuntimeCall) GetConvictionvotingVoteCall() *v1.ConvictionVoting_VoteCall {
	if x, ok := x.GetCall().(*RuntimeCall_ConvictionvotingVoteCall); ok {
		return x.ConvictionvotingVoteCall
	}
	return nil
}

func (x *RuntimeCall) GetElectionprovidermultiphaseGovernanceFallbackCall() *v1.ElectionProviderMultiPhase_GovernanceFallbackCall {
	if x, ok := x.GetCall().(*RuntimeCall_ElectionprovidermultiphaseGovernanceFallbackCall); ok {
		return x.ElectionprovidermultiphaseGovernanceFallbackCall
	}
	return nil
}

func (x *RuntimeCall) GetElectionprovidermultiphaseSetEmergencyElectionResultCall() *v1.ElectionProviderMultiPhase_SetEmergencyElectionResultCall {
	if x, ok := x.GetCall().(*RuntimeCall_ElectionprovidermultiphaseSetEmergencyElectionResultCall); ok {
		return x.ElectionprovidermultiphaseSetEmergencyElectionResultCall
	}
	return nil
}

func (x *RuntimeCall) GetElectionprovidermultiphaseSetMinimumUntrustedScoreCall() *v1.ElectionProviderMultiPhase_SetMinimumUntrustedScoreCall {
	if x, ok := x.GetCall().(*RuntimeCall_ElectionprovidermultiphaseSetMinimumUntrustedScoreCall); ok {
		return x.ElectionprovidermultiphaseSetMinimumUntrustedScoreCall
	}
	return nil
}

func (x *RuntimeCall) GetElectionprovidermultiphaseSubmitCall() *v1.ElectionProviderMultiPhase_SubmitCall {
	if x, ok := x.GetCall().(*RuntimeCall_ElectionprovidermultiphaseSubmitCall); ok {
		return x.ElectionprovidermultiphaseSubmitCall
	}
	return nil
}

func (x *RuntimeCall) GetElectionprovidermultiphaseSubmitUnsignedCall() *v1.ElectionProviderMultiPhase_SubmitUnsignedCall {
	if x, ok := x.GetCall().(*RuntimeCall_ElectionprovidermultiphaseSubmitUnsignedCall); ok {
		return x.ElectionprovidermultiphaseSubmitUnsignedCall
	}
	return nil
}

func (x *RuntimeCall) GetFellowshipcollectiveAddMemberCall() *v1.FellowshipCollective_AddMemberCall {
	if x, ok := x.GetCall().(*RuntimeCall_FellowshipcollectiveAddMemberCall); ok {
		return x.FellowshipcollectiveAddMemberCall
	}
	return nil
}

func (x *RuntimeCall) GetFellowshipcollectiveCleanupPollCall() *v1.FellowshipCollective_CleanupPollCall {
	if x, ok := x.GetCall().(*RuntimeCall_FellowshipcollectiveCleanupPollCall); ok {
		return x.FellowshipcollectiveCleanupPollCall
	}
	return nil
}

func (x *RuntimeCall) GetFellowshipcollectiveDemoteMemberCall() *v1.FellowshipCollective_DemoteMemberCall {
	if x, ok := x.GetCall().(*RuntimeCall_FellowshipcollectiveDemoteMemberCall); ok {
		return x.FellowshipcollectiveDemoteMemberCall
	}
	return nil
}

func (x *RuntimeCall) GetFellowshipcollectivePromoteMemberCall() *v1.FellowshipCollective_PromoteMemberCall {
	if x, ok := x.GetCall().(*RuntimeCall_FellowshipcollectivePromoteMemberCall); ok {
		return x.FellowshipcollectivePromoteMemberCall
	}
	return nil
}

func (x *RuntimeCall) GetFellowshipcollectiveRemoveMemberCall() *v1.FellowshipCollective_RemoveMemberCall {
	if x, ok := x.GetCall().(*RuntimeCall_FellowshipcollectiveRemoveMemberCall); ok {
		return x.FellowshipcollectiveRemoveMemberCall
	}
	return nil
}

func (x *RuntimeCall) GetFellowshipcollectiveVoteCall() *v1.FellowshipCollective_VoteCall {
	if x, ok := x.GetCall().(*RuntimeCall_FellowshipcollectiveVoteCall); ok {
		return x.FellowshipcollectiveVoteCall
	}
	return nil
}

func (x *RuntimeCall) GetFellowshipreferendaCancelCall() *v1.FellowshipReferenda_CancelCall {
	if x, ok := x.GetCall().(*RuntimeCall_FellowshipreferendaCancelCall); ok {
		return x.FellowshipreferendaCancelCall
	}
	return nil
}

func (x *RuntimeCall) GetFellowshipreferendaKillCall() *v1.FellowshipReferenda_KillCall {
	if x, ok := x.GetCall().(*RuntimeCall_FellowshipreferendaKillCall); ok {
		return x.FellowshipreferendaKillCall
	}
	return nil
}

func (x *RuntimeCall) GetFellowshipreferendaNudgeReferendumCall() *v1.FellowshipReferenda_NudgeReferendumCall {
	if x, ok := x.GetCall().(*RuntimeCall_FellowshipreferendaNudgeReferendumCall); ok {
		return x.FellowshipreferendaNudgeReferendumCall
	}
	return nil
}

func (x *RuntimeCall) GetFellowshipreferendaOneFewerDecidingCall() *v1.FellowshipReferenda_OneFewerDecidingCall {
	if x, ok := x.GetCall().(*RuntimeCall_FellowshipreferendaOneFewerDecidingCall); ok {
		return x.FellowshipreferendaOneFewerDecidingCall
	}
	return nil
}

func (x *RuntimeCall) GetFellowshipreferendaPlaceDecisionDepositCall() *v1.FellowshipReferenda_PlaceDecisionDepositCall {
	if x, ok := x.GetCall().(*RuntimeCall_FellowshipreferendaPlaceDecisionDepositCall); ok {
		return x.FellowshipreferendaPlaceDecisionDepositCall
	}
	return nil
}

func (x *RuntimeCall) GetFellowshipreferendaRefundDecisionDepositCall() *v1.FellowshipReferenda_RefundDecisionDepositCall {
	if x, ok := x.GetCall().(*RuntimeCall_FellowshipreferendaRefundDecisionDepositCall); ok {
		return x.FellowshipreferendaRefundDecisionDepositCall
	}
	return nil
}

func (x *RuntimeCall) GetFellowshipreferendaRefundSubmissionDepositCall() *v1.FellowshipReferenda_RefundSubmissionDepositCall {
	if x, ok := x.GetCall().(*RuntimeCall_FellowshipreferendaRefundSubmissionDepositCall); ok {
		return x.FellowshipreferendaRefundSubmissionDepositCall
	}
	return nil
}

func (x *RuntimeCall) GetFellowshipreferendaSetMetadataCall() *v1.FellowshipReferenda_SetMetadataCall {
	if x, ok := x.GetCall().(*RuntimeCall_FellowshipreferendaSetMetadataCall); ok {
		return x.FellowshipreferendaSetMetadataCall
	}
	return nil
}

func (x *RuntimeCall) GetFellowshipreferendaSubmitCall() *v1.FellowshipReferenda_SubmitCall {
	if x, ok := x.GetCall().(*RuntimeCall_FellowshipreferendaSubmitCall); ok {
		return x.FellowshipreferendaSubmitCall
	}
	return nil
}

func (x *RuntimeCall) GetGearvoucherCallCall() *v1.GearVoucher_CallCall {
	if x, ok := x.GetCall().(*RuntimeCall_GearvoucherCallCall); ok {
		return x.GearvoucherCallCall
	}
	return nil
}

func (x *RuntimeCall) GetGearvoucherCallDeprecatedCall() *v1.GearVoucher_CallDeprecatedCall {
	if x, ok := x.GetCall().(*RuntimeCall_GearvoucherCallDeprecatedCall); ok {
		return x.GearvoucherCallDeprecatedCall
	}
	return nil
}

func (x *RuntimeCall) GetGearvoucherDeclineCall() *v1.GearVoucher_DeclineCall {
	if x, ok := x.GetCall().(*RuntimeCall_GearvoucherDeclineCall); ok {
		return x.GearvoucherDeclineCall
	}
	return nil
}

func (x *RuntimeCall) GetGearvoucherIssueCall() *v1.GearVoucher_IssueCall {
	if x, ok := x.GetCall().(*RuntimeCall_GearvoucherIssueCall); ok {
		return x.GearvoucherIssueCall
	}
	return nil
}

func (x *RuntimeCall) GetGearvoucherRevokeCall() *v1.GearVoucher_RevokeCall {
	if x, ok := x.GetCall().(*RuntimeCall_GearvoucherRevokeCall); ok {
		return x.GearvoucherRevokeCall
	}
	return nil
}

func (x *RuntimeCall) GetGearvoucherUpdateCall() *v1.GearVoucher_UpdateCall {
	if x, ok := x.GetCall().(*RuntimeCall_GearvoucherUpdateCall); ok {
		return x.GearvoucherUpdateCall
	}
	return nil
}

func (x *RuntimeCall) GetGearClaimValueCall() *v1.Gear_ClaimValueCall {
	if x, ok := x.GetCall().(*RuntimeCall_GearClaimValueCall); ok {
		return x.GearClaimValueCall
	}
	return nil
}

func (x *RuntimeCall) GetGearCreateProgramCall() *v1.Gear_CreateProgramCall {
	if x, ok := x.GetCall().(*RuntimeCall_GearCreateProgramCall); ok {
		return x.GearCreateProgramCall
	}
	return nil
}

func (x *RuntimeCall) GetGearRunCall() *v1.Gear_RunCall {
	if x, ok := x.GetCall().(*RuntimeCall_GearRunCall); ok {
		return x.GearRunCall
	}
	return nil
}

func (x *RuntimeCall) GetGearSendMessageCall() *v1.Gear_SendMessageCall {
	if x, ok := x.GetCall().(*RuntimeCall_GearSendMessageCall); ok {
		return x.GearSendMessageCall
	}
	return nil
}

func (x *RuntimeCall) GetGearSendReplyCall() *v1.Gear_SendReplyCall {
	if x, ok := x.GetCall().(*RuntimeCall_GearSendReplyCall); ok {
		return x.GearSendReplyCall
	}
	return nil
}

func (x *RuntimeCall) GetGearSetExecuteInherentCall() *v1.Gear_SetExecuteInherentCall {
	if x, ok := x.GetCall().(*RuntimeCall_GearSetExecuteInherentCall); ok {
		return x.GearSetExecuteInherentCall
	}
	return nil
}

func (x *RuntimeCall) GetGearUploadCodeCall() *v1.Gear_UploadCodeCall {
	if x, ok := x.GetCall().(*RuntimeCall_GearUploadCodeCall); ok {
		return x.GearUploadCodeCall
	}
	return nil
}

func (x *RuntimeCall) GetGearUploadProgramCall() *v1.Gear_UploadProgramCall {
	if x, ok := x.GetCall().(*RuntimeCall_GearUploadProgramCall); ok {
		return x.GearUploadProgramCall
	}
	return nil
}

func (x *RuntimeCall) GetGrandpaNoteStalledCall() *v1.Grandpa_NoteStalledCall {
	if x, ok := x.GetCall().(*RuntimeCall_GrandpaNoteStalledCall); ok {
		return x.GrandpaNoteStalledCall
	}
	return nil
}

func (x *RuntimeCall) GetGrandpaReportEquivocationCall() *v1.Grandpa_ReportEquivocationCall {
	if x, ok := x.GetCall().(*RuntimeCall_GrandpaReportEquivocationCall); ok {
		return x.GrandpaReportEquivocationCall
	}
	return nil
}

func (x *RuntimeCall) GetGrandpaReportEquivocationUnsignedCall() *v1.Grandpa_ReportEquivocationUnsignedCall {
	if x, ok := x.GetCall().(*RuntimeCall_GrandpaReportEquivocationUnsignedCall); ok {
		return x.GrandpaReportEquivocationUnsignedCall
	}
	return nil
}

func (x *RuntimeCall) GetIdentityAddRegistrarCall() *v1.Identity_AddRegistrarCall {
	if x, ok := x.GetCall().(*RuntimeCall_IdentityAddRegistrarCall); ok {
		return x.IdentityAddRegistrarCall
	}
	return nil
}

func (x *RuntimeCall) GetIdentityAddSubCall() *v1.Identity_AddSubCall {
	if x, ok := x.GetCall().(*RuntimeCall_IdentityAddSubCall); ok {
		return x.IdentityAddSubCall
	}
	return nil
}

func (x *RuntimeCall) GetIdentityCancelRequestCall() *v1.Identity_CancelRequestCall {
	if x, ok := x.GetCall().(*RuntimeCall_IdentityCancelRequestCall); ok {
		return x.IdentityCancelRequestCall
	}
	return nil
}

func (x *RuntimeCall) GetIdentityKillIdentityCall() *v1.Identity_KillIdentityCall {
	if x, ok := x.GetCall().(*RuntimeCall_IdentityKillIdentityCall); ok {
		return x.IdentityKillIdentityCall
	}
	return nil
}

func (x *RuntimeCall) GetIdentityProvideJudgementCall() *v1.Identity_ProvideJudgementCall {
	if x, ok := x.GetCall().(*RuntimeCall_IdentityProvideJudgementCall); ok {
		return x.IdentityProvideJudgementCall
	}
	return nil
}

func (x *RuntimeCall) GetIdentityRemoveSubCall() *v1.Identity_RemoveSubCall {
	if x, ok := x.GetCall().(*RuntimeCall_IdentityRemoveSubCall); ok {
		return x.IdentityRemoveSubCall
	}
	return nil
}

func (x *RuntimeCall) GetIdentityRenameSubCall() *v1.Identity_RenameSubCall {
	if x, ok := x.GetCall().(*RuntimeCall_IdentityRenameSubCall); ok {
		return x.IdentityRenameSubCall
	}
	return nil
}

func (x *RuntimeCall) GetIdentityRequestJudgementCall() *v1.Identity_RequestJudgementCall {
	if x, ok := x.GetCall().(*RuntimeCall_IdentityRequestJudgementCall); ok {
		return x.IdentityRequestJudgementCall
	}
	return nil
}

func (x *RuntimeCall) GetIdentitySetAccountIdCall() *v1.Identity_SetAccountIdCall {
	if x, ok := x.GetCall().(*RuntimeCall_IdentitySetAccountIdCall); ok {
		return x.IdentitySetAccountIdCall
	}
	return nil
}

func (x *RuntimeCall) GetIdentitySetFeeCall() *v1.Identity_SetFeeCall {
	if x, ok := x.GetCall().(*RuntimeCall_IdentitySetFeeCall); ok {
		return x.IdentitySetFeeCall
	}
	return nil
}

func (x *RuntimeCall) GetIdentitySetFieldsCall() *v1.Identity_SetFieldsCall {
	if x, ok := x.GetCall().(*RuntimeCall_IdentitySetFieldsCall); ok {
		return x.IdentitySetFieldsCall
	}
	return nil
}

func (x *RuntimeCall) GetIdentitySetIdentityCall() *v1.Identity_SetIdentityCall {
	if x, ok := x.GetCall().(*RuntimeCall_IdentitySetIdentityCall); ok {
		return x.IdentitySetIdentityCall
	}
	return nil
}

func (x *RuntimeCall) GetIdentitySetSubsCall() *v1.Identity_SetSubsCall {
	if x, ok := x.GetCall().(*RuntimeCall_IdentitySetSubsCall); ok {
		return x.IdentitySetSubsCall
	}
	return nil
}

func (x *RuntimeCall) GetImonlineHeartbeatCall() *v1.ImOnline_HeartbeatCall {
	if x, ok := x.GetCall().(*RuntimeCall_ImonlineHeartbeatCall); ok {
		return x.ImonlineHeartbeatCall
	}
	return nil
}

func (x *RuntimeCall) GetMultisigApproveAsMultiCall() *v1.Multisig_ApproveAsMultiCall {
	if x, ok := x.GetCall().(*RuntimeCall_MultisigApproveAsMultiCall); ok {
		return x.MultisigApproveAsMultiCall
	}
	return nil
}

func (x *RuntimeCall) GetMultisigAsMultiCall() *v1.Multisig_AsMultiCall {
	if x, ok := x.GetCall().(*RuntimeCall_MultisigAsMultiCall); ok {
		return x.MultisigAsMultiCall
	}
	return nil
}

func (x *RuntimeCall) GetMultisigAsMultiThreshold_1Call() *v1.Multisig_AsMultiThreshold1Call {
	if x, ok := x.GetCall().(*RuntimeCall_MultisigAsMultiThreshold_1Call); ok {
		return x.MultisigAsMultiThreshold_1Call
	}
	return nil
}

func (x *RuntimeCall) GetMultisigCancelAsMultiCall() *v1.Multisig_CancelAsMultiCall {
	if x, ok := x.GetCall().(*RuntimeCall_MultisigCancelAsMultiCall); ok {
		return x.MultisigCancelAsMultiCall
	}
	return nil
}

func (x *RuntimeCall) GetNominationpoolsAdjustPoolDepositCall() *v1.NominationPools_AdjustPoolDepositCall {
	if x, ok := x.GetCall().(*RuntimeCall_NominationpoolsAdjustPoolDepositCall); ok {
		return x.NominationpoolsAdjustPoolDepositCall
	}
	return nil
}

func (x *RuntimeCall) GetNominationpoolsBondExtraCall() *v1.NominationPools_BondExtraCall {
	if x, ok := x.GetCall().(*RuntimeCall_NominationpoolsBondExtraCall); ok {
		return x.NominationpoolsBondExtraCall
	}
	return nil
}

func (x *RuntimeCall) GetNominationpoolsBondExtraOtherCall() *v1.NominationPools_BondExtraOtherCall {
	if x, ok := x.GetCall().(*RuntimeCall_NominationpoolsBondExtraOtherCall); ok {
		return x.NominationpoolsBondExtraOtherCall
	}
	return nil
}

func (x *RuntimeCall) GetNominationpoolsChillCall() *v1.NominationPools_ChillCall {
	if x, ok := x.GetCall().(*RuntimeCall_NominationpoolsChillCall); ok {
		return x.NominationpoolsChillCall
	}
	return nil
}

func (x *RuntimeCall) GetNominationpoolsClaimCommissionCall() *v1.NominationPools_ClaimCommissionCall {
	if x, ok := x.GetCall().(*RuntimeCall_NominationpoolsClaimCommissionCall); ok {
		return x.NominationpoolsClaimCommissionCall
	}
	return nil
}

func (x *RuntimeCall) GetNominationpoolsClaimPayoutOtherCall() *v1.NominationPools_ClaimPayoutOtherCall {
	if x, ok := x.GetCall().(*RuntimeCall_NominationpoolsClaimPayoutOtherCall); ok {
		return x.NominationpoolsClaimPayoutOtherCall
	}
	return nil
}

func (x *RuntimeCall) GetNominationpoolsCreateCall() *v1.NominationPools_CreateCall {
	if x, ok := x.GetCall().(*RuntimeCall_NominationpoolsCreateCall); ok {
		return x.NominationpoolsCreateCall
	}
	return nil
}

func (x *RuntimeCall) GetNominationpoolsCreateWithPoolIdCall() *v1.NominationPools_CreateWithPoolIdCall {
	if x, ok := x.GetCall().(*RuntimeCall_NominationpoolsCreateWithPoolIdCall); ok {
		return x.NominationpoolsCreateWithPoolIdCall
	}
	return nil
}

func (x *RuntimeCall) GetNominationpoolsJoinCall() *v1.NominationPools_JoinCall {
	if x, ok := x.GetCall().(*RuntimeCall_NominationpoolsJoinCall); ok {
		return x.NominationpoolsJoinCall
	}
	return nil
}

func (x *RuntimeCall) GetNominationpoolsNominateCall() *v1.NominationPools_NominateCall {
	if x, ok := x.GetCall().(*RuntimeCall_NominationpoolsNominateCall); ok {
		return x.NominationpoolsNominateCall
	}
	return nil
}

func (x *RuntimeCall) GetNominationpoolsPoolWithdrawUnbondedCall() *v1.NominationPools_PoolWithdrawUnbondedCall {
	if x, ok := x.GetCall().(*RuntimeCall_NominationpoolsPoolWithdrawUnbondedCall); ok {
		return x.NominationpoolsPoolWithdrawUnbondedCall
	}
	return nil
}

func (x *RuntimeCall) GetNominationpoolsSetClaimPermissionCall() *v1.NominationPools_SetClaimPermissionCall {
	if x, ok := x.GetCall().(*RuntimeCall_NominationpoolsSetClaimPermissionCall); ok {
		return x.NominationpoolsSetClaimPermissionCall
	}
	return nil
}

func (x *RuntimeCall) GetNominationpoolsSetCommissionCall() *v1.NominationPools_SetCommissionCall {
	if x, ok := x.GetCall().(*RuntimeCall_NominationpoolsSetCommissionCall); ok {
		return x.NominationpoolsSetCommissionCall
	}
	return nil
}

func (x *RuntimeCall) GetNominationpoolsSetCommissionChangeRateCall() *v1.NominationPools_SetCommissionChangeRateCall {
	if x, ok := x.GetCall().(*RuntimeCall_NominationpoolsSetCommissionChangeRateCall); ok {
		return x.NominationpoolsSetCommissionChangeRateCall
	}
	return nil
}

func (x *RuntimeCall) GetNominationpoolsSetCommissionMaxCall() *v1.NominationPools_SetCommissionMaxCall {
	if x, ok := x.GetCall().(*RuntimeCall_NominationpoolsSetCommissionMaxCall); ok {
		return x.NominationpoolsSetCommissionMaxCall
	}
	return nil
}

func (x *RuntimeCall) GetNominationpoolsSetConfigsCall() *v1.NominationPools_SetConfigsCall {
	if x, ok := x.GetCall().(*RuntimeCall_NominationpoolsSetConfigsCall); ok {
		return x.NominationpoolsSetConfigsCall
	}
	return nil
}

func (x *RuntimeCall) GetNominationpoolsSetMetadataCall() *v1.NominationPools_SetMetadataCall {
	if x, ok := x.GetCall().(*RuntimeCall_NominationpoolsSetMetadataCall); ok {
		return x.NominationpoolsSetMetadataCall
	}
	return nil
}

func (x *RuntimeCall) GetNominationpoolsSetStateCall() *v1.NominationPools_SetStateCall {
	if x, ok := x.GetCall().(*RuntimeCall_NominationpoolsSetStateCall); ok {
		return x.NominationpoolsSetStateCall
	}
	return nil
}

func (x *RuntimeCall) GetNominationpoolsUnbondCall() *v1.NominationPools_UnbondCall {
	if x, ok := x.GetCall().(*RuntimeCall_NominationpoolsUnbondCall); ok {
		return x.NominationpoolsUnbondCall
	}
	return nil
}

func (x *RuntimeCall) GetNominationpoolsUpdateRolesCall() *v1.NominationPools_UpdateRolesCall {
	if x, ok := x.GetCall().(*RuntimeCall_NominationpoolsUpdateRolesCall); ok {
		return x.NominationpoolsUpdateRolesCall
	}
	return nil
}

func (x *RuntimeCall) GetNominationpoolsWithdrawUnbondedCall() *v1.NominationPools_WithdrawUnbondedCall {
	if x, ok := x.GetCall().(*RuntimeCall_NominationpoolsWithdrawUnbondedCall); ok {
		return x.NominationpoolsWithdrawUnbondedCall
	}
	return nil
}

func (x *RuntimeCall) GetPreimageEnsureUpdatedCall() *v1.Preimage_EnsureUpdatedCall {
	if x, ok := x.GetCall().(*RuntimeCall_PreimageEnsureUpdatedCall); ok {
		return x.PreimageEnsureUpdatedCall
	}
	return nil
}

func (x *RuntimeCall) GetPreimageNotePreimageCall() *v1.Preimage_NotePreimageCall {
	if x, ok := x.GetCall().(*RuntimeCall_PreimageNotePreimageCall); ok {
		return x.PreimageNotePreimageCall
	}
	return nil
}

func (x *RuntimeCall) GetPreimageRequestPreimageCall() *v1.Preimage_RequestPreimageCall {
	if x, ok := x.GetCall().(*RuntimeCall_PreimageRequestPreimageCall); ok {
		return x.PreimageRequestPreimageCall
	}
	return nil
}

func (x *RuntimeCall) GetPreimageUnnotePreimageCall() *v1.Preimage_UnnotePreimageCall {
	if x, ok := x.GetCall().(*RuntimeCall_PreimageUnnotePreimageCall); ok {
		return x.PreimageUnnotePreimageCall
	}
	return nil
}

func (x *RuntimeCall) GetPreimageUnrequestPreimageCall() *v1.Preimage_UnrequestPreimageCall {
	if x, ok := x.GetCall().(*RuntimeCall_PreimageUnrequestPreimageCall); ok {
		return x.PreimageUnrequestPreimageCall
	}
	return nil
}

func (x *RuntimeCall) GetProxyAddProxyCall() *v1.Proxy_AddProxyCall {
	if x, ok := x.GetCall().(*RuntimeCall_ProxyAddProxyCall); ok {
		return x.ProxyAddProxyCall
	}
	return nil
}

func (x *RuntimeCall) GetProxyAnnounceCall() *v1.Proxy_AnnounceCall {
	if x, ok := x.GetCall().(*RuntimeCall_ProxyAnnounceCall); ok {
		return x.ProxyAnnounceCall
	}
	return nil
}

func (x *RuntimeCall) GetProxyCreatePureCall() *v1.Proxy_CreatePureCall {
	if x, ok := x.GetCall().(*RuntimeCall_ProxyCreatePureCall); ok {
		return x.ProxyCreatePureCall
	}
	return nil
}

func (x *RuntimeCall) GetProxyKillPureCall() *v1.Proxy_KillPureCall {
	if x, ok := x.GetCall().(*RuntimeCall_ProxyKillPureCall); ok {
		return x.ProxyKillPureCall
	}
	return nil
}

func (x *RuntimeCall) GetProxyProxyAnnouncedCall() *v1.Proxy_ProxyAnnouncedCall {
	if x, ok := x.GetCall().(*RuntimeCall_ProxyProxyAnnouncedCall); ok {
		return x.ProxyProxyAnnouncedCall
	}
	return nil
}

func (x *RuntimeCall) GetProxyProxyCall() *v1.Proxy_ProxyCall {
	if x, ok := x.GetCall().(*RuntimeCall_ProxyProxyCall); ok {
		return x.ProxyProxyCall
	}
	return nil
}

func (x *RuntimeCall) GetProxyRejectAnnouncementCall() *v1.Proxy_RejectAnnouncementCall {
	if x, ok := x.GetCall().(*RuntimeCall_ProxyRejectAnnouncementCall); ok {
		return x.ProxyRejectAnnouncementCall
	}
	return nil
}

func (x *RuntimeCall) GetProxyRemoveAnnouncementCall() *v1.Proxy_RemoveAnnouncementCall {
	if x, ok := x.GetCall().(*RuntimeCall_ProxyRemoveAnnouncementCall); ok {
		return x.ProxyRemoveAnnouncementCall
	}
	return nil
}

func (x *RuntimeCall) GetProxyRemoveProxyCall() *v1.Proxy_RemoveProxyCall {
	if x, ok := x.GetCall().(*RuntimeCall_ProxyRemoveProxyCall); ok {
		return x.ProxyRemoveProxyCall
	}
	return nil
}

func (x *RuntimeCall) GetReferendaCancelCall() *v1.Referenda_CancelCall {
	if x, ok := x.GetCall().(*RuntimeCall_ReferendaCancelCall); ok {
		return x.ReferendaCancelCall
	}
	return nil
}

func (x *RuntimeCall) GetReferendaKillCall() *v1.Referenda_KillCall {
	if x, ok := x.GetCall().(*RuntimeCall_ReferendaKillCall); ok {
		return x.ReferendaKillCall
	}
	return nil
}

func (x *RuntimeCall) GetReferendaNudgeReferendumCall() *v1.Referenda_NudgeReferendumCall {
	if x, ok := x.GetCall().(*RuntimeCall_ReferendaNudgeReferendumCall); ok {
		return x.ReferendaNudgeReferendumCall
	}
	return nil
}

func (x *RuntimeCall) GetReferendaOneFewerDecidingCall() *v1.Referenda_OneFewerDecidingCall {
	if x, ok := x.GetCall().(*RuntimeCall_ReferendaOneFewerDecidingCall); ok {
		return x.ReferendaOneFewerDecidingCall
	}
	return nil
}

func (x *RuntimeCall) GetReferendaPlaceDecisionDepositCall() *v1.Referenda_PlaceDecisionDepositCall {
	if x, ok := x.GetCall().(*RuntimeCall_ReferendaPlaceDecisionDepositCall); ok {
		return x.ReferendaPlaceDecisionDepositCall
	}
	return nil
}

func (x *RuntimeCall) GetReferendaRefundDecisionDepositCall() *v1.Referenda_RefundDecisionDepositCall {
	if x, ok := x.GetCall().(*RuntimeCall_ReferendaRefundDecisionDepositCall); ok {
		return x.ReferendaRefundDecisionDepositCall
	}
	return nil
}

func (x *RuntimeCall) GetReferendaRefundSubmissionDepositCall() *v1.Referenda_RefundSubmissionDepositCall {
	if x, ok := x.GetCall().(*RuntimeCall_ReferendaRefundSubmissionDepositCall); ok {
		return x.ReferendaRefundSubmissionDepositCall
	}
	return nil
}

func (x *RuntimeCall) GetReferendaSetMetadataCall() *v1.Referenda_SetMetadataCall {
	if x, ok := x.GetCall().(*RuntimeCall_ReferendaSetMetadataCall); ok {
		return x.ReferendaSetMetadataCall
	}
	return nil
}

func (x *RuntimeCall) GetReferendaSubmitCall() *v1.Referenda_SubmitCall {
	if x, ok := x.GetCall().(*RuntimeCall_ReferendaSubmitCall); ok {
		return x.ReferendaSubmitCall
	}
	return nil
}

func (x *RuntimeCall) GetSchedulerCancelCall() *v1.Scheduler_CancelCall {
	if x, ok := x.GetCall().(*RuntimeCall_SchedulerCancelCall); ok {
		return x.SchedulerCancelCall
	}
	return nil
}

func (x *RuntimeCall) GetSchedulerCancelNamedCall() *v1.Scheduler_CancelNamedCall {
	if x, ok := x.GetCall().(*RuntimeCall_SchedulerCancelNamedCall); ok {
		return x.SchedulerCancelNamedCall
	}
	return nil
}

func (x *RuntimeCall) GetSchedulerScheduleAfterCall() *v1.Scheduler_ScheduleAfterCall {
	if x, ok := x.GetCall().(*RuntimeCall_SchedulerScheduleAfterCall); ok {
		return x.SchedulerScheduleAfterCall
	}
	return nil
}

func (x *RuntimeCall) GetSchedulerScheduleCall() *v1.Scheduler_ScheduleCall {
	if x, ok := x.GetCall().(*RuntimeCall_SchedulerScheduleCall); ok {
		return x.SchedulerScheduleCall
	}
	return nil
}

func (x *RuntimeCall) GetSchedulerScheduleNamedAfterCall() *v1.Scheduler_ScheduleNamedAfterCall {
	if x, ok := x.GetCall().(*RuntimeCall_SchedulerScheduleNamedAfterCall); ok {
		return x.SchedulerScheduleNamedAfterCall
	}
	return nil
}

func (x *RuntimeCall) GetSchedulerScheduleNamedCall() *v1.Scheduler_ScheduleNamedCall {
	if x, ok := x.GetCall().(*RuntimeCall_SchedulerScheduleNamedCall); ok {
		return x.SchedulerScheduleNamedCall
	}
	return nil
}

func (x *RuntimeCall) GetSessionSetKeysCall() *v1.Session_SetKeysCall {
	if x, ok := x.GetCall().(*RuntimeCall_SessionSetKeysCall); ok {
		return x.SessionSetKeysCall
	}
	return nil
}

func (x *RuntimeCall) GetStakingrewardsAlignSupplyCall() *v1.StakingRewards_AlignSupplyCall {
	if x, ok := x.GetCall().(*RuntimeCall_StakingrewardsAlignSupplyCall); ok {
		return x.StakingrewardsAlignSupplyCall
	}
	return nil
}

func (x *RuntimeCall) GetStakingrewardsForceRefillCall() *v1.StakingRewards_ForceRefillCall {
	if x, ok := x.GetCall().(*RuntimeCall_StakingrewardsForceRefillCall); ok {
		return x.StakingrewardsForceRefillCall
	}
	return nil
}

func (x *RuntimeCall) GetStakingrewardsRefillCall() *v1.StakingRewards_RefillCall {
	if x, ok := x.GetCall().(*RuntimeCall_StakingrewardsRefillCall); ok {
		return x.StakingrewardsRefillCall
	}
	return nil
}

func (x *RuntimeCall) GetStakingrewardsWithdrawCall() *v1.StakingRewards_WithdrawCall {
	if x, ok := x.GetCall().(*RuntimeCall_StakingrewardsWithdrawCall); ok {
		return x.StakingrewardsWithdrawCall
	}
	return nil
}

func (x *RuntimeCall) GetStakingBondCall() *v1.Staking_BondCall {
	if x, ok := x.GetCall().(*RuntimeCall_StakingBondCall); ok {
		return x.StakingBondCall
	}
	return nil
}

func (x *RuntimeCall) GetStakingBondExtraCall() *v1.Staking_BondExtraCall {
	if x, ok := x.GetCall().(*RuntimeCall_StakingBondExtraCall); ok {
		return x.StakingBondExtraCall
	}
	return nil
}

func (x *RuntimeCall) GetStakingCancelDeferredSlashCall() *v1.Staking_CancelDeferredSlashCall {
	if x, ok := x.GetCall().(*RuntimeCall_StakingCancelDeferredSlashCall); ok {
		return x.StakingCancelDeferredSlashCall
	}
	return nil
}

func (x *RuntimeCall) GetStakingChillOtherCall() *v1.Staking_ChillOtherCall {
	if x, ok := x.GetCall().(*RuntimeCall_StakingChillOtherCall); ok {
		return x.StakingChillOtherCall
	}
	return nil
}

func (x *RuntimeCall) GetStakingForceApplyMinCommissionCall() *v1.Staking_ForceApplyMinCommissionCall {
	if x, ok := x.GetCall().(*RuntimeCall_StakingForceApplyMinCommissionCall); ok {
		return x.StakingForceApplyMinCommissionCall
	}
	return nil
}

func (x *RuntimeCall) GetStakingForceUnstakeCall() *v1.Staking_ForceUnstakeCall {
	if x, ok := x.GetCall().(*RuntimeCall_StakingForceUnstakeCall); ok {
		return x.StakingForceUnstakeCall
	}
	return nil
}

func (x *RuntimeCall) GetStakingIncreaseValidatorCountCall() *v1.Staking_IncreaseValidatorCountCall {
	if x, ok := x.GetCall().(*RuntimeCall_StakingIncreaseValidatorCountCall); ok {
		return x.StakingIncreaseValidatorCountCall
	}
	return nil
}

func (x *RuntimeCall) GetStakingKickCall() *v1.Staking_KickCall {
	if x, ok := x.GetCall().(*RuntimeCall_StakingKickCall); ok {
		return x.StakingKickCall
	}
	return nil
}

func (x *RuntimeCall) GetStakingNominateCall() *v1.Staking_NominateCall {
	if x, ok := x.GetCall().(*RuntimeCall_StakingNominateCall); ok {
		return x.StakingNominateCall
	}
	return nil
}

func (x *RuntimeCall) GetStakingPayoutStakersCall() *v1.Staking_PayoutStakersCall {
	if x, ok := x.GetCall().(*RuntimeCall_StakingPayoutStakersCall); ok {
		return x.StakingPayoutStakersCall
	}
	return nil
}

func (x *RuntimeCall) GetStakingReapStashCall() *v1.Staking_ReapStashCall {
	if x, ok := x.GetCall().(*RuntimeCall_StakingReapStashCall); ok {
		return x.StakingReapStashCall
	}
	return nil
}

func (x *RuntimeCall) GetStakingRebondCall() *v1.Staking_RebondCall {
	if x, ok := x.GetCall().(*RuntimeCall_StakingRebondCall); ok {
		return x.StakingRebondCall
	}
	return nil
}

func (x *RuntimeCall) GetStakingScaleValidatorCountCall() *v1.Staking_ScaleValidatorCountCall {
	if x, ok := x.GetCall().(*RuntimeCall_StakingScaleValidatorCountCall); ok {
		return x.StakingScaleValidatorCountCall
	}
	return nil
}

func (x *RuntimeCall) GetStakingSetInvulnerablesCall() *v1.Staking_SetInvulnerablesCall {
	if x, ok := x.GetCall().(*RuntimeCall_StakingSetInvulnerablesCall); ok {
		return x.StakingSetInvulnerablesCall
	}
	return nil
}

func (x *RuntimeCall) GetStakingSetMinCommissionCall() *v1.Staking_SetMinCommissionCall {
	if x, ok := x.GetCall().(*RuntimeCall_StakingSetMinCommissionCall); ok {
		return x.StakingSetMinCommissionCall
	}
	return nil
}

func (x *RuntimeCall) GetStakingSetPayeeCall() *v1.Staking_SetPayeeCall {
	if x, ok := x.GetCall().(*RuntimeCall_StakingSetPayeeCall); ok {
		return x.StakingSetPayeeCall
	}
	return nil
}

func (x *RuntimeCall) GetStakingSetStakingConfigsCall() *v1.Staking_SetStakingConfigsCall {
	if x, ok := x.GetCall().(*RuntimeCall_StakingSetStakingConfigsCall); ok {
		return x.StakingSetStakingConfigsCall
	}
	return nil
}

func (x *RuntimeCall) GetStakingSetValidatorCountCall() *v1.Staking_SetValidatorCountCall {
	if x, ok := x.GetCall().(*RuntimeCall_StakingSetValidatorCountCall); ok {
		return x.StakingSetValidatorCountCall
	}
	return nil
}

func (x *RuntimeCall) GetStakingUnbondCall() *v1.Staking_UnbondCall {
	if x, ok := x.GetCall().(*RuntimeCall_StakingUnbondCall); ok {
		return x.StakingUnbondCall
	}
	return nil
}

func (x *RuntimeCall) GetStakingValidateCall() *v1.Staking_ValidateCall {
	if x, ok := x.GetCall().(*RuntimeCall_StakingValidateCall); ok {
		return x.StakingValidateCall
	}
	return nil
}

func (x *RuntimeCall) GetStakingWithdrawUnbondedCall() *v1.Staking_WithdrawUnbondedCall {
	if x, ok := x.GetCall().(*RuntimeCall_StakingWithdrawUnbondedCall); ok {
		return x.StakingWithdrawUnbondedCall
	}
	return nil
}

func (x *RuntimeCall) GetSystemKillPrefixCall() *v1.System_KillPrefixCall {
	if x, ok := x.GetCall().(*RuntimeCall_SystemKillPrefixCall); ok {
		return x.SystemKillPrefixCall
	}
	return nil
}

func (x *RuntimeCall) GetSystemKillStorageCall() *v1.System_KillStorageCall {
	if x, ok := x.GetCall().(*RuntimeCall_SystemKillStorageCall); ok {
		return x.SystemKillStorageCall
	}
	return nil
}

func (x *RuntimeCall) GetSystemRemarkCall() *v1.System_RemarkCall {
	if x, ok := x.GetCall().(*RuntimeCall_SystemRemarkCall); ok {
		return x.SystemRemarkCall
	}
	return nil
}

func (x *RuntimeCall) GetSystemRemarkWithEventCall() *v1.System_RemarkWithEventCall {
	if x, ok := x.GetCall().(*RuntimeCall_SystemRemarkWithEventCall); ok {
		return x.SystemRemarkWithEventCall
	}
	return nil
}

func (x *RuntimeCall) GetSystemSetCodeCall() *v1.System_SetCodeCall {
	if x, ok := x.GetCall().(*RuntimeCall_SystemSetCodeCall); ok {
		return x.SystemSetCodeCall
	}
	return nil
}

func (x *RuntimeCall) GetSystemSetCodeWithoutChecksCall() *v1.System_SetCodeWithoutChecksCall {
	if x, ok := x.GetCall().(*RuntimeCall_SystemSetCodeWithoutChecksCall); ok {
		return x.SystemSetCodeWithoutChecksCall
	}
	return nil
}

func (x *RuntimeCall) GetSystemSetHeapPagesCall() *v1.System_SetHeapPagesCall {
	if x, ok := x.GetCall().(*RuntimeCall_SystemSetHeapPagesCall); ok {
		return x.SystemSetHeapPagesCall
	}
	return nil
}

func (x *RuntimeCall) GetSystemSetStorageCall() *v1.System_SetStorageCall {
	if x, ok := x.GetCall().(*RuntimeCall_SystemSetStorageCall); ok {
		return x.SystemSetStorageCall
	}
	return nil
}

func (x *RuntimeCall) GetTimestampSetCall() *v1.Timestamp_SetCall {
	if x, ok := x.GetCall().(*RuntimeCall_TimestampSetCall); ok {
		return x.TimestampSetCall
	}
	return nil
}

func (x *RuntimeCall) GetTreasuryApproveProposalCall() *v1.Treasury_ApproveProposalCall {
	if x, ok := x.GetCall().(*RuntimeCall_TreasuryApproveProposalCall); ok {
		return x.TreasuryApproveProposalCall
	}
	return nil
}

func (x *RuntimeCall) GetTreasuryCheckStatusCall() *v1.Treasury_CheckStatusCall {
	if x, ok := x.GetCall().(*RuntimeCall_TreasuryCheckStatusCall); ok {
		return x.TreasuryCheckStatusCall
	}
	return nil
}

func (x *RuntimeCall) GetTreasuryPayoutCall() *v1.Treasury_PayoutCall {
	if x, ok := x.GetCall().(*RuntimeCall_TreasuryPayoutCall); ok {
		return x.TreasuryPayoutCall
	}
	return nil
}

func (x *RuntimeCall) GetTreasuryProposeSpendCall() *v1.Treasury_ProposeSpendCall {
	if x, ok := x.GetCall().(*RuntimeCall_TreasuryProposeSpendCall); ok {
		return x.TreasuryProposeSpendCall
	}
	return nil
}

func (x *RuntimeCall) GetTreasuryRejectProposalCall() *v1.Treasury_RejectProposalCall {
	if x, ok := x.GetCall().(*RuntimeCall_TreasuryRejectProposalCall); ok {
		return x.TreasuryRejectProposalCall
	}
	return nil
}

func (x *RuntimeCall) GetTreasuryRemoveApprovalCall() *v1.Treasury_RemoveApprovalCall {
	if x, ok := x.GetCall().(*RuntimeCall_TreasuryRemoveApprovalCall); ok {
		return x.TreasuryRemoveApprovalCall
	}
	return nil
}

func (x *RuntimeCall) GetTreasurySpendCall() *v1.Treasury_SpendCall {
	if x, ok := x.GetCall().(*RuntimeCall_TreasurySpendCall); ok {
		return x.TreasurySpendCall
	}
	return nil
}

func (x *RuntimeCall) GetTreasurySpendLocalCall() *v1.Treasury_SpendLocalCall {
	if x, ok := x.GetCall().(*RuntimeCall_TreasurySpendLocalCall); ok {
		return x.TreasurySpendLocalCall
	}
	return nil
}

func (x *RuntimeCall) GetTreasuryVoidSpendCall() *v1.Treasury_VoidSpendCall {
	if x, ok := x.GetCall().(*RuntimeCall_TreasuryVoidSpendCall); ok {
		return x.TreasuryVoidSpendCall
	}
	return nil
}

func (x *RuntimeCall) GetUtilityAsDerivativeCall() *v1.Utility_AsDerivativeCall {
	if x, ok := x.GetCall().(*RuntimeCall_UtilityAsDerivativeCall); ok {
		return x.UtilityAsDerivativeCall
	}
	return nil
}

func (x *RuntimeCall) GetUtilityBatchAllCall() *v1.Utility_BatchAllCall {
	if x, ok := x.GetCall().(*RuntimeCall_UtilityBatchAllCall); ok {
		return x.UtilityBatchAllCall
	}
	return nil
}

func (x *RuntimeCall) GetUtilityBatchCall() *v1.Utility_BatchCall {
	if x, ok := x.GetCall().(*RuntimeCall_UtilityBatchCall); ok {
		return x.UtilityBatchCall
	}
	return nil
}

func (x *RuntimeCall) GetUtilityDispatchAsCall() *v1.Utility_DispatchAsCall {
	if x, ok := x.GetCall().(*RuntimeCall_UtilityDispatchAsCall); ok {
		return x.UtilityDispatchAsCall
	}
	return nil
}

func (x *RuntimeCall) GetUtilityForceBatchCall() *v1.Utility_ForceBatchCall {
	if x, ok := x.GetCall().(*RuntimeCall_UtilityForceBatchCall); ok {
		return x.UtilityForceBatchCall
	}
	return nil
}

func (x *RuntimeCall) GetUtilityWithWeightCall() *v1.Utility_WithWeightCall {
	if x, ok := x.GetCall().(*RuntimeCall_UtilityWithWeightCall); ok {
		return x.UtilityWithWeightCall
	}
	return nil
}

func (x *RuntimeCall) GetVestingForceVestedTransferCall() *v1.Vesting_ForceVestedTransferCall {
	if x, ok := x.GetCall().(*RuntimeCall_VestingForceVestedTransferCall); ok {
		return x.VestingForceVestedTransferCall
	}
	return nil
}

func (x *RuntimeCall) GetVestingMergeSchedulesCall() *v1.Vesting_MergeSchedulesCall {
	if x, ok := x.GetCall().(*RuntimeCall_VestingMergeSchedulesCall); ok {
		return x.VestingMergeSchedulesCall
	}
	return nil
}

func (x *RuntimeCall) GetVestingVestOtherCall() *v1.Vesting_VestOtherCall {
	if x, ok := x.GetCall().(*RuntimeCall_VestingVestOtherCall); ok {
		return x.VestingVestOtherCall
	}
	return nil
}

func (x *RuntimeCall) GetVestingVestedTransferCall() *v1.Vesting_VestedTransferCall {
	if x, ok := x.GetCall().(*RuntimeCall_VestingVestedTransferCall); ok {
		return x.VestingVestedTransferCall
	}
	return nil
}

func (x *RuntimeCall) GetWhitelistDispatchWhitelistedCallCall() *v1.Whitelist_DispatchWhitelistedCallCall {
	if x, ok := x.GetCall().(*RuntimeCall_WhitelistDispatchWhitelistedCallCall); ok {
		return x.WhitelistDispatchWhitelistedCallCall
	}
	return nil
}

func (x *RuntimeCall) GetWhitelistDispatchWhitelistedCallWithPreimageCall() *v1.Whitelist_DispatchWhitelistedCallWithPreimageCall {
	if x, ok := x.GetCall().(*RuntimeCall_WhitelistDispatchWhitelistedCallWithPreimageCall); ok {
		return x.WhitelistDispatchWhitelistedCallWithPreimageCall
	}
	return nil
}

func (x *RuntimeCall) GetWhitelistRemoveWhitelistedCallCall() *v1.Whitelist_RemoveWhitelistedCallCall {
	if x, ok := x.GetCall().(*RuntimeCall_WhitelistRemoveWhitelistedCallCall); ok {
		return x.WhitelistRemoveWhitelistedCallCall
	}
	return nil
}

func (x *RuntimeCall) GetWhitelistWhitelistCallCall() *v1.Whitelist_WhitelistCallCall {
	if x, ok := x.GetCall().(*RuntimeCall_WhitelistWhitelistCallCall); ok {
		return x.WhitelistWhitelistCallCall
	}
	return nil
}

type isRuntimeCall_Call interface {
	isRuntimeCall_Call()
}

type RuntimeCall_BabePlanConfigChangeCall struct {
	BabePlanConfigChangeCall *v1.Babe_PlanConfigChangeCall `protobuf:"bytes,1,opt,name=babe_plan_config_change_call,json=babePlanConfigChangeCall,proto3,oneof"`
}

type RuntimeCall_BabeReportEquivocationCall struct {
	BabeReportEquivocationCall *v1.Babe_ReportEquivocationCall `protobuf:"bytes,2,opt,name=babe_report_equivocation_call,json=babeReportEquivocationCall,proto3,oneof"`
}

type RuntimeCall_BabeReportEquivocationUnsignedCall struct {
	BabeReportEquivocationUnsignedCall *v1.Babe_ReportEquivocationUnsignedCall `protobuf:"bytes,3,opt,name=babe_report_equivocation_unsigned_call,json=babeReportEquivocationUnsignedCall,proto3,oneof"`
}

type RuntimeCall_BagslistPutInFrontOfCall struct {
	BagslistPutInFrontOfCall *v1.BagsList_PutInFrontOfCall `protobuf:"bytes,4,opt,name=bagslist_put_in_front_of_call,json=bagslistPutInFrontOfCall,proto3,oneof"`
}

type RuntimeCall_BagslistPutInFrontOfOtherCall struct {
	BagslistPutInFrontOfOtherCall *v1.BagsList_PutInFrontOfOtherCall `protobuf:"bytes,5,opt,name=bagslist_put_in_front_of_other_call,json=bagslistPutInFrontOfOtherCall,proto3,oneof"`
}

type RuntimeCall_BagslistRebagCall struct {
	BagslistRebagCall *v1.BagsList_RebagCall `protobuf:"bytes,6,opt,name=bagslist_rebag_call,json=bagslistRebagCall,proto3,oneof"`
}

type RuntimeCall_BalancesForceSetBalanceCall struct {
	BalancesForceSetBalanceCall *v1.Balances_ForceSetBalanceCall `protobuf:"bytes,7,opt,name=balances_force_set_balance_call,json=balancesForceSetBalanceCall,proto3,oneof"`
}

type RuntimeCall_BalancesForceTransferCall struct {
	BalancesForceTransferCall *v1.Balances_ForceTransferCall `protobuf:"bytes,8,opt,name=balances_force_transfer_call,json=balancesForceTransferCall,proto3,oneof"`
}

type RuntimeCall_BalancesForceUnreserveCall struct {
	BalancesForceUnreserveCall *v1.Balances_ForceUnreserveCall `protobuf:"bytes,9,opt,name=balances_force_unreserve_call,json=balancesForceUnreserveCall,proto3,oneof"`
}

type RuntimeCall_BalancesTransferAllCall struct {
	BalancesTransferAllCall *v1.Balances_TransferAllCall `protobuf:"bytes,10,opt,name=balances_transfer_all_call,json=balancesTransferAllCall,proto3,oneof"`
}

type RuntimeCall_BalancesTransferAllowDeathCall struct {
	BalancesTransferAllowDeathCall *v1.Balances_TransferAllowDeathCall `protobuf:"bytes,11,opt,name=balances_transfer_allow_death_call,json=balancesTransferAllowDeathCall,proto3,oneof"`
}

type RuntimeCall_BalancesTransferKeepAliveCall struct {
	BalancesTransferKeepAliveCall *v1.Balances_TransferKeepAliveCall `protobuf:"bytes,12,opt,name=balances_transfer_keep_alive_call,json=balancesTransferKeepAliveCall,proto3,oneof"`
}

type RuntimeCall_BalancesUpgradeAccountsCall struct {
	BalancesUpgradeAccountsCall *v1.Balances_UpgradeAccountsCall `protobuf:"bytes,13,opt,name=balances_upgrade_accounts_call,json=balancesUpgradeAccountsCall,proto3,oneof"`
}

type RuntimeCall_BountiesAcceptCuratorCall struct {
	BountiesAcceptCuratorCall *v1.Bounties_AcceptCuratorCall `protobuf:"bytes,14,opt,name=bounties_accept_curator_call,json=bountiesAcceptCuratorCall,proto3,oneof"`
}

type RuntimeCall_BountiesApproveBountyCall struct {
	BountiesApproveBountyCall *v1.Bounties_ApproveBountyCall `protobuf:"bytes,15,opt,name=bounties_approve_bounty_call,json=bountiesApproveBountyCall,proto3,oneof"`
}

type RuntimeCall_BountiesAwardBountyCall struct {
	BountiesAwardBountyCall *v1.Bounties_AwardBountyCall `protobuf:"bytes,16,opt,name=bounties_award_bounty_call,json=bountiesAwardBountyCall,proto3,oneof"`
}

type RuntimeCall_BountiesClaimBountyCall struct {
	BountiesClaimBountyCall *v1.Bounties_ClaimBountyCall `protobuf:"bytes,17,opt,name=bounties_claim_bounty_call,json=bountiesClaimBountyCall,proto3,oneof"`
}

type RuntimeCall_BountiesCloseBountyCall struct {
	BountiesCloseBountyCall *v1.Bounties_CloseBountyCall `protobuf:"bytes,18,opt,name=bounties_close_bounty_call,json=bountiesCloseBountyCall,proto3,oneof"`
}

type RuntimeCall_BountiesExtendBountyExpiryCall struct {
	BountiesExtendBountyExpiryCall *v1.Bounties_ExtendBountyExpiryCall `protobuf:"bytes,19,opt,name=bounties_extend_bounty_expiry_call,json=bountiesExtendBountyExpiryCall,proto3,oneof"`
}

type RuntimeCall_BountiesProposeBountyCall struct {
	BountiesProposeBountyCall *v1.Bounties_ProposeBountyCall `protobuf:"bytes,20,opt,name=bounties_propose_bounty_call,json=bountiesProposeBountyCall,proto3,oneof"`
}

type RuntimeCall_BountiesProposeCuratorCall struct {
	BountiesProposeCuratorCall *v1.Bounties_ProposeCuratorCall `protobuf:"bytes,21,opt,name=bounties_propose_curator_call,json=bountiesProposeCuratorCall,proto3,oneof"`
}

type RuntimeCall_BountiesUnassignCuratorCall struct {
	BountiesUnassignCuratorCall *v1.Bounties_UnassignCuratorCall `protobuf:"bytes,22,opt,name=bounties_unassign_curator_call,json=bountiesUnassignCuratorCall,proto3,oneof"`
}

type RuntimeCall_ChildbountiesAcceptCuratorCall struct {
	ChildbountiesAcceptCuratorCall *v1.ChildBounties_AcceptCuratorCall `protobuf:"bytes,23,opt,name=childbounties_accept_curator_call,json=childbountiesAcceptCuratorCall,proto3,oneof"`
}

type RuntimeCall_ChildbountiesAddChildBountyCall struct {
	ChildbountiesAddChildBountyCall *v1.ChildBounties_AddChildBountyCall `protobuf:"bytes,24,opt,name=childbounties_add_child_bounty_call,json=childbountiesAddChildBountyCall,proto3,oneof"`
}

type RuntimeCall_ChildbountiesAwardChildBountyCall struct {
	ChildbountiesAwardChildBountyCall *v1.ChildBounties_AwardChildBountyCall `protobuf:"bytes,25,opt,name=childbounties_award_child_bounty_call,json=childbountiesAwardChildBountyCall,proto3,oneof"`
}

type RuntimeCall_ChildbountiesClaimChildBountyCall struct {
	ChildbountiesClaimChildBountyCall *v1.ChildBounties_ClaimChildBountyCall `protobuf:"bytes,26,opt,name=childbounties_claim_child_bounty_call,json=childbountiesClaimChildBountyCall,proto3,oneof"`
}

type RuntimeCall_ChildbountiesCloseChildBountyCall struct {
	ChildbountiesCloseChildBountyCall *v1.ChildBounties_CloseChildBountyCall `protobuf:"bytes,27,opt,name=childbounties_close_child_bounty_call,json=childbountiesCloseChildBountyCall,proto3,oneof"`
}

type RuntimeCall_ChildbountiesProposeCuratorCall struct {
	ChildbountiesProposeCuratorCall *v1.ChildBounties_ProposeCuratorCall `protobuf:"bytes,28,opt,name=childbounties_propose_curator_call,json=childbountiesProposeCuratorCall,proto3,oneof"`
}

type RuntimeCall_ChildbountiesUnassignCuratorCall struct {
	ChildbountiesUnassignCuratorCall *v1.ChildBounties_UnassignCuratorCall `protobuf:"bytes,29,opt,name=childbounties_unassign_curator_call,json=childbountiesUnassignCuratorCall,proto3,oneof"`
}

type RuntimeCall_ConvictionvotingDelegateCall struct {
	ConvictionvotingDelegateCall *v1.ConvictionVoting_DelegateCall `protobuf:"bytes,30,opt,name=convictionvoting_delegate_call,json=convictionvotingDelegateCall,proto3,oneof"`
}

type RuntimeCall_ConvictionvotingRemoveOtherVoteCall struct {
	ConvictionvotingRemoveOtherVoteCall *v1.ConvictionVoting_RemoveOtherVoteCall `protobuf:"bytes,31,opt,name=convictionvoting_remove_other_vote_call,json=convictionvotingRemoveOtherVoteCall,proto3,oneof"`
}

type RuntimeCall_ConvictionvotingRemoveVoteCall struct {
	ConvictionvotingRemoveVoteCall *v1.ConvictionVoting_RemoveVoteCall `protobuf:"bytes,32,opt,name=convictionvoting_remove_vote_call,json=convictionvotingRemoveVoteCall,proto3,oneof"`
}

type RuntimeCall_ConvictionvotingUndelegateCall struct {
	ConvictionvotingUndelegateCall *v1.ConvictionVoting_UndelegateCall `protobuf:"bytes,33,opt,name=convictionvoting_undelegate_call,json=convictionvotingUndelegateCall,proto3,oneof"`
}

type RuntimeCall_ConvictionvotingUnlockCall struct {
	ConvictionvotingUnlockCall *v1.ConvictionVoting_UnlockCall `protobuf:"bytes,34,opt,name=convictionvoting_unlock_call,json=convictionvotingUnlockCall,proto3,oneof"`
}

type RuntimeCall_ConvictionvotingVoteCall struct {
	ConvictionvotingVoteCall *v1.ConvictionVoting_VoteCall `protobuf:"bytes,35,opt,name=convictionvoting_vote_call,json=convictionvotingVoteCall,proto3,oneof"`
}

type RuntimeCall_ElectionprovidermultiphaseGovernanceFallbackCall struct {
	ElectionprovidermultiphaseGovernanceFallbackCall *v1.ElectionProviderMultiPhase_GovernanceFallbackCall `protobuf:"bytes,36,opt,name=electionprovidermultiphase_governance_fallback_call,json=electionprovidermultiphaseGovernanceFallbackCall,proto3,oneof"`
}

type RuntimeCall_ElectionprovidermultiphaseSetEmergencyElectionResultCall struct {
	ElectionprovidermultiphaseSetEmergencyElectionResultCall *v1.ElectionProviderMultiPhase_SetEmergencyElectionResultCall `protobuf:"bytes,37,opt,name=electionprovidermultiphase_set_emergency_election_result_call,json=electionprovidermultiphaseSetEmergencyElectionResultCall,proto3,oneof"`
}

type RuntimeCall_ElectionprovidermultiphaseSetMinimumUntrustedScoreCall struct {
	ElectionprovidermultiphaseSetMinimumUntrustedScoreCall *v1.ElectionProviderMultiPhase_SetMinimumUntrustedScoreCall `protobuf:"bytes,38,opt,name=electionprovidermultiphase_set_minimum_untrusted_score_call,json=electionprovidermultiphaseSetMinimumUntrustedScoreCall,proto3,oneof"`
}

type RuntimeCall_ElectionprovidermultiphaseSubmitCall struct {
	ElectionprovidermultiphaseSubmitCall *v1.ElectionProviderMultiPhase_SubmitCall `protobuf:"bytes,39,opt,name=electionprovidermultiphase_submit_call,json=electionprovidermultiphaseSubmitCall,proto3,oneof"`
}

type RuntimeCall_ElectionprovidermultiphaseSubmitUnsignedCall struct {
	ElectionprovidermultiphaseSubmitUnsignedCall *v1.ElectionProviderMultiPhase_SubmitUnsignedCall `protobuf:"bytes,40,opt,name=electionprovidermultiphase_submit_unsigned_call,json=electionprovidermultiphaseSubmitUnsignedCall,proto3,oneof"`
}

type RuntimeCall_FellowshipcollectiveAddMemberCall struct {
	FellowshipcollectiveAddMemberCall *v1.FellowshipCollective_AddMemberCall `protobuf:"bytes,41,opt,name=fellowshipcollective_add_member_call,json=fellowshipcollectiveAddMemberCall,proto3,oneof"`
}

type RuntimeCall_FellowshipcollectiveCleanupPollCall struct {
	FellowshipcollectiveCleanupPollCall *v1.FellowshipCollective_CleanupPollCall `protobuf:"bytes,42,opt,name=fellowshipcollective_cleanup_poll_call,json=fellowshipcollectiveCleanupPollCall,proto3,oneof"`
}

type RuntimeCall_FellowshipcollectiveDemoteMemberCall struct {
	FellowshipcollectiveDemoteMemberCall *v1.FellowshipCollective_DemoteMemberCall `protobuf:"bytes,43,opt,name=fellowshipcollective_demote_member_call,json=fellowshipcollectiveDemoteMemberCall,proto3,oneof"`
}

type RuntimeCall_FellowshipcollectivePromoteMemberCall struct {
	FellowshipcollectivePromoteMemberCall *v1.FellowshipCollective_PromoteMemberCall `protobuf:"bytes,44,opt,name=fellowshipcollective_promote_member_call,json=fellowshipcollectivePromoteMemberCall,proto3,oneof"`
}

type RuntimeCall_FellowshipcollectiveRemoveMemberCall struct {
	FellowshipcollectiveRemoveMemberCall *v1.FellowshipCollective_RemoveMemberCall `protobuf:"bytes,45,opt,name=fellowshipcollective_remove_member_call,json=fellowshipcollectiveRemoveMemberCall,proto3,oneof"`
}

type RuntimeCall_FellowshipcollectiveVoteCall struct {
	FellowshipcollectiveVoteCall *v1.FellowshipCollective_VoteCall `protobuf:"bytes,46,opt,name=fellowshipcollective_vote_call,json=fellowshipcollectiveVoteCall,proto3,oneof"`
}

type RuntimeCall_FellowshipreferendaCancelCall struct {
	FellowshipreferendaCancelCall *v1.FellowshipReferenda_CancelCall `protobuf:"bytes,47,opt,name=fellowshipreferenda_cancel_call,json=fellowshipreferendaCancelCall,proto3,oneof"`
}

type RuntimeCall_FellowshipreferendaKillCall struct {
	FellowshipreferendaKillCall *v1.FellowshipReferenda_KillCall `protobuf:"bytes,48,opt,name=fellowshipreferenda_kill_call,json=fellowshipreferendaKillCall,proto3,oneof"`
}

type RuntimeCall_FellowshipreferendaNudgeReferendumCall struct {
	FellowshipreferendaNudgeReferendumCall *v1.FellowshipReferenda_NudgeReferendumCall `protobuf:"bytes,49,opt,name=fellowshipreferenda_nudge_referendum_call,json=fellowshipreferendaNudgeReferendumCall,proto3,oneof"`
}

type RuntimeCall_FellowshipreferendaOneFewerDecidingCall struct {
	FellowshipreferendaOneFewerDecidingCall *v1.FellowshipReferenda_OneFewerDecidingCall `protobuf:"bytes,50,opt,name=fellowshipreferenda_one_fewer_deciding_call,json=fellowshipreferendaOneFewerDecidingCall,proto3,oneof"`
}

type RuntimeCall_FellowshipreferendaPlaceDecisionDepositCall struct {
	FellowshipreferendaPlaceDecisionDepositCall *v1.FellowshipReferenda_PlaceDecisionDepositCall `protobuf:"bytes,51,opt,name=fellowshipreferenda_place_decision_deposit_call,json=fellowshipreferendaPlaceDecisionDepositCall,proto3,oneof"`
}

type RuntimeCall_FellowshipreferendaRefundDecisionDepositCall struct {
	FellowshipreferendaRefundDecisionDepositCall *v1.FellowshipReferenda_RefundDecisionDepositCall `protobuf:"bytes,52,opt,name=fellowshipreferenda_refund_decision_deposit_call,json=fellowshipreferendaRefundDecisionDepositCall,proto3,oneof"`
}

type RuntimeCall_FellowshipreferendaRefundSubmissionDepositCall struct {
	FellowshipreferendaRefundSubmissionDepositCall *v1.FellowshipReferenda_RefundSubmissionDepositCall `protobuf:"bytes,53,opt,name=fellowshipreferenda_refund_submission_deposit_call,json=fellowshipreferendaRefundSubmissionDepositCall,proto3,oneof"`
}

type RuntimeCall_FellowshipreferendaSetMetadataCall struct {
	FellowshipreferendaSetMetadataCall *v1.FellowshipReferenda_SetMetadataCall `protobuf:"bytes,54,opt,name=fellowshipreferenda_set_metadata_call,json=fellowshipreferendaSetMetadataCall,proto3,oneof"`
}

type RuntimeCall_FellowshipreferendaSubmitCall struct {
	FellowshipreferendaSubmitCall *v1.FellowshipReferenda_SubmitCall `protobuf:"bytes,55,opt,name=fellowshipreferenda_submit_call,json=fellowshipreferendaSubmitCall,proto3,oneof"`
}

type RuntimeCall_GearvoucherCallCall struct {
	GearvoucherCallCall *v1.GearVoucher_CallCall `protobuf:"bytes,56,opt,name=gearvoucher_call_call,json=gearvoucherCallCall,proto3,oneof"`
}

type RuntimeCall_GearvoucherCallDeprecatedCall struct {
	GearvoucherCallDeprecatedCall *v1.GearVoucher_CallDeprecatedCall `protobuf:"bytes,57,opt,name=gearvoucher_call_deprecated_call,json=gearvoucherCallDeprecatedCall,proto3,oneof"`
}

type RuntimeCall_GearvoucherDeclineCall struct {
	GearvoucherDeclineCall *v1.GearVoucher_DeclineCall `protobuf:"bytes,58,opt,name=gearvoucher_decline_call,json=gearvoucherDeclineCall,proto3,oneof"`
}

type RuntimeCall_GearvoucherIssueCall struct {
	GearvoucherIssueCall *v1.GearVoucher_IssueCall `protobuf:"bytes,59,opt,name=gearvoucher_issue_call,json=gearvoucherIssueCall,proto3,oneof"`
}

type RuntimeCall_GearvoucherRevokeCall struct {
	GearvoucherRevokeCall *v1.GearVoucher_RevokeCall `protobuf:"bytes,60,opt,name=gearvoucher_revoke_call,json=gearvoucherRevokeCall,proto3,oneof"`
}

type RuntimeCall_GearvoucherUpdateCall struct {
	GearvoucherUpdateCall *v1.GearVoucher_UpdateCall `protobuf:"bytes,61,opt,name=gearvoucher_update_call,json=gearvoucherUpdateCall,proto3,oneof"`
}

type RuntimeCall_GearClaimValueCall struct {
	GearClaimValueCall *v1.Gear_ClaimValueCall `protobuf:"bytes,62,opt,name=gear_claim_value_call,json=gearClaimValueCall,proto3,oneof"`
}

type RuntimeCall_GearCreateProgramCall struct {
	GearCreateProgramCall *v1.Gear_CreateProgramCall `protobuf:"bytes,63,opt,name=gear_create_program_call,json=gearCreateProgramCall,proto3,oneof"`
}

type RuntimeCall_GearRunCall struct {
	GearRunCall *v1.Gear_RunCall `protobuf:"bytes,64,opt,name=gear_run_call,json=gearRunCall,proto3,oneof"`
}

type RuntimeCall_GearSendMessageCall struct {
	GearSendMessageCall *v1.Gear_SendMessageCall `protobuf:"bytes,65,opt,name=gear_send_message_call,json=gearSendMessageCall,proto3,oneof"`
}

type RuntimeCall_GearSendReplyCall struct {
	GearSendReplyCall *v1.Gear_SendReplyCall `protobuf:"bytes,66,opt,name=gear_send_reply_call,json=gearSendReplyCall,proto3,oneof"`
}

type RuntimeCall_GearSetExecuteInherentCall struct {
	GearSetExecuteInherentCall *v1.Gear_SetExecuteInherentCall `protobuf:"bytes,67,opt,name=gear_set_execute_inherent_call,json=gearSetExecuteInherentCall,proto3,oneof"`
}

type RuntimeCall_GearUploadCodeCall struct {
	GearUploadCodeCall *v1.Gear_UploadCodeCall `protobuf:"bytes,68,opt,name=gear_upload_code_call,json=gearUploadCodeCall,proto3,oneof"`
}

type RuntimeCall_GearUploadProgramCall struct {
	GearUploadProgramCall *v1.Gear_UploadProgramCall `protobuf:"bytes,69,opt,name=gear_upload_program_call,json=gearUploadProgramCall,proto3,oneof"`
}

type RuntimeCall_GrandpaNoteStalledCall struct {
	GrandpaNoteStalledCall *v1.Grandpa_NoteStalledCall `protobuf:"bytes,70,opt,name=grandpa_note_stalled_call,json=grandpaNoteStalledCall,proto3,oneof"`
}

type RuntimeCall_GrandpaReportEquivocationCall struct {
	GrandpaReportEquivocationCall *v1.Grandpa_ReportEquivocationCall `protobuf:"bytes,71,opt,name=grandpa_report_equivocation_call,json=grandpaReportEquivocationCall,proto3,oneof"`
}

type RuntimeCall_GrandpaReportEquivocationUnsignedCall struct {
	GrandpaReportEquivocationUnsignedCall *v1.Grandpa_ReportEquivocationUnsignedCall `protobuf:"bytes,72,opt,name=grandpa_report_equivocation_unsigned_call,json=grandpaReportEquivocationUnsignedCall,proto3,oneof"`
}

type RuntimeCall_IdentityAddRegistrarCall struct {
	IdentityAddRegistrarCall *v1.Identity_AddRegistrarCall `protobuf:"bytes,73,opt,name=identity_add_registrar_call,json=identityAddRegistrarCall,proto3,oneof"`
}

type RuntimeCall_IdentityAddSubCall struct {
	IdentityAddSubCall *v1.Identity_AddSubCall `protobuf:"bytes,74,opt,name=identity_add_sub_call,json=identityAddSubCall,proto3,oneof"`
}

type RuntimeCall_IdentityCancelRequestCall struct {
	IdentityCancelRequestCall *v1.Identity_CancelRequestCall `protobuf:"bytes,75,opt,name=identity_cancel_request_call,json=identityCancelRequestCall,proto3,oneof"`
}

type RuntimeCall_IdentityKillIdentityCall struct {
	IdentityKillIdentityCall *v1.Identity_KillIdentityCall `protobuf:"bytes,76,opt,name=identity_kill_identity_call,json=identityKillIdentityCall,proto3,oneof"`
}

type RuntimeCall_IdentityProvideJudgementCall struct {
	IdentityProvideJudgementCall *v1.Identity_ProvideJudgementCall `protobuf:"bytes,77,opt,name=identity_provide_judgement_call,json=identityProvideJudgementCall,proto3,oneof"`
}

type RuntimeCall_IdentityRemoveSubCall struct {
	IdentityRemoveSubCall *v1.Identity_RemoveSubCall `protobuf:"bytes,78,opt,name=identity_remove_sub_call,json=identityRemoveSubCall,proto3,oneof"`
}

type RuntimeCall_IdentityRenameSubCall struct {
	IdentityRenameSubCall *v1.Identity_RenameSubCall `protobuf:"bytes,79,opt,name=identity_rename_sub_call,json=identityRenameSubCall,proto3,oneof"`
}

type RuntimeCall_IdentityRequestJudgementCall struct {
	IdentityRequestJudgementCall *v1.Identity_RequestJudgementCall `protobuf:"bytes,80,opt,name=identity_request_judgement_call,json=identityRequestJudgementCall,proto3,oneof"`
}

type RuntimeCall_IdentitySetAccountIdCall struct {
	IdentitySetAccountIdCall *v1.Identity_SetAccountIdCall `protobuf:"bytes,81,opt,name=identity_set_account_id_call,json=identitySetAccountIdCall,proto3,oneof"`
}

type RuntimeCall_IdentitySetFeeCall struct {
	IdentitySetFeeCall *v1.Identity_SetFeeCall `protobuf:"bytes,82,opt,name=identity_set_fee_call,json=identitySetFeeCall,proto3,oneof"`
}

type RuntimeCall_IdentitySetFieldsCall struct {
	IdentitySetFieldsCall *v1.Identity_SetFieldsCall `protobuf:"bytes,83,opt,name=identity_set_fields_call,json=identitySetFieldsCall,proto3,oneof"`
}

type RuntimeCall_IdentitySetIdentityCall struct {
	IdentitySetIdentityCall *v1.Identity_SetIdentityCall `protobuf:"bytes,84,opt,name=identity_set_identity_call,json=identitySetIdentityCall,proto3,oneof"`
}

type RuntimeCall_IdentitySetSubsCall struct {
	IdentitySetSubsCall *v1.Identity_SetSubsCall `protobuf:"bytes,85,opt,name=identity_set_subs_call,json=identitySetSubsCall,proto3,oneof"`
}

type RuntimeCall_ImonlineHeartbeatCall struct {
	ImonlineHeartbeatCall *v1.ImOnline_HeartbeatCall `protobuf:"bytes,86,opt,name=imonline_heartbeat_call,json=imonlineHeartbeatCall,proto3,oneof"`
}

type RuntimeCall_MultisigApproveAsMultiCall struct {
	MultisigApproveAsMultiCall *v1.Multisig_ApproveAsMultiCall `protobuf:"bytes,87,opt,name=multisig_approve_as_multi_call,json=multisigApproveAsMultiCall,proto3,oneof"`
}

type RuntimeCall_MultisigAsMultiCall struct {
	MultisigAsMultiCall *v1.Multisig_AsMultiCall `protobuf:"bytes,88,opt,name=multisig_as_multi_call,json=multisigAsMultiCall,proto3,oneof"`
}

type RuntimeCall_MultisigAsMultiThreshold_1Call struct {
	MultisigAsMultiThreshold_1Call *v1.Multisig_AsMultiThreshold1Call `protobuf:"bytes,89,opt,name=multisig_as_multi_threshold_1_call,json=multisigAsMultiThreshold1Call,proto3,oneof"`
}

type RuntimeCall_MultisigCancelAsMultiCall struct {
	MultisigCancelAsMultiCall *v1.Multisig_CancelAsMultiCall `protobuf:"bytes,90,opt,name=multisig_cancel_as_multi_call,json=multisigCancelAsMultiCall,proto3,oneof"`
}

type RuntimeCall_NominationpoolsAdjustPoolDepositCall struct {
	NominationpoolsAdjustPoolDepositCall *v1.NominationPools_AdjustPoolDepositCall `protobuf:"bytes,91,opt,name=nominationpools_adjust_pool_deposit_call,json=nominationpoolsAdjustPoolDepositCall,proto3,oneof"`
}

type RuntimeCall_NominationpoolsBondExtraCall struct {
	NominationpoolsBondExtraCall *v1.NominationPools_BondExtraCall `protobuf:"bytes,92,opt,name=nominationpools_bond_extra_call,json=nominationpoolsBondExtraCall,proto3,oneof"`
}

type RuntimeCall_NominationpoolsBondExtraOtherCall struct {
	NominationpoolsBondExtraOtherCall *v1.NominationPools_BondExtraOtherCall `protobuf:"bytes,93,opt,name=nominationpools_bond_extra_other_call,json=nominationpoolsBondExtraOtherCall,proto3,oneof"`
}

type RuntimeCall_NominationpoolsChillCall struct {
	NominationpoolsChillCall *v1.NominationPools_ChillCall `protobuf:"bytes,94,opt,name=nominationpools_chill_call,json=nominationpoolsChillCall,proto3,oneof"`
}

type RuntimeCall_NominationpoolsClaimCommissionCall struct {
	NominationpoolsClaimCommissionCall *v1.NominationPools_ClaimCommissionCall `protobuf:"bytes,95,opt,name=nominationpools_claim_commission_call,json=nominationpoolsClaimCommissionCall,proto3,oneof"`
}

type RuntimeCall_NominationpoolsClaimPayoutOtherCall struct {
	NominationpoolsClaimPayoutOtherCall *v1.NominationPools_ClaimPayoutOtherCall `protobuf:"bytes,96,opt,name=nominationpools_claim_payout_other_call,json=nominationpoolsClaimPayoutOtherCall,proto3,oneof"`
}

type RuntimeCall_NominationpoolsCreateCall struct {
	NominationpoolsCreateCall *v1.NominationPools_CreateCall `protobuf:"bytes,97,opt,name=nominationpools_create_call,json=nominationpoolsCreateCall,proto3,oneof"`
}

type RuntimeCall_NominationpoolsCreateWithPoolIdCall struct {
	NominationpoolsCreateWithPoolIdCall *v1.NominationPools_CreateWithPoolIdCall `protobuf:"bytes,98,opt,name=nominationpools_create_with_pool_id_call,json=nominationpoolsCreateWithPoolIdCall,proto3,oneof"`
}

type RuntimeCall_NominationpoolsJoinCall struct {
	NominationpoolsJoinCall *v1.NominationPools_JoinCall `protobuf:"bytes,99,opt,name=nominationpools_join_call,json=nominationpoolsJoinCall,proto3,oneof"`
}

type RuntimeCall_NominationpoolsNominateCall struct {
	NominationpoolsNominateCall *v1.NominationPools_NominateCall `protobuf:"bytes,100,opt,name=nominationpools_nominate_call,json=nominationpoolsNominateCall,proto3,oneof"`
}

type RuntimeCall_NominationpoolsPoolWithdrawUnbondedCall struct {
	NominationpoolsPoolWithdrawUnbondedCall *v1.NominationPools_PoolWithdrawUnbondedCall `protobuf:"bytes,101,opt,name=nominationpools_pool_withdraw_unbonded_call,json=nominationpoolsPoolWithdrawUnbondedCall,proto3,oneof"`
}

type RuntimeCall_NominationpoolsSetClaimPermissionCall struct {
	NominationpoolsSetClaimPermissionCall *v1.NominationPools_SetClaimPermissionCall `protobuf:"bytes,102,opt,name=nominationpools_set_claim_permission_call,json=nominationpoolsSetClaimPermissionCall,proto3,oneof"`
}

type RuntimeCall_NominationpoolsSetCommissionCall struct {
	NominationpoolsSetCommissionCall *v1.NominationPools_SetCommissionCall `protobuf:"bytes,103,opt,name=nominationpools_set_commission_call,json=nominationpoolsSetCommissionCall,proto3,oneof"`
}

type RuntimeCall_NominationpoolsSetCommissionChangeRateCall struct {
	NominationpoolsSetCommissionChangeRateCall *v1.NominationPools_SetCommissionChangeRateCall `protobuf:"bytes,104,opt,name=nominationpools_set_commission_change_rate_call,json=nominationpoolsSetCommissionChangeRateCall,proto3,oneof"`
}

type RuntimeCall_NominationpoolsSetCommissionMaxCall struct {
	NominationpoolsSetCommissionMaxCall *v1.NominationPools_SetCommissionMaxCall `protobuf:"bytes,105,opt,name=nominationpools_set_commission_max_call,json=nominationpoolsSetCommissionMaxCall,proto3,oneof"`
}

type RuntimeCall_NominationpoolsSetConfigsCall struct {
	NominationpoolsSetConfigsCall *v1.NominationPools_SetConfigsCall `protobuf:"bytes,106,opt,name=nominationpools_set_configs_call,json=nominationpoolsSetConfigsCall,proto3,oneof"`
}

type RuntimeCall_NominationpoolsSetMetadataCall struct {
	NominationpoolsSetMetadataCall *v1.NominationPools_SetMetadataCall `protobuf:"bytes,107,opt,name=nominationpools_set_metadata_call,json=nominationpoolsSetMetadataCall,proto3,oneof"`
}

type RuntimeCall_NominationpoolsSetStateCall struct {
	NominationpoolsSetStateCall *v1.NominationPools_SetStateCall `protobuf:"bytes,108,opt,name=nominationpools_set_state_call,json=nominationpoolsSetStateCall,proto3,oneof"`
}

type RuntimeCall_NominationpoolsUnbondCall struct {
	NominationpoolsUnbondCall *v1.NominationPools_UnbondCall `protobuf:"bytes,109,opt,name=nominationpools_unbond_call,json=nominationpoolsUnbondCall,proto3,oneof"`
}

type RuntimeCall_NominationpoolsUpdateRolesCall struct {
	NominationpoolsUpdateRolesCall *v1.NominationPools_UpdateRolesCall `protobuf:"bytes,110,opt,name=nominationpools_update_roles_call,json=nominationpoolsUpdateRolesCall,proto3,oneof"`
}

type RuntimeCall_NominationpoolsWithdrawUnbondedCall struct {
	NominationpoolsWithdrawUnbondedCall *v1.NominationPools_WithdrawUnbondedCall `protobuf:"bytes,111,opt,name=nominationpools_withdraw_unbonded_call,json=nominationpoolsWithdrawUnbondedCall,proto3,oneof"`
}

type RuntimeCall_PreimageEnsureUpdatedCall struct {
	PreimageEnsureUpdatedCall *v1.Preimage_EnsureUpdatedCall `protobuf:"bytes,112,opt,name=preimage_ensure_updated_call,json=preimageEnsureUpdatedCall,proto3,oneof"`
}

type RuntimeCall_PreimageNotePreimageCall struct {
	PreimageNotePreimageCall *v1.Preimage_NotePreimageCall `protobuf:"bytes,113,opt,name=preimage_note_preimage_call,json=preimageNotePreimageCall,proto3,oneof"`
}

type RuntimeCall_PreimageRequestPreimageCall struct {
	PreimageRequestPreimageCall *v1.Preimage_RequestPreimageCall `protobuf:"bytes,114,opt,name=preimage_request_preimage_call,json=preimageRequestPreimageCall,proto3,oneof"`
}

type RuntimeCall_PreimageUnnotePreimageCall struct {
	PreimageUnnotePreimageCall *v1.Preimage_UnnotePreimageCall `protobuf:"bytes,115,opt,name=preimage_unnote_preimage_call,json=preimageUnnotePreimageCall,proto3,oneof"`
}

type RuntimeCall_PreimageUnrequestPreimageCall struct {
	PreimageUnrequestPreimageCall *v1.Preimage_UnrequestPreimageCall `protobuf:"bytes,116,opt,name=preimage_unrequest_preimage_call,json=preimageUnrequestPreimageCall,proto3,oneof"`
}

type RuntimeCall_ProxyAddProxyCall struct {
	ProxyAddProxyCall *v1.Proxy_AddProxyCall `protobuf:"bytes,117,opt,name=proxy_add_proxy_call,json=proxyAddProxyCall,proto3,oneof"`
}

type RuntimeCall_ProxyAnnounceCall struct {
	ProxyAnnounceCall *v1.Proxy_AnnounceCall `protobuf:"bytes,118,opt,name=proxy_announce_call,json=proxyAnnounceCall,proto3,oneof"`
}

type RuntimeCall_ProxyCreatePureCall struct {
	ProxyCreatePureCall *v1.Proxy_CreatePureCall `protobuf:"bytes,119,opt,name=proxy_create_pure_call,json=proxyCreatePureCall,proto3,oneof"`
}

type RuntimeCall_ProxyKillPureCall struct {
	ProxyKillPureCall *v1.Proxy_KillPureCall `protobuf:"bytes,120,opt,name=proxy_kill_pure_call,json=proxyKillPureCall,proto3,oneof"`
}

type RuntimeCall_ProxyProxyAnnouncedCall struct {
	ProxyProxyAnnouncedCall *v1.Proxy_ProxyAnnouncedCall `protobuf:"bytes,121,opt,name=proxy_proxy_announced_call,json=proxyProxyAnnouncedCall,proto3,oneof"`
}

type RuntimeCall_ProxyProxyCall struct {
	ProxyProxyCall *v1.Proxy_ProxyCall `protobuf:"bytes,122,opt,name=proxy_proxy_call,json=proxyProxyCall,proto3,oneof"`
}

type RuntimeCall_ProxyRejectAnnouncementCall struct {
	ProxyRejectAnnouncementCall *v1.Proxy_RejectAnnouncementCall `protobuf:"bytes,123,opt,name=proxy_reject_announcement_call,json=proxyRejectAnnouncementCall,proto3,oneof"`
}

type RuntimeCall_ProxyRemoveAnnouncementCall struct {
	ProxyRemoveAnnouncementCall *v1.Proxy_RemoveAnnouncementCall `protobuf:"bytes,124,opt,name=proxy_remove_announcement_call,json=proxyRemoveAnnouncementCall,proto3,oneof"`
}

type RuntimeCall_ProxyRemoveProxyCall struct {
	ProxyRemoveProxyCall *v1.Proxy_RemoveProxyCall `protobuf:"bytes,125,opt,name=proxy_remove_proxy_call,json=proxyRemoveProxyCall,proto3,oneof"`
}

type RuntimeCall_ReferendaCancelCall struct {
	ReferendaCancelCall *v1.Referenda_CancelCall `protobuf:"bytes,126,opt,name=referenda_cancel_call,json=referendaCancelCall,proto3,oneof"`
}

type RuntimeCall_ReferendaKillCall struct {
	ReferendaKillCall *v1.Referenda_KillCall `protobuf:"bytes,127,opt,name=referenda_kill_call,json=referendaKillCall,proto3,oneof"`
}

type RuntimeCall_ReferendaNudgeReferendumCall struct {
	ReferendaNudgeReferendumCall *v1.Referenda_NudgeReferendumCall `protobuf:"bytes,128,opt,name=referenda_nudge_referendum_call,json=referendaNudgeReferendumCall,proto3,oneof"`
}

type RuntimeCall_ReferendaOneFewerDecidingCall struct {
	ReferendaOneFewerDecidingCall *v1.Referenda_OneFewerDecidingCall `protobuf:"bytes,129,opt,name=referenda_one_fewer_deciding_call,json=referendaOneFewerDecidingCall,proto3,oneof"`
}

type RuntimeCall_ReferendaPlaceDecisionDepositCall struct {
	ReferendaPlaceDecisionDepositCall *v1.Referenda_PlaceDecisionDepositCall `protobuf:"bytes,130,opt,name=referenda_place_decision_deposit_call,json=referendaPlaceDecisionDepositCall,proto3,oneof"`
}

type RuntimeCall_ReferendaRefundDecisionDepositCall struct {
	ReferendaRefundDecisionDepositCall *v1.Referenda_RefundDecisionDepositCall `protobuf:"bytes,131,opt,name=referenda_refund_decision_deposit_call,json=referendaRefundDecisionDepositCall,proto3,oneof"`
}

type RuntimeCall_ReferendaRefundSubmissionDepositCall struct {
	ReferendaRefundSubmissionDepositCall *v1.Referenda_RefundSubmissionDepositCall `protobuf:"bytes,132,opt,name=referenda_refund_submission_deposit_call,json=referendaRefundSubmissionDepositCall,proto3,oneof"`
}

type RuntimeCall_ReferendaSetMetadataCall struct {
	ReferendaSetMetadataCall *v1.Referenda_SetMetadataCall `protobuf:"bytes,133,opt,name=referenda_set_metadata_call,json=referendaSetMetadataCall,proto3,oneof"`
}

type RuntimeCall_ReferendaSubmitCall struct {
	ReferendaSubmitCall *v1.Referenda_SubmitCall `protobuf:"bytes,134,opt,name=referenda_submit_call,json=referendaSubmitCall,proto3,oneof"`
}

type RuntimeCall_SchedulerCancelCall struct {
	SchedulerCancelCall *v1.Scheduler_CancelCall `protobuf:"bytes,135,opt,name=scheduler_cancel_call,json=schedulerCancelCall,proto3,oneof"`
}

type RuntimeCall_SchedulerCancelNamedCall struct {
	SchedulerCancelNamedCall *v1.Scheduler_CancelNamedCall `protobuf:"bytes,136,opt,name=scheduler_cancel_named_call,json=schedulerCancelNamedCall,proto3,oneof"`
}

type RuntimeCall_SchedulerScheduleAfterCall struct {
	SchedulerScheduleAfterCall *v1.Scheduler_ScheduleAfterCall `protobuf:"bytes,137,opt,name=scheduler_schedule_after_call,json=schedulerScheduleAfterCall,proto3,oneof"`
}

type RuntimeCall_SchedulerScheduleCall struct {
	SchedulerScheduleCall *v1.Scheduler_ScheduleCall `protobuf:"bytes,138,opt,name=scheduler_schedule_call,json=schedulerScheduleCall,proto3,oneof"`
}

type RuntimeCall_SchedulerScheduleNamedAfterCall struct {
	SchedulerScheduleNamedAfterCall *v1.Scheduler_ScheduleNamedAfterCall `protobuf:"bytes,139,opt,name=scheduler_schedule_named_after_call,json=schedulerScheduleNamedAfterCall,proto3,oneof"`
}

type RuntimeCall_SchedulerScheduleNamedCall struct {
	SchedulerScheduleNamedCall *v1.Scheduler_ScheduleNamedCall `protobuf:"bytes,140,opt,name=scheduler_schedule_named_call,json=schedulerScheduleNamedCall,proto3,oneof"`
}

type RuntimeCall_SessionSetKeysCall struct {
	SessionSetKeysCall *v1.Session_SetKeysCall `protobuf:"bytes,141,opt,name=session_set_keys_call,json=sessionSetKeysCall,proto3,oneof"`
}

type RuntimeCall_StakingrewardsAlignSupplyCall struct {
	StakingrewardsAlignSupplyCall *v1.StakingRewards_AlignSupplyCall `protobuf:"bytes,142,opt,name=stakingrewards_align_supply_call,json=stakingrewardsAlignSupplyCall,proto3,oneof"`
}

type RuntimeCall_StakingrewardsForceRefillCall struct {
	StakingrewardsForceRefillCall *v1.StakingRewards_ForceRefillCall `protobuf:"bytes,143,opt,name=stakingrewards_force_refill_call,json=stakingrewardsForceRefillCall,proto3,oneof"`
}

type RuntimeCall_StakingrewardsRefillCall struct {
	StakingrewardsRefillCall *v1.StakingRewards_RefillCall `protobuf:"bytes,144,opt,name=stakingrewards_refill_call,json=stakingrewardsRefillCall,proto3,oneof"`
}

type RuntimeCall_StakingrewardsWithdrawCall struct {
	StakingrewardsWithdrawCall *v1.StakingRewards_WithdrawCall `protobuf:"bytes,145,opt,name=stakingrewards_withdraw_call,json=stakingrewardsWithdrawCall,proto3,oneof"`
}

type RuntimeCall_StakingBondCall struct {
	StakingBondCall *v1.Staking_BondCall `protobuf:"bytes,146,opt,name=staking_bond_call,json=stakingBondCall,proto3,oneof"`
}

type RuntimeCall_StakingBondExtraCall struct {
	StakingBondExtraCall *v1.Staking_BondExtraCall `protobuf:"bytes,147,opt,name=staking_bond_extra_call,json=stakingBondExtraCall,proto3,oneof"`
}

type RuntimeCall_StakingCancelDeferredSlashCall struct {
	StakingCancelDeferredSlashCall *v1.Staking_CancelDeferredSlashCall `protobuf:"bytes,148,opt,name=staking_cancel_deferred_slash_call,json=stakingCancelDeferredSlashCall,proto3,oneof"`
}

type RuntimeCall_StakingChillOtherCall struct {
	StakingChillOtherCall *v1.Staking_ChillOtherCall `protobuf:"bytes,149,opt,name=staking_chill_other_call,json=stakingChillOtherCall,proto3,oneof"`
}

type RuntimeCall_StakingForceApplyMinCommissionCall struct {
	StakingForceApplyMinCommissionCall *v1.Staking_ForceApplyMinCommissionCall `protobuf:"bytes,150,opt,name=staking_force_apply_min_commission_call,json=stakingForceApplyMinCommissionCall,proto3,oneof"`
}

type RuntimeCall_StakingForceUnstakeCall struct {
	StakingForceUnstakeCall *v1.Staking_ForceUnstakeCall `protobuf:"bytes,151,opt,name=staking_force_unstake_call,json=stakingForceUnstakeCall,proto3,oneof"`
}

type RuntimeCall_StakingIncreaseValidatorCountCall struct {
	StakingIncreaseValidatorCountCall *v1.Staking_IncreaseValidatorCountCall `protobuf:"bytes,152,opt,name=staking_increase_validator_count_call,json=stakingIncreaseValidatorCountCall,proto3,oneof"`
}

type RuntimeCall_StakingKickCall struct {
	StakingKickCall *v1.Staking_KickCall `protobuf:"bytes,153,opt,name=staking_kick_call,json=stakingKickCall,proto3,oneof"`
}

type RuntimeCall_StakingNominateCall struct {
	StakingNominateCall *v1.Staking_NominateCall `protobuf:"bytes,154,opt,name=staking_nominate_call,json=stakingNominateCall,proto3,oneof"`
}

type RuntimeCall_StakingPayoutStakersCall struct {
	StakingPayoutStakersCall *v1.Staking_PayoutStakersCall `protobuf:"bytes,155,opt,name=staking_payout_stakers_call,json=stakingPayoutStakersCall,proto3,oneof"`
}

type RuntimeCall_StakingReapStashCall struct {
	StakingReapStashCall *v1.Staking_ReapStashCall `protobuf:"bytes,156,opt,name=staking_reap_stash_call,json=stakingReapStashCall,proto3,oneof"`
}

type RuntimeCall_StakingRebondCall struct {
	StakingRebondCall *v1.Staking_RebondCall `protobuf:"bytes,157,opt,name=staking_rebond_call,json=stakingRebondCall,proto3,oneof"`
}

type RuntimeCall_StakingScaleValidatorCountCall struct {
	StakingScaleValidatorCountCall *v1.Staking_ScaleValidatorCountCall `protobuf:"bytes,158,opt,name=staking_scale_validator_count_call,json=stakingScaleValidatorCountCall,proto3,oneof"`
}

type RuntimeCall_StakingSetInvulnerablesCall struct {
	StakingSetInvulnerablesCall *v1.Staking_SetInvulnerablesCall `protobuf:"bytes,159,opt,name=staking_set_invulnerables_call,json=stakingSetInvulnerablesCall,proto3,oneof"`
}

type RuntimeCall_StakingSetMinCommissionCall struct {
	StakingSetMinCommissionCall *v1.Staking_SetMinCommissionCall `protobuf:"bytes,160,opt,name=staking_set_min_commission_call,json=stakingSetMinCommissionCall,proto3,oneof"`
}

type RuntimeCall_StakingSetPayeeCall struct {
	StakingSetPayeeCall *v1.Staking_SetPayeeCall `protobuf:"bytes,161,opt,name=staking_set_payee_call,json=stakingSetPayeeCall,proto3,oneof"`
}

type RuntimeCall_StakingSetStakingConfigsCall struct {
	StakingSetStakingConfigsCall *v1.Staking_SetStakingConfigsCall `protobuf:"bytes,162,opt,name=staking_set_staking_configs_call,json=stakingSetStakingConfigsCall,proto3,oneof"`
}

type RuntimeCall_StakingSetValidatorCountCall struct {
	StakingSetValidatorCountCall *v1.Staking_SetValidatorCountCall `protobuf:"bytes,163,opt,name=staking_set_validator_count_call,json=stakingSetValidatorCountCall,proto3,oneof"`
}

type RuntimeCall_StakingUnbondCall struct {
	StakingUnbondCall *v1.Staking_UnbondCall `protobuf:"bytes,164,opt,name=staking_unbond_call,json=stakingUnbondCall,proto3,oneof"`
}

type RuntimeCall_StakingValidateCall struct {
	StakingValidateCall *v1.Staking_ValidateCall `protobuf:"bytes,165,opt,name=staking_validate_call,json=stakingValidateCall,proto3,oneof"`
}

type RuntimeCall_StakingWithdrawUnbondedCall struct {
	StakingWithdrawUnbondedCall *v1.Staking_WithdrawUnbondedCall `protobuf:"bytes,166,opt,name=staking_withdraw_unbonded_call,json=stakingWithdrawUnbondedCall,proto3,oneof"`
}

type RuntimeCall_SystemKillPrefixCall struct {
	SystemKillPrefixCall *v1.System_KillPrefixCall `protobuf:"bytes,167,opt,name=system_kill_prefix_call,json=systemKillPrefixCall,proto3,oneof"`
}

type RuntimeCall_SystemKillStorageCall struct {
	SystemKillStorageCall *v1.System_KillStorageCall `protobuf:"bytes,168,opt,name=system_kill_storage_call,json=systemKillStorageCall,proto3,oneof"`
}

type RuntimeCall_SystemRemarkCall struct {
	SystemRemarkCall *v1.System_RemarkCall `protobuf:"bytes,169,opt,name=system_remark_call,json=systemRemarkCall,proto3,oneof"`
}

type RuntimeCall_SystemRemarkWithEventCall struct {
	SystemRemarkWithEventCall *v1.System_RemarkWithEventCall `protobuf:"bytes,170,opt,name=system_remark_with_event_call,json=systemRemarkWithEventCall,proto3,oneof"`
}

type RuntimeCall_SystemSetCodeCall struct {
	SystemSetCodeCall *v1.System_SetCodeCall `protobuf:"bytes,171,opt,name=system_set_code_call,json=systemSetCodeCall,proto3,oneof"`
}

type RuntimeCall_SystemSetCodeWithoutChecksCall struct {
	SystemSetCodeWithoutChecksCall *v1.System_SetCodeWithoutChecksCall `protobuf:"bytes,172,opt,name=system_set_code_without_checks_call,json=systemSetCodeWithoutChecksCall,proto3,oneof"`
}

type RuntimeCall_SystemSetHeapPagesCall struct {
	SystemSetHeapPagesCall *v1.System_SetHeapPagesCall `protobuf:"bytes,173,opt,name=system_set_heap_pages_call,json=systemSetHeapPagesCall,proto3,oneof"`
}

type RuntimeCall_SystemSetStorageCall struct {
	SystemSetStorageCall *v1.System_SetStorageCall `protobuf:"bytes,174,opt,name=system_set_storage_call,json=systemSetStorageCall,proto3,oneof"`
}

type RuntimeCall_TimestampSetCall struct {
	TimestampSetCall *v1.Timestamp_SetCall `protobuf:"bytes,175,opt,name=timestamp_set_call,json=timestampSetCall,proto3,oneof"`
}

type RuntimeCall_TreasuryApproveProposalCall struct {
	TreasuryApproveProposalCall *v1.Treasury_ApproveProposalCall `protobuf:"bytes,176,opt,name=treasury_approve_proposal_call,json=treasuryApproveProposalCall,proto3,oneof"`
}

type RuntimeCall_TreasuryCheckStatusCall struct {
	TreasuryCheckStatusCall *v1.Treasury_CheckStatusCall `protobuf:"bytes,177,opt,name=treasury_check_status_call,json=treasuryCheckStatusCall,proto3,oneof"`
}

type RuntimeCall_TreasuryPayoutCall struct {
	TreasuryPayoutCall *v1.Treasury_PayoutCall `protobuf:"bytes,178,opt,name=treasury_payout_call,json=treasuryPayoutCall,proto3,oneof"`
}

type RuntimeCall_TreasuryProposeSpendCall struct {
	TreasuryProposeSpendCall *v1.Treasury_ProposeSpendCall `protobuf:"bytes,179,opt,name=treasury_propose_spend_call,json=treasuryProposeSpendCall,proto3,oneof"`
}

type RuntimeCall_TreasuryRejectProposalCall struct {
	TreasuryRejectProposalCall *v1.Treasury_RejectProposalCall `protobuf:"bytes,180,opt,name=treasury_reject_proposal_call,json=treasuryRejectProposalCall,proto3,oneof"`
}

type RuntimeCall_TreasuryRemoveApprovalCall struct {
	TreasuryRemoveApprovalCall *v1.Treasury_RemoveApprovalCall `protobuf:"bytes,181,opt,name=treasury_remove_approval_call,json=treasuryRemoveApprovalCall,proto3,oneof"`
}

type RuntimeCall_TreasurySpendCall struct {
	TreasurySpendCall *v1.Treasury_SpendCall `protobuf:"bytes,182,opt,name=treasury_spend_call,json=treasurySpendCall,proto3,oneof"`
}

type RuntimeCall_TreasurySpendLocalCall struct {
	TreasurySpendLocalCall *v1.Treasury_SpendLocalCall `protobuf:"bytes,183,opt,name=treasury_spend_local_call,json=treasurySpendLocalCall,proto3,oneof"`
}

type RuntimeCall_TreasuryVoidSpendCall struct {
	TreasuryVoidSpendCall *v1.Treasury_VoidSpendCall `protobuf:"bytes,184,opt,name=treasury_void_spend_call,json=treasuryVoidSpendCall,proto3,oneof"`
}

type RuntimeCall_UtilityAsDerivativeCall struct {
	UtilityAsDerivativeCall *v1.Utility_AsDerivativeCall `protobuf:"bytes,185,opt,name=utility_as_derivative_call,json=utilityAsDerivativeCall,proto3,oneof"`
}

type RuntimeCall_UtilityBatchAllCall struct {
	UtilityBatchAllCall *v1.Utility_BatchAllCall `protobuf:"bytes,186,opt,name=utility_batch_all_call,json=utilityBatchAllCall,proto3,oneof"`
}

type RuntimeCall_UtilityBatchCall struct {
	UtilityBatchCall *v1.Utility_BatchCall `protobuf:"bytes,187,opt,name=utility_batch_call,json=utilityBatchCall,proto3,oneof"`
}

type RuntimeCall_UtilityDispatchAsCall struct {
	UtilityDispatchAsCall *v1.Utility_DispatchAsCall `protobuf:"bytes,188,opt,name=utility_dispatch_as_call,json=utilityDispatchAsCall,proto3,oneof"`
}

type RuntimeCall_UtilityForceBatchCall struct {
	UtilityForceBatchCall *v1.Utility_ForceBatchCall `protobuf:"bytes,189,opt,name=utility_force_batch_call,json=utilityForceBatchCall,proto3,oneof"`
}

type RuntimeCall_UtilityWithWeightCall struct {
	UtilityWithWeightCall *v1.Utility_WithWeightCall `protobuf:"bytes,190,opt,name=utility_with_weight_call,json=utilityWithWeightCall,proto3,oneof"`
}

type RuntimeCall_VestingForceVestedTransferCall struct {
	VestingForceVestedTransferCall *v1.Vesting_ForceVestedTransferCall `protobuf:"bytes,191,opt,name=vesting_force_vested_transfer_call,json=vestingForceVestedTransferCall,proto3,oneof"`
}

type RuntimeCall_VestingMergeSchedulesCall struct {
	VestingMergeSchedulesCall *v1.Vesting_MergeSchedulesCall `protobuf:"bytes,192,opt,name=vesting_merge_schedules_call,json=vestingMergeSchedulesCall,proto3,oneof"`
}

type RuntimeCall_VestingVestOtherCall struct {
	VestingVestOtherCall *v1.Vesting_VestOtherCall `protobuf:"bytes,193,opt,name=vesting_vest_other_call,json=vestingVestOtherCall,proto3,oneof"`
}

type RuntimeCall_VestingVestedTransferCall struct {
	VestingVestedTransferCall *v1.Vesting_VestedTransferCall `protobuf:"bytes,194,opt,name=vesting_vested_transfer_call,json=vestingVestedTransferCall,proto3,oneof"`
}

type RuntimeCall_WhitelistDispatchWhitelistedCallCall struct {
	WhitelistDispatchWhitelistedCallCall *v1.Whitelist_DispatchWhitelistedCallCall `protobuf:"bytes,195,opt,name=whitelist_dispatch_whitelisted_call_call,json=whitelistDispatchWhitelistedCallCall,proto3,oneof"`
}

type RuntimeCall_WhitelistDispatchWhitelistedCallWithPreimageCall struct {
	WhitelistDispatchWhitelistedCallWithPreimageCall *v1.Whitelist_DispatchWhitelistedCallWithPreimageCall `protobuf:"bytes,196,opt,name=whitelist_dispatch_whitelisted_call_with_preimage_call,json=whitelistDispatchWhitelistedCallWithPreimageCall,proto3,oneof"`
}

type RuntimeCall_WhitelistRemoveWhitelistedCallCall struct {
	WhitelistRemoveWhitelistedCallCall *v1.Whitelist_RemoveWhitelistedCallCall `protobuf:"bytes,197,opt,name=whitelist_remove_whitelisted_call_call,json=whitelistRemoveWhitelistedCallCall,proto3,oneof"`
}

type RuntimeCall_WhitelistWhitelistCallCall struct {
	WhitelistWhitelistCallCall *v1.Whitelist_WhitelistCallCall `protobuf:"bytes,198,opt,name=whitelist_whitelist_call_call,json=whitelistWhitelistCallCall,proto3,oneof"`
}

func (*RuntimeCall_BabePlanConfigChangeCall) isRuntimeCall_Call() {}

func (*RuntimeCall_BabeReportEquivocationCall) isRuntimeCall_Call() {}

func (*RuntimeCall_BabeReportEquivocationUnsignedCall) isRuntimeCall_Call() {}

func (*RuntimeCall_BagslistPutInFrontOfCall) isRuntimeCall_Call() {}

func (*RuntimeCall_BagslistPutInFrontOfOtherCall) isRuntimeCall_Call() {}

func (*RuntimeCall_BagslistRebagCall) isRuntimeCall_Call() {}

func (*RuntimeCall_BalancesForceSetBalanceCall) isRuntimeCall_Call() {}

func (*RuntimeCall_BalancesForceTransferCall) isRuntimeCall_Call() {}

func (*RuntimeCall_BalancesForceUnreserveCall) isRuntimeCall_Call() {}

func (*RuntimeCall_BalancesTransferAllCall) isRuntimeCall_Call() {}

func (*RuntimeCall_BalancesTransferAllowDeathCall) isRuntimeCall_Call() {}

func (*RuntimeCall_BalancesTransferKeepAliveCall) isRuntimeCall_Call() {}

func (*RuntimeCall_BalancesUpgradeAccountsCall) isRuntimeCall_Call() {}

func (*RuntimeCall_BountiesAcceptCuratorCall) isRuntimeCall_Call() {}

func (*RuntimeCall_BountiesApproveBountyCall) isRuntimeCall_Call() {}

func (*RuntimeCall_BountiesAwardBountyCall) isRuntimeCall_Call() {}

func (*RuntimeCall_BountiesClaimBountyCall) isRuntimeCall_Call() {}

func (*RuntimeCall_BountiesCloseBountyCall) isRuntimeCall_Call() {}

func (*RuntimeCall_BountiesExtendBountyExpiryCall) isRuntimeCall_Call() {}

func (*RuntimeCall_BountiesProposeBountyCall) isRuntimeCall_Call() {}

func (*RuntimeCall_BountiesProposeCuratorCall) isRuntimeCall_Call() {}

func (*RuntimeCall_BountiesUnassignCuratorCall) isRuntimeCall_Call() {}

func (*RuntimeCall_ChildbountiesAcceptCuratorCall) isRuntimeCall_Call() {}

func (*RuntimeCall_ChildbountiesAddChildBountyCall) isRuntimeCall_Call() {}

func (*RuntimeCall_ChildbountiesAwardChildBountyCall) isRuntimeCall_Call() {}

func (*RuntimeCall_ChildbountiesClaimChildBountyCall) isRuntimeCall_Call() {}

func (*RuntimeCall_ChildbountiesCloseChildBountyCall) isRuntimeCall_Call() {}

func (*RuntimeCall_ChildbountiesProposeCuratorCall) isRuntimeCall_Call() {}

func (*RuntimeCall_ChildbountiesUnassignCuratorCall) isRuntimeCall_Call() {}

func (*RuntimeCall_ConvictionvotingDelegateCall) isRuntimeCall_Call() {}

func (*RuntimeCall_ConvictionvotingRemoveOtherVoteCall) isRuntimeCall_Call() {}

func (*RuntimeCall_ConvictionvotingRemoveVoteCall) isRuntimeCall_Call() {}

func (*RuntimeCall_ConvictionvotingUndelegateCall) isRuntimeCall_Call() {}

func (*RuntimeCall_ConvictionvotingUnlockCall) isRuntimeCall_Call() {}

func (*RuntimeCall_ConvictionvotingVoteCall) isRuntimeCall_Call() {}

func (*RuntimeCall_ElectionprovidermultiphaseGovernanceFallbackCall) isRuntimeCall_Call() {}

func (*RuntimeCall_ElectionprovidermultiphaseSetEmergencyElectionResultCall) isRuntimeCall_Call() {}

func (*RuntimeCall_ElectionprovidermultiphaseSetMinimumUntrustedScoreCall) isRuntimeCall_Call() {}

func (*RuntimeCall_ElectionprovidermultiphaseSubmitCall) isRuntimeCall_Call() {}

func (*RuntimeCall_ElectionprovidermultiphaseSubmitUnsignedCall) isRuntimeCall_Call() {}

func (*RuntimeCall_FellowshipcollectiveAddMemberCall) isRuntimeCall_Call() {}

func (*RuntimeCall_FellowshipcollectiveCleanupPollCall) isRuntimeCall_Call() {}

func (*RuntimeCall_FellowshipcollectiveDemoteMemberCall) isRuntimeCall_Call() {}

func (*RuntimeCall_FellowshipcollectivePromoteMemberCall) isRuntimeCall_Call() {}

func (*RuntimeCall_FellowshipcollectiveRemoveMemberCall) isRuntimeCall_Call() {}

func (*RuntimeCall_FellowshipcollectiveVoteCall) isRuntimeCall_Call() {}

func (*RuntimeCall_FellowshipreferendaCancelCall) isRuntimeCall_Call() {}

func (*RuntimeCall_FellowshipreferendaKillCall) isRuntimeCall_Call() {}

func (*RuntimeCall_FellowshipreferendaNudgeReferendumCall) isRuntimeCall_Call() {}

func (*RuntimeCall_FellowshipreferendaOneFewerDecidingCall) isRuntimeCall_Call() {}

func (*RuntimeCall_FellowshipreferendaPlaceDecisionDepositCall) isRuntimeCall_Call() {}

func (*RuntimeCall_FellowshipreferendaRefundDecisionDepositCall) isRuntimeCall_Call() {}

func (*RuntimeCall_FellowshipreferendaRefundSubmissionDepositCall) isRuntimeCall_Call() {}

func (*RuntimeCall_FellowshipreferendaSetMetadataCall) isRuntimeCall_Call() {}

func (*RuntimeCall_FellowshipreferendaSubmitCall) isRuntimeCall_Call() {}

func (*RuntimeCall_GearvoucherCallCall) isRuntimeCall_Call() {}

func (*RuntimeCall_GearvoucherCallDeprecatedCall) isRuntimeCall_Call() {}

func (*RuntimeCall_GearvoucherDeclineCall) isRuntimeCall_Call() {}

func (*RuntimeCall_GearvoucherIssueCall) isRuntimeCall_Call() {}

func (*RuntimeCall_GearvoucherRevokeCall) isRuntimeCall_Call() {}

func (*RuntimeCall_GearvoucherUpdateCall) isRuntimeCall_Call() {}

func (*RuntimeCall_GearClaimValueCall) isRuntimeCall_Call() {}

func (*RuntimeCall_GearCreateProgramCall) isRuntimeCall_Call() {}

func (*RuntimeCall_GearRunCall) isRuntimeCall_Call() {}

func (*RuntimeCall_GearSendMessageCall) isRuntimeCall_Call() {}

func (*RuntimeCall_GearSendReplyCall) isRuntimeCall_Call() {}

func (*RuntimeCall_GearSetExecuteInherentCall) isRuntimeCall_Call() {}

func (*RuntimeCall_GearUploadCodeCall) isRuntimeCall_Call() {}

func (*RuntimeCall_GearUploadProgramCall) isRuntimeCall_Call() {}

func (*RuntimeCall_GrandpaNoteStalledCall) isRuntimeCall_Call() {}

func (*RuntimeCall_GrandpaReportEquivocationCall) isRuntimeCall_Call() {}

func (*RuntimeCall_GrandpaReportEquivocationUnsignedCall) isRuntimeCall_Call() {}

func (*RuntimeCall_IdentityAddRegistrarCall) isRuntimeCall_Call() {}

func (*RuntimeCall_IdentityAddSubCall) isRuntimeCall_Call() {}

func (*RuntimeCall_IdentityCancelRequestCall) isRuntimeCall_Call() {}

func (*RuntimeCall_IdentityKillIdentityCall) isRuntimeCall_Call() {}

func (*RuntimeCall_IdentityProvideJudgementCall) isRuntimeCall_Call() {}

func (*RuntimeCall_IdentityRemoveSubCall) isRuntimeCall_Call() {}

func (*RuntimeCall_IdentityRenameSubCall) isRuntimeCall_Call() {}

func (*RuntimeCall_IdentityRequestJudgementCall) isRuntimeCall_Call() {}

func (*RuntimeCall_IdentitySetAccountIdCall) isRuntimeCall_Call() {}

func (*RuntimeCall_IdentitySetFeeCall) isRuntimeCall_Call() {}

func (*RuntimeCall_IdentitySetFieldsCall) isRuntimeCall_Call() {}

func (*RuntimeCall_IdentitySetIdentityCall) isRuntimeCall_Call() {}

func (*RuntimeCall_IdentitySetSubsCall) isRuntimeCall_Call() {}

func (*RuntimeCall_ImonlineHeartbeatCall) isRuntimeCall_Call() {}

func (*RuntimeCall_MultisigApproveAsMultiCall) isRuntimeCall_Call() {}

func (*RuntimeCall_MultisigAsMultiCall) isRuntimeCall_Call() {}

func (*RuntimeCall_MultisigAsMultiThreshold_1Call) isRuntimeCall_Call() {}

func (*RuntimeCall_MultisigCancelAsMultiCall) isRuntimeCall_Call() {}

func (*RuntimeCall_NominationpoolsAdjustPoolDepositCall) isRuntimeCall_Call() {}

func (*RuntimeCall_NominationpoolsBondExtraCall) isRuntimeCall_Call() {}

func (*RuntimeCall_NominationpoolsBondExtraOtherCall) isRuntimeCall_Call() {}

func (*RuntimeCall_NominationpoolsChillCall) isRuntimeCall_Call() {}

func (*RuntimeCall_NominationpoolsClaimCommissionCall) isRuntimeCall_Call() {}

func (*RuntimeCall_NominationpoolsClaimPayoutOtherCall) isRuntimeCall_Call() {}

func (*RuntimeCall_NominationpoolsCreateCall) isRuntimeCall_Call() {}

func (*RuntimeCall_NominationpoolsCreateWithPoolIdCall) isRuntimeCall_Call() {}

func (*RuntimeCall_NominationpoolsJoinCall) isRuntimeCall_Call() {}

func (*RuntimeCall_NominationpoolsNominateCall) isRuntimeCall_Call() {}

func (*RuntimeCall_NominationpoolsPoolWithdrawUnbondedCall) isRuntimeCall_Call() {}

func (*RuntimeCall_NominationpoolsSetClaimPermissionCall) isRuntimeCall_Call() {}

func (*RuntimeCall_NominationpoolsSetCommissionCall) isRuntimeCall_Call() {}

func (*RuntimeCall_NominationpoolsSetCommissionChangeRateCall) isRuntimeCall_Call() {}

func (*RuntimeCall_NominationpoolsSetCommissionMaxCall) isRuntimeCall_Call() {}

func (*RuntimeCall_NominationpoolsSetConfigsCall) isRuntimeCall_Call() {}

func (*RuntimeCall_NominationpoolsSetMetadataCall) isRuntimeCall_Call() {}

func (*RuntimeCall_NominationpoolsSetStateCall) isRuntimeCall_Call() {}

func (*RuntimeCall_NominationpoolsUnbondCall) isRuntimeCall_Call() {}

func (*RuntimeCall_NominationpoolsUpdateRolesCall) isRuntimeCall_Call() {}

func (*RuntimeCall_NominationpoolsWithdrawUnbondedCall) isRuntimeCall_Call() {}

func (*RuntimeCall_PreimageEnsureUpdatedCall) isRuntimeCall_Call() {}

func (*RuntimeCall_PreimageNotePreimageCall) isRuntimeCall_Call() {}

func (*RuntimeCall_PreimageRequestPreimageCall) isRuntimeCall_Call() {}

func (*RuntimeCall_PreimageUnnotePreimageCall) isRuntimeCall_Call() {}

func (*RuntimeCall_PreimageUnrequestPreimageCall) isRuntimeCall_Call() {}

func (*RuntimeCall_ProxyAddProxyCall) isRuntimeCall_Call() {}

func (*RuntimeCall_ProxyAnnounceCall) isRuntimeCall_Call() {}

func (*RuntimeCall_ProxyCreatePureCall) isRuntimeCall_Call() {}

func (*RuntimeCall_ProxyKillPureCall) isRuntimeCall_Call() {}

func (*RuntimeCall_ProxyProxyAnnouncedCall) isRuntimeCall_Call() {}

func (*RuntimeCall_ProxyProxyCall) isRuntimeCall_Call() {}

func (*RuntimeCall_ProxyRejectAnnouncementCall) isRuntimeCall_Call() {}

func (*RuntimeCall_ProxyRemoveAnnouncementCall) isRuntimeCall_Call() {}

func (*RuntimeCall_ProxyRemoveProxyCall) isRuntimeCall_Call() {}

func (*RuntimeCall_ReferendaCancelCall) isRuntimeCall_Call() {}

func (*RuntimeCall_ReferendaKillCall) isRuntimeCall_Call() {}

func (*RuntimeCall_ReferendaNudgeReferendumCall) isRuntimeCall_Call() {}

func (*RuntimeCall_ReferendaOneFewerDecidingCall) isRuntimeCall_Call() {}

func (*RuntimeCall_ReferendaPlaceDecisionDepositCall) isRuntimeCall_Call() {}

func (*RuntimeCall_ReferendaRefundDecisionDepositCall) isRuntimeCall_Call() {}

func (*RuntimeCall_ReferendaRefundSubmissionDepositCall) isRuntimeCall_Call() {}

func (*RuntimeCall_ReferendaSetMetadataCall) isRuntimeCall_Call() {}

func (*RuntimeCall_ReferendaSubmitCall) isRuntimeCall_Call() {}

func (*RuntimeCall_SchedulerCancelCall) isRuntimeCall_Call() {}

func (*RuntimeCall_SchedulerCancelNamedCall) isRuntimeCall_Call() {}

func (*RuntimeCall_SchedulerScheduleAfterCall) isRuntimeCall_Call() {}

func (*RuntimeCall_SchedulerScheduleCall) isRuntimeCall_Call() {}

func (*RuntimeCall_SchedulerScheduleNamedAfterCall) isRuntimeCall_Call() {}

func (*RuntimeCall_SchedulerScheduleNamedCall) isRuntimeCall_Call() {}

func (*RuntimeCall_SessionSetKeysCall) isRuntimeCall_Call() {}

func (*RuntimeCall_StakingrewardsAlignSupplyCall) isRuntimeCall_Call() {}

func (*RuntimeCall_StakingrewardsForceRefillCall) isRuntimeCall_Call() {}

func (*RuntimeCall_StakingrewardsRefillCall) isRuntimeCall_Call() {}

func (*RuntimeCall_StakingrewardsWithdrawCall) isRuntimeCall_Call() {}

func (*RuntimeCall_StakingBondCall) isRuntimeCall_Call() {}

func (*RuntimeCall_StakingBondExtraCall) isRuntimeCall_Call() {}

func (*RuntimeCall_StakingCancelDeferredSlashCall) isRuntimeCall_Call() {}

func (*RuntimeCall_StakingChillOtherCall) isRuntimeCall_Call() {}

func (*RuntimeCall_StakingForceApplyMinCommissionCall) isRuntimeCall_Call() {}

func (*RuntimeCall_StakingForceUnstakeCall) isRuntimeCall_Call() {}

func (*RuntimeCall_StakingIncreaseValidatorCountCall) isRuntimeCall_Call() {}

func (*RuntimeCall_StakingKickCall) isRuntimeCall_Call() {}

func (*RuntimeCall_StakingNominateCall) isRuntimeCall_Call() {}

func (*RuntimeCall_StakingPayoutStakersCall) isRuntimeCall_Call() {}

func (*RuntimeCall_StakingReapStashCall) isRuntimeCall_Call() {}

func (*RuntimeCall_StakingRebondCall) isRuntimeCall_Call() {}

func (*RuntimeCall_StakingScaleValidatorCountCall) isRuntimeCall_Call() {}

func (*RuntimeCall_StakingSetInvulnerablesCall) isRuntimeCall_Call() {}

func (*RuntimeCall_StakingSetMinCommissionCall) isRuntimeCall_Call() {}

func (*RuntimeCall_StakingSetPayeeCall) isRuntimeCall_Call() {}

func (*RuntimeCall_StakingSetStakingConfigsCall) isRuntimeCall_Call() {}

func (*RuntimeCall_StakingSetValidatorCountCall) isRuntimeCall_Call() {}

func (*RuntimeCall_StakingUnbondCall) isRuntimeCall_Call() {}

func (*RuntimeCall_StakingValidateCall) isRuntimeCall_Call() {}

func (*RuntimeCall_StakingWithdrawUnbondedCall) isRuntimeCall_Call() {}

func (*RuntimeCall_SystemKillPrefixCall) isRuntimeCall_Call() {}

func (*RuntimeCall_SystemKillStorageCall) isRuntimeCall_Call() {}

func (*RuntimeCall_SystemRemarkCall) isRuntimeCall_Call() {}

func (*RuntimeCall_SystemRemarkWithEventCall) isRuntimeCall_Call() {}

func (*RuntimeCall_SystemSetCodeCall) isRuntimeCall_Call() {}

func (*RuntimeCall_SystemSetCodeWithoutChecksCall) isRuntimeCall_Call() {}

func (*RuntimeCall_SystemSetHeapPagesCall) isRuntimeCall_Call() {}

func (*RuntimeCall_SystemSetStorageCall) isRuntimeCall_Call() {}

func (*RuntimeCall_TimestampSetCall) isRuntimeCall_Call() {}

func (*RuntimeCall_TreasuryApproveProposalCall) isRuntimeCall_Call() {}

func (*RuntimeCall_TreasuryCheckStatusCall) isRuntimeCall_Call() {}

func (*RuntimeCall_TreasuryPayoutCall) isRuntimeCall_Call() {}

func (*RuntimeCall_TreasuryProposeSpendCall) isRuntimeCall_Call() {}

func (*RuntimeCall_TreasuryRejectProposalCall) isRuntimeCall_Call() {}

func (*RuntimeCall_TreasuryRemoveApprovalCall) isRuntimeCall_Call() {}

func (*RuntimeCall_TreasurySpendCall) isRuntimeCall_Call() {}

func (*RuntimeCall_TreasurySpendLocalCall) isRuntimeCall_Call() {}

func (*RuntimeCall_TreasuryVoidSpendCall) isRuntimeCall_Call() {}

func (*RuntimeCall_UtilityAsDerivativeCall) isRuntimeCall_Call() {}

func (*RuntimeCall_UtilityBatchAllCall) isRuntimeCall_Call() {}

func (*RuntimeCall_UtilityBatchCall) isRuntimeCall_Call() {}

func (*RuntimeCall_UtilityDispatchAsCall) isRuntimeCall_Call() {}

func (*RuntimeCall_UtilityForceBatchCall) isRuntimeCall_Call() {}

func (*RuntimeCall_UtilityWithWeightCall) isRuntimeCall_Call() {}

func (*RuntimeCall_VestingForceVestedTransferCall) isRuntimeCall_Call() {}

func (*RuntimeCall_VestingMergeSchedulesCall) isRuntimeCall_Call() {}

func (*RuntimeCall_VestingVestOtherCall) isRuntimeCall_Call() {}

func (*RuntimeCall_VestingVestedTransferCall) isRuntimeCall_Call() {}

func (*RuntimeCall_WhitelistDispatchWhitelistedCallCall) isRuntimeCall_Call() {}

func (*RuntimeCall_WhitelistDispatchWhitelistedCallWithPreimageCall) isRuntimeCall_Call() {}

func (*RuntimeCall_WhitelistRemoveWhitelistedCallCall) isRuntimeCall_Call() {}

func (*RuntimeCall_WhitelistWhitelistCallCall) isRuntimeCall_Call() {}

var File_sf_gear_extrinsic_type_v1_extrinsic_proto protoreflect.FileDescriptor

var file_sf_gear_extrinsic_type_v1_extrinsic_proto_rawDesc = []byte{
	0x0a, 0x29, 0x73, 0x66, 0x2f, 0x67, 0x65, 0x61, 0x72, 0x2f, 0x65, 0x78, 0x74, 0x72, 0x69, 0x6e,
	0x73, 0x69, 0x63, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x74, 0x72,
	0x69, 0x6e, 0x73, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x65, 0x78, 0x74, 0x72, 0x69, 0x6e, 0x73, 0x69, 0x63, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x25, 0x73, 0x66, 0x2f, 0x67, 0x65, 0x61, 0x72, 0x2f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x76, 0x31,
	0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe5, 0xc3,
	0x01, 0x0a, 0x0b, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x75,
	0x0a, 0x1c, 0x62, 0x61, 0x62, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x61, 0x62, 0x65, 0x5f, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x18, 0x62, 0x61, 0x62,
	0x65, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x7a, 0x0a, 0x1d, 0x62, 0x61, 0x62, 0x65, 0x5f, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x62, 0x65, 0x5f, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x45, 0x71, 0x75, 0x69, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x1a, 0x62, 0x61, 0x62, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x45, 0x71, 0x75, 0x69, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c,
	0x6c, 0x12, 0x93, 0x01, 0x0a, 0x26, 0x62, 0x61, 0x62, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75,
	0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61,
	0x62, 0x65, 0x5f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x71, 0x75, 0x69, 0x76, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x61, 0x6c,
	0x6c, 0x48, 0x00, 0x52, 0x22, 0x62, 0x61, 0x62, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45,
	0x71, 0x75, 0x69, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x76, 0x0a, 0x1d, 0x62, 0x61, 0x67, 0x73, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x66, 0x72, 0x6f, 0x6e, 0x74,
	0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x67, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x5f, 0x50, 0x75, 0x74, 0x49, 0x6e, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x4f, 0x66, 0x43,
	0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x18, 0x62, 0x61, 0x67, 0x73, 0x6c, 0x69, 0x73, 0x74, 0x50,
	0x75, 0x74, 0x49, 0x6e, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x4f, 0x66, 0x43, 0x61, 0x6c, 0x6c, 0x12,
	0x86, 0x01, 0x0a, 0x23, 0x62, 0x61, 0x67, 0x73, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x70, 0x75, 0x74,
	0x5f, 0x69, 0x6e, 0x5f, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x6f, 0x74, 0x68,
	0x65, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x67, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x5f, 0x50, 0x75, 0x74, 0x49, 0x6e, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x4f, 0x66, 0x4f, 0x74,
	0x68, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x1d, 0x62, 0x61, 0x67, 0x73, 0x6c,
	0x69, 0x73, 0x74, 0x50, 0x75, 0x74, 0x49, 0x6e, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x4f, 0x66, 0x4f,
	0x74, 0x68, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x5e, 0x0a, 0x13, 0x62, 0x61, 0x67, 0x73,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x62, 0x61, 0x67, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x61, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x52, 0x65, 0x62, 0x61, 0x67, 0x43,
	0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x11, 0x62, 0x61, 0x67, 0x73, 0x6c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x62, 0x61, 0x67, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x7e, 0x0a, 0x1f, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x53, 0x65, 0x74, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x1b, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x53, 0x65, 0x74, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x77, 0x0a, 0x1c, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x5f, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x19, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x46, 0x6f, 0x72, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x61, 0x6c,
	0x6c, 0x12, 0x7a, 0x0a, 0x1d, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x46, 0x6f, 0x72,
	0x63, 0x65, 0x55, 0x6e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48,
	0x00, 0x52, 0x1a, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x63, 0x65,
	0x55, 0x6e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x71, 0x0a,
	0x1a, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x6c,
	0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x17, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x43, 0x61, 0x6c, 0x6c,
	0x12, 0x87, 0x01, 0x0a, 0x22, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x64, 0x65, 0x61,
	0x74, 0x68, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x5f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x44,
	0x65, 0x61, 0x74, 0x68, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x1e, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x44, 0x65, 0x61, 0x74, 0x68, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x84, 0x01, 0x0a, 0x21, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x5f, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x43, 0x61, 0x6c, 0x6c,
	0x48, 0x00, 0x52, 0x1d, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x43, 0x61, 0x6c,
	0x6c, 0x12, 0x7d, 0x0a, 0x1e, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x75, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x55, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x43, 0x61, 0x6c,
	0x6c, 0x48, 0x00, 0x52, 0x1b, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x55, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x43, 0x61, 0x6c, 0x6c,
	0x12, 0x77, 0x0a, 0x1c, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x61, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x41, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x43, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x19,
	0x62, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x43, 0x75,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x77, 0x0a, 0x1c, 0x62, 0x6f, 0x75,
	0x6e, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x62, 0x6f,
	0x75, 0x6e, 0x74, 0x79, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x74,
	0x69, 0x65, 0x73, 0x5f, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x74,
	0x79, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x19, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65,
	0x73, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x43, 0x61,
	0x6c, 0x6c, 0x12, 0x71, 0x0a, 0x1a, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x61,
	0x77, 0x61, 0x72, 0x64, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x5f, 0x63, 0x61, 0x6c, 0x6c,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x41, 0x77, 0x61, 0x72, 0x64,
	0x42, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x17, 0x62, 0x6f,
	0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x41, 0x77, 0x61, 0x72, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74,
	0x79, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x71, 0x0a, 0x1a, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65,
	0x73, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x43, 0x6c,
	0x61, 0x69, 0x6d, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52,
	0x17, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x42, 0x6f,
	0x75, 0x6e, 0x74, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x71, 0x0a, 0x1a, 0x62, 0x6f, 0x75, 0x6e,
	0x74, 0x69, 0x65, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x74,
	0x79, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73,
	0x5f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x43, 0x61, 0x6c, 0x6c,
	0x48, 0x00, 0x52, 0x17, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x87, 0x01, 0x0a, 0x22,
	0x62, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x5f,
	0x62, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x43,
	0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x1e, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x79, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x77, 0x0a, 0x1c, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65,
	0x73, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x79,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x5f,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x43, 0x61, 0x6c,
	0x6c, 0x48, 0x00, 0x52, 0x19, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x7a,
	0x0a, 0x1d, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x65, 0x43, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x1a,
	0x62, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x43,
	0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x7d, 0x0a, 0x1e, 0x62, 0x6f,
	0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x75, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x5f,
	0x63, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f,
	0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x55, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x43,
	0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x1b, 0x62, 0x6f,
	0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x55, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x43, 0x75,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x86, 0x01, 0x0a, 0x21, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x41,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x43, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x61, 0x6c, 0x6c,
	0x48, 0x00, 0x52, 0x1e, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65,
	0x73, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x43, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x61,
	0x6c, 0x6c, 0x12, 0x8a, 0x01, 0x0a, 0x23, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x62, 0x6f, 0x75, 0x6e,
	0x74, 0x69, 0x65, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x62,
	0x6f, 0x75, 0x6e, 0x74, 0x79, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x69, 0x6c,
	0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x41, 0x64, 0x64, 0x43, 0x68, 0x69,
	0x6c, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x1f,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x41, 0x64, 0x64,
	0x43, 0x68, 0x69, 0x6c, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x12,
	0x90, 0x01, 0x0a, 0x25, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65,
	0x73, 0x5f, 0x61, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x62, 0x6f,
	0x75, 0x6e, 0x74, 0x79, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3c, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x69, 0x6c, 0x64,
	0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x41, 0x77, 0x61, 0x72, 0x64, 0x43, 0x68,
	0x69, 0x6c, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52,
	0x21, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x41, 0x77,
	0x61, 0x72, 0x64, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x43, 0x61,
	0x6c, 0x6c, 0x12, 0x90, 0x01, 0x0a, 0x25, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x62, 0x6f, 0x75, 0x6e,
	0x74, 0x69, 0x65, 0x73, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68,
	0x69, 0x6c, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x43, 0x6c, 0x61, 0x69,
	0x6d, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x43, 0x61, 0x6c, 0x6c,
	0x48, 0x00, 0x52, 0x21, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65,
	0x73, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74,
	0x79, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x90, 0x01, 0x0a, 0x25, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x62,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x43,
	0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x21, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x62, 0x6f, 0x75, 0x6e,
	0x74, 0x69, 0x65, 0x73, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x42, 0x6f,
	0x75, 0x6e, 0x74, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x89, 0x01, 0x0a, 0x22, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x43, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x61, 0x6c,
	0x6c, 0x48, 0x00, 0x52, 0x1f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x69,
	0x65, 0x73, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x43, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x43, 0x61, 0x6c, 0x6c, 0x12, 0x8c, 0x01, 0x0a, 0x23, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x62, 0x6f,
	0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x75, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x5f,
	0x63, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68,
	0x69, 0x6c, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x55, 0x6e, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x43, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x48,
	0x00, 0x52, 0x20, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73,
	0x55, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x43, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43,
	0x61, 0x6c, 0x6c, 0x12, 0x7f, 0x0a, 0x1e, 0x63, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x1c, 0x63, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x43, 0x61, 0x6c, 0x6c, 0x12, 0x96, 0x01, 0x0a, 0x27, 0x63, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x56, 0x6f,
	0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x23, 0x63, 0x6f, 0x6e, 0x76, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x4f, 0x74, 0x68, 0x65, 0x72, 0x56, 0x6f, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x86, 0x01,
	0x0a, 0x21, 0x63, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x76, 0x6f, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x56, 0x6f, 0x74, 0x65,
	0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x1e, 0x63, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x56, 0x6f,
	0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x85, 0x01, 0x0a, 0x20, 0x63, 0x6f, 0x6e, 0x76, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x6e, 0x64, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x55, 0x6e,
	0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x1e,
	0x63, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67,
	0x55, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x79,
	0x0a, 0x1c, 0x63, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x76, 0x6f, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x1a, 0x63,
	0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x55,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x73, 0x0a, 0x1a, 0x63, 0x6f, 0x6e,
	0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x6f,
	0x74, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x56, 0x6f, 0x74, 0x65, 0x43, 0x61,
	0x6c, 0x6c, 0x48, 0x00, 0x52, 0x18, 0x63, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x6f, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0xbc,
	0x01, 0x0a, 0x33, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x67, 0x6f,
	0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61,
	0x73, 0x65, 0x5f, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x61, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x30, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x68, 0x61, 0x73, 0x65, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0xd6, 0x01,
	0x0a, 0x3d, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x74,
	0x5f, 0x65, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18,
	0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x53, 0x65, 0x74, 0x45,
	0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x38, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x68, 0x61, 0x73, 0x65, 0x53, 0x65, 0x74, 0x45, 0x6d, 0x65, 0x72, 0x67,
	0x65, 0x6e, 0x63, 0x79, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0xd0, 0x01, 0x0a, 0x3b, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75,
	0x6d, 0x5f, 0x75, 0x6e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61,
	0x73, 0x65, 0x5f, 0x53, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x55, 0x6e, 0x74,
	0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48,
	0x00, 0x52, 0x36, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x68, 0x61, 0x73, 0x65, 0x53, 0x65, 0x74,
	0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x55, 0x6e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x97, 0x01, 0x0a, 0x26, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x5f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x24, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x68, 0x61, 0x73, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x43,
	0x61, 0x6c, 0x6c, 0x12, 0xb0, 0x01, 0x0a, 0x2f, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x68, 0x61,
	0x73, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x5f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x2c, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x68, 0x61, 0x73, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x8f, 0x01, 0x0a, 0x24, 0x66, 0x65, 0x6c, 0x6c, 0x6f,
	0x77, 0x73, 0x68, 0x69, 0x70, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x61, 0x64, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18,
	0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x41, 0x64, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43,
	0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x21, 0x66, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69,
	0x70, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x64, 0x64, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x95, 0x01, 0x0a, 0x26, 0x66, 0x65, 0x6c,
	0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x5f, 0x70, 0x6f, 0x6c, 0x6c, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75,
	0x70, 0x50, 0x6f, 0x6c, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x23, 0x66, 0x65, 0x6c,
	0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x6c, 0x43, 0x61, 0x6c, 0x6c,
	0x12, 0x98, 0x01, 0x0a, 0x27, 0x66, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x2b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65,
	0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x44, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43,
	0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x24, 0x66, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69,
	0x70, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x9b, 0x01, 0x0a, 0x28,
	0x66, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77,
	0x73, 0x68, 0x69, 0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x50,
	0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c,
	0x48, 0x00, 0x52, 0x25, 0x66, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x98, 0x01, 0x0a, 0x27, 0x66, 0x65,
	0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69,
	0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x24,
	0x66, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x43, 0x61, 0x6c, 0x6c, 0x12, 0x7f, 0x0a, 0x1e, 0x66, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68,
	0x69, 0x70, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x76, 0x6f, 0x74,
	0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68,
	0x69, 0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x56, 0x6f, 0x74,
	0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x1c, 0x66, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73,
	0x68, 0x69, 0x70, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x56, 0x6f, 0x74,
	0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x82, 0x01, 0x0a, 0x1f, 0x66, 0x65, 0x6c, 0x6c, 0x6f, 0x77,
	0x73, 0x68, 0x69, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x6c, 0x6c, 0x6f,
	0x77, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x1d, 0x66, 0x65, 0x6c,
	0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x7c, 0x0a, 0x1d, 0x66, 0x65,
	0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64,
	0x61, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x30, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x6c,
	0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61,
	0x5f, 0x4b, 0x69, 0x6c, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x1b, 0x66, 0x65, 0x6c,
	0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61,
	0x4b, 0x69, 0x6c, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x9e, 0x01, 0x0a, 0x29, 0x66, 0x65, 0x6c,
	0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61,
	0x5f, 0x6e, 0x75, 0x64, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x75,
	0x6d, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68,
	0x69, 0x70, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f, 0x4e, 0x75, 0x64, 0x67,
	0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x75, 0x6d, 0x43, 0x61, 0x6c, 0x6c, 0x48,
	0x00, 0x52, 0x26, 0x66, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x4e, 0x75, 0x64, 0x67, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x64, 0x75, 0x6d, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0xa2, 0x01, 0x0a, 0x2b, 0x66, 0x65,
	0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64,
	0x61, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x66, 0x65, 0x77, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x63, 0x69,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x42, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x6c, 0x6c, 0x6f,
	0x77, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f, 0x4f,
	0x6e, 0x65, 0x46, 0x65, 0x77, 0x65, 0x72, 0x44, 0x65, 0x63, 0x69, 0x64, 0x69, 0x6e, 0x67, 0x43,
	0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x27, 0x66, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69,
	0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x4f, 0x6e, 0x65, 0x46, 0x65, 0x77,
	0x65, 0x72, 0x44, 0x65, 0x63, 0x69, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0xae,
	0x01, 0x0a, 0x2f, 0x66, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x44, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x61, 0x6c, 0x6c,
	0x48, 0x00, 0x52, 0x2b, 0x66, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x44, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12,
	0xb1, 0x01, 0x0a, 0x30, 0x66, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x64,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43,
	0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x2c, 0x66, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69,
	0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43,
	0x61, 0x6c, 0x6c, 0x12, 0xb7, 0x01, 0x0a, 0x32, 0x66, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68,
	0x69, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x49, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x6c, 0x6c,
	0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f,
	0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x2e, 0x66,
	0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x64, 0x61, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x92, 0x01,
	0x0a, 0x25, 0x66, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73,
	0x68, 0x69, 0x70, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f, 0x53, 0x65, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x22,
	0x66, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x64, 0x61, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x43, 0x61,
	0x6c, 0x6c, 0x12, 0x82, 0x01, 0x0a, 0x1f, 0x66, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69,
	0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68,
	0x69, 0x70, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x1d, 0x66, 0x65, 0x6c, 0x6c, 0x6f, 0x77,
	0x73, 0x68, 0x69, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x64, 0x0a, 0x15, 0x67, 0x65, 0x61, 0x72, 0x76,
	0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c,
	0x18, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x61, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x43, 0x61,
	0x6c, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x13, 0x67, 0x65, 0x61, 0x72, 0x76, 0x6f,
	0x75, 0x63, 0x68, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x83, 0x01,
	0x0a, 0x20, 0x67, 0x65, 0x61, 0x72, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x61, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x5f,
	0x43, 0x61, 0x6c, 0x6c, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x43, 0x61,
	0x6c, 0x6c, 0x48, 0x00, 0x52, 0x1d, 0x67, 0x65, 0x61, 0x72, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65,
	0x72, 0x43, 0x61, 0x6c, 0x6c, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x43,
	0x61, 0x6c, 0x6c, 0x12, 0x6d, 0x0a, 0x18, 0x67, 0x65, 0x61, 0x72, 0x76, 0x6f, 0x75, 0x63, 0x68,
	0x65, 0x72, 0x5f, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18,
	0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x61, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x44, 0x65, 0x63,
	0x6c, 0x69, 0x6e, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x16, 0x67, 0x65, 0x61, 0x72,
	0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x44, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x61,
	0x6c, 0x6c, 0x12, 0x67, 0x0a, 0x16, 0x67, 0x65, 0x61, 0x72, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65,
	0x72, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x3b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x61, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43,
	0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x14, 0x67, 0x65, 0x61, 0x72, 0x76, 0x6f, 0x75, 0x63, 0x68,
	0x65, 0x72, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x6a, 0x0a, 0x17, 0x67,
	0x65, 0x61, 0x72, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x76, 0x6f, 0x6b,
	0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x61, 0x72, 0x56, 0x6f, 0x75, 0x63,
	0x68, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00,
	0x52, 0x15, 0x67, 0x65, 0x61, 0x72, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x76,
	0x6f, 0x6b, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x6a, 0x0a, 0x17, 0x67, 0x65, 0x61, 0x72, 0x76,
	0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x61, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x5f,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x15, 0x67, 0x65,
	0x61, 0x72, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x61, 0x6c, 0x6c, 0x12, 0x62, 0x0a, 0x15, 0x67, 0x65, 0x61, 0x72, 0x5f, 0x63, 0x6c, 0x61, 0x69,
	0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x3e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x61, 0x72, 0x5f, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x61, 0x6c,
	0x6c, 0x48, 0x00, 0x52, 0x12, 0x67, 0x65, 0x61, 0x72, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x6b, 0x0a, 0x18, 0x67, 0x65, 0x61, 0x72, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x61, 0x72, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x15, 0x67,
	0x65, 0x61, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x43, 0x61, 0x6c, 0x6c, 0x12, 0x4c, 0x0a, 0x0d, 0x67, 0x65, 0x61, 0x72, 0x5f, 0x72, 0x75, 0x6e,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x61, 0x72, 0x5f, 0x52, 0x75, 0x6e, 0x43,
	0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0b, 0x67, 0x65, 0x61, 0x72, 0x52, 0x75, 0x6e, 0x43, 0x61,
	0x6c, 0x6c, 0x12, 0x65, 0x0a, 0x16, 0x67, 0x65, 0x61, 0x72, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x41, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x61, 0x72, 0x5f, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x61,
	0x6c, 0x6c, 0x48, 0x00, 0x52, 0x13, 0x67, 0x65, 0x61, 0x72, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x5f, 0x0a, 0x14, 0x67, 0x65, 0x61,
	0x72, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x63, 0x61, 0x6c,
	0x6c, 0x18, 0x42, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x61, 0x72, 0x5f, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x11, 0x67, 0x65, 0x61, 0x72, 0x53, 0x65, 0x6e,
	0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x7b, 0x0a, 0x1e, 0x67, 0x65,
	0x61, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x5f, 0x69,
	0x6e, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x43, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x61, 0x72, 0x5f, 0x53, 0x65, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x68,
	0x65, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x1a, 0x67, 0x65, 0x61,
	0x72, 0x53, 0x65, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x68, 0x65, 0x72,
	0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x62, 0x0a, 0x15, 0x67, 0x65, 0x61, 0x72, 0x5f,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c,
	0x18, 0x44, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x61, 0x72, 0x5f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x64,
	0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x12, 0x67, 0x65, 0x61, 0x72, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x6b, 0x0a, 0x18, 0x67,
	0x65, 0x61, 0x72, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x45, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x61, 0x72, 0x5f, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x61, 0x6c, 0x6c, 0x48,
	0x00, 0x52, 0x15, 0x67, 0x65, 0x61, 0x72, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x6e, 0x0a, 0x19, 0x67, 0x72, 0x61, 0x6e,
	0x64, 0x70, 0x61, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x5f, 0x4e,
	0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00,
	0x52, 0x16, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x4e, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61,
	0x6c, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x83, 0x01, 0x0a, 0x20, 0x67, 0x72, 0x61,
	0x6e, 0x64, 0x70, 0x61, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x71, 0x75, 0x69,
	0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x47, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x72, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x5f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x71, 0x75,
	0x69, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52,
	0x1d, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x71,
	0x75, 0x69, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x9c,
	0x01, 0x0a, 0x29, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75,
	0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x48, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x40, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72,
	0x61, 0x6e, 0x64, 0x70, 0x61, 0x5f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x71, 0x75, 0x69,
	0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x25, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x71, 0x75, 0x69, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x74, 0x0a,
	0x1b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x49, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x41, 0x64, 0x64, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x18, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x41, 0x64, 0x64, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x72, 0x43,
	0x61, 0x6c, 0x6c, 0x12, 0x62, 0x0a, 0x15, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x61, 0x64, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x4a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x41, 0x64, 0x64, 0x53, 0x75, 0x62, 0x43, 0x61, 0x6c,
	0x6c, 0x48, 0x00, 0x52, 0x12, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x41, 0x64, 0x64,
	0x53, 0x75, 0x62, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x77, 0x0a, 0x1c, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x19, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x6c,
	0x12, 0x74, 0x0a, 0x1b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6b, 0x69, 0x6c,
	0x6c, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18,
	0x4c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x4b, 0x69, 0x6c, 0x6c, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x18, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x80, 0x01, 0x0a, 0x1f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x5f, 0x6a, 0x75, 0x64, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x4a, 0x75, 0x64, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x1c, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x4a, 0x75, 0x64, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x6b, 0x0a, 0x18, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x73, 0x75, 0x62,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x75, 0x62, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52,
	0x15, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53,
	0x75, 0x62, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x6b, 0x0a, 0x18, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x15, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x43,
	0x61, 0x6c, 0x6c, 0x12, 0x80, 0x01, 0x0a, 0x1f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x1c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x75, 0x0a, 0x1c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x51, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x53, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x43, 0x61, 0x6c,
	0x6c, 0x48, 0x00, 0x52, 0x18, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x65, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x62, 0x0a,
	0x15, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x66, 0x65,
	0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x52, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x53, 0x65, 0x74, 0x46, 0x65, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x12, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x65, 0x74, 0x46, 0x65, 0x65, 0x43, 0x61, 0x6c,
	0x6c, 0x12, 0x6b, 0x0a, 0x18, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65,
	0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x53, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x53, 0x65, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x15, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x53, 0x65, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x71,
	0x0a, 0x1a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x54, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x53, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x17, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x53, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x61, 0x6c,
	0x6c, 0x12, 0x65, 0x0a, 0x16, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65,
	0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x55, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x53, 0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x43, 0x61, 0x6c,
	0x6c, 0x48, 0x00, 0x52, 0x13, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x65, 0x74,
	0x53, 0x75, 0x62, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x6a, 0x0a, 0x17, 0x69, 0x6d, 0x6f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x18, 0x56, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x48, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x15, 0x69,
	0x6d, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74,
	0x43, 0x61, 0x6c, 0x6c, 0x12, 0x7b, 0x0a, 0x1e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67,
	0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x61, 0x73, 0x5f, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x57, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67,
	0x5f, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x41, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43,
	0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x1a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x41, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x61, 0x6c,
	0x6c, 0x12, 0x65, 0x0a, 0x16, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x5f, 0x61, 0x73,
	0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x58, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x73, 0x69, 0x67, 0x5f, 0x41, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x61, 0x6c,
	0x6c, 0x48, 0x00, 0x52, 0x13, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x41, 0x73, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x85, 0x01, 0x0a, 0x22, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x73, 0x69, 0x67, 0x5f, 0x61, 0x73, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x31, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18,
	0x59, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x5f, 0x41, 0x73, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x31, 0x43, 0x61, 0x6c, 0x6c, 0x48,
	0x00, 0x52, 0x1d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x41, 0x73, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x31, 0x43, 0x61, 0x6c, 0x6c,
	0x12, 0x78, 0x0a, 0x1d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x5f, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x5f, 0x61, 0x73, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x63, 0x61, 0x6c,
	0x6c, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x5f, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x41, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52,
	0x19, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41,
	0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x99, 0x01, 0x0a, 0x28, 0x6e,
	0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x61,
	0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x50,
	0x6f, 0x6f, 0x6c, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00,
	0x52, 0x24, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c,
	0x73, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x44, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x80, 0x01, 0x0a, 0x1f, 0x6e, 0x6f, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x62, 0x6f, 0x6e, 0x64, 0x5f,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x42, 0x6f, 0x6e, 0x64,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x1c, 0x6e, 0x6f, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x42, 0x6f, 0x6e, 0x64,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x90, 0x01, 0x0a, 0x25, 0x6e, 0x6f,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x62, 0x6f,
	0x6e, 0x64, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x42, 0x6f, 0x6e, 0x64, 0x45, 0x78, 0x74, 0x72, 0x61, 0x4f, 0x74,
	0x68, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x21, 0x6e, 0x6f, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x42, 0x6f, 0x6e, 0x64, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x73, 0x0a, 0x1a,
	0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x5f,
	0x63, 0x68, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x5e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x43, 0x68, 0x69, 0x6c,
	0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x18, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x43, 0x68, 0x69, 0x6c, 0x6c, 0x43, 0x61, 0x6c,
	0x6c, 0x12, 0x92, 0x01, 0x0a, 0x25, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x5f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3d, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x43, 0x6c, 0x61,
	0x69, 0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c,
	0x48, 0x00, 0x52, 0x22, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x6f,
	0x6f, 0x6c, 0x73, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x96, 0x01, 0x0a, 0x27, 0x6e, 0x6f, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d,
	0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x18, 0x60, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f,
	0x6f, 0x6c, 0x73, 0x5f, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x4f,
	0x74, 0x68, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x23, 0x6e, 0x6f, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x12,
	0x76, 0x0a, 0x1b, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x6f, 0x6f,
	0x6c, 0x73, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x61,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x19, 0x6e, 0x6f,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x97, 0x01, 0x0a, 0x28, 0x6e, 0x6f, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x18, 0x62, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68,
	0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x23, 0x6e, 0x6f,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x43, 0x61, 0x6c,
	0x6c, 0x12, 0x70, 0x0a, 0x19, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70,
	0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x63,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f,
	0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x17, 0x6e, 0x6f, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x4a, 0x6f, 0x69, 0x6e, 0x43,
	0x61, 0x6c, 0x6c, 0x12, 0x7c, 0x0a, 0x1d, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x43, 0x61,
	0x6c, 0x6c, 0x48, 0x00, 0x52, 0x1b, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c,
	0x6c, 0x12, 0xa2, 0x01, 0x0a, 0x2b, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x5f, 0x75, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c,
	0x6c, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f,
	0x6c, 0x73, 0x5f, 0x50, 0x6f, 0x6f, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x55,
	0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x27, 0x6e,
	0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x50, 0x6f,
	0x6f, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x55, 0x6e, 0x62, 0x6f, 0x6e, 0x64,
	0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x9c, 0x01, 0x0a, 0x29, 0x6e, 0x6f, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x53, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x25,
	0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x53,
	0x65, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x8c, 0x01, 0x0a, 0x23, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x67, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x53,
	0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c,
	0x48, 0x00, 0x52, 0x20, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x6f,
	0x6f, 0x6c, 0x73, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x43, 0x61, 0x6c, 0x6c, 0x12, 0xac, 0x01, 0x0a, 0x2f, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x2a, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x43,
	0x61, 0x6c, 0x6c, 0x12, 0x96, 0x01, 0x0a, 0x27, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18,
	0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73,
	0x5f, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61,
	0x78, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x23, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x78, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x83, 0x01, 0x0a,
	0x20, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x73,
	0x5f, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x5f, 0x63, 0x61, 0x6c,
	0x6c, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f,
	0x6c, 0x73, 0x5f, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x43, 0x61, 0x6c,
	0x6c, 0x48, 0x00, 0x52, 0x1d, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70,
	0x6f, 0x6f, 0x6c, 0x73, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x43, 0x61,
	0x6c, 0x6c, 0x12, 0x86, 0x01, 0x0a, 0x21, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x1e, 0x6e, 0x6f, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x53, 0x65, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x7d, 0x0a, 0x1e, 0x6e,
	0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x73,
	0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x6c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x53,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x1b, 0x6e,
	0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x53, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x76, 0x0a, 0x1b, 0x6e, 0x6f,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x75, 0x6e,
	0x62, 0x6f, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x55, 0x6e, 0x62, 0x6f, 0x6e,
	0x64, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x19, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x55, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x43, 0x61,
	0x6c, 0x6c, 0x12, 0x86, 0x01, 0x0a, 0x21, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x6f,
	0x6c, 0x65, 0x73, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x6f, 0x6c, 0x65, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x1e, 0x6e, 0x6f, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x95, 0x01, 0x0a, 0x26,
	0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x75, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x65,
	0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x55, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x23,
	0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x55, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x65, 0x64, 0x43,
	0x61, 0x6c, 0x6c, 0x12, 0x77, 0x0a, 0x1c, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x65, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x18, 0x70, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x45, 0x6e,
	0x73, 0x75, 0x72, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x48,
	0x00, 0x52, 0x19, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x73, 0x75, 0x72,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x74, 0x0a, 0x1b,
	0x70, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x72,
	0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x71, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x65, 0x50, 0x72, 0x65, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x18, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x50, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61,
	0x6c, 0x6c, 0x12, 0x7d, 0x0a, 0x1e, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x18, 0x72, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61,
	0x6c, 0x6c, 0x48, 0x00, 0x52, 0x1b, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x6c,
	0x6c, 0x12, 0x7a, 0x0a, 0x1d, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x6e,
	0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x18, 0x73, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x55, 0x6e, 0x6e,
	0x6f, 0x74, 0x65, 0x50, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48,
	0x00, 0x52, 0x1a, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x6e, 0x6f, 0x74,
	0x65, 0x50, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x83, 0x01,
	0x0a, 0x20, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x18, 0x74, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x55, 0x6e, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61,
	0x6c, 0x6c, 0x48, 0x00, 0x52, 0x1d, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x6e,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43,
	0x61, 0x6c, 0x6c, 0x12, 0x5f, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x61, 0x64, 0x64,
	0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x75, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x5f, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x48,
	0x00, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x43, 0x61, 0x6c, 0x6c, 0x12, 0x5e, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x61, 0x6e,
	0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x76, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x5f, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48,
	0x00, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65,
	0x43, 0x61, 0x6c, 0x6c, 0x12, 0x65, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x77,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x75, 0x72, 0x65,
	0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x75, 0x72, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x5f, 0x0a, 0x14, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x75, 0x72, 0x65, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x4b, 0x69, 0x6c, 0x6c, 0x50,
	0x75, 0x72, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x4b, 0x69, 0x6c, 0x6c, 0x50, 0x75, 0x72, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x71, 0x0a, 0x1a,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x61, 0x6e, 0x6e, 0x6f,
	0x75, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x79, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x5f, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x64,
	0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x17, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x12,
	0x55, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x7d, 0x0a, 0x1e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f,
	0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x7b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f,
	0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x1b, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x52,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x7d, 0x0a, 0x1e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x7c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x1b, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x61, 0x6c, 0x6c, 0x12, 0x68, 0x0a, 0x17, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18,
	0x7d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x64,
	0x0a, 0x15, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x7e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x64, 0x61, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52,
	0x13, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x43, 0x61, 0x6c, 0x6c, 0x12, 0x5e, 0x0a, 0x13, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64,
	0x61, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x7f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f, 0x4b, 0x69, 0x6c, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x48,
	0x00, 0x52, 0x11, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x4b, 0x69, 0x6c, 0x6c,
	0x43, 0x61, 0x6c, 0x6c, 0x12, 0x81, 0x01, 0x0a, 0x1f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x64, 0x61, 0x5f, 0x6e, 0x75, 0x64, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x64, 0x75, 0x6d, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x80, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x64, 0x61, 0x5f, 0x4e, 0x75, 0x64, 0x67, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x64, 0x75, 0x6d, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x1c, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x64, 0x61, 0x4e, 0x75, 0x64, 0x67, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x64, 0x75, 0x6d, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x85, 0x01, 0x0a, 0x21, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x66, 0x65, 0x77, 0x65, 0x72,
	0x5f, 0x64, 0x65, 0x63, 0x69, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x81,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f, 0x4f, 0x6e, 0x65, 0x46, 0x65,
	0x77, 0x65, 0x72, 0x44, 0x65, 0x63, 0x69, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x6c, 0x6c, 0x48,
	0x00, 0x52, 0x1d, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x4f, 0x6e, 0x65, 0x46,
	0x65, 0x77, 0x65, 0x72, 0x44, 0x65, 0x63, 0x69, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x6c, 0x6c,
	0x12, 0x91, 0x01, 0x0a, 0x25, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3c, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x44, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x48,
	0x00, 0x52, 0x21, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x43, 0x61, 0x6c, 0x6c, 0x12, 0x94, 0x01, 0x0a, 0x26, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x64, 0x61, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18,
	0x83, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f, 0x52, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x22, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x64, 0x61, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x9a, 0x01, 0x0a, 0x28,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x84, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3f, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x64, 0x61, 0x5f, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x61, 0x6c, 0x6c,
	0x48, 0x00, 0x52, 0x24, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x52, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x75, 0x0a, 0x1b, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x85, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x64, 0x61, 0x5f, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x43,
	0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x18, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61,
	0x53, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x43, 0x61, 0x6c, 0x6c, 0x12,
	0x65, 0x0a, 0x15, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f, 0x73, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x86, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x64, 0x61, 0x5f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x48,
	0x00, 0x52, 0x13, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x65, 0x0a, 0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18,
	0x87, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x75, 0x0a,
	0x1b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x88, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x18, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x64,
	0x43, 0x61, 0x6c, 0x6c, 0x12, 0x7b, 0x0a, 0x1d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x89, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x5f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x43,
	0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x1a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x43, 0x61, 0x6c,
	0x6c, 0x12, 0x6b, 0x0a, 0x17, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x8a, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x8b,
	0x01, 0x0a, 0x23, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x8b, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x5f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x64,
	0x41, 0x66, 0x74, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x1f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x64, 0x41, 0x66, 0x74, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x7b, 0x0a, 0x1d,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x8c, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x1a, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x63, 0x0a, 0x15, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x18, 0x8d, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x53, 0x65, 0x74,
	0x4b, 0x65, 0x79, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x12, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x84,
	0x01, 0x0a, 0x20, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x5f, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x18, 0x8e, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x5f, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79,
	0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x1d, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x53, 0x75, 0x70, 0x70, 0x6c,
	0x79, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x84, 0x01, 0x0a, 0x20, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x72,
	0x65, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x8f, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x46, 0x6f, 0x72, 0x63,
	0x65, 0x52, 0x65, 0x66, 0x69, 0x6c, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x1d, 0x73,
	0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x46, 0x6f, 0x72,
	0x63, 0x65, 0x52, 0x65, 0x66, 0x69, 0x6c, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x74, 0x0a, 0x1a,
	0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x72,
	0x65, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x90, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x52, 0x65, 0x66, 0x69,
	0x6c, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x18, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x66, 0x69, 0x6c, 0x6c, 0x43, 0x61,
	0x6c, 0x6c, 0x12, 0x7a, 0x0a, 0x1c, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x18, 0x91, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x5f, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x43, 0x61, 0x6c, 0x6c,
	0x48, 0x00, 0x52, 0x1a, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x59,
	0x0a, 0x11, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x6f, 0x6e, 0x64, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x18, 0x92, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x42, 0x6f,
	0x6e, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x42, 0x6f, 0x6e, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x69, 0x0a, 0x17, 0x73, 0x74, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x6f, 0x6e, 0x64, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x18, 0x93, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x42,
	0x6f, 0x6e, 0x64, 0x45, 0x78, 0x74, 0x72, 0x61, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x14,
	0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x6e, 0x64, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x43, 0x61, 0x6c, 0x6c, 0x12, 0x88, 0x01, 0x0a, 0x22, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x64, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64,
	0x5f, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x94, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x39, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x44, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x65, 0x64, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52,
	0x1e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x44, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x43, 0x61, 0x6c, 0x6c, 0x12,
	0x6c, 0x0a, 0x18, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x6c,
	0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x95, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x43, 0x68, 0x69, 0x6c, 0x6c, 0x4f, 0x74, 0x68, 0x65, 0x72,
	0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x15, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x43,
	0x68, 0x69, 0x6c, 0x6c, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x95, 0x01,
	0x0a, 0x27, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3d, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x5f, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4d, 0x69,
	0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x48,
	0x00, 0x52, 0x22, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x4d, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x72, 0x0a, 0x1a, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x46, 0x6f,
	0x72, 0x63, 0x65, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00,
	0x52, 0x17, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x55, 0x6e,
	0x73, 0x74, 0x61, 0x6b, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x91, 0x01, 0x0a, 0x25, 0x73, 0x74,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x49, 0x6e,
	0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x21, 0x73, 0x74, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x59, 0x0a,
	0x11, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x69, 0x63, 0x6b, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x18, 0x99, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x4b, 0x69, 0x63,
	0x6b, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x4b, 0x69, 0x63, 0x6b, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x65, 0x0a, 0x15, 0x73, 0x74, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x6c,
	0x6c, 0x18, 0x9a, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x4e, 0x6f, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x13, 0x73, 0x74, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12,
	0x75, 0x0a, 0x1b, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x9b,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x53,
	0x74, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x18, 0x73, 0x74,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x72, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x69, 0x0a, 0x17, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x72, 0x65, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x73, 0x68, 0x5f, 0x63, 0x61, 0x6c,
	0x6c, 0x18, 0x9c, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x52, 0x65, 0x61, 0x70,
	0x53, 0x74, 0x61, 0x73, 0x68, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x14, 0x73, 0x74, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x70, 0x53, 0x74, 0x61, 0x73, 0x68, 0x43, 0x61, 0x6c,
	0x6c, 0x12, 0x5f, 0x0a, 0x13, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x62,
	0x6f, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x9d, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x5f, 0x52, 0x65, 0x62, 0x6f, 0x6e, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52,
	0x11, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x62, 0x6f, 0x6e, 0x64, 0x43, 0x61,
	0x6c, 0x6c, 0x12, 0x88, 0x01, 0x0a, 0x22, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x9e, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x39, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x5f, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x1e, 0x73,
	0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x7e, 0x0a,
	0x1e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x76,
	0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18,
	0x9f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x76,
	0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00,
	0x52, 0x1b, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x75,
	0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x7f, 0x0a,
	0x1f, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x69, 0x6e,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x6c,
	0x18, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x53, 0x65, 0x74, 0x4d, 0x69,
	0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x48,
	0x00, 0x52, 0x1b, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x4d, 0x69, 0x6e,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x66,
	0x0a, 0x16, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x61,
	0x79, 0x65, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0xa1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x5f, 0x53, 0x65, 0x74, 0x50, 0x61, 0x79, 0x65, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48,
	0x00, 0x52, 0x13, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x50, 0x61, 0x79,
	0x65, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x82, 0x01, 0x0a, 0x20, 0x73, 0x74, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0xa2, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x53, 0x65, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x1c, 0x73,
	0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x82, 0x01, 0x0a, 0x20,
	0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c,
	0x18, 0xa3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x53, 0x65, 0x74, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c,
	0x48, 0x00, 0x52, 0x1c, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c,
	0x12, 0x5f, 0x0a, 0x13, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x6e, 0x62, 0x6f,
	0x6e, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0xa4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x55, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x11,
	0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x43, 0x61, 0x6c,
	0x6c, 0x12, 0x65, 0x0a, 0x15, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0xa5, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c,
	0x6c, 0x48, 0x00, 0x52, 0x13, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x7e, 0x0a, 0x1e, 0x73, 0x74, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x75, 0x6e, 0x62,
	0x6f, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0xa6, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x55, 0x6e, 0x62,
	0x6f, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x1b, 0x73, 0x74, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x55, 0x6e, 0x62, 0x6f,
	0x6e, 0x64, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x69, 0x0a, 0x17, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x18, 0xa7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x4b, 0x69, 0x6c,
	0x6c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x14, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x4b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x43,
	0x61, 0x6c, 0x6c, 0x12, 0x6c, 0x0a, 0x18, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6b, 0x69,
	0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18,
	0xa8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x4b, 0x69, 0x6c, 0x6c, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x15, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x4b, 0x69, 0x6c, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x61, 0x6c,
	0x6c, 0x12, 0x5c, 0x0a, 0x12, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0xa9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x5f, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x10, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x43, 0x61, 0x6c, 0x6c, 0x12,
	0x79, 0x0a, 0x1d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c,
	0x18, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x57, 0x69, 0x74, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52,
	0x19, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x57, 0x69, 0x74,
	0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x60, 0x0a, 0x14, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x18, 0xab, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x53, 0x65, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x11, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x89, 0x01, 0x0a,
	0x23, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x18, 0xac, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x53, 0x65,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x1e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x53, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x70, 0x0a, 0x1a, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x70, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0xad, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f,
	0x53, 0x65, 0x74, 0x48, 0x65, 0x61, 0x70, 0x50, 0x61, 0x67, 0x65, 0x73, 0x43, 0x61, 0x6c, 0x6c,
	0x48, 0x00, 0x52, 0x16, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x74, 0x48, 0x65, 0x61,
	0x70, 0x50, 0x61, 0x67, 0x65, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x69, 0x0a, 0x17, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0xae, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x53,
	0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52,
	0x14, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x5c, 0x0a, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0xaf, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x53, 0x65, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x48,
	0x00, 0x52, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x53, 0x65, 0x74, 0x43,
	0x61, 0x6c, 0x6c, 0x12, 0x7e, 0x0a, 0x1e, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x5f,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0xb0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79,
	0x5f, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x1b, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x43,
	0x61, 0x6c, 0x6c, 0x12, 0x72, 0x0a, 0x1a, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x5f,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x61, 0x6c,
	0x6c, 0x18, 0xb1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x5f, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x17,
	0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x62, 0x0a, 0x14, 0x74, 0x72, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18,
	0xb2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x5f, 0x50, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x12, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x79, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x75, 0x0a, 0x1b, 0x74,
	0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x5f,
	0x73, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0xb3, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x79, 0x5f, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x53, 0x70, 0x65,
	0x6e, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x18, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x43, 0x61,
	0x6c, 0x6c, 0x12, 0x7b, 0x0a, 0x1d, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x5f, 0x72,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x18, 0xb4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x5f, 0x52,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x43, 0x61, 0x6c,
	0x6c, 0x48, 0x00, 0x52, 0x1a, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x52, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x12,
	0x7b, 0x0a, 0x1d, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c,
	0x18, 0xb5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x5f, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00,
	0x52, 0x1a, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x5f, 0x0a, 0x13,
	0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x18, 0xb6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x5f, 0x53,
	0x70, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x11, 0x74, 0x72, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x79, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x6f, 0x0a,
	0x19, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x5f,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0xb7, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x79, 0x5f, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x16, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79,
	0x53, 0x70, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x6c,
	0x0a, 0x18, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x5f, 0x76, 0x6f, 0x69, 0x64, 0x5f,
	0x73, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0xb8, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x79, 0x5f, 0x56, 0x6f, 0x69, 0x64, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x43,
	0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x15, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x56,
	0x6f, 0x69, 0x64, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x72, 0x0a, 0x1a,
	0x75, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x73, 0x5f, 0x64, 0x65, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0xb9, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x74, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x41, 0x73, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x17, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x41, 0x73, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x61, 0x6c, 0x6c,
	0x12, 0x66, 0x0a, 0x16, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0xba, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x74, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6c, 0x6c, 0x43, 0x61, 0x6c,
	0x6c, 0x48, 0x00, 0x52, 0x13, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x41, 0x6c, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x5c, 0x0a, 0x12, 0x75, 0x74, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0xbb,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x61,
	0x6c, 0x6c, 0x48, 0x00, 0x52, 0x10, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x6c, 0x0a, 0x18, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x73, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x18, 0xbc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x44, 0x69, 0x73,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x15, 0x75,
	0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x73,
	0x43, 0x61, 0x6c, 0x6c, 0x12, 0x6c, 0x0a, 0x18, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x61, 0x6c, 0x6c,
	0x18, 0xbd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x46, 0x6f, 0x72, 0x63, 0x65,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x15, 0x75, 0x74, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x61,
	0x6c, 0x6c, 0x12, 0x6c, 0x0a, 0x18, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x77, 0x69,
	0x74, 0x68, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0xbe,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x57, 0x69, 0x74, 0x68, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x15, 0x75, 0x74, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x57, 0x69, 0x74, 0x68, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x43, 0x61, 0x6c, 0x6c,
	0x12, 0x88, 0x01, 0x0a, 0x22, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x5f, 0x76, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0xbf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x56, 0x65, 0x73, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x1e, 0x76, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x56, 0x65, 0x73, 0x74, 0x65, 0x64, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x78, 0x0a, 0x1c, 0x76,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0xc0, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x19, 0x76, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x73, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x69, 0x0a, 0x17, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x76, 0x65, 0x73, 0x74, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c,
	0x18, 0xc1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x56, 0x65, 0x73, 0x74, 0x4f,
	0x74, 0x68, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x14, 0x76, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x56, 0x65, 0x73, 0x74, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c,
	0x12, 0x78, 0x0a, 0x1c, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c,
	0x18, 0xc2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x56, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52,
	0x19, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x65, 0x73, 0x74, 0x65, 0x64, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x9a, 0x01, 0x0a, 0x28, 0x77,
	0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0xc3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x57, 0x68, 0x69, 0x74,
	0x65, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x48,
	0x00, 0x52, 0x24, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x43,
	0x61, 0x6c, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0xc0, 0x01, 0x0a, 0x36, 0x77, 0x68, 0x69, 0x74,
	0x65, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x77,
	0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x18, 0xc4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x44,
	0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74,
	0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x50, 0x72, 0x65, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x30, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c,
	0x69, 0x73, 0x74, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x57, 0x68, 0x69, 0x74, 0x65,
	0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x50, 0x72,
	0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x94, 0x01, 0x0a, 0x26, 0x77,
	0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f,
	0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0xc5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73,
	0x74, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x22, 0x77,
	0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x57, 0x68,
	0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x61, 0x6c,
	0x6c, 0x12, 0x7b, 0x0a, 0x1d, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x77,
	0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x18, 0xc6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x57,
	0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x61, 0x6c, 0x6c,
	0x48, 0x00, 0x52, 0x1a, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x57, 0x68, 0x69,
	0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x06,
	0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x42, 0x55, 0x5a, 0x53, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x66, 0x61,
	0x73, 0x74, 0x2f, 0x66, 0x69, 0x72, 0x65, 0x68, 0x6f, 0x73, 0x65, 0x2d, 0x67, 0x65, 0x61, 0x72,
	0x2f, 0x70, 0x62, 0x2f, 0x73, 0x66, 0x2f, 0x67, 0x65, 0x61, 0x72, 0x2f, 0x65, 0x78, 0x74, 0x72,
	0x69, 0x6e, 0x73, 0x69, 0x63, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x70, 0x62,
	0x67, 0x65, 0x61, 0x72, 0x65, 0x78, 0x74, 0x72, 0x69, 0x6e, 0x73, 0x69, 0x63, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sf_gear_extrinsic_type_v1_extrinsic_proto_rawDescOnce sync.Once
	file_sf_gear_extrinsic_type_v1_extrinsic_proto_rawDescData = file_sf_gear_extrinsic_type_v1_extrinsic_proto_rawDesc
)

func file_sf_gear_extrinsic_type_v1_extrinsic_proto_rawDescGZIP() []byte {
	file_sf_gear_extrinsic_type_v1_extrinsic_proto_rawDescOnce.Do(func() {
		file_sf_gear_extrinsic_type_v1_extrinsic_proto_rawDescData = protoimpl.X.CompressGZIP(file_sf_gear_extrinsic_type_v1_extrinsic_proto_rawDescData)
	})
	return file_sf_gear_extrinsic_type_v1_extrinsic_proto_rawDescData
}

var file_sf_gear_extrinsic_type_v1_extrinsic_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_sf_gear_extrinsic_type_v1_extrinsic_proto_goTypes = []interface{}{
	(*RuntimeCall)(nil),                                                  // 0: sf.gear.extrinsic.type.v1.RuntimeCall
	(*v1.Babe_PlanConfigChangeCall)(nil),                                 // 1: sf.gear.metadata.type.v1.Babe_PlanConfigChangeCall
	(*v1.Babe_ReportEquivocationCall)(nil),                               // 2: sf.gear.metadata.type.v1.Babe_ReportEquivocationCall
	(*v1.Babe_ReportEquivocationUnsignedCall)(nil),                       // 3: sf.gear.metadata.type.v1.Babe_ReportEquivocationUnsignedCall
	(*v1.BagsList_PutInFrontOfCall)(nil),                                 // 4: sf.gear.metadata.type.v1.BagsList_PutInFrontOfCall
	(*v1.BagsList_PutInFrontOfOtherCall)(nil),                            // 5: sf.gear.metadata.type.v1.BagsList_PutInFrontOfOtherCall
	(*v1.BagsList_RebagCall)(nil),                                        // 6: sf.gear.metadata.type.v1.BagsList_RebagCall
	(*v1.Balances_ForceSetBalanceCall)(nil),                              // 7: sf.gear.metadata.type.v1.Balances_ForceSetBalanceCall
	(*v1.Balances_ForceTransferCall)(nil),                                // 8: sf.gear.metadata.type.v1.Balances_ForceTransferCall
	(*v1.Balances_ForceUnreserveCall)(nil),                               // 9: sf.gear.metadata.type.v1.Balances_ForceUnreserveCall
	(*v1.Balances_TransferAllCall)(nil),                                  // 10: sf.gear.metadata.type.v1.Balances_TransferAllCall
	(*v1.Balances_TransferAllowDeathCall)(nil),                           // 11: sf.gear.metadata.type.v1.Balances_TransferAllowDeathCall
	(*v1.Balances_TransferKeepAliveCall)(nil),                            // 12: sf.gear.metadata.type.v1.Balances_TransferKeepAliveCall
	(*v1.Balances_UpgradeAccountsCall)(nil),                              // 13: sf.gear.metadata.type.v1.Balances_UpgradeAccountsCall
	(*v1.Bounties_AcceptCuratorCall)(nil),                                // 14: sf.gear.metadata.type.v1.Bounties_AcceptCuratorCall
	(*v1.Bounties_ApproveBountyCall)(nil),                                // 15: sf.gear.metadata.type.v1.Bounties_ApproveBountyCall
	(*v1.Bounties_AwardBountyCall)(nil),                                  // 16: sf.gear.metadata.type.v1.Bounties_AwardBountyCall
	(*v1.Bounties_ClaimBountyCall)(nil),                                  // 17: sf.gear.metadata.type.v1.Bounties_ClaimBountyCall
	(*v1.Bounties_CloseBountyCall)(nil),                                  // 18: sf.gear.metadata.type.v1.Bounties_CloseBountyCall
	(*v1.Bounties_ExtendBountyExpiryCall)(nil),                           // 19: sf.gear.metadata.type.v1.Bounties_ExtendBountyExpiryCall
	(*v1.Bounties_ProposeBountyCall)(nil),                                // 20: sf.gear.metadata.type.v1.Bounties_ProposeBountyCall
	(*v1.Bounties_ProposeCuratorCall)(nil),                               // 21: sf.gear.metadata.type.v1.Bounties_ProposeCuratorCall
	(*v1.Bounties_UnassignCuratorCall)(nil),                              // 22: sf.gear.metadata.type.v1.Bounties_UnassignCuratorCall
	(*v1.ChildBounties_AcceptCuratorCall)(nil),                           // 23: sf.gear.metadata.type.v1.ChildBounties_AcceptCuratorCall
	(*v1.ChildBounties_AddChildBountyCall)(nil),                          // 24: sf.gear.metadata.type.v1.ChildBounties_AddChildBountyCall
	(*v1.ChildBounties_AwardChildBountyCall)(nil),                        // 25: sf.gear.metadata.type.v1.ChildBounties_AwardChildBountyCall
	(*v1.ChildBounties_ClaimChildBountyCall)(nil),                        // 26: sf.gear.metadata.type.v1.ChildBounties_ClaimChildBountyCall
	(*v1.ChildBounties_CloseChildBountyCall)(nil),                        // 27: sf.gear.metadata.type.v1.ChildBounties_CloseChildBountyCall
	(*v1.ChildBounties_ProposeCuratorCall)(nil),                          // 28: sf.gear.metadata.type.v1.ChildBounties_ProposeCuratorCall
	(*v1.ChildBounties_UnassignCuratorCall)(nil),                         // 29: sf.gear.metadata.type.v1.ChildBounties_UnassignCuratorCall
	(*v1.ConvictionVoting_DelegateCall)(nil),                             // 30: sf.gear.metadata.type.v1.ConvictionVoting_DelegateCall
	(*v1.ConvictionVoting_RemoveOtherVoteCall)(nil),                      // 31: sf.gear.metadata.type.v1.ConvictionVoting_RemoveOtherVoteCall
	(*v1.ConvictionVoting_RemoveVoteCall)(nil),                           // 32: sf.gear.metadata.type.v1.ConvictionVoting_RemoveVoteCall
	(*v1.ConvictionVoting_UndelegateCall)(nil),                           // 33: sf.gear.metadata.type.v1.ConvictionVoting_UndelegateCall
	(*v1.ConvictionVoting_UnlockCall)(nil),                               // 34: sf.gear.metadata.type.v1.ConvictionVoting_UnlockCall
	(*v1.ConvictionVoting_VoteCall)(nil),                                 // 35: sf.gear.metadata.type.v1.ConvictionVoting_VoteCall
	(*v1.ElectionProviderMultiPhase_GovernanceFallbackCall)(nil),         // 36: sf.gear.metadata.type.v1.ElectionProviderMultiPhase_GovernanceFallbackCall
	(*v1.ElectionProviderMultiPhase_SetEmergencyElectionResultCall)(nil), // 37: sf.gear.metadata.type.v1.ElectionProviderMultiPhase_SetEmergencyElectionResultCall
	(*v1.ElectionProviderMultiPhase_SetMinimumUntrustedScoreCall)(nil),   // 38: sf.gear.metadata.type.v1.ElectionProviderMultiPhase_SetMinimumUntrustedScoreCall
	(*v1.ElectionProviderMultiPhase_SubmitCall)(nil),                     // 39: sf.gear.metadata.type.v1.ElectionProviderMultiPhase_SubmitCall
	(*v1.ElectionProviderMultiPhase_SubmitUnsignedCall)(nil),             // 40: sf.gear.metadata.type.v1.ElectionProviderMultiPhase_SubmitUnsignedCall
	(*v1.FellowshipCollective_AddMemberCall)(nil),                        // 41: sf.gear.metadata.type.v1.FellowshipCollective_AddMemberCall
	(*v1.FellowshipCollective_CleanupPollCall)(nil),                      // 42: sf.gear.metadata.type.v1.FellowshipCollective_CleanupPollCall
	(*v1.FellowshipCollective_DemoteMemberCall)(nil),                     // 43: sf.gear.metadata.type.v1.FellowshipCollective_DemoteMemberCall
	(*v1.FellowshipCollective_PromoteMemberCall)(nil),                    // 44: sf.gear.metadata.type.v1.FellowshipCollective_PromoteMemberCall
	(*v1.FellowshipCollective_RemoveMemberCall)(nil),                     // 45: sf.gear.metadata.type.v1.FellowshipCollective_RemoveMemberCall
	(*v1.FellowshipCollective_VoteCall)(nil),                             // 46: sf.gear.metadata.type.v1.FellowshipCollective_VoteCall
	(*v1.FellowshipReferenda_CancelCall)(nil),                            // 47: sf.gear.metadata.type.v1.FellowshipReferenda_CancelCall
	(*v1.FellowshipReferenda_KillCall)(nil),                              // 48: sf.gear.metadata.type.v1.FellowshipReferenda_KillCall
	(*v1.FellowshipReferenda_NudgeReferendumCall)(nil),                   // 49: sf.gear.metadata.type.v1.FellowshipReferenda_NudgeReferendumCall
	(*v1.FellowshipReferenda_OneFewerDecidingCall)(nil),                  // 50: sf.gear.metadata.type.v1.FellowshipReferenda_OneFewerDecidingCall
	(*v1.FellowshipReferenda_PlaceDecisionDepositCall)(nil),              // 51: sf.gear.metadata.type.v1.FellowshipReferenda_PlaceDecisionDepositCall
	(*v1.FellowshipReferenda_RefundDecisionDepositCall)(nil),             // 52: sf.gear.metadata.type.v1.FellowshipReferenda_RefundDecisionDepositCall
	(*v1.FellowshipReferenda_RefundSubmissionDepositCall)(nil),           // 53: sf.gear.metadata.type.v1.FellowshipReferenda_RefundSubmissionDepositCall
	(*v1.FellowshipReferenda_SetMetadataCall)(nil),                       // 54: sf.gear.metadata.type.v1.FellowshipReferenda_SetMetadataCall
	(*v1.FellowshipReferenda_SubmitCall)(nil),                            // 55: sf.gear.metadata.type.v1.FellowshipReferenda_SubmitCall
	(*v1.GearVoucher_CallCall)(nil),                                      // 56: sf.gear.metadata.type.v1.GearVoucher_CallCall
	(*v1.GearVoucher_CallDeprecatedCall)(nil),                            // 57: sf.gear.metadata.type.v1.GearVoucher_CallDeprecatedCall
	(*v1.GearVoucher_DeclineCall)(nil),                                   // 58: sf.gear.metadata.type.v1.GearVoucher_DeclineCall
	(*v1.GearVoucher_IssueCall)(nil),                                     // 59: sf.gear.metadata.type.v1.GearVoucher_IssueCall
	(*v1.GearVoucher_RevokeCall)(nil),                                    // 60: sf.gear.metadata.type.v1.GearVoucher_RevokeCall
	(*v1.GearVoucher_UpdateCall)(nil),                                    // 61: sf.gear.metadata.type.v1.GearVoucher_UpdateCall
	(*v1.Gear_ClaimValueCall)(nil),                                       // 62: sf.gear.metadata.type.v1.Gear_ClaimValueCall
	(*v1.Gear_CreateProgramCall)(nil),                                    // 63: sf.gear.metadata.type.v1.Gear_CreateProgramCall
	(*v1.Gear_RunCall)(nil),                                              // 64: sf.gear.metadata.type.v1.Gear_RunCall
	(*v1.Gear_SendMessageCall)(nil),                                      // 65: sf.gear.metadata.type.v1.Gear_SendMessageCall
	(*v1.Gear_SendReplyCall)(nil),                                        // 66: sf.gear.metadata.type.v1.Gear_SendReplyCall
	(*v1.Gear_SetExecuteInherentCall)(nil),                               // 67: sf.gear.metadata.type.v1.Gear_SetExecuteInherentCall
	(*v1.Gear_UploadCodeCall)(nil),                                       // 68: sf.gear.metadata.type.v1.Gear_UploadCodeCall
	(*v1.Gear_UploadProgramCall)(nil),                                    // 69: sf.gear.metadata.type.v1.Gear_UploadProgramCall
	(*v1.Grandpa_NoteStalledCall)(nil),                                   // 70: sf.gear.metadata.type.v1.Grandpa_NoteStalledCall
	(*v1.Grandpa_ReportEquivocationCall)(nil),                            // 71: sf.gear.metadata.type.v1.Grandpa_ReportEquivocationCall
	(*v1.Grandpa_ReportEquivocationUnsignedCall)(nil),                    // 72: sf.gear.metadata.type.v1.Grandpa_ReportEquivocationUnsignedCall
	(*v1.Identity_AddRegistrarCall)(nil),                                 // 73: sf.gear.metadata.type.v1.Identity_AddRegistrarCall
	(*v1.Identity_AddSubCall)(nil),                                       // 74: sf.gear.metadata.type.v1.Identity_AddSubCall
	(*v1.Identity_CancelRequestCall)(nil),                                // 75: sf.gear.metadata.type.v1.Identity_CancelRequestCall
	(*v1.Identity_KillIdentityCall)(nil),                                 // 76: sf.gear.metadata.type.v1.Identity_KillIdentityCall
	(*v1.Identity_ProvideJudgementCall)(nil),                             // 77: sf.gear.metadata.type.v1.Identity_ProvideJudgementCall
	(*v1.Identity_RemoveSubCall)(nil),                                    // 78: sf.gear.metadata.type.v1.Identity_RemoveSubCall
	(*v1.Identity_RenameSubCall)(nil),                                    // 79: sf.gear.metadata.type.v1.Identity_RenameSubCall
	(*v1.Identity_RequestJudgementCall)(nil),                             // 80: sf.gear.metadata.type.v1.Identity_RequestJudgementCall
	(*v1.Identity_SetAccountIdCall)(nil),                                 // 81: sf.gear.metadata.type.v1.Identity_SetAccountIdCall
	(*v1.Identity_SetFeeCall)(nil),                                       // 82: sf.gear.metadata.type.v1.Identity_SetFeeCall
	(*v1.Identity_SetFieldsCall)(nil),                                    // 83: sf.gear.metadata.type.v1.Identity_SetFieldsCall
	(*v1.Identity_SetIdentityCall)(nil),                                  // 84: sf.gear.metadata.type.v1.Identity_SetIdentityCall
	(*v1.Identity_SetSubsCall)(nil),                                      // 85: sf.gear.metadata.type.v1.Identity_SetSubsCall
	(*v1.ImOnline_HeartbeatCall)(nil),                                    // 86: sf.gear.metadata.type.v1.ImOnline_HeartbeatCall
	(*v1.Multisig_ApproveAsMultiCall)(nil),                               // 87: sf.gear.metadata.type.v1.Multisig_ApproveAsMultiCall
	(*v1.Multisig_AsMultiCall)(nil),                                      // 88: sf.gear.metadata.type.v1.Multisig_AsMultiCall
	(*v1.Multisig_AsMultiThreshold1Call)(nil),                            // 89: sf.gear.metadata.type.v1.Multisig_AsMultiThreshold1Call
	(*v1.Multisig_CancelAsMultiCall)(nil),                                // 90: sf.gear.metadata.type.v1.Multisig_CancelAsMultiCall
	(*v1.NominationPools_AdjustPoolDepositCall)(nil),                     // 91: sf.gear.metadata.type.v1.NominationPools_AdjustPoolDepositCall
	(*v1.NominationPools_BondExtraCall)(nil),                             // 92: sf.gear.metadata.type.v1.NominationPools_BondExtraCall
	(*v1.NominationPools_BondExtraOtherCall)(nil),                        // 93: sf.gear.metadata.type.v1.NominationPools_BondExtraOtherCall
	(*v1.NominationPools_ChillCall)(nil),                                 // 94: sf.gear.metadata.type.v1.NominationPools_ChillCall
	(*v1.NominationPools_ClaimCommissionCall)(nil),                       // 95: sf.gear.metadata.type.v1.NominationPools_ClaimCommissionCall
	(*v1.NominationPools_ClaimPayoutOtherCall)(nil),                      // 96: sf.gear.metadata.type.v1.NominationPools_ClaimPayoutOtherCall
	(*v1.NominationPools_CreateCall)(nil),                                // 97: sf.gear.metadata.type.v1.NominationPools_CreateCall
	(*v1.NominationPools_CreateWithPoolIdCall)(nil),                      // 98: sf.gear.metadata.type.v1.NominationPools_CreateWithPoolIdCall
	(*v1.NominationPools_JoinCall)(nil),                                  // 99: sf.gear.metadata.type.v1.NominationPools_JoinCall
	(*v1.NominationPools_NominateCall)(nil),                              // 100: sf.gear.metadata.type.v1.NominationPools_NominateCall
	(*v1.NominationPools_PoolWithdrawUnbondedCall)(nil),                  // 101: sf.gear.metadata.type.v1.NominationPools_PoolWithdrawUnbondedCall
	(*v1.NominationPools_SetClaimPermissionCall)(nil),                    // 102: sf.gear.metadata.type.v1.NominationPools_SetClaimPermissionCall
	(*v1.NominationPools_SetCommissionCall)(nil),                         // 103: sf.gear.metadata.type.v1.NominationPools_SetCommissionCall
	(*v1.NominationPools_SetCommissionChangeRateCall)(nil),               // 104: sf.gear.metadata.type.v1.NominationPools_SetCommissionChangeRateCall
	(*v1.NominationPools_SetCommissionMaxCall)(nil),                      // 105: sf.gear.metadata.type.v1.NominationPools_SetCommissionMaxCall
	(*v1.NominationPools_SetConfigsCall)(nil),                            // 106: sf.gear.metadata.type.v1.NominationPools_SetConfigsCall
	(*v1.NominationPools_SetMetadataCall)(nil),                           // 107: sf.gear.metadata.type.v1.NominationPools_SetMetadataCall
	(*v1.NominationPools_SetStateCall)(nil),                              // 108: sf.gear.metadata.type.v1.NominationPools_SetStateCall
	(*v1.NominationPools_UnbondCall)(nil),                                // 109: sf.gear.metadata.type.v1.NominationPools_UnbondCall
	(*v1.NominationPools_UpdateRolesCall)(nil),                           // 110: sf.gear.metadata.type.v1.NominationPools_UpdateRolesCall
	(*v1.NominationPools_WithdrawUnbondedCall)(nil),                      // 111: sf.gear.metadata.type.v1.NominationPools_WithdrawUnbondedCall
	(*v1.Preimage_EnsureUpdatedCall)(nil),                                // 112: sf.gear.metadata.type.v1.Preimage_EnsureUpdatedCall
	(*v1.Preimage_NotePreimageCall)(nil),                                 // 113: sf.gear.metadata.type.v1.Preimage_NotePreimageCall
	(*v1.Preimage_RequestPreimageCall)(nil),                              // 114: sf.gear.metadata.type.v1.Preimage_RequestPreimageCall
	(*v1.Preimage_UnnotePreimageCall)(nil),                               // 115: sf.gear.metadata.type.v1.Preimage_UnnotePreimageCall
	(*v1.Preimage_UnrequestPreimageCall)(nil),                            // 116: sf.gear.metadata.type.v1.Preimage_UnrequestPreimageCall
	(*v1.Proxy_AddProxyCall)(nil),                                        // 117: sf.gear.metadata.type.v1.Proxy_AddProxyCall
	(*v1.Proxy_AnnounceCall)(nil),                                        // 118: sf.gear.metadata.type.v1.Proxy_AnnounceCall
	(*v1.Proxy_CreatePureCall)(nil),                                      // 119: sf.gear.metadata.type.v1.Proxy_CreatePureCall
	(*v1.Proxy_KillPureCall)(nil),                                        // 120: sf.gear.metadata.type.v1.Proxy_KillPureCall
	(*v1.Proxy_ProxyAnnouncedCall)(nil),                                  // 121: sf.gear.metadata.type.v1.Proxy_ProxyAnnouncedCall
	(*v1.Proxy_ProxyCall)(nil),                                           // 122: sf.gear.metadata.type.v1.Proxy_ProxyCall
	(*v1.Proxy_RejectAnnouncementCall)(nil),                              // 123: sf.gear.metadata.type.v1.Proxy_RejectAnnouncementCall
	(*v1.Proxy_RemoveAnnouncementCall)(nil),                              // 124: sf.gear.metadata.type.v1.Proxy_RemoveAnnouncementCall
	(*v1.Proxy_RemoveProxyCall)(nil),                                     // 125: sf.gear.metadata.type.v1.Proxy_RemoveProxyCall
	(*v1.Referenda_CancelCall)(nil),                                      // 126: sf.gear.metadata.type.v1.Referenda_CancelCall
	(*v1.Referenda_KillCall)(nil),                                        // 127: sf.gear.metadata.type.v1.Referenda_KillCall
	(*v1.Referenda_NudgeReferendumCall)(nil),                             // 128: sf.gear.metadata.type.v1.Referenda_NudgeReferendumCall
	(*v1.Referenda_OneFewerDecidingCall)(nil),                            // 129: sf.gear.metadata.type.v1.Referenda_OneFewerDecidingCall
	(*v1.Referenda_PlaceDecisionDepositCall)(nil),                        // 130: sf.gear.metadata.type.v1.Referenda_PlaceDecisionDepositCall
	(*v1.Referenda_RefundDecisionDepositCall)(nil),                       // 131: sf.gear.metadata.type.v1.Referenda_RefundDecisionDepositCall
	(*v1.Referenda_RefundSubmissionDepositCall)(nil),                     // 132: sf.gear.metadata.type.v1.Referenda_RefundSubmissionDepositCall
	(*v1.Referenda_SetMetadataCall)(nil),                                 // 133: sf.gear.metadata.type.v1.Referenda_SetMetadataCall
	(*v1.Referenda_SubmitCall)(nil),                                      // 134: sf.gear.metadata.type.v1.Referenda_SubmitCall
	(*v1.Scheduler_CancelCall)(nil),                                      // 135: sf.gear.metadata.type.v1.Scheduler_CancelCall
	(*v1.Scheduler_CancelNamedCall)(nil),                                 // 136: sf.gear.metadata.type.v1.Scheduler_CancelNamedCall
	(*v1.Scheduler_ScheduleAfterCall)(nil),                               // 137: sf.gear.metadata.type.v1.Scheduler_ScheduleAfterCall
	(*v1.Scheduler_ScheduleCall)(nil),                                    // 138: sf.gear.metadata.type.v1.Scheduler_ScheduleCall
	(*v1.Scheduler_ScheduleNamedAfterCall)(nil),                          // 139: sf.gear.metadata.type.v1.Scheduler_ScheduleNamedAfterCall
	(*v1.Scheduler_ScheduleNamedCall)(nil),                               // 140: sf.gear.metadata.type.v1.Scheduler_ScheduleNamedCall
	(*v1.Session_SetKeysCall)(nil),                                       // 141: sf.gear.metadata.type.v1.Session_SetKeysCall
	(*v1.StakingRewards_AlignSupplyCall)(nil),                            // 142: sf.gear.metadata.type.v1.StakingRewards_AlignSupplyCall
	(*v1.StakingRewards_ForceRefillCall)(nil),                            // 143: sf.gear.metadata.type.v1.StakingRewards_ForceRefillCall
	(*v1.StakingRewards_RefillCall)(nil),                                 // 144: sf.gear.metadata.type.v1.StakingRewards_RefillCall
	(*v1.StakingRewards_WithdrawCall)(nil),                               // 145: sf.gear.metadata.type.v1.StakingRewards_WithdrawCall
	(*v1.Staking_BondCall)(nil),                                          // 146: sf.gear.metadata.type.v1.Staking_BondCall
	(*v1.Staking_BondExtraCall)(nil),                                     // 147: sf.gear.metadata.type.v1.Staking_BondExtraCall
	(*v1.Staking_CancelDeferredSlashCall)(nil),                           // 148: sf.gear.metadata.type.v1.Staking_CancelDeferredSlashCall
	(*v1.Staking_ChillOtherCall)(nil),                                    // 149: sf.gear.metadata.type.v1.Staking_ChillOtherCall
	(*v1.Staking_ForceApplyMinCommissionCall)(nil),                       // 150: sf.gear.metadata.type.v1.Staking_ForceApplyMinCommissionCall
	(*v1.Staking_ForceUnstakeCall)(nil),                                  // 151: sf.gear.metadata.type.v1.Staking_ForceUnstakeCall
	(*v1.Staking_IncreaseValidatorCountCall)(nil),                        // 152: sf.gear.metadata.type.v1.Staking_IncreaseValidatorCountCall
	(*v1.Staking_KickCall)(nil),                                          // 153: sf.gear.metadata.type.v1.Staking_KickCall
	(*v1.Staking_NominateCall)(nil),                                      // 154: sf.gear.metadata.type.v1.Staking_NominateCall
	(*v1.Staking_PayoutStakersCall)(nil),                                 // 155: sf.gear.metadata.type.v1.Staking_PayoutStakersCall
	(*v1.Staking_ReapStashCall)(nil),                                     // 156: sf.gear.metadata.type.v1.Staking_ReapStashCall
	(*v1.Staking_RebondCall)(nil),                                        // 157: sf.gear.metadata.type.v1.Staking_RebondCall
	(*v1.Staking_ScaleValidatorCountCall)(nil),                           // 158: sf.gear.metadata.type.v1.Staking_ScaleValidatorCountCall
	(*v1.Staking_SetInvulnerablesCall)(nil),                              // 159: sf.gear.metadata.type.v1.Staking_SetInvulnerablesCall
	(*v1.Staking_SetMinCommissionCall)(nil),                              // 160: sf.gear.metadata.type.v1.Staking_SetMinCommissionCall
	(*v1.Staking_SetPayeeCall)(nil),                                      // 161: sf.gear.metadata.type.v1.Staking_SetPayeeCall
	(*v1.Staking_SetStakingConfigsCall)(nil),                             // 162: sf.gear.metadata.type.v1.Staking_SetStakingConfigsCall
	(*v1.Staking_SetValidatorCountCall)(nil),                             // 163: sf.gear.metadata.type.v1.Staking_SetValidatorCountCall
	(*v1.Staking_UnbondCall)(nil),                                        // 164: sf.gear.metadata.type.v1.Staking_UnbondCall
	(*v1.Staking_ValidateCall)(nil),                                      // 165: sf.gear.metadata.type.v1.Staking_ValidateCall
	(*v1.Staking_WithdrawUnbondedCall)(nil),                              // 166: sf.gear.metadata.type.v1.Staking_WithdrawUnbondedCall
	(*v1.System_KillPrefixCall)(nil),                                     // 167: sf.gear.metadata.type.v1.System_KillPrefixCall
	(*v1.System_KillStorageCall)(nil),                                    // 168: sf.gear.metadata.type.v1.System_KillStorageCall
	(*v1.System_RemarkCall)(nil),                                         // 169: sf.gear.metadata.type.v1.System_RemarkCall
	(*v1.System_RemarkWithEventCall)(nil),                                // 170: sf.gear.metadata.type.v1.System_RemarkWithEventCall
	(*v1.System_SetCodeCall)(nil),                                        // 171: sf.gear.metadata.type.v1.System_SetCodeCall
	(*v1.System_SetCodeWithoutChecksCall)(nil),                           // 172: sf.gear.metadata.type.v1.System_SetCodeWithoutChecksCall
	(*v1.System_SetHeapPagesCall)(nil),                                   // 173: sf.gear.metadata.type.v1.System_SetHeapPagesCall
	(*v1.System_SetStorageCall)(nil),                                     // 174: sf.gear.metadata.type.v1.System_SetStorageCall
	(*v1.Timestamp_SetCall)(nil),                                         // 175: sf.gear.metadata.type.v1.Timestamp_SetCall
	(*v1.Treasury_ApproveProposalCall)(nil),                              // 176: sf.gear.metadata.type.v1.Treasury_ApproveProposalCall
	(*v1.Treasury_CheckStatusCall)(nil),                                  // 177: sf.gear.metadata.type.v1.Treasury_CheckStatusCall
	(*v1.Treasury_PayoutCall)(nil),                                       // 178: sf.gear.metadata.type.v1.Treasury_PayoutCall
	(*v1.Treasury_ProposeSpendCall)(nil),                                 // 179: sf.gear.metadata.type.v1.Treasury_ProposeSpendCall
	(*v1.Treasury_RejectProposalCall)(nil),                               // 180: sf.gear.metadata.type.v1.Treasury_RejectProposalCall
	(*v1.Treasury_RemoveApprovalCall)(nil),                               // 181: sf.gear.metadata.type.v1.Treasury_RemoveApprovalCall
	(*v1.Treasury_SpendCall)(nil),                                        // 182: sf.gear.metadata.type.v1.Treasury_SpendCall
	(*v1.Treasury_SpendLocalCall)(nil),                                   // 183: sf.gear.metadata.type.v1.Treasury_SpendLocalCall
	(*v1.Treasury_VoidSpendCall)(nil),                                    // 184: sf.gear.metadata.type.v1.Treasury_VoidSpendCall
	(*v1.Utility_AsDerivativeCall)(nil),                                  // 185: sf.gear.metadata.type.v1.Utility_AsDerivativeCall
	(*v1.Utility_BatchAllCall)(nil),                                      // 186: sf.gear.metadata.type.v1.Utility_BatchAllCall
	(*v1.Utility_BatchCall)(nil),                                         // 187: sf.gear.metadata.type.v1.Utility_BatchCall
	(*v1.Utility_DispatchAsCall)(nil),                                    // 188: sf.gear.metadata.type.v1.Utility_DispatchAsCall
	(*v1.Utility_ForceBatchCall)(nil),                                    // 189: sf.gear.metadata.type.v1.Utility_ForceBatchCall
	(*v1.Utility_WithWeightCall)(nil),                                    // 190: sf.gear.metadata.type.v1.Utility_WithWeightCall
	(*v1.Vesting_ForceVestedTransferCall)(nil),                           // 191: sf.gear.metadata.type.v1.Vesting_ForceVestedTransferCall
	(*v1.Vesting_MergeSchedulesCall)(nil),                                // 192: sf.gear.metadata.type.v1.Vesting_MergeSchedulesCall
	(*v1.Vesting_VestOtherCall)(nil),                                     // 193: sf.gear.metadata.type.v1.Vesting_VestOtherCall
	(*v1.Vesting_VestedTransferCall)(nil),                                // 194: sf.gear.metadata.type.v1.Vesting_VestedTransferCall
	(*v1.Whitelist_DispatchWhitelistedCallCall)(nil),                     // 195: sf.gear.metadata.type.v1.Whitelist_DispatchWhitelistedCallCall
	(*v1.Whitelist_DispatchWhitelistedCallWithPreimageCall)(nil),         // 196: sf.gear.metadata.type.v1.Whitelist_DispatchWhitelistedCallWithPreimageCall
	(*v1.Whitelist_RemoveWhitelistedCallCall)(nil),                       // 197: sf.gear.metadata.type.v1.Whitelist_RemoveWhitelistedCallCall
	(*v1.Whitelist_WhitelistCallCall)(nil),                               // 198: sf.gear.metadata.type.v1.Whitelist_WhitelistCallCall
}
var file_sf_gear_extrinsic_type_v1_extrinsic_proto_depIdxs = []int32{
	1,   // 0: sf.gear.extrinsic.type.v1.RuntimeCall.babe_plan_config_change_call:type_name -> sf.gear.metadata.type.v1.Babe_PlanConfigChangeCall
	2,   // 1: sf.gear.extrinsic.type.v1.RuntimeCall.babe_report_equivocation_call:type_name -> sf.gear.metadata.type.v1.Babe_ReportEquivocationCall
	3,   // 2: sf.gear.extrinsic.type.v1.RuntimeCall.babe_report_equivocation_unsigned_call:type_name -> sf.gear.metadata.type.v1.Babe_ReportEquivocationUnsignedCall
	4,   // 3: sf.gear.extrinsic.type.v1.RuntimeCall.bagslist_put_in_front_of_call:type_name -> sf.gear.metadata.type.v1.BagsList_PutInFrontOfCall
	5,   // 4: sf.gear.extrinsic.type.v1.RuntimeCall.bagslist_put_in_front_of_other_call:type_name -> sf.gear.metadata.type.v1.BagsList_PutInFrontOfOtherCall
	6,   // 5: sf.gear.extrinsic.type.v1.RuntimeCall.bagslist_rebag_call:type_name -> sf.gear.metadata.type.v1.BagsList_RebagCall
	7,   // 6: sf.gear.extrinsic.type.v1.RuntimeCall.balances_force_set_balance_call:type_name -> sf.gear.metadata.type.v1.Balances_ForceSetBalanceCall
	8,   // 7: sf.gear.extrinsic.type.v1.RuntimeCall.balances_force_transfer_call:type_name -> sf.gear.metadata.type.v1.Balances_ForceTransferCall
	9,   // 8: sf.gear.extrinsic.type.v1.RuntimeCall.balances_force_unreserve_call:type_name -> sf.gear.metadata.type.v1.Balances_ForceUnreserveCall
	10,  // 9: sf.gear.extrinsic.type.v1.RuntimeCall.balances_transfer_all_call:type_name -> sf.gear.metadata.type.v1.Balances_TransferAllCall
	11,  // 10: sf.gear.extrinsic.type.v1.RuntimeCall.balances_transfer_allow_death_call:type_name -> sf.gear.metadata.type.v1.Balances_TransferAllowDeathCall
	12,  // 11: sf.gear.extrinsic.type.v1.RuntimeCall.balances_transfer_keep_alive_call:type_name -> sf.gear.metadata.type.v1.Balances_TransferKeepAliveCall
	13,  // 12: sf.gear.extrinsic.type.v1.RuntimeCall.balances_upgrade_accounts_call:type_name -> sf.gear.metadata.type.v1.Balances_UpgradeAccountsCall
	14,  // 13: sf.gear.extrinsic.type.v1.RuntimeCall.bounties_accept_curator_call:type_name -> sf.gear.metadata.type.v1.Bounties_AcceptCuratorCall
	15,  // 14: sf.gear.extrinsic.type.v1.RuntimeCall.bounties_approve_bounty_call:type_name -> sf.gear.metadata.type.v1.Bounties_ApproveBountyCall
	16,  // 15: sf.gear.extrinsic.type.v1.RuntimeCall.bounties_award_bounty_call:type_name -> sf.gear.metadata.type.v1.Bounties_AwardBountyCall
	17,  // 16: sf.gear.extrinsic.type.v1.RuntimeCall.bounties_claim_bounty_call:type_name -> sf.gear.metadata.type.v1.Bounties_ClaimBountyCall
	18,  // 17: sf.gear.extrinsic.type.v1.RuntimeCall.bounties_close_bounty_call:type_name -> sf.gear.metadata.type.v1.Bounties_CloseBountyCall
	19,  // 18: sf.gear.extrinsic.type.v1.RuntimeCall.bounties_extend_bounty_expiry_call:type_name -> sf.gear.metadata.type.v1.Bounties_ExtendBountyExpiryCall
	20,  // 19: sf.gear.extrinsic.type.v1.RuntimeCall.bounties_propose_bounty_call:type_name -> sf.gear.metadata.type.v1.Bounties_ProposeBountyCall
	21,  // 20: sf.gear.extrinsic.type.v1.RuntimeCall.bounties_propose_curator_call:type_name -> sf.gear.metadata.type.v1.Bounties_ProposeCuratorCall
	22,  // 21: sf.gear.extrinsic.type.v1.RuntimeCall.bounties_unassign_curator_call:type_name -> sf.gear.metadata.type.v1.Bounties_UnassignCuratorCall
	23,  // 22: sf.gear.extrinsic.type.v1.RuntimeCall.childbounties_accept_curator_call:type_name -> sf.gear.metadata.type.v1.ChildBounties_AcceptCuratorCall
	24,  // 23: sf.gear.extrinsic.type.v1.RuntimeCall.childbounties_add_child_bounty_call:type_name -> sf.gear.metadata.type.v1.ChildBounties_AddChildBountyCall
	25,  // 24: sf.gear.extrinsic.type.v1.RuntimeCall.childbounties_award_child_bounty_call:type_name -> sf.gear.metadata.type.v1.ChildBounties_AwardChildBountyCall
	26,  // 25: sf.gear.extrinsic.type.v1.RuntimeCall.childbounties_claim_child_bounty_call:type_name -> sf.gear.metadata.type.v1.ChildBounties_ClaimChildBountyCall
	27,  // 26: sf.gear.extrinsic.type.v1.RuntimeCall.childbounties_close_child_bounty_call:type_name -> sf.gear.metadata.type.v1.ChildBounties_CloseChildBountyCall
	28,  // 27: sf.gear.extrinsic.type.v1.RuntimeCall.childbounties_propose_curator_call:type_name -> sf.gear.metadata.type.v1.ChildBounties_ProposeCuratorCall
	29,  // 28: sf.gear.extrinsic.type.v1.RuntimeCall.childbounties_unassign_curator_call:type_name -> sf.gear.metadata.type.v1.ChildBounties_UnassignCuratorCall
	30,  // 29: sf.gear.extrinsic.type.v1.RuntimeCall.convictionvoting_delegate_call:type_name -> sf.gear.metadata.type.v1.ConvictionVoting_DelegateCall
	31,  // 30: sf.gear.extrinsic.type.v1.RuntimeCall.convictionvoting_remove_other_vote_call:type_name -> sf.gear.metadata.type.v1.ConvictionVoting_RemoveOtherVoteCall
	32,  // 31: sf.gear.extrinsic.type.v1.RuntimeCall.convictionvoting_remove_vote_call:type_name -> sf.gear.metadata.type.v1.ConvictionVoting_RemoveVoteCall
	33,  // 32: sf.gear.extrinsic.type.v1.RuntimeCall.convictionvoting_undelegate_call:type_name -> sf.gear.metadata.type.v1.ConvictionVoting_UndelegateCall
	34,  // 33: sf.gear.extrinsic.type.v1.RuntimeCall.convictionvoting_unlock_call:type_name -> sf.gear.metadata.type.v1.ConvictionVoting_UnlockCall
	35,  // 34: sf.gear.extrinsic.type.v1.RuntimeCall.convictionvoting_vote_call:type_name -> sf.gear.metadata.type.v1.ConvictionVoting_VoteCall
	36,  // 35: sf.gear.extrinsic.type.v1.RuntimeCall.electionprovidermultiphase_governance_fallback_call:type_name -> sf.gear.metadata.type.v1.ElectionProviderMultiPhase_GovernanceFallbackCall
	37,  // 36: sf.gear.extrinsic.type.v1.RuntimeCall.electionprovidermultiphase_set_emergency_election_result_call:type_name -> sf.gear.metadata.type.v1.ElectionProviderMultiPhase_SetEmergencyElectionResultCall
	38,  // 37: sf.gear.extrinsic.type.v1.RuntimeCall.electionprovidermultiphase_set_minimum_untrusted_score_call:type_name -> sf.gear.metadata.type.v1.ElectionProviderMultiPhase_SetMinimumUntrustedScoreCall
	39,  // 38: sf.gear.extrinsic.type.v1.RuntimeCall.electionprovidermultiphase_submit_call:type_name -> sf.gear.metadata.type.v1.ElectionProviderMultiPhase_SubmitCall
	40,  // 39: sf.gear.extrinsic.type.v1.RuntimeCall.electionprovidermultiphase_submit_unsigned_call:type_name -> sf.gear.metadata.type.v1.ElectionProviderMultiPhase_SubmitUnsignedCall
	41,  // 40: sf.gear.extrinsic.type.v1.RuntimeCall.fellowshipcollective_add_member_call:type_name -> sf.gear.metadata.type.v1.FellowshipCollective_AddMemberCall
	42,  // 41: sf.gear.extrinsic.type.v1.RuntimeCall.fellowshipcollective_cleanup_poll_call:type_name -> sf.gear.metadata.type.v1.FellowshipCollective_CleanupPollCall
	43,  // 42: sf.gear.extrinsic.type.v1.RuntimeCall.fellowshipcollective_demote_member_call:type_name -> sf.gear.metadata.type.v1.FellowshipCollective_DemoteMemberCall
	44,  // 43: sf.gear.extrinsic.type.v1.RuntimeCall.fellowshipcollective_promote_member_call:type_name -> sf.gear.metadata.type.v1.FellowshipCollective_PromoteMemberCall
	45,  // 44: sf.gear.extrinsic.type.v1.RuntimeCall.fellowshipcollective_remove_member_call:type_name -> sf.gear.metadata.type.v1.FellowshipCollective_RemoveMemberCall
	46,  // 45: sf.gear.extrinsic.type.v1.RuntimeCall.fellowshipcollective_vote_call:type_name -> sf.gear.metadata.type.v1.FellowshipCollective_VoteCall
	47,  // 46: sf.gear.extrinsic.type.v1.RuntimeCall.fellowshipreferenda_cancel_call:type_name -> sf.gear.metadata.type.v1.FellowshipReferenda_CancelCall
	48,  // 47: sf.gear.extrinsic.type.v1.RuntimeCall.fellowshipreferenda_kill_call:type_name -> sf.gear.metadata.type.v1.FellowshipReferenda_KillCall
	49,  // 48: sf.gear.extrinsic.type.v1.RuntimeCall.fellowshipreferenda_nudge_referendum_call:type_name -> sf.gear.metadata.type.v1.FellowshipReferenda_NudgeReferendumCall
	50,  // 49: sf.gear.extrinsic.type.v1.RuntimeCall.fellowshipreferenda_one_fewer_deciding_call:type_name -> sf.gear.metadata.type.v1.FellowshipReferenda_OneFewerDecidingCall
	51,  // 50: sf.gear.extrinsic.type.v1.RuntimeCall.fellowshipreferenda_place_decision_deposit_call:type_name -> sf.gear.metadata.type.v1.FellowshipReferenda_PlaceDecisionDepositCall
	52,  // 51: sf.gear.extrinsic.type.v1.RuntimeCall.fellowshipreferenda_refund_decision_deposit_call:type_name -> sf.gear.metadata.type.v1.FellowshipReferenda_RefundDecisionDepositCall
	53,  // 52: sf.gear.extrinsic.type.v1.RuntimeCall.fellowshipreferenda_refund_submission_deposit_call:type_name -> sf.gear.metadata.type.v1.FellowshipReferenda_RefundSubmissionDepositCall
	54,  // 53: sf.gear.extrinsic.type.v1.RuntimeCall.fellowshipreferenda_set_metadata_call:type_name -> sf.gear.metadata.type.v1.FellowshipReferenda_SetMetadataCall
	55,  // 54: sf.gear.extrinsic.type.v1.RuntimeCall.fellowshipreferenda_submit_call:type_name -> sf.gear.metadata.type.v1.FellowshipReferenda_SubmitCall
	56,  // 55: sf.gear.extrinsic.type.v1.RuntimeCall.gearvoucher_call_call:type_name -> sf.gear.metadata.type.v1.GearVoucher_CallCall
	57,  // 56: sf.gear.extrinsic.type.v1.RuntimeCall.gearvoucher_call_deprecated_call:type_name -> sf.gear.metadata.type.v1.GearVoucher_CallDeprecatedCall
	58,  // 57: sf.gear.extrinsic.type.v1.RuntimeCall.gearvoucher_decline_call:type_name -> sf.gear.metadata.type.v1.GearVoucher_DeclineCall
	59,  // 58: sf.gear.extrinsic.type.v1.RuntimeCall.gearvoucher_issue_call:type_name -> sf.gear.metadata.type.v1.GearVoucher_IssueCall
	60,  // 59: sf.gear.extrinsic.type.v1.RuntimeCall.gearvoucher_revoke_call:type_name -> sf.gear.metadata.type.v1.GearVoucher_RevokeCall
	61,  // 60: sf.gear.extrinsic.type.v1.RuntimeCall.gearvoucher_update_call:type_name -> sf.gear.metadata.type.v1.GearVoucher_UpdateCall
	62,  // 61: sf.gear.extrinsic.type.v1.RuntimeCall.gear_claim_value_call:type_name -> sf.gear.metadata.type.v1.Gear_ClaimValueCall
	63,  // 62: sf.gear.extrinsic.type.v1.RuntimeCall.gear_create_program_call:type_name -> sf.gear.metadata.type.v1.Gear_CreateProgramCall
	64,  // 63: sf.gear.extrinsic.type.v1.RuntimeCall.gear_run_call:type_name -> sf.gear.metadata.type.v1.Gear_RunCall
	65,  // 64: sf.gear.extrinsic.type.v1.RuntimeCall.gear_send_message_call:type_name -> sf.gear.metadata.type.v1.Gear_SendMessageCall
	66,  // 65: sf.gear.extrinsic.type.v1.RuntimeCall.gear_send_reply_call:type_name -> sf.gear.metadata.type.v1.Gear_SendReplyCall
	67,  // 66: sf.gear.extrinsic.type.v1.RuntimeCall.gear_set_execute_inherent_call:type_name -> sf.gear.metadata.type.v1.Gear_SetExecuteInherentCall
	68,  // 67: sf.gear.extrinsic.type.v1.RuntimeCall.gear_upload_code_call:type_name -> sf.gear.metadata.type.v1.Gear_UploadCodeCall
	69,  // 68: sf.gear.extrinsic.type.v1.RuntimeCall.gear_upload_program_call:type_name -> sf.gear.metadata.type.v1.Gear_UploadProgramCall
	70,  // 69: sf.gear.extrinsic.type.v1.RuntimeCall.grandpa_note_stalled_call:type_name -> sf.gear.metadata.type.v1.Grandpa_NoteStalledCall
	71,  // 70: sf.gear.extrinsic.type.v1.RuntimeCall.grandpa_report_equivocation_call:type_name -> sf.gear.metadata.type.v1.Grandpa_ReportEquivocationCall
	72,  // 71: sf.gear.extrinsic.type.v1.RuntimeCall.grandpa_report_equivocation_unsigned_call:type_name -> sf.gear.metadata.type.v1.Grandpa_ReportEquivocationUnsignedCall
	73,  // 72: sf.gear.extrinsic.type.v1.RuntimeCall.identity_add_registrar_call:type_name -> sf.gear.metadata.type.v1.Identity_AddRegistrarCall
	74,  // 73: sf.gear.extrinsic.type.v1.RuntimeCall.identity_add_sub_call:type_name -> sf.gear.metadata.type.v1.Identity_AddSubCall
	75,  // 74: sf.gear.extrinsic.type.v1.RuntimeCall.identity_cancel_request_call:type_name -> sf.gear.metadata.type.v1.Identity_CancelRequestCall
	76,  // 75: sf.gear.extrinsic.type.v1.RuntimeCall.identity_kill_identity_call:type_name -> sf.gear.metadata.type.v1.Identity_KillIdentityCall
	77,  // 76: sf.gear.extrinsic.type.v1.RuntimeCall.identity_provide_judgement_call:type_name -> sf.gear.metadata.type.v1.Identity_ProvideJudgementCall
	78,  // 77: sf.gear.extrinsic.type.v1.RuntimeCall.identity_remove_sub_call:type_name -> sf.gear.metadata.type.v1.Identity_RemoveSubCall
	79,  // 78: sf.gear.extrinsic.type.v1.RuntimeCall.identity_rename_sub_call:type_name -> sf.gear.metadata.type.v1.Identity_RenameSubCall
	80,  // 79: sf.gear.extrinsic.type.v1.RuntimeCall.identity_request_judgement_call:type_name -> sf.gear.metadata.type.v1.Identity_RequestJudgementCall
	81,  // 80: sf.gear.extrinsic.type.v1.RuntimeCall.identity_set_account_id_call:type_name -> sf.gear.metadata.type.v1.Identity_SetAccountIdCall
	82,  // 81: sf.gear.extrinsic.type.v1.RuntimeCall.identity_set_fee_call:type_name -> sf.gear.metadata.type.v1.Identity_SetFeeCall
	83,  // 82: sf.gear.extrinsic.type.v1.RuntimeCall.identity_set_fields_call:type_name -> sf.gear.metadata.type.v1.Identity_SetFieldsCall
	84,  // 83: sf.gear.extrinsic.type.v1.RuntimeCall.identity_set_identity_call:type_name -> sf.gear.metadata.type.v1.Identity_SetIdentityCall
	85,  // 84: sf.gear.extrinsic.type.v1.RuntimeCall.identity_set_subs_call:type_name -> sf.gear.metadata.type.v1.Identity_SetSubsCall
	86,  // 85: sf.gear.extrinsic.type.v1.RuntimeCall.imonline_heartbeat_call:type_name -> sf.gear.metadata.type.v1.ImOnline_HeartbeatCall
	87,  // 86: sf.gear.extrinsic.type.v1.RuntimeCall.multisig_approve_as_multi_call:type_name -> sf.gear.metadata.type.v1.Multisig_ApproveAsMultiCall
	88,  // 87: sf.gear.extrinsic.type.v1.RuntimeCall.multisig_as_multi_call:type_name -> sf.gear.metadata.type.v1.Multisig_AsMultiCall
	89,  // 88: sf.gear.extrinsic.type.v1.RuntimeCall.multisig_as_multi_threshold_1_call:type_name -> sf.gear.metadata.type.v1.Multisig_AsMultiThreshold1Call
	90,  // 89: sf.gear.extrinsic.type.v1.RuntimeCall.multisig_cancel_as_multi_call:type_name -> sf.gear.metadata.type.v1.Multisig_CancelAsMultiCall
	91,  // 90: sf.gear.extrinsic.type.v1.RuntimeCall.nominationpools_adjust_pool_deposit_call:type_name -> sf.gear.metadata.type.v1.NominationPools_AdjustPoolDepositCall
	92,  // 91: sf.gear.extrinsic.type.v1.RuntimeCall.nominationpools_bond_extra_call:type_name -> sf.gear.metadata.type.v1.NominationPools_BondExtraCall
	93,  // 92: sf.gear.extrinsic.type.v1.RuntimeCall.nominationpools_bond_extra_other_call:type_name -> sf.gear.metadata.type.v1.NominationPools_BondExtraOtherCall
	94,  // 93: sf.gear.extrinsic.type.v1.RuntimeCall.nominationpools_chill_call:type_name -> sf.gear.metadata.type.v1.NominationPools_ChillCall
	95,  // 94: sf.gear.extrinsic.type.v1.RuntimeCall.nominationpools_claim_commission_call:type_name -> sf.gear.metadata.type.v1.NominationPools_ClaimCommissionCall
	96,  // 95: sf.gear.extrinsic.type.v1.RuntimeCall.nominationpools_claim_payout_other_call:type_name -> sf.gear.metadata.type.v1.NominationPools_ClaimPayoutOtherCall
	97,  // 96: sf.gear.extrinsic.type.v1.RuntimeCall.nominationpools_create_call:type_name -> sf.gear.metadata.type.v1.NominationPools_CreateCall
	98,  // 97: sf.gear.extrinsic.type.v1.RuntimeCall.nominationpools_create_with_pool_id_call:type_name -> sf.gear.metadata.type.v1.NominationPools_CreateWithPoolIdCall
	99,  // 98: sf.gear.extrinsic.type.v1.RuntimeCall.nominationpools_join_call:type_name -> sf.gear.metadata.type.v1.NominationPools_JoinCall
	100, // 99: sf.gear.extrinsic.type.v1.RuntimeCall.nominationpools_nominate_call:type_name -> sf.gear.metadata.type.v1.NominationPools_NominateCall
	101, // 100: sf.gear.extrinsic.type.v1.RuntimeCall.nominationpools_pool_withdraw_unbonded_call:type_name -> sf.gear.metadata.type.v1.NominationPools_PoolWithdrawUnbondedCall
	102, // 101: sf.gear.extrinsic.type.v1.RuntimeCall.nominationpools_set_claim_permission_call:type_name -> sf.gear.metadata.type.v1.NominationPools_SetClaimPermissionCall
	103, // 102: sf.gear.extrinsic.type.v1.RuntimeCall.nominationpools_set_commission_call:type_name -> sf.gear.metadata.type.v1.NominationPools_SetCommissionCall
	104, // 103: sf.gear.extrinsic.type.v1.RuntimeCall.nominationpools_set_commission_change_rate_call:type_name -> sf.gear.metadata.type.v1.NominationPools_SetCommissionChangeRateCall
	105, // 104: sf.gear.extrinsic.type.v1.RuntimeCall.nominationpools_set_commission_max_call:type_name -> sf.gear.metadata.type.v1.NominationPools_SetCommissionMaxCall
	106, // 105: sf.gear.extrinsic.type.v1.RuntimeCall.nominationpools_set_configs_call:type_name -> sf.gear.metadata.type.v1.NominationPools_SetConfigsCall
	107, // 106: sf.gear.extrinsic.type.v1.RuntimeCall.nominationpools_set_metadata_call:type_name -> sf.gear.metadata.type.v1.NominationPools_SetMetadataCall
	108, // 107: sf.gear.extrinsic.type.v1.RuntimeCall.nominationpools_set_state_call:type_name -> sf.gear.metadata.type.v1.NominationPools_SetStateCall
	109, // 108: sf.gear.extrinsic.type.v1.RuntimeCall.nominationpools_unbond_call:type_name -> sf.gear.metadata.type.v1.NominationPools_UnbondCall
	110, // 109: sf.gear.extrinsic.type.v1.RuntimeCall.nominationpools_update_roles_call:type_name -> sf.gear.metadata.type.v1.NominationPools_UpdateRolesCall
	111, // 110: sf.gear.extrinsic.type.v1.RuntimeCall.nominationpools_withdraw_unbonded_call:type_name -> sf.gear.metadata.type.v1.NominationPools_WithdrawUnbondedCall
	112, // 111: sf.gear.extrinsic.type.v1.RuntimeCall.preimage_ensure_updated_call:type_name -> sf.gear.metadata.type.v1.Preimage_EnsureUpdatedCall
	113, // 112: sf.gear.extrinsic.type.v1.RuntimeCall.preimage_note_preimage_call:type_name -> sf.gear.metadata.type.v1.Preimage_NotePreimageCall
	114, // 113: sf.gear.extrinsic.type.v1.RuntimeCall.preimage_request_preimage_call:type_name -> sf.gear.metadata.type.v1.Preimage_RequestPreimageCall
	115, // 114: sf.gear.extrinsic.type.v1.RuntimeCall.preimage_unnote_preimage_call:type_name -> sf.gear.metadata.type.v1.Preimage_UnnotePreimageCall
	116, // 115: sf.gear.extrinsic.type.v1.RuntimeCall.preimage_unrequest_preimage_call:type_name -> sf.gear.metadata.type.v1.Preimage_UnrequestPreimageCall
	117, // 116: sf.gear.extrinsic.type.v1.RuntimeCall.proxy_add_proxy_call:type_name -> sf.gear.metadata.type.v1.Proxy_AddProxyCall
	118, // 117: sf.gear.extrinsic.type.v1.RuntimeCall.proxy_announce_call:type_name -> sf.gear.metadata.type.v1.Proxy_AnnounceCall
	119, // 118: sf.gear.extrinsic.type.v1.RuntimeCall.proxy_create_pure_call:type_name -> sf.gear.metadata.type.v1.Proxy_CreatePureCall
	120, // 119: sf.gear.extrinsic.type.v1.RuntimeCall.proxy_kill_pure_call:type_name -> sf.gear.metadata.type.v1.Proxy_KillPureCall
	121, // 120: sf.gear.extrinsic.type.v1.RuntimeCall.proxy_proxy_announced_call:type_name -> sf.gear.metadata.type.v1.Proxy_ProxyAnnouncedCall
	122, // 121: sf.gear.extrinsic.type.v1.RuntimeCall.proxy_proxy_call:type_name -> sf.gear.metadata.type.v1.Proxy_ProxyCall
	123, // 122: sf.gear.extrinsic.type.v1.RuntimeCall.proxy_reject_announcement_call:type_name -> sf.gear.metadata.type.v1.Proxy_RejectAnnouncementCall
	124, // 123: sf.gear.extrinsic.type.v1.RuntimeCall.proxy_remove_announcement_call:type_name -> sf.gear.metadata.type.v1.Proxy_RemoveAnnouncementCall
	125, // 124: sf.gear.extrinsic.type.v1.RuntimeCall.proxy_remove_proxy_call:type_name -> sf.gear.metadata.type.v1.Proxy_RemoveProxyCall
	126, // 125: sf.gear.extrinsic.type.v1.RuntimeCall.referenda_cancel_call:type_name -> sf.gear.metadata.type.v1.Referenda_CancelCall
	127, // 126: sf.gear.extrinsic.type.v1.RuntimeCall.referenda_kill_call:type_name -> sf.gear.metadata.type.v1.Referenda_KillCall
	128, // 127: sf.gear.extrinsic.type.v1.RuntimeCall.referenda_nudge_referendum_call:type_name -> sf.gear.metadata.type.v1.Referenda_NudgeReferendumCall
	129, // 128: sf.gear.extrinsic.type.v1.RuntimeCall.referenda_one_fewer_deciding_call:type_name -> sf.gear.metadata.type.v1.Referenda_OneFewerDecidingCall
	130, // 129: sf.gear.extrinsic.type.v1.RuntimeCall.referenda_place_decision_deposit_call:type_name -> sf.gear.metadata.type.v1.Referenda_PlaceDecisionDepositCall
	131, // 130: sf.gear.extrinsic.type.v1.RuntimeCall.referenda_refund_decision_deposit_call:type_name -> sf.gear.metadata.type.v1.Referenda_RefundDecisionDepositCall
	132, // 131: sf.gear.extrinsic.type.v1.RuntimeCall.referenda_refund_submission_deposit_call:type_name -> sf.gear.metadata.type.v1.Referenda_RefundSubmissionDepositCall
	133, // 132: sf.gear.extrinsic.type.v1.RuntimeCall.referenda_set_metadata_call:type_name -> sf.gear.metadata.type.v1.Referenda_SetMetadataCall
	134, // 133: sf.gear.extrinsic.type.v1.RuntimeCall.referenda_submit_call:type_name -> sf.gear.metadata.type.v1.Referenda_SubmitCall
	135, // 134: sf.gear.extrinsic.type.v1.RuntimeCall.scheduler_cancel_call:type_name -> sf.gear.metadata.type.v1.Scheduler_CancelCall
	136, // 135: sf.gear.extrinsic.type.v1.RuntimeCall.scheduler_cancel_named_call:type_name -> sf.gear.metadata.type.v1.Scheduler_CancelNamedCall
	137, // 136: sf.gear.extrinsic.type.v1.RuntimeCall.scheduler_schedule_after_call:type_name -> sf.gear.metadata.type.v1.Scheduler_ScheduleAfterCall
	138, // 137: sf.gear.extrinsic.type.v1.RuntimeCall.scheduler_schedule_call:type_name -> sf.gear.metadata.type.v1.Scheduler_ScheduleCall
	139, // 138: sf.gear.extrinsic.type.v1.RuntimeCall.scheduler_schedule_named_after_call:type_name -> sf.gear.metadata.type.v1.Scheduler_ScheduleNamedAfterCall
	140, // 139: sf.gear.extrinsic.type.v1.RuntimeCall.scheduler_schedule_named_call:type_name -> sf.gear.metadata.type.v1.Scheduler_ScheduleNamedCall
	141, // 140: sf.gear.extrinsic.type.v1.RuntimeCall.session_set_keys_call:type_name -> sf.gear.metadata.type.v1.Session_SetKeysCall
	142, // 141: sf.gear.extrinsic.type.v1.RuntimeCall.stakingrewards_align_supply_call:type_name -> sf.gear.metadata.type.v1.StakingRewards_AlignSupplyCall
	143, // 142: sf.gear.extrinsic.type.v1.RuntimeCall.stakingrewards_force_refill_call:type_name -> sf.gear.metadata.type.v1.StakingRewards_ForceRefillCall
	144, // 143: sf.gear.extrinsic.type.v1.RuntimeCall.stakingrewards_refill_call:type_name -> sf.gear.metadata.type.v1.StakingRewards_RefillCall
	145, // 144: sf.gear.extrinsic.type.v1.RuntimeCall.stakingrewards_withdraw_call:type_name -> sf.gear.metadata.type.v1.StakingRewards_WithdrawCall
	146, // 145: sf.gear.extrinsic.type.v1.RuntimeCall.staking_bond_call:type_name -> sf.gear.metadata.type.v1.Staking_BondCall
	147, // 146: sf.gear.extrinsic.type.v1.RuntimeCall.staking_bond_extra_call:type_name -> sf.gear.metadata.type.v1.Staking_BondExtraCall
	148, // 147: sf.gear.extrinsic.type.v1.RuntimeCall.staking_cancel_deferred_slash_call:type_name -> sf.gear.metadata.type.v1.Staking_CancelDeferredSlashCall
	149, // 148: sf.gear.extrinsic.type.v1.RuntimeCall.staking_chill_other_call:type_name -> sf.gear.metadata.type.v1.Staking_ChillOtherCall
	150, // 149: sf.gear.extrinsic.type.v1.RuntimeCall.staking_force_apply_min_commission_call:type_name -> sf.gear.metadata.type.v1.Staking_ForceApplyMinCommissionCall
	151, // 150: sf.gear.extrinsic.type.v1.RuntimeCall.staking_force_unstake_call:type_name -> sf.gear.metadata.type.v1.Staking_ForceUnstakeCall
	152, // 151: sf.gear.extrinsic.type.v1.RuntimeCall.staking_increase_validator_count_call:type_name -> sf.gear.metadata.type.v1.Staking_IncreaseValidatorCountCall
	153, // 152: sf.gear.extrinsic.type.v1.RuntimeCall.staking_kick_call:type_name -> sf.gear.metadata.type.v1.Staking_KickCall
	154, // 153: sf.gear.extrinsic.type.v1.RuntimeCall.staking_nominate_call:type_name -> sf.gear.metadata.type.v1.Staking_NominateCall
	155, // 154: sf.gear.extrinsic.type.v1.RuntimeCall.staking_payout_stakers_call:type_name -> sf.gear.metadata.type.v1.Staking_PayoutStakersCall
	156, // 155: sf.gear.extrinsic.type.v1.RuntimeCall.staking_reap_stash_call:type_name -> sf.gear.metadata.type.v1.Staking_ReapStashCall
	157, // 156: sf.gear.extrinsic.type.v1.RuntimeCall.staking_rebond_call:type_name -> sf.gear.metadata.type.v1.Staking_RebondCall
	158, // 157: sf.gear.extrinsic.type.v1.RuntimeCall.staking_scale_validator_count_call:type_name -> sf.gear.metadata.type.v1.Staking_ScaleValidatorCountCall
	159, // 158: sf.gear.extrinsic.type.v1.RuntimeCall.staking_set_invulnerables_call:type_name -> sf.gear.metadata.type.v1.Staking_SetInvulnerablesCall
	160, // 159: sf.gear.extrinsic.type.v1.RuntimeCall.staking_set_min_commission_call:type_name -> sf.gear.metadata.type.v1.Staking_SetMinCommissionCall
	161, // 160: sf.gear.extrinsic.type.v1.RuntimeCall.staking_set_payee_call:type_name -> sf.gear.metadata.type.v1.Staking_SetPayeeCall
	162, // 161: sf.gear.extrinsic.type.v1.RuntimeCall.staking_set_staking_configs_call:type_name -> sf.gear.metadata.type.v1.Staking_SetStakingConfigsCall
	163, // 162: sf.gear.extrinsic.type.v1.RuntimeCall.staking_set_validator_count_call:type_name -> sf.gear.metadata.type.v1.Staking_SetValidatorCountCall
	164, // 163: sf.gear.extrinsic.type.v1.RuntimeCall.staking_unbond_call:type_name -> sf.gear.metadata.type.v1.Staking_UnbondCall
	165, // 164: sf.gear.extrinsic.type.v1.RuntimeCall.staking_validate_call:type_name -> sf.gear.metadata.type.v1.Staking_ValidateCall
	166, // 165: sf.gear.extrinsic.type.v1.RuntimeCall.staking_withdraw_unbonded_call:type_name -> sf.gear.metadata.type.v1.Staking_WithdrawUnbondedCall
	167, // 166: sf.gear.extrinsic.type.v1.RuntimeCall.system_kill_prefix_call:type_name -> sf.gear.metadata.type.v1.System_KillPrefixCall
	168, // 167: sf.gear.extrinsic.type.v1.RuntimeCall.system_kill_storage_call:type_name -> sf.gear.metadata.type.v1.System_KillStorageCall
	169, // 168: sf.gear.extrinsic.type.v1.RuntimeCall.system_remark_call:type_name -> sf.gear.metadata.type.v1.System_RemarkCall
	170, // 169: sf.gear.extrinsic.type.v1.RuntimeCall.system_remark_with_event_call:type_name -> sf.gear.metadata.type.v1.System_RemarkWithEventCall
	171, // 170: sf.gear.extrinsic.type.v1.RuntimeCall.system_set_code_call:type_name -> sf.gear.metadata.type.v1.System_SetCodeCall
	172, // 171: sf.gear.extrinsic.type.v1.RuntimeCall.system_set_code_without_checks_call:type_name -> sf.gear.metadata.type.v1.System_SetCodeWithoutChecksCall
	173, // 172: sf.gear.extrinsic.type.v1.RuntimeCall.system_set_heap_pages_call:type_name -> sf.gear.metadata.type.v1.System_SetHeapPagesCall
	174, // 173: sf.gear.extrinsic.type.v1.RuntimeCall.system_set_storage_call:type_name -> sf.gear.metadata.type.v1.System_SetStorageCall
	175, // 174: sf.gear.extrinsic.type.v1.RuntimeCall.timestamp_set_call:type_name -> sf.gear.metadata.type.v1.Timestamp_SetCall
	176, // 175: sf.gear.extrinsic.type.v1.RuntimeCall.treasury_approve_proposal_call:type_name -> sf.gear.metadata.type.v1.Treasury_ApproveProposalCall
	177, // 176: sf.gear.extrinsic.type.v1.RuntimeCall.treasury_check_status_call:type_name -> sf.gear.metadata.type.v1.Treasury_CheckStatusCall
	178, // 177: sf.gear.extrinsic.type.v1.RuntimeCall.treasury_payout_call:type_name -> sf.gear.metadata.type.v1.Treasury_PayoutCall
	179, // 178: sf.gear.extrinsic.type.v1.RuntimeCall.treasury_propose_spend_call:type_name -> sf.gear.metadata.type.v1.Treasury_ProposeSpendCall
	180, // 179: sf.gear.extrinsic.type.v1.RuntimeCall.treasury_reject_proposal_call:type_name -> sf.gear.metadata.type.v1.Treasury_RejectProposalCall
	181, // 180: sf.gear.extrinsic.type.v1.RuntimeCall.treasury_remove_approval_call:type_name -> sf.gear.metadata.type.v1.Treasury_RemoveApprovalCall
	182, // 181: sf.gear.extrinsic.type.v1.RuntimeCall.treasury_spend_call:type_name -> sf.gear.metadata.type.v1.Treasury_SpendCall
	183, // 182: sf.gear.extrinsic.type.v1.RuntimeCall.treasury_spend_local_call:type_name -> sf.gear.metadata.type.v1.Treasury_SpendLocalCall
	184, // 183: sf.gear.extrinsic.type.v1.RuntimeCall.treasury_void_spend_call:type_name -> sf.gear.metadata.type.v1.Treasury_VoidSpendCall
	185, // 184: sf.gear.extrinsic.type.v1.RuntimeCall.utility_as_derivative_call:type_name -> sf.gear.metadata.type.v1.Utility_AsDerivativeCall
	186, // 185: sf.gear.extrinsic.type.v1.RuntimeCall.utility_batch_all_call:type_name -> sf.gear.metadata.type.v1.Utility_BatchAllCall
	187, // 186: sf.gear.extrinsic.type.v1.RuntimeCall.utility_batch_call:type_name -> sf.gear.metadata.type.v1.Utility_BatchCall
	188, // 187: sf.gear.extrinsic.type.v1.RuntimeCall.utility_dispatch_as_call:type_name -> sf.gear.metadata.type.v1.Utility_DispatchAsCall
	189, // 188: sf.gear.extrinsic.type.v1.RuntimeCall.utility_force_batch_call:type_name -> sf.gear.metadata.type.v1.Utility_ForceBatchCall
	190, // 189: sf.gear.extrinsic.type.v1.RuntimeCall.utility_with_weight_call:type_name -> sf.gear.metadata.type.v1.Utility_WithWeightCall
	191, // 190: sf.gear.extrinsic.type.v1.RuntimeCall.vesting_force_vested_transfer_call:type_name -> sf.gear.metadata.type.v1.Vesting_ForceVestedTransferCall
	192, // 191: sf.gear.extrinsic.type.v1.RuntimeCall.vesting_merge_schedules_call:type_name -> sf.gear.metadata.type.v1.Vesting_MergeSchedulesCall
	193, // 192: sf.gear.extrinsic.type.v1.RuntimeCall.vesting_vest_other_call:type_name -> sf.gear.metadata.type.v1.Vesting_VestOtherCall
	194, // 193: sf.gear.extrinsic.type.v1.RuntimeCall.vesting_vested_transfer_call:type_name -> sf.gear.metadata.type.v1.Vesting_VestedTransferCall
	195, // 194: sf.gear.extrinsic.type.v1.RuntimeCall.whitelist_dispatch_whitelisted_call_call:type_name -> sf.gear.metadata.type.v1.Whitelist_DispatchWhitelistedCallCall
	196, // 195: sf.gear.extrinsic.type.v1.RuntimeCall.whitelist_dispatch_whitelisted_call_with_preimage_call:type_name -> sf.gear.metadata.type.v1.Whitelist_DispatchWhitelistedCallWithPreimageCall
	197, // 196: sf.gear.extrinsic.type.v1.RuntimeCall.whitelist_remove_whitelisted_call_call:type_name -> sf.gear.metadata.type.v1.Whitelist_RemoveWhitelistedCallCall
	198, // 197: sf.gear.extrinsic.type.v1.RuntimeCall.whitelist_whitelist_call_call:type_name -> sf.gear.metadata.type.v1.Whitelist_WhitelistCallCall
	198, // [198:198] is the sub-list for method output_type
	198, // [198:198] is the sub-list for method input_type
	198, // [198:198] is the sub-list for extension type_name
	198, // [198:198] is the sub-list for extension extendee
	0,   // [0:198] is the sub-list for field type_name
}

func init() { file_sf_gear_extrinsic_type_v1_extrinsic_proto_init() }
func file_sf_gear_extrinsic_type_v1_extrinsic_proto_init() {
	if File_sf_gear_extrinsic_type_v1_extrinsic_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sf_gear_extrinsic_type_v1_extrinsic_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuntimeCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_sf_gear_extrinsic_type_v1_extrinsic_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*RuntimeCall_BabePlanConfigChangeCall)(nil),
		(*RuntimeCall_BabeReportEquivocationCall)(nil),
		(*RuntimeCall_BabeReportEquivocationUnsignedCall)(nil),
		(*RuntimeCall_BagslistPutInFrontOfCall)(nil),
		(*RuntimeCall_BagslistPutInFrontOfOtherCall)(nil),
		(*RuntimeCall_BagslistRebagCall)(nil),
		(*RuntimeCall_BalancesForceSetBalanceCall)(nil),
		(*RuntimeCall_BalancesForceTransferCall)(nil),
		(*RuntimeCall_BalancesForceUnreserveCall)(nil),
		(*RuntimeCall_BalancesTransferAllCall)(nil),
		(*RuntimeCall_BalancesTransferAllowDeathCall)(nil),
		(*RuntimeCall_BalancesTransferKeepAliveCall)(nil),
		(*RuntimeCall_BalancesUpgradeAccountsCall)(nil),
		(*RuntimeCall_BountiesAcceptCuratorCall)(nil),
		(*RuntimeCall_BountiesApproveBountyCall)(nil),
		(*RuntimeCall_BountiesAwardBountyCall)(nil),
		(*RuntimeCall_BountiesClaimBountyCall)(nil),
		(*RuntimeCall_BountiesCloseBountyCall)(nil),
		(*RuntimeCall_BountiesExtendBountyExpiryCall)(nil),
		(*RuntimeCall_BountiesProposeBountyCall)(nil),
		(*RuntimeCall_BountiesProposeCuratorCall)(nil),
		(*RuntimeCall_BountiesUnassignCuratorCall)(nil),
		(*RuntimeCall_ChildbountiesAcceptCuratorCall)(nil),
		(*RuntimeCall_ChildbountiesAddChildBountyCall)(nil),
		(*RuntimeCall_ChildbountiesAwardChildBountyCall)(nil),
		(*RuntimeCall_ChildbountiesClaimChildBountyCall)(nil),
		(*RuntimeCall_ChildbountiesCloseChildBountyCall)(nil),
		(*RuntimeCall_ChildbountiesProposeCuratorCall)(nil),
		(*RuntimeCall_ChildbountiesUnassignCuratorCall)(nil),
		(*RuntimeCall_ConvictionvotingDelegateCall)(nil),
		(*RuntimeCall_ConvictionvotingRemoveOtherVoteCall)(nil),
		(*RuntimeCall_ConvictionvotingRemoveVoteCall)(nil),
		(*RuntimeCall_ConvictionvotingUndelegateCall)(nil),
		(*RuntimeCall_ConvictionvotingUnlockCall)(nil),
		(*RuntimeCall_ConvictionvotingVoteCall)(nil),
		(*RuntimeCall_ElectionprovidermultiphaseGovernanceFallbackCall)(nil),
		(*RuntimeCall_ElectionprovidermultiphaseSetEmergencyElectionResultCall)(nil),
		(*RuntimeCall_ElectionprovidermultiphaseSetMinimumUntrustedScoreCall)(nil),
		(*RuntimeCall_ElectionprovidermultiphaseSubmitCall)(nil),
		(*RuntimeCall_ElectionprovidermultiphaseSubmitUnsignedCall)(nil),
		(*RuntimeCall_FellowshipcollectiveAddMemberCall)(nil),
		(*RuntimeCall_FellowshipcollectiveCleanupPollCall)(nil),
		(*RuntimeCall_FellowshipcollectiveDemoteMemberCall)(nil),
		(*RuntimeCall_FellowshipcollectivePromoteMemberCall)(nil),
		(*RuntimeCall_FellowshipcollectiveRemoveMemberCall)(nil),
		(*RuntimeCall_FellowshipcollectiveVoteCall)(nil),
		(*RuntimeCall_FellowshipreferendaCancelCall)(nil),
		(*RuntimeCall_FellowshipreferendaKillCall)(nil),
		(*RuntimeCall_FellowshipreferendaNudgeReferendumCall)(nil),
		(*RuntimeCall_FellowshipreferendaOneFewerDecidingCall)(nil),
		(*RuntimeCall_FellowshipreferendaPlaceDecisionDepositCall)(nil),
		(*RuntimeCall_FellowshipreferendaRefundDecisionDepositCall)(nil),
		(*RuntimeCall_FellowshipreferendaRefundSubmissionDepositCall)(nil),
		(*RuntimeCall_FellowshipreferendaSetMetadataCall)(nil),
		(*RuntimeCall_FellowshipreferendaSubmitCall)(nil),
		(*RuntimeCall_GearvoucherCallCall)(nil),
		(*RuntimeCall_GearvoucherCallDeprecatedCall)(nil),
		(*RuntimeCall_GearvoucherDeclineCall)(nil),
		(*RuntimeCall_GearvoucherIssueCall)(nil),
		(*RuntimeCall_GearvoucherRevokeCall)(nil),
		(*RuntimeCall_GearvoucherUpdateCall)(nil),
		(*RuntimeCall_GearClaimValueCall)(nil),
		(*RuntimeCall_GearCreateProgramCall)(nil),
		(*RuntimeCall_GearRunCall)(nil),
		(*RuntimeCall_GearSendMessageCall)(nil),
		(*RuntimeCall_GearSendReplyCall)(nil),
		(*RuntimeCall_GearSetExecuteInherentCall)(nil),
		(*RuntimeCall_GearUploadCodeCall)(nil),
		(*RuntimeCall_GearUploadProgramCall)(nil),
		(*RuntimeCall_GrandpaNoteStalledCall)(nil),
		(*RuntimeCall_GrandpaReportEquivocationCall)(nil),
		(*RuntimeCall_GrandpaReportEquivocationUnsignedCall)(nil),
		(*RuntimeCall_IdentityAddRegistrarCall)(nil),
		(*RuntimeCall_IdentityAddSubCall)(nil),
		(*RuntimeCall_IdentityCancelRequestCall)(nil),
		(*RuntimeCall_IdentityKillIdentityCall)(nil),
		(*RuntimeCall_IdentityProvideJudgementCall)(nil),
		(*RuntimeCall_IdentityRemoveSubCall)(nil),
		(*RuntimeCall_IdentityRenameSubCall)(nil),
		(*RuntimeCall_IdentityRequestJudgementCall)(nil),
		(*RuntimeCall_IdentitySetAccountIdCall)(nil),
		(*RuntimeCall_IdentitySetFeeCall)(nil),
		(*RuntimeCall_IdentitySetFieldsCall)(nil),
		(*RuntimeCall_IdentitySetIdentityCall)(nil),
		(*RuntimeCall_IdentitySetSubsCall)(nil),
		(*RuntimeCall_ImonlineHeartbeatCall)(nil),
		(*RuntimeCall_MultisigApproveAsMultiCall)(nil),
		(*RuntimeCall_MultisigAsMultiCall)(nil),
		(*RuntimeCall_MultisigAsMultiThreshold_1Call)(nil),
		(*RuntimeCall_MultisigCancelAsMultiCall)(nil),
		(*RuntimeCall_NominationpoolsAdjustPoolDepositCall)(nil),
		(*RuntimeCall_NominationpoolsBondExtraCall)(nil),
		(*RuntimeCall_NominationpoolsBondExtraOtherCall)(nil),
		(*RuntimeCall_NominationpoolsChillCall)(nil),
		(*RuntimeCall_NominationpoolsClaimCommissionCall)(nil),
		(*RuntimeCall_NominationpoolsClaimPayoutOtherCall)(nil),
		(*RuntimeCall_NominationpoolsCreateCall)(nil),
		(*RuntimeCall_NominationpoolsCreateWithPoolIdCall)(nil),
		(*RuntimeCall_NominationpoolsJoinCall)(nil),
		(*RuntimeCall_NominationpoolsNominateCall)(nil),
		(*RuntimeCall_NominationpoolsPoolWithdrawUnbondedCall)(nil),
		(*RuntimeCall_NominationpoolsSetClaimPermissionCall)(nil),
		(*RuntimeCall_NominationpoolsSetCommissionCall)(nil),
		(*RuntimeCall_NominationpoolsSetCommissionChangeRateCall)(nil),
		(*RuntimeCall_NominationpoolsSetCommissionMaxCall)(nil),
		(*RuntimeCall_NominationpoolsSetConfigsCall)(nil),
		(*RuntimeCall_NominationpoolsSetMetadataCall)(nil),
		(*RuntimeCall_NominationpoolsSetStateCall)(nil),
		(*RuntimeCall_NominationpoolsUnbondCall)(nil),
		(*RuntimeCall_NominationpoolsUpdateRolesCall)(nil),
		(*RuntimeCall_NominationpoolsWithdrawUnbondedCall)(nil),
		(*RuntimeCall_PreimageEnsureUpdatedCall)(nil),
		(*RuntimeCall_PreimageNotePreimageCall)(nil),
		(*RuntimeCall_PreimageRequestPreimageCall)(nil),
		(*RuntimeCall_PreimageUnnotePreimageCall)(nil),
		(*RuntimeCall_PreimageUnrequestPreimageCall)(nil),
		(*RuntimeCall_ProxyAddProxyCall)(nil),
		(*RuntimeCall_ProxyAnnounceCall)(nil),
		(*RuntimeCall_ProxyCreatePureCall)(nil),
		(*RuntimeCall_ProxyKillPureCall)(nil),
		(*RuntimeCall_ProxyProxyAnnouncedCall)(nil),
		(*RuntimeCall_ProxyProxyCall)(nil),
		(*RuntimeCall_ProxyRejectAnnouncementCall)(nil),
		(*RuntimeCall_ProxyRemoveAnnouncementCall)(nil),
		(*RuntimeCall_ProxyRemoveProxyCall)(nil),
		(*RuntimeCall_ReferendaCancelCall)(nil),
		(*RuntimeCall_ReferendaKillCall)(nil),
		(*RuntimeCall_ReferendaNudgeReferendumCall)(nil),
		(*RuntimeCall_ReferendaOneFewerDecidingCall)(nil),
		(*RuntimeCall_ReferendaPlaceDecisionDepositCall)(nil),
		(*RuntimeCall_ReferendaRefundDecisionDepositCall)(nil),
		(*RuntimeCall_ReferendaRefundSubmissionDepositCall)(nil),
		(*RuntimeCall_ReferendaSetMetadataCall)(nil),
		(*RuntimeCall_ReferendaSubmitCall)(nil),
		(*RuntimeCall_SchedulerCancelCall)(nil),
		(*RuntimeCall_SchedulerCancelNamedCall)(nil),
		(*RuntimeCall_SchedulerScheduleAfterCall)(nil),
		(*RuntimeCall_SchedulerScheduleCall)(nil),
		(*RuntimeCall_SchedulerScheduleNamedAfterCall)(nil),
		(*RuntimeCall_SchedulerScheduleNamedCall)(nil),
		(*RuntimeCall_SessionSetKeysCall)(nil),
		(*RuntimeCall_StakingrewardsAlignSupplyCall)(nil),
		(*RuntimeCall_StakingrewardsForceRefillCall)(nil),
		(*RuntimeCall_StakingrewardsRefillCall)(nil),
		(*RuntimeCall_StakingrewardsWithdrawCall)(nil),
		(*RuntimeCall_StakingBondCall)(nil),
		(*RuntimeCall_StakingBondExtraCall)(nil),
		(*RuntimeCall_StakingCancelDeferredSlashCall)(nil),
		(*RuntimeCall_StakingChillOtherCall)(nil),
		(*RuntimeCall_StakingForceApplyMinCommissionCall)(nil),
		(*RuntimeCall_StakingForceUnstakeCall)(nil),
		(*RuntimeCall_StakingIncreaseValidatorCountCall)(nil),
		(*RuntimeCall_StakingKickCall)(nil),
		(*RuntimeCall_StakingNominateCall)(nil),
		(*RuntimeCall_StakingPayoutStakersCall)(nil),
		(*RuntimeCall_StakingReapStashCall)(nil),
		(*RuntimeCall_StakingRebondCall)(nil),
		(*RuntimeCall_StakingScaleValidatorCountCall)(nil),
		(*RuntimeCall_StakingSetInvulnerablesCall)(nil),
		(*RuntimeCall_StakingSetMinCommissionCall)(nil),
		(*RuntimeCall_StakingSetPayeeCall)(nil),
		(*RuntimeCall_StakingSetStakingConfigsCall)(nil),
		(*RuntimeCall_StakingSetValidatorCountCall)(nil),
		(*RuntimeCall_StakingUnbondCall)(nil),
		(*RuntimeCall_StakingValidateCall)(nil),
		(*RuntimeCall_StakingWithdrawUnbondedCall)(nil),
		(*RuntimeCall_SystemKillPrefixCall)(nil),
		(*RuntimeCall_SystemKillStorageCall)(nil),
		(*RuntimeCall_SystemRemarkCall)(nil),
		(*RuntimeCall_SystemRemarkWithEventCall)(nil),
		(*RuntimeCall_SystemSetCodeCall)(nil),
		(*RuntimeCall_SystemSetCodeWithoutChecksCall)(nil),
		(*RuntimeCall_SystemSetHeapPagesCall)(nil),
		(*RuntimeCall_SystemSetStorageCall)(nil),
		(*RuntimeCall_TimestampSetCall)(nil),
		(*RuntimeCall_TreasuryApproveProposalCall)(nil),
		(*RuntimeCall_TreasuryCheckStatusCall)(nil),
		(*RuntimeCall_TreasuryPayoutCall)(nil),
		(*RuntimeCall_TreasuryProposeSpendCall)(nil),
		(*RuntimeCall_TreasuryRejectProposalCall)(nil),
		(*RuntimeCall_TreasuryRemoveApprovalCall)(nil),
		(*RuntimeCall_TreasurySpendCall)(nil),
		(*RuntimeCall_TreasurySpendLocalCall)(nil),
		(*RuntimeCall_TreasuryVoidSpendCall)(nil),
		(*RuntimeCall_UtilityAsDerivativeCall)(nil),
		(*RuntimeCall_UtilityBatchAllCall)(nil),
		(*RuntimeCall_UtilityBatchCall)(nil),
		(*RuntimeCall_UtilityDispatchAsCall)(nil),
		(*RuntimeCall_UtilityForceBatchCall)(nil),
		(*RuntimeCall_UtilityWithWeightCall)(nil),
		(*RuntimeCall_VestingForceVestedTransferCall)(nil),
		(*RuntimeCall_VestingMergeSchedulesCall)(nil),
		(*RuntimeCall_VestingVestOtherCall)(nil),
		(*RuntimeCall_VestingVestedTransferCall)(nil),
		(*RuntimeCall_WhitelistDispatchWhitelistedCallCall)(nil),
		(*RuntimeCall_WhitelistDispatchWhitelistedCallWithPreimageCall)(nil),
		(*RuntimeCall_WhitelistRemoveWhitelistedCallCall)(nil),
		(*RuntimeCall_WhitelistWhitelistCallCall)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sf_gear_extrinsic_type_v1_extrinsic_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sf_gear_extrinsic_type_v1_extrinsic_proto_goTypes,
		DependencyIndexes: file_sf_gear_extrinsic_type_v1_extrinsic_proto_depIdxs,
		MessageInfos:      file_sf_gear_extrinsic_type_v1_extrinsic_proto_msgTypes,
	}.Build()
	File_sf_gear_extrinsic_type_v1_extrinsic_proto = out.File
	file_sf_gear_extrinsic_type_v1_extrinsic_proto_rawDesc = nil
	file_sf_gear_extrinsic_type_v1_extrinsic_proto_goTypes = nil
	file_sf_gear_extrinsic_type_v1_extrinsic_proto_depIdxs = nil
}
