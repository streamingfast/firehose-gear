// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: sf/gear/metadata/type/v1/output.proto

package pbgear

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Vesting_Index struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 *Vesting_TupleNull `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Vesting_Index) Reset() {
	*x = Vesting_Index{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vesting_Index) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vesting_Index) ProtoMessage() {}

func (x *Vesting_Index) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vesting_Index.ProtoReflect.Descriptor instead.
func (*Vesting_Index) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{0}
}

func (x *Vesting_Index) GetValue0() *Vesting_TupleNull {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Treasury_TupleNull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *TupleNull `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Treasury_TupleNull) Reset() {
	*x = Treasury_TupleNull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Treasury_TupleNull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Treasury_TupleNull) ProtoMessage() {}

func (x *Treasury_TupleNull) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Treasury_TupleNull.ProtoReflect.Descriptor instead.
func (*Treasury_TupleNull) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{1}
}

func (x *Treasury_TupleNull) GetValue() *TupleNull {
	if x != nil {
		return x.Value
	}
	return nil
}

type Identity_Keccak256 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Identity_Keccak256) Reset() {
	*x = Identity_Keccak256{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_Keccak256) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_Keccak256) ProtoMessage() {}

func (x *Identity_Keccak256) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_Keccak256.ProtoReflect.Descriptor instead.
func (*Identity_Keccak256) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{2}
}

func (x *Identity_Keccak256) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Identity_SetSubsCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subs []*Identity_TupleSpCoreCryptoAccountId32PalletIdentityTypesData `protobuf:"bytes,1,rep,name=subs,proto3" json:"subs,omitempty"`
}

func (x *Identity_SetSubsCall) Reset() {
	*x = Identity_SetSubsCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_SetSubsCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_SetSubsCall) ProtoMessage() {}

func (x *Identity_SetSubsCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_SetSubsCall.ProtoReflect.Descriptor instead.
func (*Identity_SetSubsCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{3}
}

func (x *Identity_SetSubsCall) GetSubs() []*Identity_TupleSpCoreCryptoAccountId32PalletIdentityTypesData {
	if x != nil {
		return x.Subs
	}
	return nil
}

type NominationPools_Set struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 string `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *NominationPools_Set) Reset() {
	*x = NominationPools_Set{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NominationPools_Set) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NominationPools_Set) ProtoMessage() {}

func (x *NominationPools_Set) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NominationPools_Set.ProtoReflect.Descriptor instead.
func (*NominationPools_Set) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{4}
}

func (x *NominationPools_Set) GetValue0() string {
	if x != nil {
		return x.Value0
	}
	return ""
}

type ConvictionVoting_Locked6X struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConvictionVoting_Locked6X) Reset() {
	*x = ConvictionVoting_Locked6X{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConvictionVoting_Locked6X) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvictionVoting_Locked6X) ProtoMessage() {}

func (x *ConvictionVoting_Locked6X) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvictionVoting_Locked6X.ProtoReflect.Descriptor instead.
func (*ConvictionVoting_Locked6X) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{5}
}

type Identity_Raw24 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Identity_Raw24) Reset() {
	*x = Identity_Raw24{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_Raw24) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_Raw24) ProtoMessage() {}

func (x *Identity_Raw24) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_Raw24.ProtoReflect.Descriptor instead.
func (*Identity_Raw24) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{6}
}

func (x *Identity_Raw24) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Multisig_AsMultiCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Threshold        uint32                            `protobuf:"varint,1,opt,name=threshold,proto3" json:"threshold,omitempty"`
	OtherSignatories []*SpCoreCryptoAccountId32        `protobuf:"bytes,2,rep,name=other_signatories,json=otherSignatories,proto3" json:"other_signatories,omitempty"`
	MaybeTimepoint   *Multisig_PalletMultisigTimepoint `protobuf:"bytes,3,opt,name=maybe_timepoint,json=maybeTimepoint,proto3,oneof" json:"maybe_timepoint,omitempty"`
	// Types that are assignable to Call:
	//
	//	*Multisig_AsMultiCall_System
	//	*Multisig_AsMultiCall_Timestamp
	//	*Multisig_AsMultiCall_Babe
	//	*Multisig_AsMultiCall_Grandpa
	//	*Multisig_AsMultiCall_Balances
	//	*Multisig_AsMultiCall_Vesting
	//	*Multisig_AsMultiCall_BagsList
	//	*Multisig_AsMultiCall_ImOnline
	//	*Multisig_AsMultiCall_Staking
	//	*Multisig_AsMultiCall_Session
	//	*Multisig_AsMultiCall_Treasury
	//	*Multisig_AsMultiCall_Utility
	//	*Multisig_AsMultiCall_ConvictionVoting
	//	*Multisig_AsMultiCall_Referenda
	//	*Multisig_AsMultiCall_FellowshipCollective
	//	*Multisig_AsMultiCall_FellowshipReferenda
	//	*Multisig_AsMultiCall_Whitelist
	//	*Multisig_AsMultiCall_Scheduler
	//	*Multisig_AsMultiCall_Preimage
	//	*Multisig_AsMultiCall_Identity
	//	*Multisig_AsMultiCall_Proxy
	//	*Multisig_AsMultiCall_Multisig
	//	*Multisig_AsMultiCall_ElectionProviderMultiPhase
	//	*Multisig_AsMultiCall_Bounties
	//	*Multisig_AsMultiCall_ChildBounties
	//	*Multisig_AsMultiCall_NominationPools
	//	*Multisig_AsMultiCall_Gear
	//	*Multisig_AsMultiCall_StakingRewards
	//	*Multisig_AsMultiCall_GearVoucher
	Call      isMultisig_AsMultiCall_Call `protobuf_oneof:"call"`
	MaxWeight *SpWeightsWeightV2Weight    `protobuf:"bytes,33,opt,name=max_weight,json=maxWeight,proto3" json:"max_weight,omitempty"`
}

func (x *Multisig_AsMultiCall) Reset() {
	*x = Multisig_AsMultiCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Multisig_AsMultiCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Multisig_AsMultiCall) ProtoMessage() {}

func (x *Multisig_AsMultiCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Multisig_AsMultiCall.ProtoReflect.Descriptor instead.
func (*Multisig_AsMultiCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{7}
}

func (x *Multisig_AsMultiCall) GetThreshold() uint32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *Multisig_AsMultiCall) GetOtherSignatories() []*SpCoreCryptoAccountId32 {
	if x != nil {
		return x.OtherSignatories
	}
	return nil
}

func (x *Multisig_AsMultiCall) GetMaybeTimepoint() *Multisig_PalletMultisigTimepoint {
	if x != nil {
		return x.MaybeTimepoint
	}
	return nil
}

func (m *Multisig_AsMultiCall) GetCall() isMultisig_AsMultiCall_Call {
	if m != nil {
		return m.Call
	}
	return nil
}

func (x *Multisig_AsMultiCall) GetSystem() *SystemPallet {
	if x, ok := x.GetCall().(*Multisig_AsMultiCall_System); ok {
		return x.System
	}
	return nil
}

func (x *Multisig_AsMultiCall) GetTimestamp() *TimestampPallet {
	if x, ok := x.GetCall().(*Multisig_AsMultiCall_Timestamp); ok {
		return x.Timestamp
	}
	return nil
}

func (x *Multisig_AsMultiCall) GetBabe() *BabePallet {
	if x, ok := x.GetCall().(*Multisig_AsMultiCall_Babe); ok {
		return x.Babe
	}
	return nil
}

func (x *Multisig_AsMultiCall) GetGrandpa() *GrandpaPallet {
	if x, ok := x.GetCall().(*Multisig_AsMultiCall_Grandpa); ok {
		return x.Grandpa
	}
	return nil
}

func (x *Multisig_AsMultiCall) GetBalances() *BalancesPallet {
	if x, ok := x.GetCall().(*Multisig_AsMultiCall_Balances); ok {
		return x.Balances
	}
	return nil
}

func (x *Multisig_AsMultiCall) GetVesting() *VestingPallet {
	if x, ok := x.GetCall().(*Multisig_AsMultiCall_Vesting); ok {
		return x.Vesting
	}
	return nil
}

func (x *Multisig_AsMultiCall) GetBagsList() *BagsListPallet {
	if x, ok := x.GetCall().(*Multisig_AsMultiCall_BagsList); ok {
		return x.BagsList
	}
	return nil
}

func (x *Multisig_AsMultiCall) GetImOnline() *ImOnlinePallet {
	if x, ok := x.GetCall().(*Multisig_AsMultiCall_ImOnline); ok {
		return x.ImOnline
	}
	return nil
}

func (x *Multisig_AsMultiCall) GetStaking() *StakingPallet {
	if x, ok := x.GetCall().(*Multisig_AsMultiCall_Staking); ok {
		return x.Staking
	}
	return nil
}

func (x *Multisig_AsMultiCall) GetSession() *SessionPallet {
	if x, ok := x.GetCall().(*Multisig_AsMultiCall_Session); ok {
		return x.Session
	}
	return nil
}

func (x *Multisig_AsMultiCall) GetTreasury() *TreasuryPallet {
	if x, ok := x.GetCall().(*Multisig_AsMultiCall_Treasury); ok {
		return x.Treasury
	}
	return nil
}

func (x *Multisig_AsMultiCall) GetUtility() *UtilityPallet {
	if x, ok := x.GetCall().(*Multisig_AsMultiCall_Utility); ok {
		return x.Utility
	}
	return nil
}

func (x *Multisig_AsMultiCall) GetConvictionVoting() *ConvictionVotingPallet {
	if x, ok := x.GetCall().(*Multisig_AsMultiCall_ConvictionVoting); ok {
		return x.ConvictionVoting
	}
	return nil
}

func (x *Multisig_AsMultiCall) GetReferenda() *ReferendaPallet {
	if x, ok := x.GetCall().(*Multisig_AsMultiCall_Referenda); ok {
		return x.Referenda
	}
	return nil
}

func (x *Multisig_AsMultiCall) GetFellowshipCollective() *FellowshipCollectivePallet {
	if x, ok := x.GetCall().(*Multisig_AsMultiCall_FellowshipCollective); ok {
		return x.FellowshipCollective
	}
	return nil
}

func (x *Multisig_AsMultiCall) GetFellowshipReferenda() *FellowshipReferendaPallet {
	if x, ok := x.GetCall().(*Multisig_AsMultiCall_FellowshipReferenda); ok {
		return x.FellowshipReferenda
	}
	return nil
}

func (x *Multisig_AsMultiCall) GetWhitelist() *WhitelistPallet {
	if x, ok := x.GetCall().(*Multisig_AsMultiCall_Whitelist); ok {
		return x.Whitelist
	}
	return nil
}

func (x *Multisig_AsMultiCall) GetScheduler() *SchedulerPallet {
	if x, ok := x.GetCall().(*Multisig_AsMultiCall_Scheduler); ok {
		return x.Scheduler
	}
	return nil
}

func (x *Multisig_AsMultiCall) GetPreimage() *PreimagePallet {
	if x, ok := x.GetCall().(*Multisig_AsMultiCall_Preimage); ok {
		return x.Preimage
	}
	return nil
}

func (x *Multisig_AsMultiCall) GetIdentity() *IdentityPallet {
	if x, ok := x.GetCall().(*Multisig_AsMultiCall_Identity); ok {
		return x.Identity
	}
	return nil
}

func (x *Multisig_AsMultiCall) GetProxy() *ProxyPallet {
	if x, ok := x.GetCall().(*Multisig_AsMultiCall_Proxy); ok {
		return x.Proxy
	}
	return nil
}

func (x *Multisig_AsMultiCall) GetMultisig() *MultisigPallet {
	if x, ok := x.GetCall().(*Multisig_AsMultiCall_Multisig); ok {
		return x.Multisig
	}
	return nil
}

func (x *Multisig_AsMultiCall) GetElectionProviderMultiPhase() *ElectionProviderMultiPhasePallet {
	if x, ok := x.GetCall().(*Multisig_AsMultiCall_ElectionProviderMultiPhase); ok {
		return x.ElectionProviderMultiPhase
	}
	return nil
}

func (x *Multisig_AsMultiCall) GetBounties() *BountiesPallet {
	if x, ok := x.GetCall().(*Multisig_AsMultiCall_Bounties); ok {
		return x.Bounties
	}
	return nil
}

func (x *Multisig_AsMultiCall) GetChildBounties() *ChildBountiesPallet {
	if x, ok := x.GetCall().(*Multisig_AsMultiCall_ChildBounties); ok {
		return x.ChildBounties
	}
	return nil
}

func (x *Multisig_AsMultiCall) GetNominationPools() *NominationPoolsPallet {
	if x, ok := x.GetCall().(*Multisig_AsMultiCall_NominationPools); ok {
		return x.NominationPools
	}
	return nil
}

func (x *Multisig_AsMultiCall) GetGear() *GearPallet {
	if x, ok := x.GetCall().(*Multisig_AsMultiCall_Gear); ok {
		return x.Gear
	}
	return nil
}

func (x *Multisig_AsMultiCall) GetStakingRewards() *StakingRewardsPallet {
	if x, ok := x.GetCall().(*Multisig_AsMultiCall_StakingRewards); ok {
		return x.StakingRewards
	}
	return nil
}

func (x *Multisig_AsMultiCall) GetGearVoucher() *GearVoucherPallet {
	if x, ok := x.GetCall().(*Multisig_AsMultiCall_GearVoucher); ok {
		return x.GearVoucher
	}
	return nil
}

func (x *Multisig_AsMultiCall) GetMaxWeight() *SpWeightsWeightV2Weight {
	if x != nil {
		return x.MaxWeight
	}
	return nil
}

type isMultisig_AsMultiCall_Call interface {
	isMultisig_AsMultiCall_Call()
}

type Multisig_AsMultiCall_System struct {
	System *SystemPallet `protobuf:"bytes,4,opt,name=system,proto3,oneof"`
}

type Multisig_AsMultiCall_Timestamp struct {
	Timestamp *TimestampPallet `protobuf:"bytes,5,opt,name=timestamp,proto3,oneof"`
}

type Multisig_AsMultiCall_Babe struct {
	Babe *BabePallet `protobuf:"bytes,6,opt,name=babe,proto3,oneof"`
}

type Multisig_AsMultiCall_Grandpa struct {
	Grandpa *GrandpaPallet `protobuf:"bytes,7,opt,name=grandpa,proto3,oneof"`
}

type Multisig_AsMultiCall_Balances struct {
	Balances *BalancesPallet `protobuf:"bytes,8,opt,name=balances,proto3,oneof"`
}

type Multisig_AsMultiCall_Vesting struct {
	Vesting *VestingPallet `protobuf:"bytes,9,opt,name=vesting,proto3,oneof"`
}

type Multisig_AsMultiCall_BagsList struct {
	BagsList *BagsListPallet `protobuf:"bytes,10,opt,name=bags_list,json=bagsList,proto3,oneof"`
}

type Multisig_AsMultiCall_ImOnline struct {
	ImOnline *ImOnlinePallet `protobuf:"bytes,11,opt,name=im_online,json=imOnline,proto3,oneof"`
}

type Multisig_AsMultiCall_Staking struct {
	Staking *StakingPallet `protobuf:"bytes,12,opt,name=staking,proto3,oneof"`
}

type Multisig_AsMultiCall_Session struct {
	Session *SessionPallet `protobuf:"bytes,13,opt,name=session,proto3,oneof"`
}

type Multisig_AsMultiCall_Treasury struct {
	Treasury *TreasuryPallet `protobuf:"bytes,14,opt,name=treasury,proto3,oneof"`
}

type Multisig_AsMultiCall_Utility struct {
	Utility *UtilityPallet `protobuf:"bytes,15,opt,name=utility,proto3,oneof"`
}

type Multisig_AsMultiCall_ConvictionVoting struct {
	ConvictionVoting *ConvictionVotingPallet `protobuf:"bytes,16,opt,name=conviction_voting,json=convictionVoting,proto3,oneof"`
}

type Multisig_AsMultiCall_Referenda struct {
	Referenda *ReferendaPallet `protobuf:"bytes,17,opt,name=referenda,proto3,oneof"`
}

type Multisig_AsMultiCall_FellowshipCollective struct {
	FellowshipCollective *FellowshipCollectivePallet `protobuf:"bytes,18,opt,name=fellowship_collective,json=fellowshipCollective,proto3,oneof"`
}

type Multisig_AsMultiCall_FellowshipReferenda struct {
	FellowshipReferenda *FellowshipReferendaPallet `protobuf:"bytes,19,opt,name=fellowship_referenda,json=fellowshipReferenda,proto3,oneof"`
}

type Multisig_AsMultiCall_Whitelist struct {
	Whitelist *WhitelistPallet `protobuf:"bytes,20,opt,name=whitelist,proto3,oneof"`
}

type Multisig_AsMultiCall_Scheduler struct {
	Scheduler *SchedulerPallet `protobuf:"bytes,21,opt,name=scheduler,proto3,oneof"`
}

type Multisig_AsMultiCall_Preimage struct {
	Preimage *PreimagePallet `protobuf:"bytes,22,opt,name=preimage,proto3,oneof"`
}

type Multisig_AsMultiCall_Identity struct {
	Identity *IdentityPallet `protobuf:"bytes,23,opt,name=identity,proto3,oneof"`
}

type Multisig_AsMultiCall_Proxy struct {
	Proxy *ProxyPallet `protobuf:"bytes,24,opt,name=proxy,proto3,oneof"`
}

type Multisig_AsMultiCall_Multisig struct {
	Multisig *MultisigPallet `protobuf:"bytes,25,opt,name=multisig,proto3,oneof"`
}

type Multisig_AsMultiCall_ElectionProviderMultiPhase struct {
	ElectionProviderMultiPhase *ElectionProviderMultiPhasePallet `protobuf:"bytes,26,opt,name=election_provider_multi_phase,json=electionProviderMultiPhase,proto3,oneof"`
}

type Multisig_AsMultiCall_Bounties struct {
	Bounties *BountiesPallet `protobuf:"bytes,27,opt,name=bounties,proto3,oneof"`
}

type Multisig_AsMultiCall_ChildBounties struct {
	ChildBounties *ChildBountiesPallet `protobuf:"bytes,28,opt,name=child_bounties,json=childBounties,proto3,oneof"`
}

type Multisig_AsMultiCall_NominationPools struct {
	NominationPools *NominationPoolsPallet `protobuf:"bytes,29,opt,name=nomination_pools,json=nominationPools,proto3,oneof"`
}

type Multisig_AsMultiCall_Gear struct {
	Gear *GearPallet `protobuf:"bytes,30,opt,name=gear,proto3,oneof"`
}

type Multisig_AsMultiCall_StakingRewards struct {
	StakingRewards *StakingRewardsPallet `protobuf:"bytes,31,opt,name=staking_rewards,json=stakingRewards,proto3,oneof"`
}

type Multisig_AsMultiCall_GearVoucher struct {
	GearVoucher *GearVoucherPallet `protobuf:"bytes,32,opt,name=gear_voucher,json=gearVoucher,proto3,oneof"`
}

func (*Multisig_AsMultiCall_System) isMultisig_AsMultiCall_Call() {}

func (*Multisig_AsMultiCall_Timestamp) isMultisig_AsMultiCall_Call() {}

func (*Multisig_AsMultiCall_Babe) isMultisig_AsMultiCall_Call() {}

func (*Multisig_AsMultiCall_Grandpa) isMultisig_AsMultiCall_Call() {}

func (*Multisig_AsMultiCall_Balances) isMultisig_AsMultiCall_Call() {}

func (*Multisig_AsMultiCall_Vesting) isMultisig_AsMultiCall_Call() {}

func (*Multisig_AsMultiCall_BagsList) isMultisig_AsMultiCall_Call() {}

func (*Multisig_AsMultiCall_ImOnline) isMultisig_AsMultiCall_Call() {}

func (*Multisig_AsMultiCall_Staking) isMultisig_AsMultiCall_Call() {}

func (*Multisig_AsMultiCall_Session) isMultisig_AsMultiCall_Call() {}

func (*Multisig_AsMultiCall_Treasury) isMultisig_AsMultiCall_Call() {}

func (*Multisig_AsMultiCall_Utility) isMultisig_AsMultiCall_Call() {}

func (*Multisig_AsMultiCall_ConvictionVoting) isMultisig_AsMultiCall_Call() {}

func (*Multisig_AsMultiCall_Referenda) isMultisig_AsMultiCall_Call() {}

func (*Multisig_AsMultiCall_FellowshipCollective) isMultisig_AsMultiCall_Call() {}

func (*Multisig_AsMultiCall_FellowshipReferenda) isMultisig_AsMultiCall_Call() {}

func (*Multisig_AsMultiCall_Whitelist) isMultisig_AsMultiCall_Call() {}

func (*Multisig_AsMultiCall_Scheduler) isMultisig_AsMultiCall_Call() {}

func (*Multisig_AsMultiCall_Preimage) isMultisig_AsMultiCall_Call() {}

func (*Multisig_AsMultiCall_Identity) isMultisig_AsMultiCall_Call() {}

func (*Multisig_AsMultiCall_Proxy) isMultisig_AsMultiCall_Call() {}

func (*Multisig_AsMultiCall_Multisig) isMultisig_AsMultiCall_Call() {}

func (*Multisig_AsMultiCall_ElectionProviderMultiPhase) isMultisig_AsMultiCall_Call() {}

func (*Multisig_AsMultiCall_Bounties) isMultisig_AsMultiCall_Call() {}

func (*Multisig_AsMultiCall_ChildBounties) isMultisig_AsMultiCall_Call() {}

func (*Multisig_AsMultiCall_NominationPools) isMultisig_AsMultiCall_Call() {}

func (*Multisig_AsMultiCall_Gear) isMultisig_AsMultiCall_Call() {}

func (*Multisig_AsMultiCall_StakingRewards) isMultisig_AsMultiCall_Call() {}

func (*Multisig_AsMultiCall_GearVoucher) isMultisig_AsMultiCall_Call() {}

type Vesting_MergeSchedulesCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schedule1Index uint32 `protobuf:"varint,1,opt,name=schedule1_index,json=schedule1Index,proto3" json:"schedule1_index,omitempty"`
	Schedule2Index uint32 `protobuf:"varint,2,opt,name=schedule2_index,json=schedule2Index,proto3" json:"schedule2_index,omitempty"`
}

func (x *Vesting_MergeSchedulesCall) Reset() {
	*x = Vesting_MergeSchedulesCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vesting_MergeSchedulesCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vesting_MergeSchedulesCall) ProtoMessage() {}

func (x *Vesting_MergeSchedulesCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vesting_MergeSchedulesCall.ProtoReflect.Descriptor instead.
func (*Vesting_MergeSchedulesCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{8}
}

func (x *Vesting_MergeSchedulesCall) GetSchedule1Index() uint32 {
	if x != nil {
		return x.Schedule1Index
	}
	return 0
}

func (x *Vesting_MergeSchedulesCall) GetSchedule2Index() uint32 {
	if x != nil {
		return x.Schedule2Index
	}
	return 0
}

type Staking_SetInvulnerablesCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Invulnerables []*SpCoreCryptoAccountId32 `protobuf:"bytes,1,rep,name=invulnerables,proto3" json:"invulnerables,omitempty"`
}

func (x *Staking_SetInvulnerablesCall) Reset() {
	*x = Staking_SetInvulnerablesCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staking_SetInvulnerablesCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staking_SetInvulnerablesCall) ProtoMessage() {}

func (x *Staking_SetInvulnerablesCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staking_SetInvulnerablesCall.ProtoReflect.Descriptor instead.
func (*Staking_SetInvulnerablesCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{9}
}

func (x *Staking_SetInvulnerablesCall) GetInvulnerables() []*SpCoreCryptoAccountId32 {
	if x != nil {
		return x.Invulnerables
	}
	return nil
}

type Staking_ForceUnstakeCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stash            *SpCoreCryptoAccountId32 `protobuf:"bytes,1,opt,name=stash,proto3" json:"stash,omitempty"`
	NumSlashingSpans uint32                   `protobuf:"varint,2,opt,name=num_slashing_spans,json=numSlashingSpans,proto3" json:"num_slashing_spans,omitempty"`
}

func (x *Staking_ForceUnstakeCall) Reset() {
	*x = Staking_ForceUnstakeCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staking_ForceUnstakeCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staking_ForceUnstakeCall) ProtoMessage() {}

func (x *Staking_ForceUnstakeCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staking_ForceUnstakeCall.ProtoReflect.Descriptor instead.
func (*Staking_ForceUnstakeCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{10}
}

func (x *Staking_ForceUnstakeCall) GetStash() *SpCoreCryptoAccountId32 {
	if x != nil {
		return x.Stash
	}
	return nil
}

func (x *Staking_ForceUnstakeCall) GetNumSlashingSpans() uint32 {
	if x != nil {
		return x.NumSlashingSpans
	}
	return 0
}

type Treasury_PayoutCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *Treasury_PayoutCall) Reset() {
	*x = Treasury_PayoutCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Treasury_PayoutCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Treasury_PayoutCall) ProtoMessage() {}

func (x *Treasury_PayoutCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Treasury_PayoutCall.ProtoReflect.Descriptor instead.
func (*Treasury_PayoutCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{11}
}

func (x *Treasury_PayoutCall) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type ConvictionVoting_Id struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 *SpCoreCryptoAccountId32 `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *ConvictionVoting_Id) Reset() {
	*x = ConvictionVoting_Id{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConvictionVoting_Id) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvictionVoting_Id) ProtoMessage() {}

func (x *ConvictionVoting_Id) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvictionVoting_Id.ProtoReflect.Descriptor instead.
func (*ConvictionVoting_Id) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{12}
}

func (x *ConvictionVoting_Id) GetValue0() *SpCoreCryptoAccountId32 {
	if x != nil {
		return x.Value0
	}
	return nil
}

type ChildBounties_ClaimChildBountyCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentBountyId uint32 `protobuf:"varint,1,opt,name=parent_bounty_id,json=parentBountyId,proto3" json:"parent_bounty_id,omitempty"`
	ChildBountyId  uint32 `protobuf:"varint,2,opt,name=child_bounty_id,json=childBountyId,proto3" json:"child_bounty_id,omitempty"`
}

func (x *ChildBounties_ClaimChildBountyCall) Reset() {
	*x = ChildBounties_ClaimChildBountyCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChildBounties_ClaimChildBountyCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChildBounties_ClaimChildBountyCall) ProtoMessage() {}

func (x *ChildBounties_ClaimChildBountyCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChildBounties_ClaimChildBountyCall.ProtoReflect.Descriptor instead.
func (*ChildBounties_ClaimChildBountyCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{13}
}

func (x *ChildBounties_ClaimChildBountyCall) GetParentBountyId() uint32 {
	if x != nil {
		return x.ParentBountyId
	}
	return 0
}

func (x *ChildBounties_ClaimChildBountyCall) GetChildBountyId() uint32 {
	if x != nil {
		return x.ChildBountyId
	}
	return 0
}

type NominationPools_MaxMembers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*NominationPools_MaxMembers_Noop
	//	*NominationPools_MaxMembers_Set
	//	*NominationPools_MaxMembers_Remove
	Value isNominationPools_MaxMembers_Value `protobuf_oneof:"value"`
}

func (x *NominationPools_MaxMembers) Reset() {
	*x = NominationPools_MaxMembers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NominationPools_MaxMembers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NominationPools_MaxMembers) ProtoMessage() {}

func (x *NominationPools_MaxMembers) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NominationPools_MaxMembers.ProtoReflect.Descriptor instead.
func (*NominationPools_MaxMembers) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{14}
}

func (m *NominationPools_MaxMembers) GetValue() isNominationPools_MaxMembers_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *NominationPools_MaxMembers) GetNoop() *NominationPools_Noop {
	if x, ok := x.GetValue().(*NominationPools_MaxMembers_Noop); ok {
		return x.Noop
	}
	return nil
}

func (x *NominationPools_MaxMembers) GetSet() *NominationPools_Set {
	if x, ok := x.GetValue().(*NominationPools_MaxMembers_Set); ok {
		return x.Set
	}
	return nil
}

func (x *NominationPools_MaxMembers) GetRemove() *NominationPools_Remove {
	if x, ok := x.GetValue().(*NominationPools_MaxMembers_Remove); ok {
		return x.Remove
	}
	return nil
}

type isNominationPools_MaxMembers_Value interface {
	isNominationPools_MaxMembers_Value()
}

type NominationPools_MaxMembers_Noop struct {
	Noop *NominationPools_Noop `protobuf:"bytes,1,opt,name=noop,proto3,oneof"`
}

type NominationPools_MaxMembers_Set struct {
	Set *NominationPools_Set `protobuf:"bytes,2,opt,name=set,proto3,oneof"`
}

type NominationPools_MaxMembers_Remove struct {
	Remove *NominationPools_Remove `protobuf:"bytes,3,opt,name=remove,proto3,oneof"`
}

func (*NominationPools_MaxMembers_Noop) isNominationPools_MaxMembers_Value() {}

func (*NominationPools_MaxMembers_Set) isNominationPools_MaxMembers_Value() {}

func (*NominationPools_MaxMembers_Remove) isNominationPools_MaxMembers_Value() {}

type System_RemarkWithEventCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Remark []byte `protobuf:"bytes,1,opt,name=remark,proto3" json:"remark,omitempty"`
}

func (x *System_RemarkWithEventCall) Reset() {
	*x = System_RemarkWithEventCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_RemarkWithEventCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_RemarkWithEventCall) ProtoMessage() {}

func (x *System_RemarkWithEventCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_RemarkWithEventCall.ProtoReflect.Descriptor instead.
func (*System_RemarkWithEventCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{15}
}

func (x *System_RemarkWithEventCall) GetRemark() []byte {
	if x != nil {
		return x.Remark
	}
	return nil
}

type ConvictionVoting_To struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*ConvictionVoting_To_Id
	//	*ConvictionVoting_To_Index
	//	*ConvictionVoting_To_Raw
	//	*ConvictionVoting_To_Address32
	//	*ConvictionVoting_To_Address20
	Value isConvictionVoting_To_Value `protobuf_oneof:"value"`
}

func (x *ConvictionVoting_To) Reset() {
	*x = ConvictionVoting_To{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConvictionVoting_To) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvictionVoting_To) ProtoMessage() {}

func (x *ConvictionVoting_To) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvictionVoting_To.ProtoReflect.Descriptor instead.
func (*ConvictionVoting_To) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{16}
}

func (m *ConvictionVoting_To) GetValue() isConvictionVoting_To_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *ConvictionVoting_To) GetId() *ConvictionVoting_Id {
	if x, ok := x.GetValue().(*ConvictionVoting_To_Id); ok {
		return x.Id
	}
	return nil
}

func (x *ConvictionVoting_To) GetIndex() *ConvictionVoting_Index {
	if x, ok := x.GetValue().(*ConvictionVoting_To_Index); ok {
		return x.Index
	}
	return nil
}

func (x *ConvictionVoting_To) GetRaw() *ConvictionVoting_Raw {
	if x, ok := x.GetValue().(*ConvictionVoting_To_Raw); ok {
		return x.Raw
	}
	return nil
}

func (x *ConvictionVoting_To) GetAddress32() *ConvictionVoting_Address32 {
	if x, ok := x.GetValue().(*ConvictionVoting_To_Address32); ok {
		return x.Address32
	}
	return nil
}

func (x *ConvictionVoting_To) GetAddress20() *ConvictionVoting_Address20 {
	if x, ok := x.GetValue().(*ConvictionVoting_To_Address20); ok {
		return x.Address20
	}
	return nil
}

type isConvictionVoting_To_Value interface {
	isConvictionVoting_To_Value()
}

type ConvictionVoting_To_Id struct {
	Id *ConvictionVoting_Id `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type ConvictionVoting_To_Index struct {
	Index *ConvictionVoting_Index `protobuf:"bytes,2,opt,name=index,proto3,oneof"`
}

type ConvictionVoting_To_Raw struct {
	Raw *ConvictionVoting_Raw `protobuf:"bytes,3,opt,name=raw,proto3,oneof"`
}

type ConvictionVoting_To_Address32 struct {
	Address32 *ConvictionVoting_Address32 `protobuf:"bytes,4,opt,name=address32,proto3,oneof"`
}

type ConvictionVoting_To_Address20 struct {
	Address20 *ConvictionVoting_Address20 `protobuf:"bytes,5,opt,name=address20,proto3,oneof"`
}

func (*ConvictionVoting_To_Id) isConvictionVoting_To_Value() {}

func (*ConvictionVoting_To_Index) isConvictionVoting_To_Value() {}

func (*ConvictionVoting_To_Raw) isConvictionVoting_To_Value() {}

func (*ConvictionVoting_To_Address32) isConvictionVoting_To_Value() {}

func (*ConvictionVoting_To_Address20) isConvictionVoting_To_Value() {}

type ChildBounties_TupleNull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *TupleNull `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ChildBounties_TupleNull) Reset() {
	*x = ChildBounties_TupleNull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChildBounties_TupleNull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChildBounties_TupleNull) ProtoMessage() {}

func (x *ChildBounties_TupleNull) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChildBounties_TupleNull.ProtoReflect.Descriptor instead.
func (*ChildBounties_TupleNull) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{17}
}

func (x *ChildBounties_TupleNull) GetValue() *TupleNull {
	if x != nil {
		return x.Value
	}
	return nil
}

type Proxy_NonTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Proxy_NonTransfer) Reset() {
	*x = Proxy_NonTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proxy_NonTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proxy_NonTransfer) ProtoMessage() {}

func (x *Proxy_NonTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proxy_NonTransfer.ProtoReflect.Descriptor instead.
func (*Proxy_NonTransfer) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{18}
}

type Proxy_CancelProxy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Proxy_CancelProxy) Reset() {
	*x = Proxy_CancelProxy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proxy_CancelProxy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proxy_CancelProxy) ProtoMessage() {}

func (x *Proxy_CancelProxy) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proxy_CancelProxy.ProtoReflect.Descriptor instead.
func (*Proxy_CancelProxy) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{19}
}

type GearVoucher_AppendPrograms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*GearVoucher_AppendPrograms_None
	//	*GearVoucher_AppendPrograms_Some
	Value isGearVoucher_AppendPrograms_Value `protobuf_oneof:"value"`
}

func (x *GearVoucher_AppendPrograms) Reset() {
	*x = GearVoucher_AppendPrograms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GearVoucher_AppendPrograms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GearVoucher_AppendPrograms) ProtoMessage() {}

func (x *GearVoucher_AppendPrograms) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GearVoucher_AppendPrograms.ProtoReflect.Descriptor instead.
func (*GearVoucher_AppendPrograms) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{20}
}

func (m *GearVoucher_AppendPrograms) GetValue() isGearVoucher_AppendPrograms_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *GearVoucher_AppendPrograms) GetNone() *GearVoucher_None {
	if x, ok := x.GetValue().(*GearVoucher_AppendPrograms_None); ok {
		return x.None
	}
	return nil
}

func (x *GearVoucher_AppendPrograms) GetSome() *GearVoucher_Some {
	if x, ok := x.GetValue().(*GearVoucher_AppendPrograms_Some); ok {
		return x.Some
	}
	return nil
}

type isGearVoucher_AppendPrograms_Value interface {
	isGearVoucher_AppendPrograms_Value()
}

type GearVoucher_AppendPrograms_None struct {
	None *GearVoucher_None `protobuf:"bytes,1,opt,name=none,proto3,oneof"`
}

type GearVoucher_AppendPrograms_Some struct {
	Some *GearVoucher_Some `protobuf:"bytes,2,opt,name=some,proto3,oneof"`
}

func (*GearVoucher_AppendPrograms_None) isGearVoucher_AppendPrograms_Value() {}

func (*GearVoucher_AppendPrograms_Some) isGearVoucher_AppendPrograms_Value() {}

type TreasuryPallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Call:
	//
	//	*TreasuryPallet_ProposeSpendCall
	//	*TreasuryPallet_RejectProposalCall
	//	*TreasuryPallet_ApproveProposalCall
	//	*TreasuryPallet_SpendLocalCall
	//	*TreasuryPallet_RemoveApprovalCall
	//	*TreasuryPallet_SpendCall
	//	*TreasuryPallet_PayoutCall
	//	*TreasuryPallet_CheckStatusCall
	//	*TreasuryPallet_VoidSpendCall
	Call isTreasuryPallet_Call `protobuf_oneof:"call"`
}

func (x *TreasuryPallet) Reset() {
	*x = TreasuryPallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreasuryPallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreasuryPallet) ProtoMessage() {}

func (x *TreasuryPallet) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreasuryPallet.ProtoReflect.Descriptor instead.
func (*TreasuryPallet) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{21}
}

func (m *TreasuryPallet) GetCall() isTreasuryPallet_Call {
	if m != nil {
		return m.Call
	}
	return nil
}

func (x *TreasuryPallet) GetProposeSpendCall() *Treasury_ProposeSpendCall {
	if x, ok := x.GetCall().(*TreasuryPallet_ProposeSpendCall); ok {
		return x.ProposeSpendCall
	}
	return nil
}

func (x *TreasuryPallet) GetRejectProposalCall() *Treasury_RejectProposalCall {
	if x, ok := x.GetCall().(*TreasuryPallet_RejectProposalCall); ok {
		return x.RejectProposalCall
	}
	return nil
}

func (x *TreasuryPallet) GetApproveProposalCall() *Treasury_ApproveProposalCall {
	if x, ok := x.GetCall().(*TreasuryPallet_ApproveProposalCall); ok {
		return x.ApproveProposalCall
	}
	return nil
}

func (x *TreasuryPallet) GetSpendLocalCall() *Treasury_SpendLocalCall {
	if x, ok := x.GetCall().(*TreasuryPallet_SpendLocalCall); ok {
		return x.SpendLocalCall
	}
	return nil
}

func (x *TreasuryPallet) GetRemoveApprovalCall() *Treasury_RemoveApprovalCall {
	if x, ok := x.GetCall().(*TreasuryPallet_RemoveApprovalCall); ok {
		return x.RemoveApprovalCall
	}
	return nil
}

func (x *TreasuryPallet) GetSpendCall() *Treasury_SpendCall {
	if x, ok := x.GetCall().(*TreasuryPallet_SpendCall); ok {
		return x.SpendCall
	}
	return nil
}

func (x *TreasuryPallet) GetPayoutCall() *Treasury_PayoutCall {
	if x, ok := x.GetCall().(*TreasuryPallet_PayoutCall); ok {
		return x.PayoutCall
	}
	return nil
}

func (x *TreasuryPallet) GetCheckStatusCall() *Treasury_CheckStatusCall {
	if x, ok := x.GetCall().(*TreasuryPallet_CheckStatusCall); ok {
		return x.CheckStatusCall
	}
	return nil
}

func (x *TreasuryPallet) GetVoidSpendCall() *Treasury_VoidSpendCall {
	if x, ok := x.GetCall().(*TreasuryPallet_VoidSpendCall); ok {
		return x.VoidSpendCall
	}
	return nil
}

type isTreasuryPallet_Call interface {
	isTreasuryPallet_Call()
}

type TreasuryPallet_ProposeSpendCall struct {
	ProposeSpendCall *Treasury_ProposeSpendCall `protobuf:"bytes,1,opt,name=propose_spend_call,json=proposeSpendCall,proto3,oneof"`
}

type TreasuryPallet_RejectProposalCall struct {
	RejectProposalCall *Treasury_RejectProposalCall `protobuf:"bytes,2,opt,name=reject_proposal_call,json=rejectProposalCall,proto3,oneof"`
}

type TreasuryPallet_ApproveProposalCall struct {
	ApproveProposalCall *Treasury_ApproveProposalCall `protobuf:"bytes,3,opt,name=approve_proposal_call,json=approveProposalCall,proto3,oneof"`
}

type TreasuryPallet_SpendLocalCall struct {
	SpendLocalCall *Treasury_SpendLocalCall `protobuf:"bytes,4,opt,name=spend_local_call,json=spendLocalCall,proto3,oneof"`
}

type TreasuryPallet_RemoveApprovalCall struct {
	RemoveApprovalCall *Treasury_RemoveApprovalCall `protobuf:"bytes,5,opt,name=remove_approval_call,json=removeApprovalCall,proto3,oneof"`
}

type TreasuryPallet_SpendCall struct {
	SpendCall *Treasury_SpendCall `protobuf:"bytes,6,opt,name=spend_call,json=spendCall,proto3,oneof"`
}

type TreasuryPallet_PayoutCall struct {
	PayoutCall *Treasury_PayoutCall `protobuf:"bytes,7,opt,name=payout_call,json=payoutCall,proto3,oneof"`
}

type TreasuryPallet_CheckStatusCall struct {
	CheckStatusCall *Treasury_CheckStatusCall `protobuf:"bytes,8,opt,name=check_status_call,json=checkStatusCall,proto3,oneof"`
}

type TreasuryPallet_VoidSpendCall struct {
	VoidSpendCall *Treasury_VoidSpendCall `protobuf:"bytes,9,opt,name=void_spend_call,json=voidSpendCall,proto3,oneof"`
}

func (*TreasuryPallet_ProposeSpendCall) isTreasuryPallet_Call() {}

func (*TreasuryPallet_RejectProposalCall) isTreasuryPallet_Call() {}

func (*TreasuryPallet_ApproveProposalCall) isTreasuryPallet_Call() {}

func (*TreasuryPallet_SpendLocalCall) isTreasuryPallet_Call() {}

func (*TreasuryPallet_RemoveApprovalCall) isTreasuryPallet_Call() {}

func (*TreasuryPallet_SpendCall) isTreasuryPallet_Call() {}

func (*TreasuryPallet_PayoutCall) isTreasuryPallet_Call() {}

func (*TreasuryPallet_CheckStatusCall) isTreasuryPallet_Call() {}

func (*TreasuryPallet_VoidSpendCall) isTreasuryPallet_Call() {}

type ConvictionVoting_Split struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Aye string `protobuf:"bytes,1,opt,name=aye,proto3" json:"aye,omitempty"`
	Nay string `protobuf:"bytes,2,opt,name=nay,proto3" json:"nay,omitempty"`
}

func (x *ConvictionVoting_Split) Reset() {
	*x = ConvictionVoting_Split{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConvictionVoting_Split) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvictionVoting_Split) ProtoMessage() {}

func (x *ConvictionVoting_Split) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvictionVoting_Split.ProtoReflect.Descriptor instead.
func (*ConvictionVoting_Split) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{22}
}

func (x *ConvictionVoting_Split) GetAye() string {
	if x != nil {
		return x.Aye
	}
	return ""
}

func (x *ConvictionVoting_Split) GetNay() string {
	if x != nil {
		return x.Nay
	}
	return ""
}

type Proxy_ForceProxyType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*Proxy_ForceProxyType_Any
	//	*Proxy_ForceProxyType_NonTransfer
	//	*Proxy_ForceProxyType_Governance
	//	*Proxy_ForceProxyType_Staking
	//	*Proxy_ForceProxyType_IdentityJudgement
	//	*Proxy_ForceProxyType_CancelProxy
	Value isProxy_ForceProxyType_Value `protobuf_oneof:"value"`
}

func (x *Proxy_ForceProxyType) Reset() {
	*x = Proxy_ForceProxyType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proxy_ForceProxyType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proxy_ForceProxyType) ProtoMessage() {}

func (x *Proxy_ForceProxyType) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proxy_ForceProxyType.ProtoReflect.Descriptor instead.
func (*Proxy_ForceProxyType) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{23}
}

func (m *Proxy_ForceProxyType) GetValue() isProxy_ForceProxyType_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Proxy_ForceProxyType) GetAny() *Proxy_Any {
	if x, ok := x.GetValue().(*Proxy_ForceProxyType_Any); ok {
		return x.Any
	}
	return nil
}

func (x *Proxy_ForceProxyType) GetNonTransfer() *Proxy_NonTransfer {
	if x, ok := x.GetValue().(*Proxy_ForceProxyType_NonTransfer); ok {
		return x.NonTransfer
	}
	return nil
}

func (x *Proxy_ForceProxyType) GetGovernance() *Proxy_Governance {
	if x, ok := x.GetValue().(*Proxy_ForceProxyType_Governance); ok {
		return x.Governance
	}
	return nil
}

func (x *Proxy_ForceProxyType) GetStaking() *Proxy_Staking {
	if x, ok := x.GetValue().(*Proxy_ForceProxyType_Staking); ok {
		return x.Staking
	}
	return nil
}

func (x *Proxy_ForceProxyType) GetIdentityJudgement() *Proxy_IdentityJudgement {
	if x, ok := x.GetValue().(*Proxy_ForceProxyType_IdentityJudgement); ok {
		return x.IdentityJudgement
	}
	return nil
}

func (x *Proxy_ForceProxyType) GetCancelProxy() *Proxy_CancelProxy {
	if x, ok := x.GetValue().(*Proxy_ForceProxyType_CancelProxy); ok {
		return x.CancelProxy
	}
	return nil
}

type isProxy_ForceProxyType_Value interface {
	isProxy_ForceProxyType_Value()
}

type Proxy_ForceProxyType_Any struct {
	Any *Proxy_Any `protobuf:"bytes,1,opt,name=any,proto3,oneof"`
}

type Proxy_ForceProxyType_NonTransfer struct {
	NonTransfer *Proxy_NonTransfer `protobuf:"bytes,2,opt,name=non_transfer,json=nonTransfer,proto3,oneof"`
}

type Proxy_ForceProxyType_Governance struct {
	Governance *Proxy_Governance `protobuf:"bytes,3,opt,name=governance,proto3,oneof"`
}

type Proxy_ForceProxyType_Staking struct {
	Staking *Proxy_Staking `protobuf:"bytes,4,opt,name=staking,proto3,oneof"`
}

type Proxy_ForceProxyType_IdentityJudgement struct {
	IdentityJudgement *Proxy_IdentityJudgement `protobuf:"bytes,5,opt,name=identity_judgement,json=identityJudgement,proto3,oneof"`
}

type Proxy_ForceProxyType_CancelProxy struct {
	CancelProxy *Proxy_CancelProxy `protobuf:"bytes,6,opt,name=cancel_proxy,json=cancelProxy,proto3,oneof"`
}

func (*Proxy_ForceProxyType_Any) isProxy_ForceProxyType_Value() {}

func (*Proxy_ForceProxyType_NonTransfer) isProxy_ForceProxyType_Value() {}

func (*Proxy_ForceProxyType_Governance) isProxy_ForceProxyType_Value() {}

func (*Proxy_ForceProxyType_Staking) isProxy_ForceProxyType_Value() {}

func (*Proxy_ForceProxyType_IdentityJudgement) isProxy_ForceProxyType_Value() {}

func (*Proxy_ForceProxyType_CancelProxy) isProxy_ForceProxyType_Value() {}

type ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes8Listuint32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 uint32                                                               `protobuf:"varint,1,opt,name=value0,proto3" json:"value0,omitempty"`
	Value1 []*ElectionProviderMultiPhase_TupleUint32SpArithmeticPerThingsPerU16 `protobuf:"bytes,2,rep,name=value1,proto3" json:"value1,omitempty"`
	Value2 uint32                                                               `protobuf:"varint,3,opt,name=value2,proto3" json:"value2,omitempty"`
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes8Listuint32) Reset() {
	*x = ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes8Listuint32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes8Listuint32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes8Listuint32) ProtoMessage() {
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes8Listuint32) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes8Listuint32.ProtoReflect.Descriptor instead.
func (*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes8Listuint32) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{24}
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes8Listuint32) GetValue0() uint32 {
	if x != nil {
		return x.Value0
	}
	return 0
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes8Listuint32) GetValue1() []*ElectionProviderMultiPhase_TupleUint32SpArithmeticPerThingsPerU16 {
	if x != nil {
		return x.Value1
	}
	return nil
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes8Listuint32) GetValue2() uint32 {
	if x != nil {
		return x.Value2
	}
	return 0
}

type Vesting_TupleNull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *TupleNull `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Vesting_TupleNull) Reset() {
	*x = Vesting_TupleNull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vesting_TupleNull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vesting_TupleNull) ProtoMessage() {}

func (x *Vesting_TupleNull) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vesting_TupleNull.ProtoReflect.Descriptor instead.
func (*Vesting_TupleNull) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{25}
}

func (x *Vesting_TupleNull) GetValue() *TupleNull {
	if x != nil {
		return x.Value
	}
	return nil
}

type Treasury_VoidSpendCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *Treasury_VoidSpendCall) Reset() {
	*x = Treasury_VoidSpendCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Treasury_VoidSpendCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Treasury_VoidSpendCall) ProtoMessage() {}

func (x *Treasury_VoidSpendCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Treasury_VoidSpendCall.ProtoReflect.Descriptor instead.
func (*Treasury_VoidSpendCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{26}
}

func (x *Treasury_VoidSpendCall) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type Proxy_AnnounceCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Real     *Proxy_Real         `protobuf:"bytes,1,opt,name=real,proto3" json:"real,omitempty"`
	CallHash *PrimitiveTypesH256 `protobuf:"bytes,2,opt,name=call_hash,json=callHash,proto3" json:"call_hash,omitempty"`
}

func (x *Proxy_AnnounceCall) Reset() {
	*x = Proxy_AnnounceCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proxy_AnnounceCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proxy_AnnounceCall) ProtoMessage() {}

func (x *Proxy_AnnounceCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proxy_AnnounceCall.ProtoReflect.Descriptor instead.
func (*Proxy_AnnounceCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{27}
}

func (x *Proxy_AnnounceCall) GetReal() *Proxy_Real {
	if x != nil {
		return x.Real
	}
	return nil
}

func (x *Proxy_AnnounceCall) GetCallHash() *PrimitiveTypesH256 {
	if x != nil {
		return x.CallHash
	}
	return nil
}

type FellowshipReferenda_EnactmentMoment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*FellowshipReferenda_EnactmentMoment_At
	//	*FellowshipReferenda_EnactmentMoment_After
	Value isFellowshipReferenda_EnactmentMoment_Value `protobuf_oneof:"value"`
}

func (x *FellowshipReferenda_EnactmentMoment) Reset() {
	*x = FellowshipReferenda_EnactmentMoment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FellowshipReferenda_EnactmentMoment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FellowshipReferenda_EnactmentMoment) ProtoMessage() {}

func (x *FellowshipReferenda_EnactmentMoment) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FellowshipReferenda_EnactmentMoment.ProtoReflect.Descriptor instead.
func (*FellowshipReferenda_EnactmentMoment) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{28}
}

func (m *FellowshipReferenda_EnactmentMoment) GetValue() isFellowshipReferenda_EnactmentMoment_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *FellowshipReferenda_EnactmentMoment) GetAt() *FellowshipReferenda_At {
	if x, ok := x.GetValue().(*FellowshipReferenda_EnactmentMoment_At); ok {
		return x.At
	}
	return nil
}

func (x *FellowshipReferenda_EnactmentMoment) GetAfter() *FellowshipReferenda_After {
	if x, ok := x.GetValue().(*FellowshipReferenda_EnactmentMoment_After); ok {
		return x.After
	}
	return nil
}

type isFellowshipReferenda_EnactmentMoment_Value interface {
	isFellowshipReferenda_EnactmentMoment_Value()
}

type FellowshipReferenda_EnactmentMoment_At struct {
	At *FellowshipReferenda_At `protobuf:"bytes,1,opt,name=at,proto3,oneof"`
}

type FellowshipReferenda_EnactmentMoment_After struct {
	After *FellowshipReferenda_After `protobuf:"bytes,2,opt,name=after,proto3,oneof"`
}

func (*FellowshipReferenda_EnactmentMoment_At) isFellowshipReferenda_EnactmentMoment_Value() {}

func (*FellowshipReferenda_EnactmentMoment_After) isFellowshipReferenda_EnactmentMoment_Value() {}

type PreimagePallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Call:
	//
	//	*PreimagePallet_NotePreimageCall
	//	*PreimagePallet_UnnotePreimageCall
	//	*PreimagePallet_RequestPreimageCall
	//	*PreimagePallet_UnrequestPreimageCall
	//	*PreimagePallet_EnsureUpdatedCall
	Call isPreimagePallet_Call `protobuf_oneof:"call"`
}

func (x *PreimagePallet) Reset() {
	*x = PreimagePallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreimagePallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreimagePallet) ProtoMessage() {}

func (x *PreimagePallet) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreimagePallet.ProtoReflect.Descriptor instead.
func (*PreimagePallet) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{29}
}

func (m *PreimagePallet) GetCall() isPreimagePallet_Call {
	if m != nil {
		return m.Call
	}
	return nil
}

func (x *PreimagePallet) GetNotePreimageCall() *Preimage_NotePreimageCall {
	if x, ok := x.GetCall().(*PreimagePallet_NotePreimageCall); ok {
		return x.NotePreimageCall
	}
	return nil
}

func (x *PreimagePallet) GetUnnotePreimageCall() *Preimage_UnnotePreimageCall {
	if x, ok := x.GetCall().(*PreimagePallet_UnnotePreimageCall); ok {
		return x.UnnotePreimageCall
	}
	return nil
}

func (x *PreimagePallet) GetRequestPreimageCall() *Preimage_RequestPreimageCall {
	if x, ok := x.GetCall().(*PreimagePallet_RequestPreimageCall); ok {
		return x.RequestPreimageCall
	}
	return nil
}

func (x *PreimagePallet) GetUnrequestPreimageCall() *Preimage_UnrequestPreimageCall {
	if x, ok := x.GetCall().(*PreimagePallet_UnrequestPreimageCall); ok {
		return x.UnrequestPreimageCall
	}
	return nil
}

func (x *PreimagePallet) GetEnsureUpdatedCall() *Preimage_EnsureUpdatedCall {
	if x, ok := x.GetCall().(*PreimagePallet_EnsureUpdatedCall); ok {
		return x.EnsureUpdatedCall
	}
	return nil
}

type isPreimagePallet_Call interface {
	isPreimagePallet_Call()
}

type PreimagePallet_NotePreimageCall struct {
	NotePreimageCall *Preimage_NotePreimageCall `protobuf:"bytes,1,opt,name=note_preimage_call,json=notePreimageCall,proto3,oneof"`
}

type PreimagePallet_UnnotePreimageCall struct {
	UnnotePreimageCall *Preimage_UnnotePreimageCall `protobuf:"bytes,2,opt,name=unnote_preimage_call,json=unnotePreimageCall,proto3,oneof"`
}

type PreimagePallet_RequestPreimageCall struct {
	RequestPreimageCall *Preimage_RequestPreimageCall `protobuf:"bytes,3,opt,name=request_preimage_call,json=requestPreimageCall,proto3,oneof"`
}

type PreimagePallet_UnrequestPreimageCall struct {
	UnrequestPreimageCall *Preimage_UnrequestPreimageCall `protobuf:"bytes,4,opt,name=unrequest_preimage_call,json=unrequestPreimageCall,proto3,oneof"`
}

type PreimagePallet_EnsureUpdatedCall struct {
	EnsureUpdatedCall *Preimage_EnsureUpdatedCall `protobuf:"bytes,5,opt,name=ensure_updated_call,json=ensureUpdatedCall,proto3,oneof"`
}

func (*PreimagePallet_NotePreimageCall) isPreimagePallet_Call() {}

func (*PreimagePallet_UnnotePreimageCall) isPreimagePallet_Call() {}

func (*PreimagePallet_RequestPreimageCall) isPreimagePallet_Call() {}

func (*PreimagePallet_UnrequestPreimageCall) isPreimagePallet_Call() {}

func (*PreimagePallet_EnsureUpdatedCall) isPreimagePallet_Call() {}

type Identity_None struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Identity_None) Reset() {
	*x = Identity_None{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_None) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_None) ProtoMessage() {}

func (x *Identity_None) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_None.ProtoReflect.Descriptor instead.
func (*Identity_None) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{30}
}

type Bounties_ProposeBountyCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value       string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Description []byte `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *Bounties_ProposeBountyCall) Reset() {
	*x = Bounties_ProposeBountyCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bounties_ProposeBountyCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bounties_ProposeBountyCall) ProtoMessage() {}

func (x *Bounties_ProposeBountyCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bounties_ProposeBountyCall.ProtoReflect.Descriptor instead.
func (*Bounties_ProposeBountyCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{31}
}

func (x *Bounties_ProposeBountyCall) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Bounties_ProposeBountyCall) GetDescription() []byte {
	if x != nil {
		return x.Description
	}
	return nil
}

type SpConsensusGrandpaEquivocationProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SetId        uint64                `protobuf:"varint,1,opt,name=set_id,json=setId,proto3" json:"set_id,omitempty"`
	Equivocation *Grandpa_Equivocation `protobuf:"bytes,2,opt,name=equivocation,proto3" json:"equivocation,omitempty"`
}

func (x *SpConsensusGrandpaEquivocationProof) Reset() {
	*x = SpConsensusGrandpaEquivocationProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpConsensusGrandpaEquivocationProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpConsensusGrandpaEquivocationProof) ProtoMessage() {}

func (x *SpConsensusGrandpaEquivocationProof) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpConsensusGrandpaEquivocationProof.ProtoReflect.Descriptor instead.
func (*SpConsensusGrandpaEquivocationProof) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{32}
}

func (x *SpConsensusGrandpaEquivocationProof) GetSetId() uint64 {
	if x != nil {
		return x.SetId
	}
	return 0
}

func (x *SpConsensusGrandpaEquivocationProof) GetEquivocation() *Grandpa_Equivocation {
	if x != nil {
		return x.Equivocation
	}
	return nil
}

type None struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *None) Reset() {
	*x = None{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *None) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*None) ProtoMessage() {}

func (x *None) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use None.ProtoReflect.Descriptor instead.
func (*None) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{33}
}

type Identity_Raw22 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Identity_Raw22) Reset() {
	*x = Identity_Raw22{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_Raw22) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_Raw22) ProtoMessage() {}

func (x *Identity_Raw22) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_Raw22.ProtoReflect.Descriptor instead.
func (*Identity_Raw22) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{34}
}

func (x *Identity_Raw22) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Identity_PalletIdentityTypesBitFlags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 uint64 `protobuf:"varint,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Identity_PalletIdentityTypesBitFlags) Reset() {
	*x = Identity_PalletIdentityTypesBitFlags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_PalletIdentityTypesBitFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_PalletIdentityTypesBitFlags) ProtoMessage() {}

func (x *Identity_PalletIdentityTypesBitFlags) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_PalletIdentityTypesBitFlags.ProtoReflect.Descriptor instead.
func (*Identity_PalletIdentityTypesBitFlags) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{35}
}

func (x *Identity_PalletIdentityTypesBitFlags) GetValue0() uint64 {
	if x != nil {
		return x.Value0
	}
	return 0
}

type Identity_Raw23 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Identity_Raw23) Reset() {
	*x = Identity_Raw23{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_Raw23) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_Raw23) ProtoMessage() {}

func (x *Identity_Raw23) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_Raw23.ProtoReflect.Descriptor instead.
func (*Identity_Raw23) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{36}
}

func (x *Identity_Raw23) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type NominationPools_MinCreateBond struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*NominationPools_MinCreateBond_Noop
	//	*NominationPools_MinCreateBond_Set
	//	*NominationPools_MinCreateBond_Remove
	Value isNominationPools_MinCreateBond_Value `protobuf_oneof:"value"`
}

func (x *NominationPools_MinCreateBond) Reset() {
	*x = NominationPools_MinCreateBond{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NominationPools_MinCreateBond) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NominationPools_MinCreateBond) ProtoMessage() {}

func (x *NominationPools_MinCreateBond) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NominationPools_MinCreateBond.ProtoReflect.Descriptor instead.
func (*NominationPools_MinCreateBond) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{37}
}

func (m *NominationPools_MinCreateBond) GetValue() isNominationPools_MinCreateBond_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *NominationPools_MinCreateBond) GetNoop() *NominationPools_Noop {
	if x, ok := x.GetValue().(*NominationPools_MinCreateBond_Noop); ok {
		return x.Noop
	}
	return nil
}

func (x *NominationPools_MinCreateBond) GetSet() *NominationPools_Set {
	if x, ok := x.GetValue().(*NominationPools_MinCreateBond_Set); ok {
		return x.Set
	}
	return nil
}

func (x *NominationPools_MinCreateBond) GetRemove() *NominationPools_Remove {
	if x, ok := x.GetValue().(*NominationPools_MinCreateBond_Remove); ok {
		return x.Remove
	}
	return nil
}

type isNominationPools_MinCreateBond_Value interface {
	isNominationPools_MinCreateBond_Value()
}

type NominationPools_MinCreateBond_Noop struct {
	Noop *NominationPools_Noop `protobuf:"bytes,1,opt,name=noop,proto3,oneof"`
}

type NominationPools_MinCreateBond_Set struct {
	Set *NominationPools_Set `protobuf:"bytes,2,opt,name=set,proto3,oneof"`
}

type NominationPools_MinCreateBond_Remove struct {
	Remove *NominationPools_Remove `protobuf:"bytes,3,opt,name=remove,proto3,oneof"`
}

func (*NominationPools_MinCreateBond_Noop) isNominationPools_MinCreateBond_Value() {}

func (*NominationPools_MinCreateBond_Set) isNominationPools_MinCreateBond_Value() {}

func (*NominationPools_MinCreateBond_Remove) isNominationPools_MinCreateBond_Value() {}

type StakingRewards_RefillCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *StakingRewards_RefillCall) Reset() {
	*x = StakingRewards_RefillCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakingRewards_RefillCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakingRewards_RefillCall) ProtoMessage() {}

func (x *StakingRewards_RefillCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakingRewards_RefillCall.ProtoReflect.Descriptor instead.
func (*StakingRewards_RefillCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{38}
}

func (x *StakingRewards_RefillCall) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type StakingRewards_ForceRefillCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From  *StakingRewards_From `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	Value string               `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *StakingRewards_ForceRefillCall) Reset() {
	*x = StakingRewards_ForceRefillCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakingRewards_ForceRefillCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakingRewards_ForceRefillCall) ProtoMessage() {}

func (x *StakingRewards_ForceRefillCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakingRewards_ForceRefillCall.ProtoReflect.Descriptor instead.
func (*StakingRewards_ForceRefillCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{39}
}

func (x *StakingRewards_ForceRefillCall) GetFrom() *StakingRewards_From {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *StakingRewards_ForceRefillCall) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes11Listuint32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 uint32                                                               `protobuf:"varint,1,opt,name=value0,proto3" json:"value0,omitempty"`
	Value1 []*ElectionProviderMultiPhase_TupleUint32SpArithmeticPerThingsPerU16 `protobuf:"bytes,2,rep,name=value1,proto3" json:"value1,omitempty"`
	Value2 uint32                                                               `protobuf:"varint,3,opt,name=value2,proto3" json:"value2,omitempty"`
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes11Listuint32) Reset() {
	*x = ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes11Listuint32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes11Listuint32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes11Listuint32) ProtoMessage() {
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes11Listuint32) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes11Listuint32.ProtoReflect.Descriptor instead.
func (*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes11Listuint32) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{40}
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes11Listuint32) GetValue0() uint32 {
	if x != nil {
		return x.Value0
	}
	return 0
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes11Listuint32) GetValue1() []*ElectionProviderMultiPhase_TupleUint32SpArithmeticPerThingsPerU16 {
	if x != nil {
		return x.Value1
	}
	return nil
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes11Listuint32) GetValue2() uint32 {
	if x != nil {
		return x.Value2
	}
	return 0
}

type NominationPools_Nominator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*NominationPools_Nominator_Id
	//	*NominationPools_Nominator_Index
	//	*NominationPools_Nominator_Raw
	//	*NominationPools_Nominator_Address32
	//	*NominationPools_Nominator_Address20
	Value isNominationPools_Nominator_Value `protobuf_oneof:"value"`
}

func (x *NominationPools_Nominator) Reset() {
	*x = NominationPools_Nominator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NominationPools_Nominator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NominationPools_Nominator) ProtoMessage() {}

func (x *NominationPools_Nominator) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NominationPools_Nominator.ProtoReflect.Descriptor instead.
func (*NominationPools_Nominator) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{41}
}

func (m *NominationPools_Nominator) GetValue() isNominationPools_Nominator_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *NominationPools_Nominator) GetId() *NominationPools_Id {
	if x, ok := x.GetValue().(*NominationPools_Nominator_Id); ok {
		return x.Id
	}
	return nil
}

func (x *NominationPools_Nominator) GetIndex() *NominationPools_Index {
	if x, ok := x.GetValue().(*NominationPools_Nominator_Index); ok {
		return x.Index
	}
	return nil
}

func (x *NominationPools_Nominator) GetRaw() *NominationPools_Raw {
	if x, ok := x.GetValue().(*NominationPools_Nominator_Raw); ok {
		return x.Raw
	}
	return nil
}

func (x *NominationPools_Nominator) GetAddress32() *NominationPools_Address32 {
	if x, ok := x.GetValue().(*NominationPools_Nominator_Address32); ok {
		return x.Address32
	}
	return nil
}

func (x *NominationPools_Nominator) GetAddress20() *NominationPools_Address20 {
	if x, ok := x.GetValue().(*NominationPools_Nominator_Address20); ok {
		return x.Address20
	}
	return nil
}

type isNominationPools_Nominator_Value interface {
	isNominationPools_Nominator_Value()
}

type NominationPools_Nominator_Id struct {
	Id *NominationPools_Id `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type NominationPools_Nominator_Index struct {
	Index *NominationPools_Index `protobuf:"bytes,2,opt,name=index,proto3,oneof"`
}

type NominationPools_Nominator_Raw struct {
	Raw *NominationPools_Raw `protobuf:"bytes,3,opt,name=raw,proto3,oneof"`
}

type NominationPools_Nominator_Address32 struct {
	Address32 *NominationPools_Address32 `protobuf:"bytes,4,opt,name=address32,proto3,oneof"`
}

type NominationPools_Nominator_Address20 struct {
	Address20 *NominationPools_Address20 `protobuf:"bytes,5,opt,name=address20,proto3,oneof"`
}

func (*NominationPools_Nominator_Id) isNominationPools_Nominator_Value() {}

func (*NominationPools_Nominator_Index) isNominationPools_Nominator_Value() {}

func (*NominationPools_Nominator_Raw) isNominationPools_Nominator_Value() {}

func (*NominationPools_Nominator_Address32) isNominationPools_Nominator_Value() {}

func (*NominationPools_Nominator_Address20) isNominationPools_Nominator_Value() {}

type Babe_Logs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*Babe_Logs_PreRuntime
	//	*Babe_Logs_Consensus
	//	*Babe_Logs_Seal
	//	*Babe_Logs_Other
	//	*Babe_Logs_RuntimeEnvironmentUpdated
	Value isBabe_Logs_Value `protobuf_oneof:"value"`
}

func (x *Babe_Logs) Reset() {
	*x = Babe_Logs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Babe_Logs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Babe_Logs) ProtoMessage() {}

func (x *Babe_Logs) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Babe_Logs.ProtoReflect.Descriptor instead.
func (*Babe_Logs) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{42}
}

func (m *Babe_Logs) GetValue() isBabe_Logs_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Babe_Logs) GetPreRuntime() *Babe_PreRuntime {
	if x, ok := x.GetValue().(*Babe_Logs_PreRuntime); ok {
		return x.PreRuntime
	}
	return nil
}

func (x *Babe_Logs) GetConsensus() *Babe_Consensus {
	if x, ok := x.GetValue().(*Babe_Logs_Consensus); ok {
		return x.Consensus
	}
	return nil
}

func (x *Babe_Logs) GetSeal() *Babe_Seal {
	if x, ok := x.GetValue().(*Babe_Logs_Seal); ok {
		return x.Seal
	}
	return nil
}

func (x *Babe_Logs) GetOther() *Babe_Other {
	if x, ok := x.GetValue().(*Babe_Logs_Other); ok {
		return x.Other
	}
	return nil
}

func (x *Babe_Logs) GetRuntimeEnvironmentUpdated() *Babe_RuntimeEnvironmentUpdated {
	if x, ok := x.GetValue().(*Babe_Logs_RuntimeEnvironmentUpdated); ok {
		return x.RuntimeEnvironmentUpdated
	}
	return nil
}

type isBabe_Logs_Value interface {
	isBabe_Logs_Value()
}

type Babe_Logs_PreRuntime struct {
	PreRuntime *Babe_PreRuntime `protobuf:"bytes,1,opt,name=pre_runtime,json=preRuntime,proto3,oneof"`
}

type Babe_Logs_Consensus struct {
	Consensus *Babe_Consensus `protobuf:"bytes,2,opt,name=consensus,proto3,oneof"`
}

type Babe_Logs_Seal struct {
	Seal *Babe_Seal `protobuf:"bytes,3,opt,name=seal,proto3,oneof"`
}

type Babe_Logs_Other struct {
	Other *Babe_Other `protobuf:"bytes,4,opt,name=other,proto3,oneof"`
}

type Babe_Logs_RuntimeEnvironmentUpdated struct {
	RuntimeEnvironmentUpdated *Babe_RuntimeEnvironmentUpdated `protobuf:"bytes,5,opt,name=runtime_environment_updated,json=runtimeEnvironmentUpdated,proto3,oneof"`
}

func (*Babe_Logs_PreRuntime) isBabe_Logs_Value() {}

func (*Babe_Logs_Consensus) isBabe_Logs_Value() {}

func (*Babe_Logs_Seal) isBabe_Logs_Value() {}

func (*Babe_Logs_Other) isBabe_Logs_Value() {}

func (*Babe_Logs_RuntimeEnvironmentUpdated) isBabe_Logs_Value() {}

type Grandpa_ReportEquivocationCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EquivocationProof *SpConsensusGrandpaEquivocationProof `protobuf:"bytes,1,opt,name=equivocation_proof,json=equivocationProof,proto3" json:"equivocation_proof,omitempty"`
	KeyOwnerProof     *SpSessionMembershipProof            `protobuf:"bytes,2,opt,name=key_owner_proof,json=keyOwnerProof,proto3" json:"key_owner_proof,omitempty"`
}

func (x *Grandpa_ReportEquivocationCall) Reset() {
	*x = Grandpa_ReportEquivocationCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Grandpa_ReportEquivocationCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Grandpa_ReportEquivocationCall) ProtoMessage() {}

func (x *Grandpa_ReportEquivocationCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Grandpa_ReportEquivocationCall.ProtoReflect.Descriptor instead.
func (*Grandpa_ReportEquivocationCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{43}
}

func (x *Grandpa_ReportEquivocationCall) GetEquivocationProof() *SpConsensusGrandpaEquivocationProof {
	if x != nil {
		return x.EquivocationProof
	}
	return nil
}

func (x *Grandpa_ReportEquivocationCall) GetKeyOwnerProof() *SpSessionMembershipProof {
	if x != nil {
		return x.KeyOwnerProof
	}
	return nil
}

type ImOnline_PalletImOnlineSr25519AppSr25519Public struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 *SpCoreSr25519Public `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *ImOnline_PalletImOnlineSr25519AppSr25519Public) Reset() {
	*x = ImOnline_PalletImOnlineSr25519AppSr25519Public{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImOnline_PalletImOnlineSr25519AppSr25519Public) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImOnline_PalletImOnlineSr25519AppSr25519Public) ProtoMessage() {}

func (x *ImOnline_PalletImOnlineSr25519AppSr25519Public) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImOnline_PalletImOnlineSr25519AppSr25519Public.ProtoReflect.Descriptor instead.
func (*ImOnline_PalletImOnlineSr25519AppSr25519Public) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{44}
}

func (x *ImOnline_PalletImOnlineSr25519AppSr25519Public) GetValue0() *SpCoreSr25519Public {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Referenda_CancelCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *Referenda_CancelCall) Reset() {
	*x = Referenda_CancelCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Referenda_CancelCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Referenda_CancelCall) ProtoMessage() {}

func (x *Referenda_CancelCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Referenda_CancelCall.ProtoReflect.Descriptor instead.
func (*Referenda_CancelCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{45}
}

func (x *Referenda_CancelCall) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type Referenda_KillCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *Referenda_KillCall) Reset() {
	*x = Referenda_KillCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Referenda_KillCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Referenda_KillCall) ProtoMessage() {}

func (x *Referenda_KillCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Referenda_KillCall.ProtoReflect.Descriptor instead.
func (*Referenda_KillCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{46}
}

func (x *Referenda_KillCall) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type Utility_WithWeightCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Call:
	//
	//	*Utility_WithWeightCall_System
	//	*Utility_WithWeightCall_Timestamp
	//	*Utility_WithWeightCall_Babe
	//	*Utility_WithWeightCall_Grandpa
	//	*Utility_WithWeightCall_Balances
	//	*Utility_WithWeightCall_Vesting
	//	*Utility_WithWeightCall_BagsList
	//	*Utility_WithWeightCall_ImOnline
	//	*Utility_WithWeightCall_Staking
	//	*Utility_WithWeightCall_Session
	//	*Utility_WithWeightCall_Treasury
	//	*Utility_WithWeightCall_Utility
	//	*Utility_WithWeightCall_ConvictionVoting
	//	*Utility_WithWeightCall_Referenda
	//	*Utility_WithWeightCall_FellowshipCollective
	//	*Utility_WithWeightCall_FellowshipReferenda
	//	*Utility_WithWeightCall_Whitelist
	//	*Utility_WithWeightCall_Scheduler
	//	*Utility_WithWeightCall_Preimage
	//	*Utility_WithWeightCall_Identity
	//	*Utility_WithWeightCall_Proxy
	//	*Utility_WithWeightCall_Multisig
	//	*Utility_WithWeightCall_ElectionProviderMultiPhase
	//	*Utility_WithWeightCall_Bounties
	//	*Utility_WithWeightCall_ChildBounties
	//	*Utility_WithWeightCall_NominationPools
	//	*Utility_WithWeightCall_Gear
	//	*Utility_WithWeightCall_StakingRewards
	//	*Utility_WithWeightCall_GearVoucher
	Call   isUtility_WithWeightCall_Call `protobuf_oneof:"call"`
	Weight *SpWeightsWeightV2Weight      `protobuf:"bytes,30,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *Utility_WithWeightCall) Reset() {
	*x = Utility_WithWeightCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Utility_WithWeightCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Utility_WithWeightCall) ProtoMessage() {}

func (x *Utility_WithWeightCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Utility_WithWeightCall.ProtoReflect.Descriptor instead.
func (*Utility_WithWeightCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{47}
}

func (m *Utility_WithWeightCall) GetCall() isUtility_WithWeightCall_Call {
	if m != nil {
		return m.Call
	}
	return nil
}

func (x *Utility_WithWeightCall) GetSystem() *SystemPallet {
	if x, ok := x.GetCall().(*Utility_WithWeightCall_System); ok {
		return x.System
	}
	return nil
}

func (x *Utility_WithWeightCall) GetTimestamp() *TimestampPallet {
	if x, ok := x.GetCall().(*Utility_WithWeightCall_Timestamp); ok {
		return x.Timestamp
	}
	return nil
}

func (x *Utility_WithWeightCall) GetBabe() *BabePallet {
	if x, ok := x.GetCall().(*Utility_WithWeightCall_Babe); ok {
		return x.Babe
	}
	return nil
}

func (x *Utility_WithWeightCall) GetGrandpa() *GrandpaPallet {
	if x, ok := x.GetCall().(*Utility_WithWeightCall_Grandpa); ok {
		return x.Grandpa
	}
	return nil
}

func (x *Utility_WithWeightCall) GetBalances() *BalancesPallet {
	if x, ok := x.GetCall().(*Utility_WithWeightCall_Balances); ok {
		return x.Balances
	}
	return nil
}

func (x *Utility_WithWeightCall) GetVesting() *VestingPallet {
	if x, ok := x.GetCall().(*Utility_WithWeightCall_Vesting); ok {
		return x.Vesting
	}
	return nil
}

func (x *Utility_WithWeightCall) GetBagsList() *BagsListPallet {
	if x, ok := x.GetCall().(*Utility_WithWeightCall_BagsList); ok {
		return x.BagsList
	}
	return nil
}

func (x *Utility_WithWeightCall) GetImOnline() *ImOnlinePallet {
	if x, ok := x.GetCall().(*Utility_WithWeightCall_ImOnline); ok {
		return x.ImOnline
	}
	return nil
}

func (x *Utility_WithWeightCall) GetStaking() *StakingPallet {
	if x, ok := x.GetCall().(*Utility_WithWeightCall_Staking); ok {
		return x.Staking
	}
	return nil
}

func (x *Utility_WithWeightCall) GetSession() *SessionPallet {
	if x, ok := x.GetCall().(*Utility_WithWeightCall_Session); ok {
		return x.Session
	}
	return nil
}

func (x *Utility_WithWeightCall) GetTreasury() *TreasuryPallet {
	if x, ok := x.GetCall().(*Utility_WithWeightCall_Treasury); ok {
		return x.Treasury
	}
	return nil
}

func (x *Utility_WithWeightCall) GetUtility() *UtilityPallet {
	if x, ok := x.GetCall().(*Utility_WithWeightCall_Utility); ok {
		return x.Utility
	}
	return nil
}

func (x *Utility_WithWeightCall) GetConvictionVoting() *ConvictionVotingPallet {
	if x, ok := x.GetCall().(*Utility_WithWeightCall_ConvictionVoting); ok {
		return x.ConvictionVoting
	}
	return nil
}

func (x *Utility_WithWeightCall) GetReferenda() *ReferendaPallet {
	if x, ok := x.GetCall().(*Utility_WithWeightCall_Referenda); ok {
		return x.Referenda
	}
	return nil
}

func (x *Utility_WithWeightCall) GetFellowshipCollective() *FellowshipCollectivePallet {
	if x, ok := x.GetCall().(*Utility_WithWeightCall_FellowshipCollective); ok {
		return x.FellowshipCollective
	}
	return nil
}

func (x *Utility_WithWeightCall) GetFellowshipReferenda() *FellowshipReferendaPallet {
	if x, ok := x.GetCall().(*Utility_WithWeightCall_FellowshipReferenda); ok {
		return x.FellowshipReferenda
	}
	return nil
}

func (x *Utility_WithWeightCall) GetWhitelist() *WhitelistPallet {
	if x, ok := x.GetCall().(*Utility_WithWeightCall_Whitelist); ok {
		return x.Whitelist
	}
	return nil
}

func (x *Utility_WithWeightCall) GetScheduler() *SchedulerPallet {
	if x, ok := x.GetCall().(*Utility_WithWeightCall_Scheduler); ok {
		return x.Scheduler
	}
	return nil
}

func (x *Utility_WithWeightCall) GetPreimage() *PreimagePallet {
	if x, ok := x.GetCall().(*Utility_WithWeightCall_Preimage); ok {
		return x.Preimage
	}
	return nil
}

func (x *Utility_WithWeightCall) GetIdentity() *IdentityPallet {
	if x, ok := x.GetCall().(*Utility_WithWeightCall_Identity); ok {
		return x.Identity
	}
	return nil
}

func (x *Utility_WithWeightCall) GetProxy() *ProxyPallet {
	if x, ok := x.GetCall().(*Utility_WithWeightCall_Proxy); ok {
		return x.Proxy
	}
	return nil
}

func (x *Utility_WithWeightCall) GetMultisig() *MultisigPallet {
	if x, ok := x.GetCall().(*Utility_WithWeightCall_Multisig); ok {
		return x.Multisig
	}
	return nil
}

func (x *Utility_WithWeightCall) GetElectionProviderMultiPhase() *ElectionProviderMultiPhasePallet {
	if x, ok := x.GetCall().(*Utility_WithWeightCall_ElectionProviderMultiPhase); ok {
		return x.ElectionProviderMultiPhase
	}
	return nil
}

func (x *Utility_WithWeightCall) GetBounties() *BountiesPallet {
	if x, ok := x.GetCall().(*Utility_WithWeightCall_Bounties); ok {
		return x.Bounties
	}
	return nil
}

func (x *Utility_WithWeightCall) GetChildBounties() *ChildBountiesPallet {
	if x, ok := x.GetCall().(*Utility_WithWeightCall_ChildBounties); ok {
		return x.ChildBounties
	}
	return nil
}

func (x *Utility_WithWeightCall) GetNominationPools() *NominationPoolsPallet {
	if x, ok := x.GetCall().(*Utility_WithWeightCall_NominationPools); ok {
		return x.NominationPools
	}
	return nil
}

func (x *Utility_WithWeightCall) GetGear() *GearPallet {
	if x, ok := x.GetCall().(*Utility_WithWeightCall_Gear); ok {
		return x.Gear
	}
	return nil
}

func (x *Utility_WithWeightCall) GetStakingRewards() *StakingRewardsPallet {
	if x, ok := x.GetCall().(*Utility_WithWeightCall_StakingRewards); ok {
		return x.StakingRewards
	}
	return nil
}

func (x *Utility_WithWeightCall) GetGearVoucher() *GearVoucherPallet {
	if x, ok := x.GetCall().(*Utility_WithWeightCall_GearVoucher); ok {
		return x.GearVoucher
	}
	return nil
}

func (x *Utility_WithWeightCall) GetWeight() *SpWeightsWeightV2Weight {
	if x != nil {
		return x.Weight
	}
	return nil
}

type isUtility_WithWeightCall_Call interface {
	isUtility_WithWeightCall_Call()
}

type Utility_WithWeightCall_System struct {
	System *SystemPallet `protobuf:"bytes,1,opt,name=system,proto3,oneof"`
}

type Utility_WithWeightCall_Timestamp struct {
	Timestamp *TimestampPallet `protobuf:"bytes,2,opt,name=timestamp,proto3,oneof"`
}

type Utility_WithWeightCall_Babe struct {
	Babe *BabePallet `protobuf:"bytes,3,opt,name=babe,proto3,oneof"`
}

type Utility_WithWeightCall_Grandpa struct {
	Grandpa *GrandpaPallet `protobuf:"bytes,4,opt,name=grandpa,proto3,oneof"`
}

type Utility_WithWeightCall_Balances struct {
	Balances *BalancesPallet `protobuf:"bytes,5,opt,name=balances,proto3,oneof"`
}

type Utility_WithWeightCall_Vesting struct {
	Vesting *VestingPallet `protobuf:"bytes,6,opt,name=vesting,proto3,oneof"`
}

type Utility_WithWeightCall_BagsList struct {
	BagsList *BagsListPallet `protobuf:"bytes,7,opt,name=bags_list,json=bagsList,proto3,oneof"`
}

type Utility_WithWeightCall_ImOnline struct {
	ImOnline *ImOnlinePallet `protobuf:"bytes,8,opt,name=im_online,json=imOnline,proto3,oneof"`
}

type Utility_WithWeightCall_Staking struct {
	Staking *StakingPallet `protobuf:"bytes,9,opt,name=staking,proto3,oneof"`
}

type Utility_WithWeightCall_Session struct {
	Session *SessionPallet `protobuf:"bytes,10,opt,name=session,proto3,oneof"`
}

type Utility_WithWeightCall_Treasury struct {
	Treasury *TreasuryPallet `protobuf:"bytes,11,opt,name=treasury,proto3,oneof"`
}

type Utility_WithWeightCall_Utility struct {
	Utility *UtilityPallet `protobuf:"bytes,12,opt,name=utility,proto3,oneof"`
}

type Utility_WithWeightCall_ConvictionVoting struct {
	ConvictionVoting *ConvictionVotingPallet `protobuf:"bytes,13,opt,name=conviction_voting,json=convictionVoting,proto3,oneof"`
}

type Utility_WithWeightCall_Referenda struct {
	Referenda *ReferendaPallet `protobuf:"bytes,14,opt,name=referenda,proto3,oneof"`
}

type Utility_WithWeightCall_FellowshipCollective struct {
	FellowshipCollective *FellowshipCollectivePallet `protobuf:"bytes,15,opt,name=fellowship_collective,json=fellowshipCollective,proto3,oneof"`
}

type Utility_WithWeightCall_FellowshipReferenda struct {
	FellowshipReferenda *FellowshipReferendaPallet `protobuf:"bytes,16,opt,name=fellowship_referenda,json=fellowshipReferenda,proto3,oneof"`
}

type Utility_WithWeightCall_Whitelist struct {
	Whitelist *WhitelistPallet `protobuf:"bytes,17,opt,name=whitelist,proto3,oneof"`
}

type Utility_WithWeightCall_Scheduler struct {
	Scheduler *SchedulerPallet `protobuf:"bytes,18,opt,name=scheduler,proto3,oneof"`
}

type Utility_WithWeightCall_Preimage struct {
	Preimage *PreimagePallet `protobuf:"bytes,19,opt,name=preimage,proto3,oneof"`
}

type Utility_WithWeightCall_Identity struct {
	Identity *IdentityPallet `protobuf:"bytes,20,opt,name=identity,proto3,oneof"`
}

type Utility_WithWeightCall_Proxy struct {
	Proxy *ProxyPallet `protobuf:"bytes,21,opt,name=proxy,proto3,oneof"`
}

type Utility_WithWeightCall_Multisig struct {
	Multisig *MultisigPallet `protobuf:"bytes,22,opt,name=multisig,proto3,oneof"`
}

type Utility_WithWeightCall_ElectionProviderMultiPhase struct {
	ElectionProviderMultiPhase *ElectionProviderMultiPhasePallet `protobuf:"bytes,23,opt,name=election_provider_multi_phase,json=electionProviderMultiPhase,proto3,oneof"`
}

type Utility_WithWeightCall_Bounties struct {
	Bounties *BountiesPallet `protobuf:"bytes,24,opt,name=bounties,proto3,oneof"`
}

type Utility_WithWeightCall_ChildBounties struct {
	ChildBounties *ChildBountiesPallet `protobuf:"bytes,25,opt,name=child_bounties,json=childBounties,proto3,oneof"`
}

type Utility_WithWeightCall_NominationPools struct {
	NominationPools *NominationPoolsPallet `protobuf:"bytes,26,opt,name=nomination_pools,json=nominationPools,proto3,oneof"`
}

type Utility_WithWeightCall_Gear struct {
	Gear *GearPallet `protobuf:"bytes,27,opt,name=gear,proto3,oneof"`
}

type Utility_WithWeightCall_StakingRewards struct {
	StakingRewards *StakingRewardsPallet `protobuf:"bytes,28,opt,name=staking_rewards,json=stakingRewards,proto3,oneof"`
}

type Utility_WithWeightCall_GearVoucher struct {
	GearVoucher *GearVoucherPallet `protobuf:"bytes,29,opt,name=gear_voucher,json=gearVoucher,proto3,oneof"`
}

func (*Utility_WithWeightCall_System) isUtility_WithWeightCall_Call() {}

func (*Utility_WithWeightCall_Timestamp) isUtility_WithWeightCall_Call() {}

func (*Utility_WithWeightCall_Babe) isUtility_WithWeightCall_Call() {}

func (*Utility_WithWeightCall_Grandpa) isUtility_WithWeightCall_Call() {}

func (*Utility_WithWeightCall_Balances) isUtility_WithWeightCall_Call() {}

func (*Utility_WithWeightCall_Vesting) isUtility_WithWeightCall_Call() {}

func (*Utility_WithWeightCall_BagsList) isUtility_WithWeightCall_Call() {}

func (*Utility_WithWeightCall_ImOnline) isUtility_WithWeightCall_Call() {}

func (*Utility_WithWeightCall_Staking) isUtility_WithWeightCall_Call() {}

func (*Utility_WithWeightCall_Session) isUtility_WithWeightCall_Call() {}

func (*Utility_WithWeightCall_Treasury) isUtility_WithWeightCall_Call() {}

func (*Utility_WithWeightCall_Utility) isUtility_WithWeightCall_Call() {}

func (*Utility_WithWeightCall_ConvictionVoting) isUtility_WithWeightCall_Call() {}

func (*Utility_WithWeightCall_Referenda) isUtility_WithWeightCall_Call() {}

func (*Utility_WithWeightCall_FellowshipCollective) isUtility_WithWeightCall_Call() {}

func (*Utility_WithWeightCall_FellowshipReferenda) isUtility_WithWeightCall_Call() {}

func (*Utility_WithWeightCall_Whitelist) isUtility_WithWeightCall_Call() {}

func (*Utility_WithWeightCall_Scheduler) isUtility_WithWeightCall_Call() {}

func (*Utility_WithWeightCall_Preimage) isUtility_WithWeightCall_Call() {}

func (*Utility_WithWeightCall_Identity) isUtility_WithWeightCall_Call() {}

func (*Utility_WithWeightCall_Proxy) isUtility_WithWeightCall_Call() {}

func (*Utility_WithWeightCall_Multisig) isUtility_WithWeightCall_Call() {}

func (*Utility_WithWeightCall_ElectionProviderMultiPhase) isUtility_WithWeightCall_Call() {}

func (*Utility_WithWeightCall_Bounties) isUtility_WithWeightCall_Call() {}

func (*Utility_WithWeightCall_ChildBounties) isUtility_WithWeightCall_Call() {}

func (*Utility_WithWeightCall_NominationPools) isUtility_WithWeightCall_Call() {}

func (*Utility_WithWeightCall_Gear) isUtility_WithWeightCall_Call() {}

func (*Utility_WithWeightCall_StakingRewards) isUtility_WithWeightCall_Call() {}

func (*Utility_WithWeightCall_GearVoucher) isUtility_WithWeightCall_Call() {}

type Referenda_System struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 *Value0 `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Referenda_System) Reset() {
	*x = Referenda_System{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Referenda_System) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Referenda_System) ProtoMessage() {}

func (x *Referenda_System) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Referenda_System.ProtoReflect.Descriptor instead.
func (*Referenda_System) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{48}
}

func (x *Referenda_System) GetValue0() *Value0 {
	if x != nil {
		return x.Value0
	}
	return nil
}

type FellowshipCollective_Index struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 *FellowshipCollective_TupleNull `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *FellowshipCollective_Index) Reset() {
	*x = FellowshipCollective_Index{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FellowshipCollective_Index) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FellowshipCollective_Index) ProtoMessage() {}

func (x *FellowshipCollective_Index) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FellowshipCollective_Index.ProtoReflect.Descriptor instead.
func (*FellowshipCollective_Index) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{49}
}

func (x *FellowshipCollective_Index) GetValue0() *FellowshipCollective_TupleNull {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Identity_New struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*Identity_New_Id
	//	*Identity_New_Index
	//	*Identity_New_Raw
	//	*Identity_New_Address32
	//	*Identity_New_Address20
	Value isIdentity_New_Value `protobuf_oneof:"value"`
}

func (x *Identity_New) Reset() {
	*x = Identity_New{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_New) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_New) ProtoMessage() {}

func (x *Identity_New) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_New.ProtoReflect.Descriptor instead.
func (*Identity_New) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{50}
}

func (m *Identity_New) GetValue() isIdentity_New_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Identity_New) GetId() *Identity_Id {
	if x, ok := x.GetValue().(*Identity_New_Id); ok {
		return x.Id
	}
	return nil
}

func (x *Identity_New) GetIndex() *Identity_Index {
	if x, ok := x.GetValue().(*Identity_New_Index); ok {
		return x.Index
	}
	return nil
}

func (x *Identity_New) GetRaw() *Identity_Raw {
	if x, ok := x.GetValue().(*Identity_New_Raw); ok {
		return x.Raw
	}
	return nil
}

func (x *Identity_New) GetAddress32() *Identity_Address32 {
	if x, ok := x.GetValue().(*Identity_New_Address32); ok {
		return x.Address32
	}
	return nil
}

func (x *Identity_New) GetAddress20() *Identity_Address20 {
	if x, ok := x.GetValue().(*Identity_New_Address20); ok {
		return x.Address20
	}
	return nil
}

type isIdentity_New_Value interface {
	isIdentity_New_Value()
}

type Identity_New_Id struct {
	Id *Identity_Id `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type Identity_New_Index struct {
	Index *Identity_Index `protobuf:"bytes,2,opt,name=index,proto3,oneof"`
}

type Identity_New_Raw struct {
	Raw *Identity_Raw `protobuf:"bytes,3,opt,name=raw,proto3,oneof"`
}

type Identity_New_Address32 struct {
	Address32 *Identity_Address32 `protobuf:"bytes,4,opt,name=address32,proto3,oneof"`
}

type Identity_New_Address20 struct {
	Address20 *Identity_Address20 `protobuf:"bytes,5,opt,name=address20,proto3,oneof"`
}

func (*Identity_New_Id) isIdentity_New_Value() {}

func (*Identity_New_Index) isIdentity_New_Value() {}

func (*Identity_New_Raw) isIdentity_New_Value() {}

func (*Identity_New_Address32) isIdentity_New_Value() {}

func (*Identity_New_Address20) isIdentity_New_Value() {}

type System_SetHeapPagesCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pages uint64 `protobuf:"varint,1,opt,name=pages,proto3" json:"pages,omitempty"`
}

func (x *System_SetHeapPagesCall) Reset() {
	*x = System_SetHeapPagesCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_SetHeapPagesCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_SetHeapPagesCall) ProtoMessage() {}

func (x *System_SetHeapPagesCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_SetHeapPagesCall.ProtoReflect.Descriptor instead.
func (*System_SetHeapPagesCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{51}
}

func (x *System_SetHeapPagesCall) GetPages() uint64 {
	if x != nil {
		return x.Pages
	}
	return 0
}

type BagsList_Index struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 *BagsList_TupleNull `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *BagsList_Index) Reset() {
	*x = BagsList_Index{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BagsList_Index) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BagsList_Index) ProtoMessage() {}

func (x *BagsList_Index) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BagsList_Index.ProtoReflect.Descriptor instead.
func (*BagsList_Index) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{52}
}

func (x *BagsList_Index) GetValue0() *BagsList_TupleNull {
	if x != nil {
		return x.Value0
	}
	return nil
}

type BagsList_PutInFrontOfOtherCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Heavier *BagsList_Heavier `protobuf:"bytes,1,opt,name=heavier,proto3" json:"heavier,omitempty"`
	Lighter *BagsList_Lighter `protobuf:"bytes,2,opt,name=lighter,proto3" json:"lighter,omitempty"`
}

func (x *BagsList_PutInFrontOfOtherCall) Reset() {
	*x = BagsList_PutInFrontOfOtherCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BagsList_PutInFrontOfOtherCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BagsList_PutInFrontOfOtherCall) ProtoMessage() {}

func (x *BagsList_PutInFrontOfOtherCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BagsList_PutInFrontOfOtherCall.ProtoReflect.Descriptor instead.
func (*BagsList_PutInFrontOfOtherCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{53}
}

func (x *BagsList_PutInFrontOfOtherCall) GetHeavier() *BagsList_Heavier {
	if x != nil {
		return x.Heavier
	}
	return nil
}

func (x *BagsList_PutInFrontOfOtherCall) GetLighter() *BagsList_Lighter {
	if x != nil {
		return x.Lighter
	}
	return nil
}

type Staking_MaxValidatorCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*Staking_MaxValidatorCount_Noop
	//	*Staking_MaxValidatorCount_Set
	//	*Staking_MaxValidatorCount_Remove
	Value isStaking_MaxValidatorCount_Value `protobuf_oneof:"value"`
}

func (x *Staking_MaxValidatorCount) Reset() {
	*x = Staking_MaxValidatorCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staking_MaxValidatorCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staking_MaxValidatorCount) ProtoMessage() {}

func (x *Staking_MaxValidatorCount) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staking_MaxValidatorCount.ProtoReflect.Descriptor instead.
func (*Staking_MaxValidatorCount) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{54}
}

func (m *Staking_MaxValidatorCount) GetValue() isStaking_MaxValidatorCount_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Staking_MaxValidatorCount) GetNoop() *Staking_Noop {
	if x, ok := x.GetValue().(*Staking_MaxValidatorCount_Noop); ok {
		return x.Noop
	}
	return nil
}

func (x *Staking_MaxValidatorCount) GetSet() *Staking_Set {
	if x, ok := x.GetValue().(*Staking_MaxValidatorCount_Set); ok {
		return x.Set
	}
	return nil
}

func (x *Staking_MaxValidatorCount) GetRemove() *Staking_Remove {
	if x, ok := x.GetValue().(*Staking_MaxValidatorCount_Remove); ok {
		return x.Remove
	}
	return nil
}

type isStaking_MaxValidatorCount_Value interface {
	isStaking_MaxValidatorCount_Value()
}

type Staking_MaxValidatorCount_Noop struct {
	Noop *Staking_Noop `protobuf:"bytes,1,opt,name=noop,proto3,oneof"`
}

type Staking_MaxValidatorCount_Set struct {
	Set *Staking_Set `protobuf:"bytes,2,opt,name=set,proto3,oneof"`
}

type Staking_MaxValidatorCount_Remove struct {
	Remove *Staking_Remove `protobuf:"bytes,3,opt,name=remove,proto3,oneof"`
}

func (*Staking_MaxValidatorCount_Noop) isStaking_MaxValidatorCount_Value() {}

func (*Staking_MaxValidatorCount_Set) isStaking_MaxValidatorCount_Value() {}

func (*Staking_MaxValidatorCount_Remove) isStaking_MaxValidatorCount_Value() {}

type Utility_AsDerivativeCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// Types that are assignable to Call:
	//
	//	*Utility_AsDerivativeCall_System
	//	*Utility_AsDerivativeCall_Timestamp
	//	*Utility_AsDerivativeCall_Babe
	//	*Utility_AsDerivativeCall_Grandpa
	//	*Utility_AsDerivativeCall_Balances
	//	*Utility_AsDerivativeCall_Vesting
	//	*Utility_AsDerivativeCall_BagsList
	//	*Utility_AsDerivativeCall_ImOnline
	//	*Utility_AsDerivativeCall_Staking
	//	*Utility_AsDerivativeCall_Session
	//	*Utility_AsDerivativeCall_Treasury
	//	*Utility_AsDerivativeCall_Utility
	//	*Utility_AsDerivativeCall_ConvictionVoting
	//	*Utility_AsDerivativeCall_Referenda
	//	*Utility_AsDerivativeCall_FellowshipCollective
	//	*Utility_AsDerivativeCall_FellowshipReferenda
	//	*Utility_AsDerivativeCall_Whitelist
	//	*Utility_AsDerivativeCall_Scheduler
	//	*Utility_AsDerivativeCall_Preimage
	//	*Utility_AsDerivativeCall_Identity
	//	*Utility_AsDerivativeCall_Proxy
	//	*Utility_AsDerivativeCall_Multisig
	//	*Utility_AsDerivativeCall_ElectionProviderMultiPhase
	//	*Utility_AsDerivativeCall_Bounties
	//	*Utility_AsDerivativeCall_ChildBounties
	//	*Utility_AsDerivativeCall_NominationPools
	//	*Utility_AsDerivativeCall_Gear
	//	*Utility_AsDerivativeCall_StakingRewards
	//	*Utility_AsDerivativeCall_GearVoucher
	Call isUtility_AsDerivativeCall_Call `protobuf_oneof:"call"`
}

func (x *Utility_AsDerivativeCall) Reset() {
	*x = Utility_AsDerivativeCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Utility_AsDerivativeCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Utility_AsDerivativeCall) ProtoMessage() {}

func (x *Utility_AsDerivativeCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Utility_AsDerivativeCall.ProtoReflect.Descriptor instead.
func (*Utility_AsDerivativeCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{55}
}

func (x *Utility_AsDerivativeCall) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (m *Utility_AsDerivativeCall) GetCall() isUtility_AsDerivativeCall_Call {
	if m != nil {
		return m.Call
	}
	return nil
}

func (x *Utility_AsDerivativeCall) GetSystem() *SystemPallet {
	if x, ok := x.GetCall().(*Utility_AsDerivativeCall_System); ok {
		return x.System
	}
	return nil
}

func (x *Utility_AsDerivativeCall) GetTimestamp() *TimestampPallet {
	if x, ok := x.GetCall().(*Utility_AsDerivativeCall_Timestamp); ok {
		return x.Timestamp
	}
	return nil
}

func (x *Utility_AsDerivativeCall) GetBabe() *BabePallet {
	if x, ok := x.GetCall().(*Utility_AsDerivativeCall_Babe); ok {
		return x.Babe
	}
	return nil
}

func (x *Utility_AsDerivativeCall) GetGrandpa() *GrandpaPallet {
	if x, ok := x.GetCall().(*Utility_AsDerivativeCall_Grandpa); ok {
		return x.Grandpa
	}
	return nil
}

func (x *Utility_AsDerivativeCall) GetBalances() *BalancesPallet {
	if x, ok := x.GetCall().(*Utility_AsDerivativeCall_Balances); ok {
		return x.Balances
	}
	return nil
}

func (x *Utility_AsDerivativeCall) GetVesting() *VestingPallet {
	if x, ok := x.GetCall().(*Utility_AsDerivativeCall_Vesting); ok {
		return x.Vesting
	}
	return nil
}

func (x *Utility_AsDerivativeCall) GetBagsList() *BagsListPallet {
	if x, ok := x.GetCall().(*Utility_AsDerivativeCall_BagsList); ok {
		return x.BagsList
	}
	return nil
}

func (x *Utility_AsDerivativeCall) GetImOnline() *ImOnlinePallet {
	if x, ok := x.GetCall().(*Utility_AsDerivativeCall_ImOnline); ok {
		return x.ImOnline
	}
	return nil
}

func (x *Utility_AsDerivativeCall) GetStaking() *StakingPallet {
	if x, ok := x.GetCall().(*Utility_AsDerivativeCall_Staking); ok {
		return x.Staking
	}
	return nil
}

func (x *Utility_AsDerivativeCall) GetSession() *SessionPallet {
	if x, ok := x.GetCall().(*Utility_AsDerivativeCall_Session); ok {
		return x.Session
	}
	return nil
}

func (x *Utility_AsDerivativeCall) GetTreasury() *TreasuryPallet {
	if x, ok := x.GetCall().(*Utility_AsDerivativeCall_Treasury); ok {
		return x.Treasury
	}
	return nil
}

func (x *Utility_AsDerivativeCall) GetUtility() *UtilityPallet {
	if x, ok := x.GetCall().(*Utility_AsDerivativeCall_Utility); ok {
		return x.Utility
	}
	return nil
}

func (x *Utility_AsDerivativeCall) GetConvictionVoting() *ConvictionVotingPallet {
	if x, ok := x.GetCall().(*Utility_AsDerivativeCall_ConvictionVoting); ok {
		return x.ConvictionVoting
	}
	return nil
}

func (x *Utility_AsDerivativeCall) GetReferenda() *ReferendaPallet {
	if x, ok := x.GetCall().(*Utility_AsDerivativeCall_Referenda); ok {
		return x.Referenda
	}
	return nil
}

func (x *Utility_AsDerivativeCall) GetFellowshipCollective() *FellowshipCollectivePallet {
	if x, ok := x.GetCall().(*Utility_AsDerivativeCall_FellowshipCollective); ok {
		return x.FellowshipCollective
	}
	return nil
}

func (x *Utility_AsDerivativeCall) GetFellowshipReferenda() *FellowshipReferendaPallet {
	if x, ok := x.GetCall().(*Utility_AsDerivativeCall_FellowshipReferenda); ok {
		return x.FellowshipReferenda
	}
	return nil
}

func (x *Utility_AsDerivativeCall) GetWhitelist() *WhitelistPallet {
	if x, ok := x.GetCall().(*Utility_AsDerivativeCall_Whitelist); ok {
		return x.Whitelist
	}
	return nil
}

func (x *Utility_AsDerivativeCall) GetScheduler() *SchedulerPallet {
	if x, ok := x.GetCall().(*Utility_AsDerivativeCall_Scheduler); ok {
		return x.Scheduler
	}
	return nil
}

func (x *Utility_AsDerivativeCall) GetPreimage() *PreimagePallet {
	if x, ok := x.GetCall().(*Utility_AsDerivativeCall_Preimage); ok {
		return x.Preimage
	}
	return nil
}

func (x *Utility_AsDerivativeCall) GetIdentity() *IdentityPallet {
	if x, ok := x.GetCall().(*Utility_AsDerivativeCall_Identity); ok {
		return x.Identity
	}
	return nil
}

func (x *Utility_AsDerivativeCall) GetProxy() *ProxyPallet {
	if x, ok := x.GetCall().(*Utility_AsDerivativeCall_Proxy); ok {
		return x.Proxy
	}
	return nil
}

func (x *Utility_AsDerivativeCall) GetMultisig() *MultisigPallet {
	if x, ok := x.GetCall().(*Utility_AsDerivativeCall_Multisig); ok {
		return x.Multisig
	}
	return nil
}

func (x *Utility_AsDerivativeCall) GetElectionProviderMultiPhase() *ElectionProviderMultiPhasePallet {
	if x, ok := x.GetCall().(*Utility_AsDerivativeCall_ElectionProviderMultiPhase); ok {
		return x.ElectionProviderMultiPhase
	}
	return nil
}

func (x *Utility_AsDerivativeCall) GetBounties() *BountiesPallet {
	if x, ok := x.GetCall().(*Utility_AsDerivativeCall_Bounties); ok {
		return x.Bounties
	}
	return nil
}

func (x *Utility_AsDerivativeCall) GetChildBounties() *ChildBountiesPallet {
	if x, ok := x.GetCall().(*Utility_AsDerivativeCall_ChildBounties); ok {
		return x.ChildBounties
	}
	return nil
}

func (x *Utility_AsDerivativeCall) GetNominationPools() *NominationPoolsPallet {
	if x, ok := x.GetCall().(*Utility_AsDerivativeCall_NominationPools); ok {
		return x.NominationPools
	}
	return nil
}

func (x *Utility_AsDerivativeCall) GetGear() *GearPallet {
	if x, ok := x.GetCall().(*Utility_AsDerivativeCall_Gear); ok {
		return x.Gear
	}
	return nil
}

func (x *Utility_AsDerivativeCall) GetStakingRewards() *StakingRewardsPallet {
	if x, ok := x.GetCall().(*Utility_AsDerivativeCall_StakingRewards); ok {
		return x.StakingRewards
	}
	return nil
}

func (x *Utility_AsDerivativeCall) GetGearVoucher() *GearVoucherPallet {
	if x, ok := x.GetCall().(*Utility_AsDerivativeCall_GearVoucher); ok {
		return x.GearVoucher
	}
	return nil
}

type isUtility_AsDerivativeCall_Call interface {
	isUtility_AsDerivativeCall_Call()
}

type Utility_AsDerivativeCall_System struct {
	System *SystemPallet `protobuf:"bytes,2,opt,name=system,proto3,oneof"`
}

type Utility_AsDerivativeCall_Timestamp struct {
	Timestamp *TimestampPallet `protobuf:"bytes,3,opt,name=timestamp,proto3,oneof"`
}

type Utility_AsDerivativeCall_Babe struct {
	Babe *BabePallet `protobuf:"bytes,4,opt,name=babe,proto3,oneof"`
}

type Utility_AsDerivativeCall_Grandpa struct {
	Grandpa *GrandpaPallet `protobuf:"bytes,5,opt,name=grandpa,proto3,oneof"`
}

type Utility_AsDerivativeCall_Balances struct {
	Balances *BalancesPallet `protobuf:"bytes,6,opt,name=balances,proto3,oneof"`
}

type Utility_AsDerivativeCall_Vesting struct {
	Vesting *VestingPallet `protobuf:"bytes,7,opt,name=vesting,proto3,oneof"`
}

type Utility_AsDerivativeCall_BagsList struct {
	BagsList *BagsListPallet `protobuf:"bytes,8,opt,name=bags_list,json=bagsList,proto3,oneof"`
}

type Utility_AsDerivativeCall_ImOnline struct {
	ImOnline *ImOnlinePallet `protobuf:"bytes,9,opt,name=im_online,json=imOnline,proto3,oneof"`
}

type Utility_AsDerivativeCall_Staking struct {
	Staking *StakingPallet `protobuf:"bytes,10,opt,name=staking,proto3,oneof"`
}

type Utility_AsDerivativeCall_Session struct {
	Session *SessionPallet `protobuf:"bytes,11,opt,name=session,proto3,oneof"`
}

type Utility_AsDerivativeCall_Treasury struct {
	Treasury *TreasuryPallet `protobuf:"bytes,12,opt,name=treasury,proto3,oneof"`
}

type Utility_AsDerivativeCall_Utility struct {
	Utility *UtilityPallet `protobuf:"bytes,13,opt,name=utility,proto3,oneof"`
}

type Utility_AsDerivativeCall_ConvictionVoting struct {
	ConvictionVoting *ConvictionVotingPallet `protobuf:"bytes,14,opt,name=conviction_voting,json=convictionVoting,proto3,oneof"`
}

type Utility_AsDerivativeCall_Referenda struct {
	Referenda *ReferendaPallet `protobuf:"bytes,15,opt,name=referenda,proto3,oneof"`
}

type Utility_AsDerivativeCall_FellowshipCollective struct {
	FellowshipCollective *FellowshipCollectivePallet `protobuf:"bytes,16,opt,name=fellowship_collective,json=fellowshipCollective,proto3,oneof"`
}

type Utility_AsDerivativeCall_FellowshipReferenda struct {
	FellowshipReferenda *FellowshipReferendaPallet `protobuf:"bytes,17,opt,name=fellowship_referenda,json=fellowshipReferenda,proto3,oneof"`
}

type Utility_AsDerivativeCall_Whitelist struct {
	Whitelist *WhitelistPallet `protobuf:"bytes,18,opt,name=whitelist,proto3,oneof"`
}

type Utility_AsDerivativeCall_Scheduler struct {
	Scheduler *SchedulerPallet `protobuf:"bytes,19,opt,name=scheduler,proto3,oneof"`
}

type Utility_AsDerivativeCall_Preimage struct {
	Preimage *PreimagePallet `protobuf:"bytes,20,opt,name=preimage,proto3,oneof"`
}

type Utility_AsDerivativeCall_Identity struct {
	Identity *IdentityPallet `protobuf:"bytes,21,opt,name=identity,proto3,oneof"`
}

type Utility_AsDerivativeCall_Proxy struct {
	Proxy *ProxyPallet `protobuf:"bytes,22,opt,name=proxy,proto3,oneof"`
}

type Utility_AsDerivativeCall_Multisig struct {
	Multisig *MultisigPallet `protobuf:"bytes,23,opt,name=multisig,proto3,oneof"`
}

type Utility_AsDerivativeCall_ElectionProviderMultiPhase struct {
	ElectionProviderMultiPhase *ElectionProviderMultiPhasePallet `protobuf:"bytes,24,opt,name=election_provider_multi_phase,json=electionProviderMultiPhase,proto3,oneof"`
}

type Utility_AsDerivativeCall_Bounties struct {
	Bounties *BountiesPallet `protobuf:"bytes,25,opt,name=bounties,proto3,oneof"`
}

type Utility_AsDerivativeCall_ChildBounties struct {
	ChildBounties *ChildBountiesPallet `protobuf:"bytes,26,opt,name=child_bounties,json=childBounties,proto3,oneof"`
}

type Utility_AsDerivativeCall_NominationPools struct {
	NominationPools *NominationPoolsPallet `protobuf:"bytes,27,opt,name=nomination_pools,json=nominationPools,proto3,oneof"`
}

type Utility_AsDerivativeCall_Gear struct {
	Gear *GearPallet `protobuf:"bytes,28,opt,name=gear,proto3,oneof"`
}

type Utility_AsDerivativeCall_StakingRewards struct {
	StakingRewards *StakingRewardsPallet `protobuf:"bytes,29,opt,name=staking_rewards,json=stakingRewards,proto3,oneof"`
}

type Utility_AsDerivativeCall_GearVoucher struct {
	GearVoucher *GearVoucherPallet `protobuf:"bytes,30,opt,name=gear_voucher,json=gearVoucher,proto3,oneof"`
}

func (*Utility_AsDerivativeCall_System) isUtility_AsDerivativeCall_Call() {}

func (*Utility_AsDerivativeCall_Timestamp) isUtility_AsDerivativeCall_Call() {}

func (*Utility_AsDerivativeCall_Babe) isUtility_AsDerivativeCall_Call() {}

func (*Utility_AsDerivativeCall_Grandpa) isUtility_AsDerivativeCall_Call() {}

func (*Utility_AsDerivativeCall_Balances) isUtility_AsDerivativeCall_Call() {}

func (*Utility_AsDerivativeCall_Vesting) isUtility_AsDerivativeCall_Call() {}

func (*Utility_AsDerivativeCall_BagsList) isUtility_AsDerivativeCall_Call() {}

func (*Utility_AsDerivativeCall_ImOnline) isUtility_AsDerivativeCall_Call() {}

func (*Utility_AsDerivativeCall_Staking) isUtility_AsDerivativeCall_Call() {}

func (*Utility_AsDerivativeCall_Session) isUtility_AsDerivativeCall_Call() {}

func (*Utility_AsDerivativeCall_Treasury) isUtility_AsDerivativeCall_Call() {}

func (*Utility_AsDerivativeCall_Utility) isUtility_AsDerivativeCall_Call() {}

func (*Utility_AsDerivativeCall_ConvictionVoting) isUtility_AsDerivativeCall_Call() {}

func (*Utility_AsDerivativeCall_Referenda) isUtility_AsDerivativeCall_Call() {}

func (*Utility_AsDerivativeCall_FellowshipCollective) isUtility_AsDerivativeCall_Call() {}

func (*Utility_AsDerivativeCall_FellowshipReferenda) isUtility_AsDerivativeCall_Call() {}

func (*Utility_AsDerivativeCall_Whitelist) isUtility_AsDerivativeCall_Call() {}

func (*Utility_AsDerivativeCall_Scheduler) isUtility_AsDerivativeCall_Call() {}

func (*Utility_AsDerivativeCall_Preimage) isUtility_AsDerivativeCall_Call() {}

func (*Utility_AsDerivativeCall_Identity) isUtility_AsDerivativeCall_Call() {}

func (*Utility_AsDerivativeCall_Proxy) isUtility_AsDerivativeCall_Call() {}

func (*Utility_AsDerivativeCall_Multisig) isUtility_AsDerivativeCall_Call() {}

func (*Utility_AsDerivativeCall_ElectionProviderMultiPhase) isUtility_AsDerivativeCall_Call() {}

func (*Utility_AsDerivativeCall_Bounties) isUtility_AsDerivativeCall_Call() {}

func (*Utility_AsDerivativeCall_ChildBounties) isUtility_AsDerivativeCall_Call() {}

func (*Utility_AsDerivativeCall_NominationPools) isUtility_AsDerivativeCall_Call() {}

func (*Utility_AsDerivativeCall_Gear) isUtility_AsDerivativeCall_Call() {}

func (*Utility_AsDerivativeCall_StakingRewards) isUtility_AsDerivativeCall_Call() {}

func (*Utility_AsDerivativeCall_GearVoucher) isUtility_AsDerivativeCall_Call() {}

type Multisig_ApproveAsMultiCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Threshold        uint32                            `protobuf:"varint,1,opt,name=threshold,proto3" json:"threshold,omitempty"`
	OtherSignatories []*SpCoreCryptoAccountId32        `protobuf:"bytes,2,rep,name=other_signatories,json=otherSignatories,proto3" json:"other_signatories,omitempty"`
	MaybeTimepoint   *Multisig_PalletMultisigTimepoint `protobuf:"bytes,3,opt,name=maybe_timepoint,json=maybeTimepoint,proto3,oneof" json:"maybe_timepoint,omitempty"`
	CallHash         []byte                            `protobuf:"bytes,4,opt,name=call_hash,json=callHash,proto3" json:"call_hash,omitempty"`
	MaxWeight        *SpWeightsWeightV2Weight          `protobuf:"bytes,5,opt,name=max_weight,json=maxWeight,proto3" json:"max_weight,omitempty"`
}

func (x *Multisig_ApproveAsMultiCall) Reset() {
	*x = Multisig_ApproveAsMultiCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Multisig_ApproveAsMultiCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Multisig_ApproveAsMultiCall) ProtoMessage() {}

func (x *Multisig_ApproveAsMultiCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Multisig_ApproveAsMultiCall.ProtoReflect.Descriptor instead.
func (*Multisig_ApproveAsMultiCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{56}
}

func (x *Multisig_ApproveAsMultiCall) GetThreshold() uint32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *Multisig_ApproveAsMultiCall) GetOtherSignatories() []*SpCoreCryptoAccountId32 {
	if x != nil {
		return x.OtherSignatories
	}
	return nil
}

func (x *Multisig_ApproveAsMultiCall) GetMaybeTimepoint() *Multisig_PalletMultisigTimepoint {
	if x != nil {
		return x.MaybeTimepoint
	}
	return nil
}

func (x *Multisig_ApproveAsMultiCall) GetCallHash() []byte {
	if x != nil {
		return x.CallHash
	}
	return nil
}

func (x *Multisig_ApproveAsMultiCall) GetMaxWeight() *SpWeightsWeightV2Weight {
	if x != nil {
		return x.MaxWeight
	}
	return nil
}

type ElectionProviderMultiPhase_TupleSpCoreCryptoAccountId32String struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 *SpCoreCryptoAccountId32 `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
	Value1 string                   `protobuf:"bytes,2,opt,name=value1,proto3" json:"value1,omitempty"`
}

func (x *ElectionProviderMultiPhase_TupleSpCoreCryptoAccountId32String) Reset() {
	*x = ElectionProviderMultiPhase_TupleSpCoreCryptoAccountId32String{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectionProviderMultiPhase_TupleSpCoreCryptoAccountId32String) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectionProviderMultiPhase_TupleSpCoreCryptoAccountId32String) ProtoMessage() {}

func (x *ElectionProviderMultiPhase_TupleSpCoreCryptoAccountId32String) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectionProviderMultiPhase_TupleSpCoreCryptoAccountId32String.ProtoReflect.Descriptor instead.
func (*ElectionProviderMultiPhase_TupleSpCoreCryptoAccountId32String) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{57}
}

func (x *ElectionProviderMultiPhase_TupleSpCoreCryptoAccountId32String) GetValue0() *SpCoreCryptoAccountId32 {
	if x != nil {
		return x.Value0
	}
	return nil
}

func (x *ElectionProviderMultiPhase_TupleSpCoreCryptoAccountId32String) GetValue1() string {
	if x != nil {
		return x.Value1
	}
	return ""
}

type NominationPools_CreateWithPoolIdCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount    string                     `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Root      *NominationPools_Root      `protobuf:"bytes,2,opt,name=root,proto3" json:"root,omitempty"`
	Nominator *NominationPools_Nominator `protobuf:"bytes,3,opt,name=nominator,proto3" json:"nominator,omitempty"`
	Bouncer   *NominationPools_Bouncer   `protobuf:"bytes,4,opt,name=bouncer,proto3" json:"bouncer,omitempty"`
	PoolId    uint32                     `protobuf:"varint,5,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
}

func (x *NominationPools_CreateWithPoolIdCall) Reset() {
	*x = NominationPools_CreateWithPoolIdCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NominationPools_CreateWithPoolIdCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NominationPools_CreateWithPoolIdCall) ProtoMessage() {}

func (x *NominationPools_CreateWithPoolIdCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NominationPools_CreateWithPoolIdCall.ProtoReflect.Descriptor instead.
func (*NominationPools_CreateWithPoolIdCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{58}
}

func (x *NominationPools_CreateWithPoolIdCall) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *NominationPools_CreateWithPoolIdCall) GetRoot() *NominationPools_Root {
	if x != nil {
		return x.Root
	}
	return nil
}

func (x *NominationPools_CreateWithPoolIdCall) GetNominator() *NominationPools_Nominator {
	if x != nil {
		return x.Nominator
	}
	return nil
}

func (x *NominationPools_CreateWithPoolIdCall) GetBouncer() *NominationPools_Bouncer {
	if x != nil {
		return x.Bouncer
	}
	return nil
}

func (x *NominationPools_CreateWithPoolIdCall) GetPoolId() uint32 {
	if x != nil {
		return x.PoolId
	}
	return 0
}

type ChildBounties_Address20 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *ChildBounties_Address20) Reset() {
	*x = ChildBounties_Address20{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChildBounties_Address20) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChildBounties_Address20) ProtoMessage() {}

func (x *ChildBounties_Address20) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChildBounties_Address20.ProtoReflect.Descriptor instead.
func (*ChildBounties_Address20) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{59}
}

func (x *ChildBounties_Address20) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Babe_Other struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Babe_Other) Reset() {
	*x = Babe_Other{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Babe_Other) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Babe_Other) ProtoMessage() {}

func (x *Babe_Other) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Babe_Other.ProtoReflect.Descriptor instead.
func (*Babe_Other) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{60}
}

func (x *Babe_Other) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Babe_ReportEquivocationCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EquivocationProof *SpConsensusSlotsEquivocationProof `protobuf:"bytes,1,opt,name=equivocation_proof,json=equivocationProof,proto3" json:"equivocation_proof,omitempty"`
	KeyOwnerProof     *SpSessionMembershipProof          `protobuf:"bytes,2,opt,name=key_owner_proof,json=keyOwnerProof,proto3" json:"key_owner_proof,omitempty"`
}

func (x *Babe_ReportEquivocationCall) Reset() {
	*x = Babe_ReportEquivocationCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Babe_ReportEquivocationCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Babe_ReportEquivocationCall) ProtoMessage() {}

func (x *Babe_ReportEquivocationCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Babe_ReportEquivocationCall.ProtoReflect.Descriptor instead.
func (*Babe_ReportEquivocationCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{61}
}

func (x *Babe_ReportEquivocationCall) GetEquivocationProof() *SpConsensusSlotsEquivocationProof {
	if x != nil {
		return x.EquivocationProof
	}
	return nil
}

func (x *Babe_ReportEquivocationCall) GetKeyOwnerProof() *SpSessionMembershipProof {
	if x != nil {
		return x.KeyOwnerProof
	}
	return nil
}

type Staking_UnbondCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Staking_UnbondCall) Reset() {
	*x = Staking_UnbondCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staking_UnbondCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staking_UnbondCall) ProtoMessage() {}

func (x *Staking_UnbondCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staking_UnbondCall.ProtoReflect.Descriptor instead.
func (*Staking_UnbondCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{62}
}

func (x *Staking_UnbondCall) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type ConvictionVoting_SplitAbstain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Aye     string `protobuf:"bytes,1,opt,name=aye,proto3" json:"aye,omitempty"`
	Nay     string `protobuf:"bytes,2,opt,name=nay,proto3" json:"nay,omitempty"`
	Abstain string `protobuf:"bytes,3,opt,name=abstain,proto3" json:"abstain,omitempty"`
}

func (x *ConvictionVoting_SplitAbstain) Reset() {
	*x = ConvictionVoting_SplitAbstain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConvictionVoting_SplitAbstain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvictionVoting_SplitAbstain) ProtoMessage() {}

func (x *ConvictionVoting_SplitAbstain) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvictionVoting_SplitAbstain.ProtoReflect.Descriptor instead.
func (*ConvictionVoting_SplitAbstain) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{63}
}

func (x *ConvictionVoting_SplitAbstain) GetAye() string {
	if x != nil {
		return x.Aye
	}
	return ""
}

func (x *ConvictionVoting_SplitAbstain) GetNay() string {
	if x != nil {
		return x.Nay
	}
	return ""
}

func (x *ConvictionVoting_SplitAbstain) GetAbstain() string {
	if x != nil {
		return x.Abstain
	}
	return ""
}

type Proxy_AddProxyCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Delegate  *Proxy_Delegate  `protobuf:"bytes,1,opt,name=delegate,proto3" json:"delegate,omitempty"`
	ProxyType *Proxy_ProxyType `protobuf:"bytes,2,opt,name=proxy_type,json=proxyType,proto3" json:"proxy_type,omitempty"`
	Delay     uint32           `protobuf:"varint,3,opt,name=delay,proto3" json:"delay,omitempty"`
}

func (x *Proxy_AddProxyCall) Reset() {
	*x = Proxy_AddProxyCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proxy_AddProxyCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proxy_AddProxyCall) ProtoMessage() {}

func (x *Proxy_AddProxyCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proxy_AddProxyCall.ProtoReflect.Descriptor instead.
func (*Proxy_AddProxyCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{64}
}

func (x *Proxy_AddProxyCall) GetDelegate() *Proxy_Delegate {
	if x != nil {
		return x.Delegate
	}
	return nil
}

func (x *Proxy_AddProxyCall) GetProxyType() *Proxy_ProxyType {
	if x != nil {
		return x.ProxyType
	}
	return nil
}

func (x *Proxy_AddProxyCall) GetDelay() uint32 {
	if x != nil {
		return x.Delay
	}
	return 0
}

type System_TupleSystemItemsListSystemItemsList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
	Value1 []byte `protobuf:"bytes,2,opt,name=value1,proto3" json:"value1,omitempty"`
}

func (x *System_TupleSystemItemsListSystemItemsList) Reset() {
	*x = System_TupleSystemItemsListSystemItemsList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_TupleSystemItemsListSystemItemsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_TupleSystemItemsListSystemItemsList) ProtoMessage() {}

func (x *System_TupleSystemItemsListSystemItemsList) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_TupleSystemItemsListSystemItemsList.ProtoReflect.Descriptor instead.
func (*System_TupleSystemItemsListSystemItemsList) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{65}
}

func (x *System_TupleSystemItemsListSystemItemsList) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

func (x *System_TupleSystemItemsListSystemItemsList) GetValue1() []byte {
	if x != nil {
		return x.Value1
	}
	return nil
}

type Staking_NominateCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Targets []*SpRuntimeMultiaddressMultiAddress `protobuf:"bytes,1,rep,name=targets,proto3" json:"targets,omitempty"`
}

func (x *Staking_NominateCall) Reset() {
	*x = Staking_NominateCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staking_NominateCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staking_NominateCall) ProtoMessage() {}

func (x *Staking_NominateCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staking_NominateCall.ProtoReflect.Descriptor instead.
func (*Staking_NominateCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{66}
}

func (x *Staking_NominateCall) GetTargets() []*SpRuntimeMultiaddressMultiAddress {
	if x != nil {
		return x.Targets
	}
	return nil
}

type Identity_Raw29 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Identity_Raw29) Reset() {
	*x = Identity_Raw29{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_Raw29) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_Raw29) ProtoMessage() {}

func (x *Identity_Raw29) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_Raw29.ProtoReflect.Descriptor instead.
func (*Identity_Raw29) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{67}
}

func (x *Identity_Raw29) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type ElectionProviderMultiPhase_TupleUint32Uint32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 uint32 `protobuf:"varint,1,opt,name=value0,proto3" json:"value0,omitempty"`
	Value1 uint32 `protobuf:"varint,2,opt,name=value1,proto3" json:"value1,omitempty"`
}

func (x *ElectionProviderMultiPhase_TupleUint32Uint32) Reset() {
	*x = ElectionProviderMultiPhase_TupleUint32Uint32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectionProviderMultiPhase_TupleUint32Uint32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectionProviderMultiPhase_TupleUint32Uint32) ProtoMessage() {}

func (x *ElectionProviderMultiPhase_TupleUint32Uint32) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectionProviderMultiPhase_TupleUint32Uint32.ProtoReflect.Descriptor instead.
func (*ElectionProviderMultiPhase_TupleUint32Uint32) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{68}
}

func (x *ElectionProviderMultiPhase_TupleUint32Uint32) GetValue0() uint32 {
	if x != nil {
		return x.Value0
	}
	return 0
}

func (x *ElectionProviderMultiPhase_TupleUint32Uint32) GetValue1() uint32 {
	if x != nil {
		return x.Value1
	}
	return 0
}

type NominationPools_SetConfigsCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinJoinBond         *NominationPools_MinJoinBond         `protobuf:"bytes,1,opt,name=min_join_bond,json=minJoinBond,proto3" json:"min_join_bond,omitempty"`
	MinCreateBond       *NominationPools_MinCreateBond       `protobuf:"bytes,2,opt,name=min_create_bond,json=minCreateBond,proto3" json:"min_create_bond,omitempty"`
	MaxPools            *NominationPools_MaxPools            `protobuf:"bytes,3,opt,name=max_pools,json=maxPools,proto3" json:"max_pools,omitempty"`
	MaxMembers          *NominationPools_MaxMembers          `protobuf:"bytes,4,opt,name=max_members,json=maxMembers,proto3" json:"max_members,omitempty"`
	MaxMembersPerPool   *NominationPools_MaxMembersPerPool   `protobuf:"bytes,5,opt,name=max_members_per_pool,json=maxMembersPerPool,proto3" json:"max_members_per_pool,omitempty"`
	GlobalMaxCommission *NominationPools_GlobalMaxCommission `protobuf:"bytes,6,opt,name=global_max_commission,json=globalMaxCommission,proto3" json:"global_max_commission,omitempty"`
}

func (x *NominationPools_SetConfigsCall) Reset() {
	*x = NominationPools_SetConfigsCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NominationPools_SetConfigsCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NominationPools_SetConfigsCall) ProtoMessage() {}

func (x *NominationPools_SetConfigsCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NominationPools_SetConfigsCall.ProtoReflect.Descriptor instead.
func (*NominationPools_SetConfigsCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{69}
}

func (x *NominationPools_SetConfigsCall) GetMinJoinBond() *NominationPools_MinJoinBond {
	if x != nil {
		return x.MinJoinBond
	}
	return nil
}

func (x *NominationPools_SetConfigsCall) GetMinCreateBond() *NominationPools_MinCreateBond {
	if x != nil {
		return x.MinCreateBond
	}
	return nil
}

func (x *NominationPools_SetConfigsCall) GetMaxPools() *NominationPools_MaxPools {
	if x != nil {
		return x.MaxPools
	}
	return nil
}

func (x *NominationPools_SetConfigsCall) GetMaxMembers() *NominationPools_MaxMembers {
	if x != nil {
		return x.MaxMembers
	}
	return nil
}

func (x *NominationPools_SetConfigsCall) GetMaxMembersPerPool() *NominationPools_MaxMembersPerPool {
	if x != nil {
		return x.MaxMembersPerPool
	}
	return nil
}

func (x *NominationPools_SetConfigsCall) GetGlobalMaxCommission() *NominationPools_GlobalMaxCommission {
	if x != nil {
		return x.GlobalMaxCommission
	}
	return nil
}

type SpConsensusGrandpaAppPublic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 *SpCoreEd25519Public `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *SpConsensusGrandpaAppPublic) Reset() {
	*x = SpConsensusGrandpaAppPublic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpConsensusGrandpaAppPublic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpConsensusGrandpaAppPublic) ProtoMessage() {}

func (x *SpConsensusGrandpaAppPublic) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpConsensusGrandpaAppPublic.ProtoReflect.Descriptor instead.
func (*SpConsensusGrandpaAppPublic) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{70}
}

func (x *SpConsensusGrandpaAppPublic) GetValue0() *SpCoreEd25519Public {
	if x != nil {
		return x.Value0
	}
	return nil
}

type ConvictionVoting_Standard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vote    *ConvictionVoting_PalletConvictionVotingVoteVote `protobuf:"bytes,1,opt,name=vote,proto3" json:"vote,omitempty"`
	Balance string                                           `protobuf:"bytes,2,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *ConvictionVoting_Standard) Reset() {
	*x = ConvictionVoting_Standard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConvictionVoting_Standard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvictionVoting_Standard) ProtoMessage() {}

func (x *ConvictionVoting_Standard) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvictionVoting_Standard.ProtoReflect.Descriptor instead.
func (*ConvictionVoting_Standard) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{71}
}

func (x *ConvictionVoting_Standard) GetVote() *ConvictionVoting_PalletConvictionVotingVoteVote {
	if x != nil {
		return x.Vote
	}
	return nil
}

func (x *ConvictionVoting_Standard) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

type Identity_SetIdentityCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Identity_PalletIdentitySimpleIdentityInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *Identity_SetIdentityCall) Reset() {
	*x = Identity_SetIdentityCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_SetIdentityCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_SetIdentityCall) ProtoMessage() {}

func (x *Identity_SetIdentityCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_SetIdentityCall.ProtoReflect.Descriptor instead.
func (*Identity_SetIdentityCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{72}
}

func (x *Identity_SetIdentityCall) GetInfo() *Identity_PalletIdentitySimpleIdentityInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type Proxy_ProxyAnnouncedCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Delegate       *Proxy_Delegate       `protobuf:"bytes,1,opt,name=delegate,proto3" json:"delegate,omitempty"`
	Real           *Proxy_Real           `protobuf:"bytes,2,opt,name=real,proto3" json:"real,omitempty"`
	ForceProxyType *Proxy_ForceProxyType `protobuf:"bytes,3,opt,name=force_proxy_type,json=forceProxyType,proto3,oneof" json:"force_proxy_type,omitempty"`
	// Types that are assignable to Call:
	//
	//	*Proxy_ProxyAnnouncedCall_System
	//	*Proxy_ProxyAnnouncedCall_Timestamp
	//	*Proxy_ProxyAnnouncedCall_Babe
	//	*Proxy_ProxyAnnouncedCall_Grandpa
	//	*Proxy_ProxyAnnouncedCall_Balances
	//	*Proxy_ProxyAnnouncedCall_Vesting
	//	*Proxy_ProxyAnnouncedCall_BagsList
	//	*Proxy_ProxyAnnouncedCall_ImOnline
	//	*Proxy_ProxyAnnouncedCall_Staking
	//	*Proxy_ProxyAnnouncedCall_Session
	//	*Proxy_ProxyAnnouncedCall_Treasury
	//	*Proxy_ProxyAnnouncedCall_Utility
	//	*Proxy_ProxyAnnouncedCall_ConvictionVoting
	//	*Proxy_ProxyAnnouncedCall_Referenda
	//	*Proxy_ProxyAnnouncedCall_FellowshipCollective
	//	*Proxy_ProxyAnnouncedCall_FellowshipReferenda
	//	*Proxy_ProxyAnnouncedCall_Whitelist
	//	*Proxy_ProxyAnnouncedCall_Scheduler
	//	*Proxy_ProxyAnnouncedCall_Preimage
	//	*Proxy_ProxyAnnouncedCall_Identity
	//	*Proxy_ProxyAnnouncedCall_Proxy
	//	*Proxy_ProxyAnnouncedCall_Multisig
	//	*Proxy_ProxyAnnouncedCall_ElectionProviderMultiPhase
	//	*Proxy_ProxyAnnouncedCall_Bounties
	//	*Proxy_ProxyAnnouncedCall_ChildBounties
	//	*Proxy_ProxyAnnouncedCall_NominationPools
	//	*Proxy_ProxyAnnouncedCall_Gear
	//	*Proxy_ProxyAnnouncedCall_StakingRewards
	//	*Proxy_ProxyAnnouncedCall_GearVoucher
	Call isProxy_ProxyAnnouncedCall_Call `protobuf_oneof:"call"`
}

func (x *Proxy_ProxyAnnouncedCall) Reset() {
	*x = Proxy_ProxyAnnouncedCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proxy_ProxyAnnouncedCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proxy_ProxyAnnouncedCall) ProtoMessage() {}

func (x *Proxy_ProxyAnnouncedCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proxy_ProxyAnnouncedCall.ProtoReflect.Descriptor instead.
func (*Proxy_ProxyAnnouncedCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{73}
}

func (x *Proxy_ProxyAnnouncedCall) GetDelegate() *Proxy_Delegate {
	if x != nil {
		return x.Delegate
	}
	return nil
}

func (x *Proxy_ProxyAnnouncedCall) GetReal() *Proxy_Real {
	if x != nil {
		return x.Real
	}
	return nil
}

func (x *Proxy_ProxyAnnouncedCall) GetForceProxyType() *Proxy_ForceProxyType {
	if x != nil {
		return x.ForceProxyType
	}
	return nil
}

func (m *Proxy_ProxyAnnouncedCall) GetCall() isProxy_ProxyAnnouncedCall_Call {
	if m != nil {
		return m.Call
	}
	return nil
}

func (x *Proxy_ProxyAnnouncedCall) GetSystem() *SystemPallet {
	if x, ok := x.GetCall().(*Proxy_ProxyAnnouncedCall_System); ok {
		return x.System
	}
	return nil
}

func (x *Proxy_ProxyAnnouncedCall) GetTimestamp() *TimestampPallet {
	if x, ok := x.GetCall().(*Proxy_ProxyAnnouncedCall_Timestamp); ok {
		return x.Timestamp
	}
	return nil
}

func (x *Proxy_ProxyAnnouncedCall) GetBabe() *BabePallet {
	if x, ok := x.GetCall().(*Proxy_ProxyAnnouncedCall_Babe); ok {
		return x.Babe
	}
	return nil
}

func (x *Proxy_ProxyAnnouncedCall) GetGrandpa() *GrandpaPallet {
	if x, ok := x.GetCall().(*Proxy_ProxyAnnouncedCall_Grandpa); ok {
		return x.Grandpa
	}
	return nil
}

func (x *Proxy_ProxyAnnouncedCall) GetBalances() *BalancesPallet {
	if x, ok := x.GetCall().(*Proxy_ProxyAnnouncedCall_Balances); ok {
		return x.Balances
	}
	return nil
}

func (x *Proxy_ProxyAnnouncedCall) GetVesting() *VestingPallet {
	if x, ok := x.GetCall().(*Proxy_ProxyAnnouncedCall_Vesting); ok {
		return x.Vesting
	}
	return nil
}

func (x *Proxy_ProxyAnnouncedCall) GetBagsList() *BagsListPallet {
	if x, ok := x.GetCall().(*Proxy_ProxyAnnouncedCall_BagsList); ok {
		return x.BagsList
	}
	return nil
}

func (x *Proxy_ProxyAnnouncedCall) GetImOnline() *ImOnlinePallet {
	if x, ok := x.GetCall().(*Proxy_ProxyAnnouncedCall_ImOnline); ok {
		return x.ImOnline
	}
	return nil
}

func (x *Proxy_ProxyAnnouncedCall) GetStaking() *StakingPallet {
	if x, ok := x.GetCall().(*Proxy_ProxyAnnouncedCall_Staking); ok {
		return x.Staking
	}
	return nil
}

func (x *Proxy_ProxyAnnouncedCall) GetSession() *SessionPallet {
	if x, ok := x.GetCall().(*Proxy_ProxyAnnouncedCall_Session); ok {
		return x.Session
	}
	return nil
}

func (x *Proxy_ProxyAnnouncedCall) GetTreasury() *TreasuryPallet {
	if x, ok := x.GetCall().(*Proxy_ProxyAnnouncedCall_Treasury); ok {
		return x.Treasury
	}
	return nil
}

func (x *Proxy_ProxyAnnouncedCall) GetUtility() *UtilityPallet {
	if x, ok := x.GetCall().(*Proxy_ProxyAnnouncedCall_Utility); ok {
		return x.Utility
	}
	return nil
}

func (x *Proxy_ProxyAnnouncedCall) GetConvictionVoting() *ConvictionVotingPallet {
	if x, ok := x.GetCall().(*Proxy_ProxyAnnouncedCall_ConvictionVoting); ok {
		return x.ConvictionVoting
	}
	return nil
}

func (x *Proxy_ProxyAnnouncedCall) GetReferenda() *ReferendaPallet {
	if x, ok := x.GetCall().(*Proxy_ProxyAnnouncedCall_Referenda); ok {
		return x.Referenda
	}
	return nil
}

func (x *Proxy_ProxyAnnouncedCall) GetFellowshipCollective() *FellowshipCollectivePallet {
	if x, ok := x.GetCall().(*Proxy_ProxyAnnouncedCall_FellowshipCollective); ok {
		return x.FellowshipCollective
	}
	return nil
}

func (x *Proxy_ProxyAnnouncedCall) GetFellowshipReferenda() *FellowshipReferendaPallet {
	if x, ok := x.GetCall().(*Proxy_ProxyAnnouncedCall_FellowshipReferenda); ok {
		return x.FellowshipReferenda
	}
	return nil
}

func (x *Proxy_ProxyAnnouncedCall) GetWhitelist() *WhitelistPallet {
	if x, ok := x.GetCall().(*Proxy_ProxyAnnouncedCall_Whitelist); ok {
		return x.Whitelist
	}
	return nil
}

func (x *Proxy_ProxyAnnouncedCall) GetScheduler() *SchedulerPallet {
	if x, ok := x.GetCall().(*Proxy_ProxyAnnouncedCall_Scheduler); ok {
		return x.Scheduler
	}
	return nil
}

func (x *Proxy_ProxyAnnouncedCall) GetPreimage() *PreimagePallet {
	if x, ok := x.GetCall().(*Proxy_ProxyAnnouncedCall_Preimage); ok {
		return x.Preimage
	}
	return nil
}

func (x *Proxy_ProxyAnnouncedCall) GetIdentity() *IdentityPallet {
	if x, ok := x.GetCall().(*Proxy_ProxyAnnouncedCall_Identity); ok {
		return x.Identity
	}
	return nil
}

func (x *Proxy_ProxyAnnouncedCall) GetProxy() *ProxyPallet {
	if x, ok := x.GetCall().(*Proxy_ProxyAnnouncedCall_Proxy); ok {
		return x.Proxy
	}
	return nil
}

func (x *Proxy_ProxyAnnouncedCall) GetMultisig() *MultisigPallet {
	if x, ok := x.GetCall().(*Proxy_ProxyAnnouncedCall_Multisig); ok {
		return x.Multisig
	}
	return nil
}

func (x *Proxy_ProxyAnnouncedCall) GetElectionProviderMultiPhase() *ElectionProviderMultiPhasePallet {
	if x, ok := x.GetCall().(*Proxy_ProxyAnnouncedCall_ElectionProviderMultiPhase); ok {
		return x.ElectionProviderMultiPhase
	}
	return nil
}

func (x *Proxy_ProxyAnnouncedCall) GetBounties() *BountiesPallet {
	if x, ok := x.GetCall().(*Proxy_ProxyAnnouncedCall_Bounties); ok {
		return x.Bounties
	}
	return nil
}

func (x *Proxy_ProxyAnnouncedCall) GetChildBounties() *ChildBountiesPallet {
	if x, ok := x.GetCall().(*Proxy_ProxyAnnouncedCall_ChildBounties); ok {
		return x.ChildBounties
	}
	return nil
}

func (x *Proxy_ProxyAnnouncedCall) GetNominationPools() *NominationPoolsPallet {
	if x, ok := x.GetCall().(*Proxy_ProxyAnnouncedCall_NominationPools); ok {
		return x.NominationPools
	}
	return nil
}

func (x *Proxy_ProxyAnnouncedCall) GetGear() *GearPallet {
	if x, ok := x.GetCall().(*Proxy_ProxyAnnouncedCall_Gear); ok {
		return x.Gear
	}
	return nil
}

func (x *Proxy_ProxyAnnouncedCall) GetStakingRewards() *StakingRewardsPallet {
	if x, ok := x.GetCall().(*Proxy_ProxyAnnouncedCall_StakingRewards); ok {
		return x.StakingRewards
	}
	return nil
}

func (x *Proxy_ProxyAnnouncedCall) GetGearVoucher() *GearVoucherPallet {
	if x, ok := x.GetCall().(*Proxy_ProxyAnnouncedCall_GearVoucher); ok {
		return x.GearVoucher
	}
	return nil
}

type isProxy_ProxyAnnouncedCall_Call interface {
	isProxy_ProxyAnnouncedCall_Call()
}

type Proxy_ProxyAnnouncedCall_System struct {
	System *SystemPallet `protobuf:"bytes,4,opt,name=system,proto3,oneof"`
}

type Proxy_ProxyAnnouncedCall_Timestamp struct {
	Timestamp *TimestampPallet `protobuf:"bytes,5,opt,name=timestamp,proto3,oneof"`
}

type Proxy_ProxyAnnouncedCall_Babe struct {
	Babe *BabePallet `protobuf:"bytes,6,opt,name=babe,proto3,oneof"`
}

type Proxy_ProxyAnnouncedCall_Grandpa struct {
	Grandpa *GrandpaPallet `protobuf:"bytes,7,opt,name=grandpa,proto3,oneof"`
}

type Proxy_ProxyAnnouncedCall_Balances struct {
	Balances *BalancesPallet `protobuf:"bytes,8,opt,name=balances,proto3,oneof"`
}

type Proxy_ProxyAnnouncedCall_Vesting struct {
	Vesting *VestingPallet `protobuf:"bytes,9,opt,name=vesting,proto3,oneof"`
}

type Proxy_ProxyAnnouncedCall_BagsList struct {
	BagsList *BagsListPallet `protobuf:"bytes,10,opt,name=bags_list,json=bagsList,proto3,oneof"`
}

type Proxy_ProxyAnnouncedCall_ImOnline struct {
	ImOnline *ImOnlinePallet `protobuf:"bytes,11,opt,name=im_online,json=imOnline,proto3,oneof"`
}

type Proxy_ProxyAnnouncedCall_Staking struct {
	Staking *StakingPallet `protobuf:"bytes,12,opt,name=staking,proto3,oneof"`
}

type Proxy_ProxyAnnouncedCall_Session struct {
	Session *SessionPallet `protobuf:"bytes,13,opt,name=session,proto3,oneof"`
}

type Proxy_ProxyAnnouncedCall_Treasury struct {
	Treasury *TreasuryPallet `protobuf:"bytes,14,opt,name=treasury,proto3,oneof"`
}

type Proxy_ProxyAnnouncedCall_Utility struct {
	Utility *UtilityPallet `protobuf:"bytes,15,opt,name=utility,proto3,oneof"`
}

type Proxy_ProxyAnnouncedCall_ConvictionVoting struct {
	ConvictionVoting *ConvictionVotingPallet `protobuf:"bytes,16,opt,name=conviction_voting,json=convictionVoting,proto3,oneof"`
}

type Proxy_ProxyAnnouncedCall_Referenda struct {
	Referenda *ReferendaPallet `protobuf:"bytes,17,opt,name=referenda,proto3,oneof"`
}

type Proxy_ProxyAnnouncedCall_FellowshipCollective struct {
	FellowshipCollective *FellowshipCollectivePallet `protobuf:"bytes,18,opt,name=fellowship_collective,json=fellowshipCollective,proto3,oneof"`
}

type Proxy_ProxyAnnouncedCall_FellowshipReferenda struct {
	FellowshipReferenda *FellowshipReferendaPallet `protobuf:"bytes,19,opt,name=fellowship_referenda,json=fellowshipReferenda,proto3,oneof"`
}

type Proxy_ProxyAnnouncedCall_Whitelist struct {
	Whitelist *WhitelistPallet `protobuf:"bytes,20,opt,name=whitelist,proto3,oneof"`
}

type Proxy_ProxyAnnouncedCall_Scheduler struct {
	Scheduler *SchedulerPallet `protobuf:"bytes,21,opt,name=scheduler,proto3,oneof"`
}

type Proxy_ProxyAnnouncedCall_Preimage struct {
	Preimage *PreimagePallet `protobuf:"bytes,22,opt,name=preimage,proto3,oneof"`
}

type Proxy_ProxyAnnouncedCall_Identity struct {
	Identity *IdentityPallet `protobuf:"bytes,23,opt,name=identity,proto3,oneof"`
}

type Proxy_ProxyAnnouncedCall_Proxy struct {
	Proxy *ProxyPallet `protobuf:"bytes,24,opt,name=proxy,proto3,oneof"`
}

type Proxy_ProxyAnnouncedCall_Multisig struct {
	Multisig *MultisigPallet `protobuf:"bytes,25,opt,name=multisig,proto3,oneof"`
}

type Proxy_ProxyAnnouncedCall_ElectionProviderMultiPhase struct {
	ElectionProviderMultiPhase *ElectionProviderMultiPhasePallet `protobuf:"bytes,26,opt,name=election_provider_multi_phase,json=electionProviderMultiPhase,proto3,oneof"`
}

type Proxy_ProxyAnnouncedCall_Bounties struct {
	Bounties *BountiesPallet `protobuf:"bytes,27,opt,name=bounties,proto3,oneof"`
}

type Proxy_ProxyAnnouncedCall_ChildBounties struct {
	ChildBounties *ChildBountiesPallet `protobuf:"bytes,28,opt,name=child_bounties,json=childBounties,proto3,oneof"`
}

type Proxy_ProxyAnnouncedCall_NominationPools struct {
	NominationPools *NominationPoolsPallet `protobuf:"bytes,29,opt,name=nomination_pools,json=nominationPools,proto3,oneof"`
}

type Proxy_ProxyAnnouncedCall_Gear struct {
	Gear *GearPallet `protobuf:"bytes,30,opt,name=gear,proto3,oneof"`
}

type Proxy_ProxyAnnouncedCall_StakingRewards struct {
	StakingRewards *StakingRewardsPallet `protobuf:"bytes,31,opt,name=staking_rewards,json=stakingRewards,proto3,oneof"`
}

type Proxy_ProxyAnnouncedCall_GearVoucher struct {
	GearVoucher *GearVoucherPallet `protobuf:"bytes,32,opt,name=gear_voucher,json=gearVoucher,proto3,oneof"`
}

func (*Proxy_ProxyAnnouncedCall_System) isProxy_ProxyAnnouncedCall_Call() {}

func (*Proxy_ProxyAnnouncedCall_Timestamp) isProxy_ProxyAnnouncedCall_Call() {}

func (*Proxy_ProxyAnnouncedCall_Babe) isProxy_ProxyAnnouncedCall_Call() {}

func (*Proxy_ProxyAnnouncedCall_Grandpa) isProxy_ProxyAnnouncedCall_Call() {}

func (*Proxy_ProxyAnnouncedCall_Balances) isProxy_ProxyAnnouncedCall_Call() {}

func (*Proxy_ProxyAnnouncedCall_Vesting) isProxy_ProxyAnnouncedCall_Call() {}

func (*Proxy_ProxyAnnouncedCall_BagsList) isProxy_ProxyAnnouncedCall_Call() {}

func (*Proxy_ProxyAnnouncedCall_ImOnline) isProxy_ProxyAnnouncedCall_Call() {}

func (*Proxy_ProxyAnnouncedCall_Staking) isProxy_ProxyAnnouncedCall_Call() {}

func (*Proxy_ProxyAnnouncedCall_Session) isProxy_ProxyAnnouncedCall_Call() {}

func (*Proxy_ProxyAnnouncedCall_Treasury) isProxy_ProxyAnnouncedCall_Call() {}

func (*Proxy_ProxyAnnouncedCall_Utility) isProxy_ProxyAnnouncedCall_Call() {}

func (*Proxy_ProxyAnnouncedCall_ConvictionVoting) isProxy_ProxyAnnouncedCall_Call() {}

func (*Proxy_ProxyAnnouncedCall_Referenda) isProxy_ProxyAnnouncedCall_Call() {}

func (*Proxy_ProxyAnnouncedCall_FellowshipCollective) isProxy_ProxyAnnouncedCall_Call() {}

func (*Proxy_ProxyAnnouncedCall_FellowshipReferenda) isProxy_ProxyAnnouncedCall_Call() {}

func (*Proxy_ProxyAnnouncedCall_Whitelist) isProxy_ProxyAnnouncedCall_Call() {}

func (*Proxy_ProxyAnnouncedCall_Scheduler) isProxy_ProxyAnnouncedCall_Call() {}

func (*Proxy_ProxyAnnouncedCall_Preimage) isProxy_ProxyAnnouncedCall_Call() {}

func (*Proxy_ProxyAnnouncedCall_Identity) isProxy_ProxyAnnouncedCall_Call() {}

func (*Proxy_ProxyAnnouncedCall_Proxy) isProxy_ProxyAnnouncedCall_Call() {}

func (*Proxy_ProxyAnnouncedCall_Multisig) isProxy_ProxyAnnouncedCall_Call() {}

func (*Proxy_ProxyAnnouncedCall_ElectionProviderMultiPhase) isProxy_ProxyAnnouncedCall_Call() {}

func (*Proxy_ProxyAnnouncedCall_Bounties) isProxy_ProxyAnnouncedCall_Call() {}

func (*Proxy_ProxyAnnouncedCall_ChildBounties) isProxy_ProxyAnnouncedCall_Call() {}

func (*Proxy_ProxyAnnouncedCall_NominationPools) isProxy_ProxyAnnouncedCall_Call() {}

func (*Proxy_ProxyAnnouncedCall_Gear) isProxy_ProxyAnnouncedCall_Call() {}

func (*Proxy_ProxyAnnouncedCall_StakingRewards) isProxy_ProxyAnnouncedCall_Call() {}

func (*Proxy_ProxyAnnouncedCall_GearVoucher) isProxy_ProxyAnnouncedCall_Call() {}

type ElectionProviderMultiPhase_SubmitUnsignedCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RawSolution *ElectionProviderMultiPhase_PalletElectionProviderMultiPhaseRawSolution            `protobuf:"bytes,1,opt,name=raw_solution,json=rawSolution,proto3" json:"raw_solution,omitempty"`
	Witness     *ElectionProviderMultiPhase_PalletElectionProviderMultiPhaseSolutionOrSnapshotSize `protobuf:"bytes,2,opt,name=witness,proto3" json:"witness,omitempty"`
}

func (x *ElectionProviderMultiPhase_SubmitUnsignedCall) Reset() {
	*x = ElectionProviderMultiPhase_SubmitUnsignedCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectionProviderMultiPhase_SubmitUnsignedCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectionProviderMultiPhase_SubmitUnsignedCall) ProtoMessage() {}

func (x *ElectionProviderMultiPhase_SubmitUnsignedCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectionProviderMultiPhase_SubmitUnsignedCall.ProtoReflect.Descriptor instead.
func (*ElectionProviderMultiPhase_SubmitUnsignedCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{74}
}

func (x *ElectionProviderMultiPhase_SubmitUnsignedCall) GetRawSolution() *ElectionProviderMultiPhase_PalletElectionProviderMultiPhaseRawSolution {
	if x != nil {
		return x.RawSolution
	}
	return nil
}

func (x *ElectionProviderMultiPhase_SubmitUnsignedCall) GetWitness() *ElectionProviderMultiPhase_PalletElectionProviderMultiPhaseSolutionOrSnapshotSize {
	if x != nil {
		return x.Witness
	}
	return nil
}

type ChildBounties_Index struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 *ChildBounties_TupleNull `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *ChildBounties_Index) Reset() {
	*x = ChildBounties_Index{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChildBounties_Index) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChildBounties_Index) ProtoMessage() {}

func (x *ChildBounties_Index) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChildBounties_Index.ProtoReflect.Descriptor instead.
func (*ChildBounties_Index) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{75}
}

func (x *ChildBounties_Index) GetValue0() *ChildBounties_TupleNull {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Babe_Seal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
	Value1 []byte `protobuf:"bytes,2,opt,name=value1,proto3" json:"value1,omitempty"`
}

func (x *Babe_Seal) Reset() {
	*x = Babe_Seal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Babe_Seal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Babe_Seal) ProtoMessage() {}

func (x *Babe_Seal) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Babe_Seal.ProtoReflect.Descriptor instead.
func (*Babe_Seal) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{76}
}

func (x *Babe_Seal) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

func (x *Babe_Seal) GetValue1() []byte {
	if x != nil {
		return x.Value1
	}
	return nil
}

type Staking_ScaleValidatorCountCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Factor *SpArithmeticPerThingsPercent `protobuf:"bytes,1,opt,name=factor,proto3" json:"factor,omitempty"`
}

func (x *Staking_ScaleValidatorCountCall) Reset() {
	*x = Staking_ScaleValidatorCountCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staking_ScaleValidatorCountCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staking_ScaleValidatorCountCall) ProtoMessage() {}

func (x *Staking_ScaleValidatorCountCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staking_ScaleValidatorCountCall.ProtoReflect.Descriptor instead.
func (*Staking_ScaleValidatorCountCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{77}
}

func (x *Staking_ScaleValidatorCountCall) GetFactor() *SpArithmeticPerThingsPercent {
	if x != nil {
		return x.Factor
	}
	return nil
}

type ConvictionVoting_Index struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 *ConvictionVoting_TupleNull `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *ConvictionVoting_Index) Reset() {
	*x = ConvictionVoting_Index{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConvictionVoting_Index) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvictionVoting_Index) ProtoMessage() {}

func (x *ConvictionVoting_Index) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvictionVoting_Index.ProtoReflect.Descriptor instead.
func (*ConvictionVoting_Index) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{78}
}

func (x *ConvictionVoting_Index) GetValue0() *ConvictionVoting_TupleNull {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Identity_Raw21 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Identity_Raw21) Reset() {
	*x = Identity_Raw21{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_Raw21) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_Raw21) ProtoMessage() {}

func (x *Identity_Raw21) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_Raw21.ProtoReflect.Descriptor instead.
func (*Identity_Raw21) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{79}
}

func (x *Identity_Raw21) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type ElectionProviderMultiPhase_TupleUint32TupleUint32SpArithmeticPerThingsPerU16Uint32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 uint32                                                             `protobuf:"varint,1,opt,name=value0,proto3" json:"value0,omitempty"`
	Value1 *ElectionProviderMultiPhase_TupleUint32SpArithmeticPerThingsPerU16 `protobuf:"bytes,2,opt,name=value1,proto3" json:"value1,omitempty"`
	Value2 uint32                                                             `protobuf:"varint,3,opt,name=value2,proto3" json:"value2,omitempty"`
}

func (x *ElectionProviderMultiPhase_TupleUint32TupleUint32SpArithmeticPerThingsPerU16Uint32) Reset() {
	*x = ElectionProviderMultiPhase_TupleUint32TupleUint32SpArithmeticPerThingsPerU16Uint32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectionProviderMultiPhase_TupleUint32TupleUint32SpArithmeticPerThingsPerU16Uint32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectionProviderMultiPhase_TupleUint32TupleUint32SpArithmeticPerThingsPerU16Uint32) ProtoMessage() {
}

func (x *ElectionProviderMultiPhase_TupleUint32TupleUint32SpArithmeticPerThingsPerU16Uint32) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectionProviderMultiPhase_TupleUint32TupleUint32SpArithmeticPerThingsPerU16Uint32.ProtoReflect.Descriptor instead.
func (*ElectionProviderMultiPhase_TupleUint32TupleUint32SpArithmeticPerThingsPerU16Uint32) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{80}
}

func (x *ElectionProviderMultiPhase_TupleUint32TupleUint32SpArithmeticPerThingsPerU16Uint32) GetValue0() uint32 {
	if x != nil {
		return x.Value0
	}
	return 0
}

func (x *ElectionProviderMultiPhase_TupleUint32TupleUint32SpArithmeticPerThingsPerU16Uint32) GetValue1() *ElectionProviderMultiPhase_TupleUint32SpArithmeticPerThingsPerU16 {
	if x != nil {
		return x.Value1
	}
	return nil
}

func (x *ElectionProviderMultiPhase_TupleUint32TupleUint32SpArithmeticPerThingsPerU16Uint32) GetValue2() uint32 {
	if x != nil {
		return x.Value2
	}
	return 0
}

type Staking_Targets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*Staking_Targets_Id
	//	*Staking_Targets_Index
	//	*Staking_Targets_Raw
	//	*Staking_Targets_Address32
	//	*Staking_Targets_Address20
	Value isStaking_Targets_Value `protobuf_oneof:"value"`
}

func (x *Staking_Targets) Reset() {
	*x = Staking_Targets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staking_Targets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staking_Targets) ProtoMessage() {}

func (x *Staking_Targets) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staking_Targets.ProtoReflect.Descriptor instead.
func (*Staking_Targets) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{81}
}

func (m *Staking_Targets) GetValue() isStaking_Targets_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Staking_Targets) GetId() *Staking_Id {
	if x, ok := x.GetValue().(*Staking_Targets_Id); ok {
		return x.Id
	}
	return nil
}

func (x *Staking_Targets) GetIndex() *Staking_Index {
	if x, ok := x.GetValue().(*Staking_Targets_Index); ok {
		return x.Index
	}
	return nil
}

func (x *Staking_Targets) GetRaw() *Staking_Raw {
	if x, ok := x.GetValue().(*Staking_Targets_Raw); ok {
		return x.Raw
	}
	return nil
}

func (x *Staking_Targets) GetAddress32() *Staking_Address32 {
	if x, ok := x.GetValue().(*Staking_Targets_Address32); ok {
		return x.Address32
	}
	return nil
}

func (x *Staking_Targets) GetAddress20() *Staking_Address20 {
	if x, ok := x.GetValue().(*Staking_Targets_Address20); ok {
		return x.Address20
	}
	return nil
}

type isStaking_Targets_Value interface {
	isStaking_Targets_Value()
}

type Staking_Targets_Id struct {
	Id *Staking_Id `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type Staking_Targets_Index struct {
	Index *Staking_Index `protobuf:"bytes,2,opt,name=index,proto3,oneof"`
}

type Staking_Targets_Raw struct {
	Raw *Staking_Raw `protobuf:"bytes,3,opt,name=raw,proto3,oneof"`
}

type Staking_Targets_Address32 struct {
	Address32 *Staking_Address32 `protobuf:"bytes,4,opt,name=address32,proto3,oneof"`
}

type Staking_Targets_Address20 struct {
	Address20 *Staking_Address20 `protobuf:"bytes,5,opt,name=address20,proto3,oneof"`
}

func (*Staking_Targets_Id) isStaking_Targets_Value() {}

func (*Staking_Targets_Index) isStaking_Targets_Value() {}

func (*Staking_Targets_Raw) isStaking_Targets_Value() {}

func (*Staking_Targets_Address32) isStaking_Targets_Value() {}

func (*Staking_Targets_Address20) isStaking_Targets_Value() {}

type ConvictionVoting_None struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConvictionVoting_None) Reset() {
	*x = ConvictionVoting_None{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConvictionVoting_None) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvictionVoting_None) ProtoMessage() {}

func (x *ConvictionVoting_None) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvictionVoting_None.ProtoReflect.Descriptor instead.
func (*ConvictionVoting_None) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{82}
}

type Identity_Sha256 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Identity_Sha256) Reset() {
	*x = Identity_Sha256{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_Sha256) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_Sha256) ProtoMessage() {}

func (x *Identity_Sha256) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_Sha256.ProtoReflect.Descriptor instead.
func (*Identity_Sha256) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{83}
}

func (x *Identity_Sha256) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type GrandpaPallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Call:
	//
	//	*GrandpaPallet_ReportEquivocationCall
	//	*GrandpaPallet_ReportEquivocationUnsignedCall
	//	*GrandpaPallet_NoteStalledCall
	Call isGrandpaPallet_Call `protobuf_oneof:"call"`
}

func (x *GrandpaPallet) Reset() {
	*x = GrandpaPallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrandpaPallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrandpaPallet) ProtoMessage() {}

func (x *GrandpaPallet) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrandpaPallet.ProtoReflect.Descriptor instead.
func (*GrandpaPallet) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{84}
}

func (m *GrandpaPallet) GetCall() isGrandpaPallet_Call {
	if m != nil {
		return m.Call
	}
	return nil
}

func (x *GrandpaPallet) GetReportEquivocationCall() *Grandpa_ReportEquivocationCall {
	if x, ok := x.GetCall().(*GrandpaPallet_ReportEquivocationCall); ok {
		return x.ReportEquivocationCall
	}
	return nil
}

func (x *GrandpaPallet) GetReportEquivocationUnsignedCall() *Grandpa_ReportEquivocationUnsignedCall {
	if x, ok := x.GetCall().(*GrandpaPallet_ReportEquivocationUnsignedCall); ok {
		return x.ReportEquivocationUnsignedCall
	}
	return nil
}

func (x *GrandpaPallet) GetNoteStalledCall() *Grandpa_NoteStalledCall {
	if x, ok := x.GetCall().(*GrandpaPallet_NoteStalledCall); ok {
		return x.NoteStalledCall
	}
	return nil
}

type isGrandpaPallet_Call interface {
	isGrandpaPallet_Call()
}

type GrandpaPallet_ReportEquivocationCall struct {
	ReportEquivocationCall *Grandpa_ReportEquivocationCall `protobuf:"bytes,1,opt,name=report_equivocation_call,json=reportEquivocationCall,proto3,oneof"`
}

type GrandpaPallet_ReportEquivocationUnsignedCall struct {
	ReportEquivocationUnsignedCall *Grandpa_ReportEquivocationUnsignedCall `protobuf:"bytes,2,opt,name=report_equivocation_unsigned_call,json=reportEquivocationUnsignedCall,proto3,oneof"`
}

type GrandpaPallet_NoteStalledCall struct {
	NoteStalledCall *Grandpa_NoteStalledCall `protobuf:"bytes,3,opt,name=note_stalled_call,json=noteStalledCall,proto3,oneof"`
}

func (*GrandpaPallet_ReportEquivocationCall) isGrandpaPallet_Call() {}

func (*GrandpaPallet_ReportEquivocationUnsignedCall) isGrandpaPallet_Call() {}

func (*GrandpaPallet_NoteStalledCall) isGrandpaPallet_Call() {}

type Vesting_Raw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Vesting_Raw) Reset() {
	*x = Vesting_Raw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vesting_Raw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vesting_Raw) ProtoMessage() {}

func (x *Vesting_Raw) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vesting_Raw.ProtoReflect.Descriptor instead.
func (*Vesting_Raw) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{85}
}

func (x *Vesting_Raw) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Vesting_Source struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*Vesting_Source_Id
	//	*Vesting_Source_Index
	//	*Vesting_Source_Raw
	//	*Vesting_Source_Address32
	//	*Vesting_Source_Address20
	Value isVesting_Source_Value `protobuf_oneof:"value"`
}

func (x *Vesting_Source) Reset() {
	*x = Vesting_Source{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vesting_Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vesting_Source) ProtoMessage() {}

func (x *Vesting_Source) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vesting_Source.ProtoReflect.Descriptor instead.
func (*Vesting_Source) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{86}
}

func (m *Vesting_Source) GetValue() isVesting_Source_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Vesting_Source) GetId() *Vesting_Id {
	if x, ok := x.GetValue().(*Vesting_Source_Id); ok {
		return x.Id
	}
	return nil
}

func (x *Vesting_Source) GetIndex() *Vesting_Index {
	if x, ok := x.GetValue().(*Vesting_Source_Index); ok {
		return x.Index
	}
	return nil
}

func (x *Vesting_Source) GetRaw() *Vesting_Raw {
	if x, ok := x.GetValue().(*Vesting_Source_Raw); ok {
		return x.Raw
	}
	return nil
}

func (x *Vesting_Source) GetAddress32() *Vesting_Address32 {
	if x, ok := x.GetValue().(*Vesting_Source_Address32); ok {
		return x.Address32
	}
	return nil
}

func (x *Vesting_Source) GetAddress20() *Vesting_Address20 {
	if x, ok := x.GetValue().(*Vesting_Source_Address20); ok {
		return x.Address20
	}
	return nil
}

type isVesting_Source_Value interface {
	isVesting_Source_Value()
}

type Vesting_Source_Id struct {
	Id *Vesting_Id `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type Vesting_Source_Index struct {
	Index *Vesting_Index `protobuf:"bytes,2,opt,name=index,proto3,oneof"`
}

type Vesting_Source_Raw struct {
	Raw *Vesting_Raw `protobuf:"bytes,3,opt,name=raw,proto3,oneof"`
}

type Vesting_Source_Address32 struct {
	Address32 *Vesting_Address32 `protobuf:"bytes,4,opt,name=address32,proto3,oneof"`
}

type Vesting_Source_Address20 struct {
	Address20 *Vesting_Address20 `protobuf:"bytes,5,opt,name=address20,proto3,oneof"`
}

func (*Vesting_Source_Id) isVesting_Source_Value() {}

func (*Vesting_Source_Index) isVesting_Source_Value() {}

func (*Vesting_Source_Raw) isVesting_Source_Value() {}

func (*Vesting_Source_Address32) isVesting_Source_Value() {}

func (*Vesting_Source_Address20) isVesting_Source_Value() {}

type TransactionPaymentPallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TransactionPaymentPallet) Reset() {
	*x = TransactionPaymentPallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionPaymentPallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionPaymentPallet) ProtoMessage() {}

func (x *TransactionPaymentPallet) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionPaymentPallet.ProtoReflect.Descriptor instead.
func (*TransactionPaymentPallet) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{87}
}

type BagsList_PutInFrontOfCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lighter *BagsList_Lighter `protobuf:"bytes,1,opt,name=lighter,proto3" json:"lighter,omitempty"`
}

func (x *BagsList_PutInFrontOfCall) Reset() {
	*x = BagsList_PutInFrontOfCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BagsList_PutInFrontOfCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BagsList_PutInFrontOfCall) ProtoMessage() {}

func (x *BagsList_PutInFrontOfCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BagsList_PutInFrontOfCall.ProtoReflect.Descriptor instead.
func (*BagsList_PutInFrontOfCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{88}
}

func (x *BagsList_PutInFrontOfCall) GetLighter() *BagsList_Lighter {
	if x != nil {
		return x.Lighter
	}
	return nil
}

type PrimaryAndSecondaryVrfSlots struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PrimaryAndSecondaryVrfSlots) Reset() {
	*x = PrimaryAndSecondaryVrfSlots{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrimaryAndSecondaryVrfSlots) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrimaryAndSecondaryVrfSlots) ProtoMessage() {}

func (x *PrimaryAndSecondaryVrfSlots) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrimaryAndSecondaryVrfSlots.ProtoReflect.Descriptor instead.
func (*PrimaryAndSecondaryVrfSlots) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{89}
}

type Vesting_ForceVestedTransferCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source   *Vesting_Source                              `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Target   *Vesting_Target                              `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	Schedule *Vesting_PalletVestingVestingInfoVestingInfo `protobuf:"bytes,3,opt,name=schedule,proto3" json:"schedule,omitempty"`
}

func (x *Vesting_ForceVestedTransferCall) Reset() {
	*x = Vesting_ForceVestedTransferCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vesting_ForceVestedTransferCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vesting_ForceVestedTransferCall) ProtoMessage() {}

func (x *Vesting_ForceVestedTransferCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vesting_ForceVestedTransferCall.ProtoReflect.Descriptor instead.
func (*Vesting_ForceVestedTransferCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{90}
}

func (x *Vesting_ForceVestedTransferCall) GetSource() *Vesting_Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Vesting_ForceVestedTransferCall) GetTarget() *Vesting_Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *Vesting_ForceVestedTransferCall) GetSchedule() *Vesting_PalletVestingVestingInfoVestingInfo {
	if x != nil {
		return x.Schedule
	}
	return nil
}

type Staking_PalletStakingValidatorPrefs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commission *SpArithmeticPerThingsPerbill `protobuf:"bytes,1,opt,name=commission,proto3" json:"commission,omitempty"`
	Blocked    bool                          `protobuf:"varint,2,opt,name=blocked,proto3" json:"blocked,omitempty"`
}

func (x *Staking_PalletStakingValidatorPrefs) Reset() {
	*x = Staking_PalletStakingValidatorPrefs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staking_PalletStakingValidatorPrefs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staking_PalletStakingValidatorPrefs) ProtoMessage() {}

func (x *Staking_PalletStakingValidatorPrefs) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staking_PalletStakingValidatorPrefs.ProtoReflect.Descriptor instead.
func (*Staking_PalletStakingValidatorPrefs) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{91}
}

func (x *Staking_PalletStakingValidatorPrefs) GetCommission() *SpArithmeticPerThingsPerbill {
	if x != nil {
		return x.Commission
	}
	return nil
}

func (x *Staking_PalletStakingValidatorPrefs) GetBlocked() bool {
	if x != nil {
		return x.Blocked
	}
	return false
}

type Vesting_VestedTransferCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target   *Vesting_Target                              `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Schedule *Vesting_PalletVestingVestingInfoVestingInfo `protobuf:"bytes,2,opt,name=schedule,proto3" json:"schedule,omitempty"`
}

func (x *Vesting_VestedTransferCall) Reset() {
	*x = Vesting_VestedTransferCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vesting_VestedTransferCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vesting_VestedTransferCall) ProtoMessage() {}

func (x *Vesting_VestedTransferCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vesting_VestedTransferCall.ProtoReflect.Descriptor instead.
func (*Vesting_VestedTransferCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{92}
}

func (x *Vesting_VestedTransferCall) GetTarget() *Vesting_Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *Vesting_VestedTransferCall) GetSchedule() *Vesting_PalletVestingVestingInfoVestingInfo {
	if x != nil {
		return x.Schedule
	}
	return nil
}

type FellowshipReferenda_Lookup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash *PrimitiveTypesH256 `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Len  uint32              `protobuf:"varint,2,opt,name=len,proto3" json:"len,omitempty"`
}

func (x *FellowshipReferenda_Lookup) Reset() {
	*x = FellowshipReferenda_Lookup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FellowshipReferenda_Lookup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FellowshipReferenda_Lookup) ProtoMessage() {}

func (x *FellowshipReferenda_Lookup) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FellowshipReferenda_Lookup.ProtoReflect.Descriptor instead.
func (*FellowshipReferenda_Lookup) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{93}
}

func (x *FellowshipReferenda_Lookup) GetHash() *PrimitiveTypesH256 {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *FellowshipReferenda_Lookup) GetLen() uint32 {
	if x != nil {
		return x.Len
	}
	return 0
}

type Bounties_ProposeCuratorCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BountyId uint32            `protobuf:"varint,1,opt,name=bounty_id,json=bountyId,proto3" json:"bounty_id,omitempty"`
	Curator  *Bounties_Curator `protobuf:"bytes,2,opt,name=curator,proto3" json:"curator,omitempty"`
	Fee      string            `protobuf:"bytes,3,opt,name=fee,proto3" json:"fee,omitempty"`
}

func (x *Bounties_ProposeCuratorCall) Reset() {
	*x = Bounties_ProposeCuratorCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bounties_ProposeCuratorCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bounties_ProposeCuratorCall) ProtoMessage() {}

func (x *Bounties_ProposeCuratorCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bounties_ProposeCuratorCall.ProtoReflect.Descriptor instead.
func (*Bounties_ProposeCuratorCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{94}
}

func (x *Bounties_ProposeCuratorCall) GetBountyId() uint32 {
	if x != nil {
		return x.BountyId
	}
	return 0
}

func (x *Bounties_ProposeCuratorCall) GetCurator() *Bounties_Curator {
	if x != nil {
		return x.Curator
	}
	return nil
}

func (x *Bounties_ProposeCuratorCall) GetFee() string {
	if x != nil {
		return x.Fee
	}
	return ""
}

type NominationPools_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*NominationPools_State_Open
	//	*NominationPools_State_Blocked
	//	*NominationPools_State_Destroying
	Value isNominationPools_State_Value `protobuf_oneof:"value"`
}

func (x *NominationPools_State) Reset() {
	*x = NominationPools_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NominationPools_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NominationPools_State) ProtoMessage() {}

func (x *NominationPools_State) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NominationPools_State.ProtoReflect.Descriptor instead.
func (*NominationPools_State) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{95}
}

func (m *NominationPools_State) GetValue() isNominationPools_State_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *NominationPools_State) GetOpen() *NominationPools_Open {
	if x, ok := x.GetValue().(*NominationPools_State_Open); ok {
		return x.Open
	}
	return nil
}

func (x *NominationPools_State) GetBlocked() *NominationPools_Blocked {
	if x, ok := x.GetValue().(*NominationPools_State_Blocked); ok {
		return x.Blocked
	}
	return nil
}

func (x *NominationPools_State) GetDestroying() *NominationPools_Destroying {
	if x, ok := x.GetValue().(*NominationPools_State_Destroying); ok {
		return x.Destroying
	}
	return nil
}

type isNominationPools_State_Value interface {
	isNominationPools_State_Value()
}

type NominationPools_State_Open struct {
	Open *NominationPools_Open `protobuf:"bytes,1,opt,name=open,proto3,oneof"`
}

type NominationPools_State_Blocked struct {
	Blocked *NominationPools_Blocked `protobuf:"bytes,2,opt,name=blocked,proto3,oneof"`
}

type NominationPools_State_Destroying struct {
	Destroying *NominationPools_Destroying `protobuf:"bytes,3,opt,name=destroying,proto3,oneof"`
}

func (*NominationPools_State_Open) isNominationPools_State_Value() {}

func (*NominationPools_State_Blocked) isNominationPools_State_Value() {}

func (*NominationPools_State_Destroying) isNominationPools_State_Value() {}

type ImOnline_PalletImOnlineSr25519AppSr25519Signature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 *SpCoreSr25519Signature `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *ImOnline_PalletImOnlineSr25519AppSr25519Signature) Reset() {
	*x = ImOnline_PalletImOnlineSr25519AppSr25519Signature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImOnline_PalletImOnlineSr25519AppSr25519Signature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImOnline_PalletImOnlineSr25519AppSr25519Signature) ProtoMessage() {}

func (x *ImOnline_PalletImOnlineSr25519AppSr25519Signature) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImOnline_PalletImOnlineSr25519AppSr25519Signature.ProtoReflect.Descriptor instead.
func (*ImOnline_PalletImOnlineSr25519AppSr25519Signature) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{96}
}

func (x *ImOnline_PalletImOnlineSr25519AppSr25519Signature) GetValue0() *SpCoreSr25519Signature {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Staking_ChillCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Staking_ChillCall) Reset() {
	*x = Staking_ChillCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staking_ChillCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staking_ChillCall) ProtoMessage() {}

func (x *Staking_ChillCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staking_ChillCall.ProtoReflect.Descriptor instead.
func (*Staking_ChillCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{97}
}

type Referenda_NudgeReferendumCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *Referenda_NudgeReferendumCall) Reset() {
	*x = Referenda_NudgeReferendumCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Referenda_NudgeReferendumCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Referenda_NudgeReferendumCall) ProtoMessage() {}

func (x *Referenda_NudgeReferendumCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Referenda_NudgeReferendumCall.ProtoReflect.Descriptor instead.
func (*Referenda_NudgeReferendumCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{98}
}

func (x *Referenda_NudgeReferendumCall) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type Preimage_RequestPreimageCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash *PrimitiveTypesH256 `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *Preimage_RequestPreimageCall) Reset() {
	*x = Preimage_RequestPreimageCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Preimage_RequestPreimageCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Preimage_RequestPreimageCall) ProtoMessage() {}

func (x *Preimage_RequestPreimageCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Preimage_RequestPreimageCall.ProtoReflect.Descriptor instead.
func (*Preimage_RequestPreimageCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{99}
}

func (x *Preimage_RequestPreimageCall) GetHash() *PrimitiveTypesH256 {
	if x != nil {
		return x.Hash
	}
	return nil
}

type ConvictionVoting_UndelegateCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Class uint32 `protobuf:"varint,1,opt,name=class,proto3" json:"class,omitempty"`
}

func (x *ConvictionVoting_UndelegateCall) Reset() {
	*x = ConvictionVoting_UndelegateCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConvictionVoting_UndelegateCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvictionVoting_UndelegateCall) ProtoMessage() {}

func (x *ConvictionVoting_UndelegateCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvictionVoting_UndelegateCall.ProtoReflect.Descriptor instead.
func (*ConvictionVoting_UndelegateCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{100}
}

func (x *ConvictionVoting_UndelegateCall) GetClass() uint32 {
	if x != nil {
		return x.Class
	}
	return 0
}

type FellowshipCollective_Raw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *FellowshipCollective_Raw) Reset() {
	*x = FellowshipCollective_Raw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FellowshipCollective_Raw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FellowshipCollective_Raw) ProtoMessage() {}

func (x *FellowshipCollective_Raw) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FellowshipCollective_Raw.ProtoReflect.Descriptor instead.
func (*FellowshipCollective_Raw) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{101}
}

func (x *FellowshipCollective_Raw) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type GprimitivesCodeId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *GprimitivesCodeId) Reset() {
	*x = GprimitivesCodeId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GprimitivesCodeId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GprimitivesCodeId) ProtoMessage() {}

func (x *GprimitivesCodeId) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GprimitivesCodeId.ProtoReflect.Descriptor instead.
func (*GprimitivesCodeId) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{102}
}

func (x *GprimitivesCodeId) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Balances_UpgradeAccountsCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Who []*SpCoreCryptoAccountId32 `protobuf:"bytes,1,rep,name=who,proto3" json:"who,omitempty"`
}

func (x *Balances_UpgradeAccountsCall) Reset() {
	*x = Balances_UpgradeAccountsCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Balances_UpgradeAccountsCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Balances_UpgradeAccountsCall) ProtoMessage() {}

func (x *Balances_UpgradeAccountsCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Balances_UpgradeAccountsCall.ProtoReflect.Descriptor instead.
func (*Balances_UpgradeAccountsCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{103}
}

func (x *Balances_UpgradeAccountsCall) GetWho() []*SpCoreCryptoAccountId32 {
	if x != nil {
		return x.Who
	}
	return nil
}

type Staking_Payee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*Staking_Payee_Staked
	//	*Staking_Payee_Stash
	//	*Staking_Payee_Controller
	//	*Staking_Payee_Account
	//	*Staking_Payee_None
	Value isStaking_Payee_Value `protobuf_oneof:"value"`
}

func (x *Staking_Payee) Reset() {
	*x = Staking_Payee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staking_Payee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staking_Payee) ProtoMessage() {}

func (x *Staking_Payee) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staking_Payee.ProtoReflect.Descriptor instead.
func (*Staking_Payee) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{104}
}

func (m *Staking_Payee) GetValue() isStaking_Payee_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Staking_Payee) GetStaked() *Staking_Staked {
	if x, ok := x.GetValue().(*Staking_Payee_Staked); ok {
		return x.Staked
	}
	return nil
}

func (x *Staking_Payee) GetStash() *Staking_Stash {
	if x, ok := x.GetValue().(*Staking_Payee_Stash); ok {
		return x.Stash
	}
	return nil
}

func (x *Staking_Payee) GetController() *Staking_Controller {
	if x, ok := x.GetValue().(*Staking_Payee_Controller); ok {
		return x.Controller
	}
	return nil
}

func (x *Staking_Payee) GetAccount() *Staking_Account {
	if x, ok := x.GetValue().(*Staking_Payee_Account); ok {
		return x.Account
	}
	return nil
}

func (x *Staking_Payee) GetNone() *Staking_None {
	if x, ok := x.GetValue().(*Staking_Payee_None); ok {
		return x.None
	}
	return nil
}

type isStaking_Payee_Value interface {
	isStaking_Payee_Value()
}

type Staking_Payee_Staked struct {
	Staked *Staking_Staked `protobuf:"bytes,1,opt,name=staked,proto3,oneof"`
}

type Staking_Payee_Stash struct {
	Stash *Staking_Stash `protobuf:"bytes,2,opt,name=stash,proto3,oneof"`
}

type Staking_Payee_Controller struct {
	Controller *Staking_Controller `protobuf:"bytes,3,opt,name=controller,proto3,oneof"`
}

type Staking_Payee_Account struct {
	Account *Staking_Account `protobuf:"bytes,4,opt,name=account,proto3,oneof"`
}

type Staking_Payee_None struct {
	None *Staking_None `protobuf:"bytes,5,opt,name=none,proto3,oneof"`
}

func (*Staking_Payee_Staked) isStaking_Payee_Value() {}

func (*Staking_Payee_Stash) isStaking_Payee_Value() {}

func (*Staking_Payee_Controller) isStaking_Payee_Value() {}

func (*Staking_Payee_Account) isStaking_Payee_Value() {}

func (*Staking_Payee_None) isStaking_Payee_Value() {}

type Session_PurgeKeysCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Session_PurgeKeysCall) Reset() {
	*x = Session_PurgeKeysCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Session_PurgeKeysCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Session_PurgeKeysCall) ProtoMessage() {}

func (x *Session_PurgeKeysCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Session_PurgeKeysCall.ProtoReflect.Descriptor instead.
func (*Session_PurgeKeysCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{105}
}

type Identity_Raw14 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Identity_Raw14) Reset() {
	*x = Identity_Raw14{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_Raw14) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_Raw14) ProtoMessage() {}

func (x *Identity_Raw14) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_Raw14.ProtoReflect.Descriptor instead.
func (*Identity_Raw14) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{106}
}

func (x *Identity_Raw14) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type NominationPools_ClaimPayoutCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NominationPools_ClaimPayoutCall) Reset() {
	*x = NominationPools_ClaimPayoutCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NominationPools_ClaimPayoutCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NominationPools_ClaimPayoutCall) ProtoMessage() {}

func (x *NominationPools_ClaimPayoutCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NominationPools_ClaimPayoutCall.ProtoReflect.Descriptor instead.
func (*NominationPools_ClaimPayoutCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{107}
}

type Bounties_UnassignCuratorCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BountyId uint32 `protobuf:"varint,1,opt,name=bounty_id,json=bountyId,proto3" json:"bounty_id,omitempty"`
}

func (x *Bounties_UnassignCuratorCall) Reset() {
	*x = Bounties_UnassignCuratorCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bounties_UnassignCuratorCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bounties_UnassignCuratorCall) ProtoMessage() {}

func (x *Bounties_UnassignCuratorCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bounties_UnassignCuratorCall.ProtoReflect.Descriptor instead.
func (*Bounties_UnassignCuratorCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{108}
}

func (x *Bounties_UnassignCuratorCall) GetBountyId() uint32 {
	if x != nil {
		return x.BountyId
	}
	return 0
}

type Treasury_ApproveProposalCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProposalId uint32 `protobuf:"varint,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
}

func (x *Treasury_ApproveProposalCall) Reset() {
	*x = Treasury_ApproveProposalCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Treasury_ApproveProposalCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Treasury_ApproveProposalCall) ProtoMessage() {}

func (x *Treasury_ApproveProposalCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Treasury_ApproveProposalCall.ProtoReflect.Descriptor instead.
func (*Treasury_ApproveProposalCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{109}
}

func (x *Treasury_ApproveProposalCall) GetProposalId() uint32 {
	if x != nil {
		return x.ProposalId
	}
	return 0
}

type FellowshipReferenda_RefundSubmissionDepositCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *FellowshipReferenda_RefundSubmissionDepositCall) Reset() {
	*x = FellowshipReferenda_RefundSubmissionDepositCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FellowshipReferenda_RefundSubmissionDepositCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FellowshipReferenda_RefundSubmissionDepositCall) ProtoMessage() {}

func (x *FellowshipReferenda_RefundSubmissionDepositCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FellowshipReferenda_RefundSubmissionDepositCall.ProtoReflect.Descriptor instead.
func (*FellowshipReferenda_RefundSubmissionDepositCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{110}
}

func (x *FellowshipReferenda_RefundSubmissionDepositCall) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type SchedulerPallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Call:
	//
	//	*SchedulerPallet_ScheduleCall
	//	*SchedulerPallet_CancelCall
	//	*SchedulerPallet_ScheduleNamedCall
	//	*SchedulerPallet_CancelNamedCall
	//	*SchedulerPallet_ScheduleAfterCall
	//	*SchedulerPallet_ScheduleNamedAfterCall
	Call isSchedulerPallet_Call `protobuf_oneof:"call"`
}

func (x *SchedulerPallet) Reset() {
	*x = SchedulerPallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchedulerPallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchedulerPallet) ProtoMessage() {}

func (x *SchedulerPallet) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchedulerPallet.ProtoReflect.Descriptor instead.
func (*SchedulerPallet) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{111}
}

func (m *SchedulerPallet) GetCall() isSchedulerPallet_Call {
	if m != nil {
		return m.Call
	}
	return nil
}

func (x *SchedulerPallet) GetScheduleCall() *Scheduler_ScheduleCall {
	if x, ok := x.GetCall().(*SchedulerPallet_ScheduleCall); ok {
		return x.ScheduleCall
	}
	return nil
}

func (x *SchedulerPallet) GetCancelCall() *Scheduler_CancelCall {
	if x, ok := x.GetCall().(*SchedulerPallet_CancelCall); ok {
		return x.CancelCall
	}
	return nil
}

func (x *SchedulerPallet) GetScheduleNamedCall() *Scheduler_ScheduleNamedCall {
	if x, ok := x.GetCall().(*SchedulerPallet_ScheduleNamedCall); ok {
		return x.ScheduleNamedCall
	}
	return nil
}

func (x *SchedulerPallet) GetCancelNamedCall() *Scheduler_CancelNamedCall {
	if x, ok := x.GetCall().(*SchedulerPallet_CancelNamedCall); ok {
		return x.CancelNamedCall
	}
	return nil
}

func (x *SchedulerPallet) GetScheduleAfterCall() *Scheduler_ScheduleAfterCall {
	if x, ok := x.GetCall().(*SchedulerPallet_ScheduleAfterCall); ok {
		return x.ScheduleAfterCall
	}
	return nil
}

func (x *SchedulerPallet) GetScheduleNamedAfterCall() *Scheduler_ScheduleNamedAfterCall {
	if x, ok := x.GetCall().(*SchedulerPallet_ScheduleNamedAfterCall); ok {
		return x.ScheduleNamedAfterCall
	}
	return nil
}

type isSchedulerPallet_Call interface {
	isSchedulerPallet_Call()
}

type SchedulerPallet_ScheduleCall struct {
	ScheduleCall *Scheduler_ScheduleCall `protobuf:"bytes,1,opt,name=schedule_call,json=scheduleCall,proto3,oneof"`
}

type SchedulerPallet_CancelCall struct {
	CancelCall *Scheduler_CancelCall `protobuf:"bytes,2,opt,name=cancel_call,json=cancelCall,proto3,oneof"`
}

type SchedulerPallet_ScheduleNamedCall struct {
	ScheduleNamedCall *Scheduler_ScheduleNamedCall `protobuf:"bytes,3,opt,name=schedule_named_call,json=scheduleNamedCall,proto3,oneof"`
}

type SchedulerPallet_CancelNamedCall struct {
	CancelNamedCall *Scheduler_CancelNamedCall `protobuf:"bytes,4,opt,name=cancel_named_call,json=cancelNamedCall,proto3,oneof"`
}

type SchedulerPallet_ScheduleAfterCall struct {
	ScheduleAfterCall *Scheduler_ScheduleAfterCall `protobuf:"bytes,5,opt,name=schedule_after_call,json=scheduleAfterCall,proto3,oneof"`
}

type SchedulerPallet_ScheduleNamedAfterCall struct {
	ScheduleNamedAfterCall *Scheduler_ScheduleNamedAfterCall `protobuf:"bytes,6,opt,name=schedule_named_after_call,json=scheduleNamedAfterCall,proto3,oneof"`
}

func (*SchedulerPallet_ScheduleCall) isSchedulerPallet_Call() {}

func (*SchedulerPallet_CancelCall) isSchedulerPallet_Call() {}

func (*SchedulerPallet_ScheduleNamedCall) isSchedulerPallet_Call() {}

func (*SchedulerPallet_CancelNamedCall) isSchedulerPallet_Call() {}

func (*SchedulerPallet_ScheduleAfterCall) isSchedulerPallet_Call() {}

func (*SchedulerPallet_ScheduleNamedAfterCall) isSchedulerPallet_Call() {}

type Proxy_Index struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 *Proxy_TupleNull `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Proxy_Index) Reset() {
	*x = Proxy_Index{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proxy_Index) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proxy_Index) ProtoMessage() {}

func (x *Proxy_Index) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proxy_Index.ProtoReflect.Descriptor instead.
func (*Proxy_Index) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{112}
}

func (x *Proxy_Index) GetValue0() *Proxy_TupleNull {
	if x != nil {
		return x.Value0
	}
	return nil
}

type ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes13Listuint32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 uint32                                                               `protobuf:"varint,1,opt,name=value0,proto3" json:"value0,omitempty"`
	Value1 []*ElectionProviderMultiPhase_TupleUint32SpArithmeticPerThingsPerU16 `protobuf:"bytes,2,rep,name=value1,proto3" json:"value1,omitempty"`
	Value2 uint32                                                               `protobuf:"varint,3,opt,name=value2,proto3" json:"value2,omitempty"`
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes13Listuint32) Reset() {
	*x = ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes13Listuint32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes13Listuint32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes13Listuint32) ProtoMessage() {
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes13Listuint32) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes13Listuint32.ProtoReflect.Descriptor instead.
func (*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes13Listuint32) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{113}
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes13Listuint32) GetValue0() uint32 {
	if x != nil {
		return x.Value0
	}
	return 0
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes13Listuint32) GetValue1() []*ElectionProviderMultiPhase_TupleUint32SpArithmeticPerThingsPerU16 {
	if x != nil {
		return x.Value1
	}
	return nil
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes13Listuint32) GetValue2() uint32 {
	if x != nil {
		return x.Value2
	}
	return 0
}

type BagsList_Heavier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*BagsList_Heavier_Id
	//	*BagsList_Heavier_Index
	//	*BagsList_Heavier_Raw
	//	*BagsList_Heavier_Address32
	//	*BagsList_Heavier_Address20
	Value isBagsList_Heavier_Value `protobuf_oneof:"value"`
}

func (x *BagsList_Heavier) Reset() {
	*x = BagsList_Heavier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BagsList_Heavier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BagsList_Heavier) ProtoMessage() {}

func (x *BagsList_Heavier) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BagsList_Heavier.ProtoReflect.Descriptor instead.
func (*BagsList_Heavier) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{114}
}

func (m *BagsList_Heavier) GetValue() isBagsList_Heavier_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *BagsList_Heavier) GetId() *BagsList_Id {
	if x, ok := x.GetValue().(*BagsList_Heavier_Id); ok {
		return x.Id
	}
	return nil
}

func (x *BagsList_Heavier) GetIndex() *BagsList_Index {
	if x, ok := x.GetValue().(*BagsList_Heavier_Index); ok {
		return x.Index
	}
	return nil
}

func (x *BagsList_Heavier) GetRaw() *BagsList_Raw {
	if x, ok := x.GetValue().(*BagsList_Heavier_Raw); ok {
		return x.Raw
	}
	return nil
}

func (x *BagsList_Heavier) GetAddress32() *BagsList_Address32 {
	if x, ok := x.GetValue().(*BagsList_Heavier_Address32); ok {
		return x.Address32
	}
	return nil
}

func (x *BagsList_Heavier) GetAddress20() *BagsList_Address20 {
	if x, ok := x.GetValue().(*BagsList_Heavier_Address20); ok {
		return x.Address20
	}
	return nil
}

type isBagsList_Heavier_Value interface {
	isBagsList_Heavier_Value()
}

type BagsList_Heavier_Id struct {
	Id *BagsList_Id `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type BagsList_Heavier_Index struct {
	Index *BagsList_Index `protobuf:"bytes,2,opt,name=index,proto3,oneof"`
}

type BagsList_Heavier_Raw struct {
	Raw *BagsList_Raw `protobuf:"bytes,3,opt,name=raw,proto3,oneof"`
}

type BagsList_Heavier_Address32 struct {
	Address32 *BagsList_Address32 `protobuf:"bytes,4,opt,name=address32,proto3,oneof"`
}

type BagsList_Heavier_Address20 struct {
	Address20 *BagsList_Address20 `protobuf:"bytes,5,opt,name=address20,proto3,oneof"`
}

func (*BagsList_Heavier_Id) isBagsList_Heavier_Value() {}

func (*BagsList_Heavier_Index) isBagsList_Heavier_Value() {}

func (*BagsList_Heavier_Raw) isBagsList_Heavier_Value() {}

func (*BagsList_Heavier_Address32) isBagsList_Heavier_Value() {}

func (*BagsList_Heavier_Address20) isBagsList_Heavier_Value() {}

type NominationPools_SetCommissionMaxCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoolId        uint32                        `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	MaxCommission *SpArithmeticPerThingsPerbill `protobuf:"bytes,2,opt,name=max_commission,json=maxCommission,proto3" json:"max_commission,omitempty"`
}

func (x *NominationPools_SetCommissionMaxCall) Reset() {
	*x = NominationPools_SetCommissionMaxCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NominationPools_SetCommissionMaxCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NominationPools_SetCommissionMaxCall) ProtoMessage() {}

func (x *NominationPools_SetCommissionMaxCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NominationPools_SetCommissionMaxCall.ProtoReflect.Descriptor instead.
func (*NominationPools_SetCommissionMaxCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{115}
}

func (x *NominationPools_SetCommissionMaxCall) GetPoolId() uint32 {
	if x != nil {
		return x.PoolId
	}
	return 0
}

func (x *NominationPools_SetCommissionMaxCall) GetMaxCommission() *SpArithmeticPerThingsPerbill {
	if x != nil {
		return x.MaxCommission
	}
	return nil
}

type Balances_TransferAllowDeathCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dest  *Balances_Dest `protobuf:"bytes,1,opt,name=dest,proto3" json:"dest,omitempty"`
	Value string         `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Balances_TransferAllowDeathCall) Reset() {
	*x = Balances_TransferAllowDeathCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Balances_TransferAllowDeathCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Balances_TransferAllowDeathCall) ProtoMessage() {}

func (x *Balances_TransferAllowDeathCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Balances_TransferAllowDeathCall.ProtoReflect.Descriptor instead.
func (*Balances_TransferAllowDeathCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{116}
}

func (x *Balances_TransferAllowDeathCall) GetDest() *Balances_Dest {
	if x != nil {
		return x.Dest
	}
	return nil
}

func (x *Balances_TransferAllowDeathCall) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Identity_Reasonable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Identity_Reasonable) Reset() {
	*x = Identity_Reasonable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_Reasonable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_Reasonable) ProtoMessage() {}

func (x *Identity_Reasonable) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_Reasonable.ProtoReflect.Descriptor instead.
func (*Identity_Reasonable) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{117}
}

type Value0 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*Value0_Root
	//	*Value0_Signed
	//	*Value0_None
	Value isValue0_Value `protobuf_oneof:"value"`
}

func (x *Value0) Reset() {
	*x = Value0{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Value0) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value0) ProtoMessage() {}

func (x *Value0) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value0.ProtoReflect.Descriptor instead.
func (*Value0) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{118}
}

func (m *Value0) GetValue() isValue0_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Value0) GetRoot() *Root {
	if x, ok := x.GetValue().(*Value0_Root); ok {
		return x.Root
	}
	return nil
}

func (x *Value0) GetSigned() *Signed {
	if x, ok := x.GetValue().(*Value0_Signed); ok {
		return x.Signed
	}
	return nil
}

func (x *Value0) GetNone() *None {
	if x, ok := x.GetValue().(*Value0_None); ok {
		return x.None
	}
	return nil
}

type isValue0_Value interface {
	isValue0_Value()
}

type Value0_Root struct {
	Root *Root `protobuf:"bytes,1,opt,name=root,proto3,oneof"`
}

type Value0_Signed struct {
	Signed *Signed `protobuf:"bytes,2,opt,name=signed,proto3,oneof"`
}

type Value0_None struct {
	None *None `protobuf:"bytes,3,opt,name=none,proto3,oneof"`
}

func (*Value0_Root) isValue0_Value() {}

func (*Value0_Signed) isValue0_Value() {}

func (*Value0_None) isValue0_Value() {}

type ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes12Listuint32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 uint32                                                               `protobuf:"varint,1,opt,name=value0,proto3" json:"value0,omitempty"`
	Value1 []*ElectionProviderMultiPhase_TupleUint32SpArithmeticPerThingsPerU16 `protobuf:"bytes,2,rep,name=value1,proto3" json:"value1,omitempty"`
	Value2 uint32                                                               `protobuf:"varint,3,opt,name=value2,proto3" json:"value2,omitempty"`
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes12Listuint32) Reset() {
	*x = ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes12Listuint32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes12Listuint32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes12Listuint32) ProtoMessage() {
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes12Listuint32) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes12Listuint32.ProtoReflect.Descriptor instead.
func (*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes12Listuint32) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{119}
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes12Listuint32) GetValue0() uint32 {
	if x != nil {
		return x.Value0
	}
	return 0
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes12Listuint32) GetValue1() []*ElectionProviderMultiPhase_TupleUint32SpArithmeticPerThingsPerU16 {
	if x != nil {
		return x.Value1
	}
	return nil
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes12Listuint32) GetValue2() uint32 {
	if x != nil {
		return x.Value2
	}
	return 0
}

type ElectionProviderMultiPhase_SetMinimumUntrustedScoreCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaybeNextScore *SpNposElectionsElectionScore `protobuf:"bytes,1,opt,name=maybe_next_score,json=maybeNextScore,proto3,oneof" json:"maybe_next_score,omitempty"`
}

func (x *ElectionProviderMultiPhase_SetMinimumUntrustedScoreCall) Reset() {
	*x = ElectionProviderMultiPhase_SetMinimumUntrustedScoreCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectionProviderMultiPhase_SetMinimumUntrustedScoreCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectionProviderMultiPhase_SetMinimumUntrustedScoreCall) ProtoMessage() {}

func (x *ElectionProviderMultiPhase_SetMinimumUntrustedScoreCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectionProviderMultiPhase_SetMinimumUntrustedScoreCall.ProtoReflect.Descriptor instead.
func (*ElectionProviderMultiPhase_SetMinimumUntrustedScoreCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{120}
}

func (x *ElectionProviderMultiPhase_SetMinimumUntrustedScoreCall) GetMaybeNextScore() *SpNposElectionsElectionScore {
	if x != nil {
		return x.MaybeNextScore
	}
	return nil
}

type NominationPools_MinJoinBond struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*NominationPools_MinJoinBond_Noop
	//	*NominationPools_MinJoinBond_Set
	//	*NominationPools_MinJoinBond_Remove
	Value isNominationPools_MinJoinBond_Value `protobuf_oneof:"value"`
}

func (x *NominationPools_MinJoinBond) Reset() {
	*x = NominationPools_MinJoinBond{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NominationPools_MinJoinBond) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NominationPools_MinJoinBond) ProtoMessage() {}

func (x *NominationPools_MinJoinBond) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NominationPools_MinJoinBond.ProtoReflect.Descriptor instead.
func (*NominationPools_MinJoinBond) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{121}
}

func (m *NominationPools_MinJoinBond) GetValue() isNominationPools_MinJoinBond_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *NominationPools_MinJoinBond) GetNoop() *NominationPools_Noop {
	if x, ok := x.GetValue().(*NominationPools_MinJoinBond_Noop); ok {
		return x.Noop
	}
	return nil
}

func (x *NominationPools_MinJoinBond) GetSet() *NominationPools_Set {
	if x, ok := x.GetValue().(*NominationPools_MinJoinBond_Set); ok {
		return x.Set
	}
	return nil
}

func (x *NominationPools_MinJoinBond) GetRemove() *NominationPools_Remove {
	if x, ok := x.GetValue().(*NominationPools_MinJoinBond_Remove); ok {
		return x.Remove
	}
	return nil
}

type isNominationPools_MinJoinBond_Value interface {
	isNominationPools_MinJoinBond_Value()
}

type NominationPools_MinJoinBond_Noop struct {
	Noop *NominationPools_Noop `protobuf:"bytes,1,opt,name=noop,proto3,oneof"`
}

type NominationPools_MinJoinBond_Set struct {
	Set *NominationPools_Set `protobuf:"bytes,2,opt,name=set,proto3,oneof"`
}

type NominationPools_MinJoinBond_Remove struct {
	Remove *NominationPools_Remove `protobuf:"bytes,3,opt,name=remove,proto3,oneof"`
}

func (*NominationPools_MinJoinBond_Noop) isNominationPools_MinJoinBond_Value() {}

func (*NominationPools_MinJoinBond_Set) isNominationPools_MinJoinBond_Value() {}

func (*NominationPools_MinJoinBond_Remove) isNominationPools_MinJoinBond_Value() {}

type GearVoucher_SendMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Destination *GprimitivesActorId `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination,omitempty"`
	Payload     []byte              `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	GasLimit    uint64              `protobuf:"varint,3,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	Value       string              `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	KeepAlive   bool                `protobuf:"varint,5,opt,name=keep_alive,json=keepAlive,proto3" json:"keep_alive,omitempty"`
}

func (x *GearVoucher_SendMessage) Reset() {
	*x = GearVoucher_SendMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GearVoucher_SendMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GearVoucher_SendMessage) ProtoMessage() {}

func (x *GearVoucher_SendMessage) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GearVoucher_SendMessage.ProtoReflect.Descriptor instead.
func (*GearVoucher_SendMessage) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{122}
}

func (x *GearVoucher_SendMessage) GetDestination() *GprimitivesActorId {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *GearVoucher_SendMessage) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *GearVoucher_SendMessage) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *GearVoucher_SendMessage) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *GearVoucher_SendMessage) GetKeepAlive() bool {
	if x != nil {
		return x.KeepAlive
	}
	return false
}

type Grandpa_GrandpaTrieNodesList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrieNodes []byte `protobuf:"bytes,1,opt,name=trie_nodes,json=trieNodes,proto3" json:"trie_nodes,omitempty"`
}

func (x *Grandpa_GrandpaTrieNodesList) Reset() {
	*x = Grandpa_GrandpaTrieNodesList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Grandpa_GrandpaTrieNodesList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Grandpa_GrandpaTrieNodesList) ProtoMessage() {}

func (x *Grandpa_GrandpaTrieNodesList) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Grandpa_GrandpaTrieNodesList.ProtoReflect.Descriptor instead.
func (*Grandpa_GrandpaTrieNodesList) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{123}
}

func (x *Grandpa_GrandpaTrieNodesList) GetTrieNodes() []byte {
	if x != nil {
		return x.TrieNodes
	}
	return nil
}

type Staking_Address20 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Staking_Address20) Reset() {
	*x = Staking_Address20{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staking_Address20) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staking_Address20) ProtoMessage() {}

func (x *Staking_Address20) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staking_Address20.ProtoReflect.Descriptor instead.
func (*Staking_Address20) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{124}
}

func (x *Staking_Address20) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Gear_RunCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxGas *uint64 `protobuf:"varint,1,opt,name=max_gas,json=maxGas,proto3,oneof" json:"max_gas,omitempty"`
}

func (x *Gear_RunCall) Reset() {
	*x = Gear_RunCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Gear_RunCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gear_RunCall) ProtoMessage() {}

func (x *Gear_RunCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gear_RunCall.ProtoReflect.Descriptor instead.
func (*Gear_RunCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{125}
}

func (x *Gear_RunCall) GetMaxGas() uint64 {
	if x != nil && x.MaxGas != nil {
		return *x.MaxGas
	}
	return 0
}

type Treasury_CheckStatusCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *Treasury_CheckStatusCall) Reset() {
	*x = Treasury_CheckStatusCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Treasury_CheckStatusCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Treasury_CheckStatusCall) ProtoMessage() {}

func (x *Treasury_CheckStatusCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Treasury_CheckStatusCall.ProtoReflect.Descriptor instead.
func (*Treasury_CheckStatusCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{126}
}

func (x *Treasury_CheckStatusCall) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type ConvictionVoting_Locked3X struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConvictionVoting_Locked3X) Reset() {
	*x = ConvictionVoting_Locked3X{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConvictionVoting_Locked3X) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvictionVoting_Locked3X) ProtoMessage() {}

func (x *ConvictionVoting_Locked3X) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvictionVoting_Locked3X.ProtoReflect.Descriptor instead.
func (*ConvictionVoting_Locked3X) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{127}
}

type FellowshipCollective_Who struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*FellowshipCollective_Who_Id
	//	*FellowshipCollective_Who_Index
	//	*FellowshipCollective_Who_Raw
	//	*FellowshipCollective_Who_Address32
	//	*FellowshipCollective_Who_Address20
	Value isFellowshipCollective_Who_Value `protobuf_oneof:"value"`
}

func (x *FellowshipCollective_Who) Reset() {
	*x = FellowshipCollective_Who{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FellowshipCollective_Who) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FellowshipCollective_Who) ProtoMessage() {}

func (x *FellowshipCollective_Who) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FellowshipCollective_Who.ProtoReflect.Descriptor instead.
func (*FellowshipCollective_Who) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{128}
}

func (m *FellowshipCollective_Who) GetValue() isFellowshipCollective_Who_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *FellowshipCollective_Who) GetId() *FellowshipCollective_Id {
	if x, ok := x.GetValue().(*FellowshipCollective_Who_Id); ok {
		return x.Id
	}
	return nil
}

func (x *FellowshipCollective_Who) GetIndex() *FellowshipCollective_Index {
	if x, ok := x.GetValue().(*FellowshipCollective_Who_Index); ok {
		return x.Index
	}
	return nil
}

func (x *FellowshipCollective_Who) GetRaw() *FellowshipCollective_Raw {
	if x, ok := x.GetValue().(*FellowshipCollective_Who_Raw); ok {
		return x.Raw
	}
	return nil
}

func (x *FellowshipCollective_Who) GetAddress32() *FellowshipCollective_Address32 {
	if x, ok := x.GetValue().(*FellowshipCollective_Who_Address32); ok {
		return x.Address32
	}
	return nil
}

func (x *FellowshipCollective_Who) GetAddress20() *FellowshipCollective_Address20 {
	if x, ok := x.GetValue().(*FellowshipCollective_Who_Address20); ok {
		return x.Address20
	}
	return nil
}

type isFellowshipCollective_Who_Value interface {
	isFellowshipCollective_Who_Value()
}

type FellowshipCollective_Who_Id struct {
	Id *FellowshipCollective_Id `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type FellowshipCollective_Who_Index struct {
	Index *FellowshipCollective_Index `protobuf:"bytes,2,opt,name=index,proto3,oneof"`
}

type FellowshipCollective_Who_Raw struct {
	Raw *FellowshipCollective_Raw `protobuf:"bytes,3,opt,name=raw,proto3,oneof"`
}

type FellowshipCollective_Who_Address32 struct {
	Address32 *FellowshipCollective_Address32 `protobuf:"bytes,4,opt,name=address32,proto3,oneof"`
}

type FellowshipCollective_Who_Address20 struct {
	Address20 *FellowshipCollective_Address20 `protobuf:"bytes,5,opt,name=address20,proto3,oneof"`
}

func (*FellowshipCollective_Who_Id) isFellowshipCollective_Who_Value() {}

func (*FellowshipCollective_Who_Index) isFellowshipCollective_Who_Value() {}

func (*FellowshipCollective_Who_Raw) isFellowshipCollective_Who_Value() {}

func (*FellowshipCollective_Who_Address32) isFellowshipCollective_Who_Value() {}

func (*FellowshipCollective_Who_Address20) isFellowshipCollective_Who_Value() {}

type Identity_Display struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*Identity_Display_None
	//	*Identity_Display_Raw0
	//	*Identity_Display_Raw1
	//	*Identity_Display_Raw2
	//	*Identity_Display_Raw3
	//	*Identity_Display_Raw4
	//	*Identity_Display_Raw5
	//	*Identity_Display_Raw6
	//	*Identity_Display_Raw7
	//	*Identity_Display_Raw8
	//	*Identity_Display_Raw9
	//	*Identity_Display_Raw10
	//	*Identity_Display_Raw11
	//	*Identity_Display_Raw12
	//	*Identity_Display_Raw13
	//	*Identity_Display_Raw14
	//	*Identity_Display_Raw15
	//	*Identity_Display_Raw16
	//	*Identity_Display_Raw17
	//	*Identity_Display_Raw18
	//	*Identity_Display_Raw19
	//	*Identity_Display_Raw20
	//	*Identity_Display_Raw21
	//	*Identity_Display_Raw22
	//	*Identity_Display_Raw23
	//	*Identity_Display_Raw24
	//	*Identity_Display_Raw25
	//	*Identity_Display_Raw26
	//	*Identity_Display_Raw27
	//	*Identity_Display_Raw28
	//	*Identity_Display_Raw29
	//	*Identity_Display_Raw30
	//	*Identity_Display_Raw31
	//	*Identity_Display_Raw32
	//	*Identity_Display_BlakeTwo256
	//	*Identity_Display_Sha256
	//	*Identity_Display_Keccak256
	//	*Identity_Display_ShaThree256
	Value isIdentity_Display_Value `protobuf_oneof:"value"`
}

func (x *Identity_Display) Reset() {
	*x = Identity_Display{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_Display) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_Display) ProtoMessage() {}

func (x *Identity_Display) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_Display.ProtoReflect.Descriptor instead.
func (*Identity_Display) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{129}
}

func (m *Identity_Display) GetValue() isIdentity_Display_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Identity_Display) GetNone() *Identity_None {
	if x, ok := x.GetValue().(*Identity_Display_None); ok {
		return x.None
	}
	return nil
}

func (x *Identity_Display) GetRaw0() *Identity_Raw0 {
	if x, ok := x.GetValue().(*Identity_Display_Raw0); ok {
		return x.Raw0
	}
	return nil
}

func (x *Identity_Display) GetRaw1() *Identity_Raw1 {
	if x, ok := x.GetValue().(*Identity_Display_Raw1); ok {
		return x.Raw1
	}
	return nil
}

func (x *Identity_Display) GetRaw2() *Identity_Raw2 {
	if x, ok := x.GetValue().(*Identity_Display_Raw2); ok {
		return x.Raw2
	}
	return nil
}

func (x *Identity_Display) GetRaw3() *Identity_Raw3 {
	if x, ok := x.GetValue().(*Identity_Display_Raw3); ok {
		return x.Raw3
	}
	return nil
}

func (x *Identity_Display) GetRaw4() *Identity_Raw4 {
	if x, ok := x.GetValue().(*Identity_Display_Raw4); ok {
		return x.Raw4
	}
	return nil
}

func (x *Identity_Display) GetRaw5() *Identity_Raw5 {
	if x, ok := x.GetValue().(*Identity_Display_Raw5); ok {
		return x.Raw5
	}
	return nil
}

func (x *Identity_Display) GetRaw6() *Identity_Raw6 {
	if x, ok := x.GetValue().(*Identity_Display_Raw6); ok {
		return x.Raw6
	}
	return nil
}

func (x *Identity_Display) GetRaw7() *Identity_Raw7 {
	if x, ok := x.GetValue().(*Identity_Display_Raw7); ok {
		return x.Raw7
	}
	return nil
}

func (x *Identity_Display) GetRaw8() *Identity_Raw8 {
	if x, ok := x.GetValue().(*Identity_Display_Raw8); ok {
		return x.Raw8
	}
	return nil
}

func (x *Identity_Display) GetRaw9() *Identity_Raw9 {
	if x, ok := x.GetValue().(*Identity_Display_Raw9); ok {
		return x.Raw9
	}
	return nil
}

func (x *Identity_Display) GetRaw10() *Identity_Raw10 {
	if x, ok := x.GetValue().(*Identity_Display_Raw10); ok {
		return x.Raw10
	}
	return nil
}

func (x *Identity_Display) GetRaw11() *Identity_Raw11 {
	if x, ok := x.GetValue().(*Identity_Display_Raw11); ok {
		return x.Raw11
	}
	return nil
}

func (x *Identity_Display) GetRaw12() *Identity_Raw12 {
	if x, ok := x.GetValue().(*Identity_Display_Raw12); ok {
		return x.Raw12
	}
	return nil
}

func (x *Identity_Display) GetRaw13() *Identity_Raw13 {
	if x, ok := x.GetValue().(*Identity_Display_Raw13); ok {
		return x.Raw13
	}
	return nil
}

func (x *Identity_Display) GetRaw14() *Identity_Raw14 {
	if x, ok := x.GetValue().(*Identity_Display_Raw14); ok {
		return x.Raw14
	}
	return nil
}

func (x *Identity_Display) GetRaw15() *Identity_Raw15 {
	if x, ok := x.GetValue().(*Identity_Display_Raw15); ok {
		return x.Raw15
	}
	return nil
}

func (x *Identity_Display) GetRaw16() *Identity_Raw16 {
	if x, ok := x.GetValue().(*Identity_Display_Raw16); ok {
		return x.Raw16
	}
	return nil
}

func (x *Identity_Display) GetRaw17() *Identity_Raw17 {
	if x, ok := x.GetValue().(*Identity_Display_Raw17); ok {
		return x.Raw17
	}
	return nil
}

func (x *Identity_Display) GetRaw18() *Identity_Raw18 {
	if x, ok := x.GetValue().(*Identity_Display_Raw18); ok {
		return x.Raw18
	}
	return nil
}

func (x *Identity_Display) GetRaw19() *Identity_Raw19 {
	if x, ok := x.GetValue().(*Identity_Display_Raw19); ok {
		return x.Raw19
	}
	return nil
}

func (x *Identity_Display) GetRaw20() *Identity_Raw20 {
	if x, ok := x.GetValue().(*Identity_Display_Raw20); ok {
		return x.Raw20
	}
	return nil
}

func (x *Identity_Display) GetRaw21() *Identity_Raw21 {
	if x, ok := x.GetValue().(*Identity_Display_Raw21); ok {
		return x.Raw21
	}
	return nil
}

func (x *Identity_Display) GetRaw22() *Identity_Raw22 {
	if x, ok := x.GetValue().(*Identity_Display_Raw22); ok {
		return x.Raw22
	}
	return nil
}

func (x *Identity_Display) GetRaw23() *Identity_Raw23 {
	if x, ok := x.GetValue().(*Identity_Display_Raw23); ok {
		return x.Raw23
	}
	return nil
}

func (x *Identity_Display) GetRaw24() *Identity_Raw24 {
	if x, ok := x.GetValue().(*Identity_Display_Raw24); ok {
		return x.Raw24
	}
	return nil
}

func (x *Identity_Display) GetRaw25() *Identity_Raw25 {
	if x, ok := x.GetValue().(*Identity_Display_Raw25); ok {
		return x.Raw25
	}
	return nil
}

func (x *Identity_Display) GetRaw26() *Identity_Raw26 {
	if x, ok := x.GetValue().(*Identity_Display_Raw26); ok {
		return x.Raw26
	}
	return nil
}

func (x *Identity_Display) GetRaw27() *Identity_Raw27 {
	if x, ok := x.GetValue().(*Identity_Display_Raw27); ok {
		return x.Raw27
	}
	return nil
}

func (x *Identity_Display) GetRaw28() *Identity_Raw28 {
	if x, ok := x.GetValue().(*Identity_Display_Raw28); ok {
		return x.Raw28
	}
	return nil
}

func (x *Identity_Display) GetRaw29() *Identity_Raw29 {
	if x, ok := x.GetValue().(*Identity_Display_Raw29); ok {
		return x.Raw29
	}
	return nil
}

func (x *Identity_Display) GetRaw30() *Identity_Raw30 {
	if x, ok := x.GetValue().(*Identity_Display_Raw30); ok {
		return x.Raw30
	}
	return nil
}

func (x *Identity_Display) GetRaw31() *Identity_Raw31 {
	if x, ok := x.GetValue().(*Identity_Display_Raw31); ok {
		return x.Raw31
	}
	return nil
}

func (x *Identity_Display) GetRaw32() *Identity_Raw32 {
	if x, ok := x.GetValue().(*Identity_Display_Raw32); ok {
		return x.Raw32
	}
	return nil
}

func (x *Identity_Display) GetBlakeTwo256() *Identity_BlakeTwo256 {
	if x, ok := x.GetValue().(*Identity_Display_BlakeTwo256); ok {
		return x.BlakeTwo256
	}
	return nil
}

func (x *Identity_Display) GetSha256() *Identity_Sha256 {
	if x, ok := x.GetValue().(*Identity_Display_Sha256); ok {
		return x.Sha256
	}
	return nil
}

func (x *Identity_Display) GetKeccak256() *Identity_Keccak256 {
	if x, ok := x.GetValue().(*Identity_Display_Keccak256); ok {
		return x.Keccak256
	}
	return nil
}

func (x *Identity_Display) GetShaThree256() *Identity_ShaThree256 {
	if x, ok := x.GetValue().(*Identity_Display_ShaThree256); ok {
		return x.ShaThree256
	}
	return nil
}

type isIdentity_Display_Value interface {
	isIdentity_Display_Value()
}

type Identity_Display_None struct {
	None *Identity_None `protobuf:"bytes,1,opt,name=none,proto3,oneof"`
}

type Identity_Display_Raw0 struct {
	Raw0 *Identity_Raw0 `protobuf:"bytes,2,opt,name=raw0,proto3,oneof"`
}

type Identity_Display_Raw1 struct {
	Raw1 *Identity_Raw1 `protobuf:"bytes,3,opt,name=raw1,proto3,oneof"`
}

type Identity_Display_Raw2 struct {
	Raw2 *Identity_Raw2 `protobuf:"bytes,4,opt,name=raw2,proto3,oneof"`
}

type Identity_Display_Raw3 struct {
	Raw3 *Identity_Raw3 `protobuf:"bytes,5,opt,name=raw3,proto3,oneof"`
}

type Identity_Display_Raw4 struct {
	Raw4 *Identity_Raw4 `protobuf:"bytes,6,opt,name=raw4,proto3,oneof"`
}

type Identity_Display_Raw5 struct {
	Raw5 *Identity_Raw5 `protobuf:"bytes,7,opt,name=raw5,proto3,oneof"`
}

type Identity_Display_Raw6 struct {
	Raw6 *Identity_Raw6 `protobuf:"bytes,8,opt,name=raw6,proto3,oneof"`
}

type Identity_Display_Raw7 struct {
	Raw7 *Identity_Raw7 `protobuf:"bytes,9,opt,name=raw7,proto3,oneof"`
}

type Identity_Display_Raw8 struct {
	Raw8 *Identity_Raw8 `protobuf:"bytes,10,opt,name=raw8,proto3,oneof"`
}

type Identity_Display_Raw9 struct {
	Raw9 *Identity_Raw9 `protobuf:"bytes,11,opt,name=raw9,proto3,oneof"`
}

type Identity_Display_Raw10 struct {
	Raw10 *Identity_Raw10 `protobuf:"bytes,12,opt,name=raw10,proto3,oneof"`
}

type Identity_Display_Raw11 struct {
	Raw11 *Identity_Raw11 `protobuf:"bytes,13,opt,name=raw11,proto3,oneof"`
}

type Identity_Display_Raw12 struct {
	Raw12 *Identity_Raw12 `protobuf:"bytes,14,opt,name=raw12,proto3,oneof"`
}

type Identity_Display_Raw13 struct {
	Raw13 *Identity_Raw13 `protobuf:"bytes,15,opt,name=raw13,proto3,oneof"`
}

type Identity_Display_Raw14 struct {
	Raw14 *Identity_Raw14 `protobuf:"bytes,16,opt,name=raw14,proto3,oneof"`
}

type Identity_Display_Raw15 struct {
	Raw15 *Identity_Raw15 `protobuf:"bytes,17,opt,name=raw15,proto3,oneof"`
}

type Identity_Display_Raw16 struct {
	Raw16 *Identity_Raw16 `protobuf:"bytes,18,opt,name=raw16,proto3,oneof"`
}

type Identity_Display_Raw17 struct {
	Raw17 *Identity_Raw17 `protobuf:"bytes,19,opt,name=raw17,proto3,oneof"`
}

type Identity_Display_Raw18 struct {
	Raw18 *Identity_Raw18 `protobuf:"bytes,20,opt,name=raw18,proto3,oneof"`
}

type Identity_Display_Raw19 struct {
	Raw19 *Identity_Raw19 `protobuf:"bytes,21,opt,name=raw19,proto3,oneof"`
}

type Identity_Display_Raw20 struct {
	Raw20 *Identity_Raw20 `protobuf:"bytes,22,opt,name=raw20,proto3,oneof"`
}

type Identity_Display_Raw21 struct {
	Raw21 *Identity_Raw21 `protobuf:"bytes,23,opt,name=raw21,proto3,oneof"`
}

type Identity_Display_Raw22 struct {
	Raw22 *Identity_Raw22 `protobuf:"bytes,24,opt,name=raw22,proto3,oneof"`
}

type Identity_Display_Raw23 struct {
	Raw23 *Identity_Raw23 `protobuf:"bytes,25,opt,name=raw23,proto3,oneof"`
}

type Identity_Display_Raw24 struct {
	Raw24 *Identity_Raw24 `protobuf:"bytes,26,opt,name=raw24,proto3,oneof"`
}

type Identity_Display_Raw25 struct {
	Raw25 *Identity_Raw25 `protobuf:"bytes,27,opt,name=raw25,proto3,oneof"`
}

type Identity_Display_Raw26 struct {
	Raw26 *Identity_Raw26 `protobuf:"bytes,28,opt,name=raw26,proto3,oneof"`
}

type Identity_Display_Raw27 struct {
	Raw27 *Identity_Raw27 `protobuf:"bytes,29,opt,name=raw27,proto3,oneof"`
}

type Identity_Display_Raw28 struct {
	Raw28 *Identity_Raw28 `protobuf:"bytes,30,opt,name=raw28,proto3,oneof"`
}

type Identity_Display_Raw29 struct {
	Raw29 *Identity_Raw29 `protobuf:"bytes,31,opt,name=raw29,proto3,oneof"`
}

type Identity_Display_Raw30 struct {
	Raw30 *Identity_Raw30 `protobuf:"bytes,32,opt,name=raw30,proto3,oneof"`
}

type Identity_Display_Raw31 struct {
	Raw31 *Identity_Raw31 `protobuf:"bytes,33,opt,name=raw31,proto3,oneof"`
}

type Identity_Display_Raw32 struct {
	Raw32 *Identity_Raw32 `protobuf:"bytes,34,opt,name=raw32,proto3,oneof"`
}

type Identity_Display_BlakeTwo256 struct {
	BlakeTwo256 *Identity_BlakeTwo256 `protobuf:"bytes,35,opt,name=blake_two256,json=blakeTwo256,proto3,oneof"`
}

type Identity_Display_Sha256 struct {
	Sha256 *Identity_Sha256 `protobuf:"bytes,36,opt,name=sha256,proto3,oneof"`
}

type Identity_Display_Keccak256 struct {
	Keccak256 *Identity_Keccak256 `protobuf:"bytes,37,opt,name=keccak256,proto3,oneof"`
}

type Identity_Display_ShaThree256 struct {
	ShaThree256 *Identity_ShaThree256 `protobuf:"bytes,38,opt,name=sha_three256,json=shaThree256,proto3,oneof"`
}

func (*Identity_Display_None) isIdentity_Display_Value() {}

func (*Identity_Display_Raw0) isIdentity_Display_Value() {}

func (*Identity_Display_Raw1) isIdentity_Display_Value() {}

func (*Identity_Display_Raw2) isIdentity_Display_Value() {}

func (*Identity_Display_Raw3) isIdentity_Display_Value() {}

func (*Identity_Display_Raw4) isIdentity_Display_Value() {}

func (*Identity_Display_Raw5) isIdentity_Display_Value() {}

func (*Identity_Display_Raw6) isIdentity_Display_Value() {}

func (*Identity_Display_Raw7) isIdentity_Display_Value() {}

func (*Identity_Display_Raw8) isIdentity_Display_Value() {}

func (*Identity_Display_Raw9) isIdentity_Display_Value() {}

func (*Identity_Display_Raw10) isIdentity_Display_Value() {}

func (*Identity_Display_Raw11) isIdentity_Display_Value() {}

func (*Identity_Display_Raw12) isIdentity_Display_Value() {}

func (*Identity_Display_Raw13) isIdentity_Display_Value() {}

func (*Identity_Display_Raw14) isIdentity_Display_Value() {}

func (*Identity_Display_Raw15) isIdentity_Display_Value() {}

func (*Identity_Display_Raw16) isIdentity_Display_Value() {}

func (*Identity_Display_Raw17) isIdentity_Display_Value() {}

func (*Identity_Display_Raw18) isIdentity_Display_Value() {}

func (*Identity_Display_Raw19) isIdentity_Display_Value() {}

func (*Identity_Display_Raw20) isIdentity_Display_Value() {}

func (*Identity_Display_Raw21) isIdentity_Display_Value() {}

func (*Identity_Display_Raw22) isIdentity_Display_Value() {}

func (*Identity_Display_Raw23) isIdentity_Display_Value() {}

func (*Identity_Display_Raw24) isIdentity_Display_Value() {}

func (*Identity_Display_Raw25) isIdentity_Display_Value() {}

func (*Identity_Display_Raw26) isIdentity_Display_Value() {}

func (*Identity_Display_Raw27) isIdentity_Display_Value() {}

func (*Identity_Display_Raw28) isIdentity_Display_Value() {}

func (*Identity_Display_Raw29) isIdentity_Display_Value() {}

func (*Identity_Display_Raw30) isIdentity_Display_Value() {}

func (*Identity_Display_Raw31) isIdentity_Display_Value() {}

func (*Identity_Display_Raw32) isIdentity_Display_Value() {}

func (*Identity_Display_BlakeTwo256) isIdentity_Display_Value() {}

func (*Identity_Display_Sha256) isIdentity_Display_Value() {}

func (*Identity_Display_Keccak256) isIdentity_Display_Value() {}

func (*Identity_Display_ShaThree256) isIdentity_Display_Value() {}

type NominationPools_UpdateRolesCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoolId       uint32                        `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	NewRoot      *NominationPools_NewRoot      `protobuf:"bytes,2,opt,name=new_root,json=newRoot,proto3" json:"new_root,omitempty"`
	NewNominator *NominationPools_NewNominator `protobuf:"bytes,3,opt,name=new_nominator,json=newNominator,proto3" json:"new_nominator,omitempty"`
	NewBouncer   *NominationPools_NewBouncer   `protobuf:"bytes,4,opt,name=new_bouncer,json=newBouncer,proto3" json:"new_bouncer,omitempty"`
}

func (x *NominationPools_UpdateRolesCall) Reset() {
	*x = NominationPools_UpdateRolesCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NominationPools_UpdateRolesCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NominationPools_UpdateRolesCall) ProtoMessage() {}

func (x *NominationPools_UpdateRolesCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NominationPools_UpdateRolesCall.ProtoReflect.Descriptor instead.
func (*NominationPools_UpdateRolesCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{130}
}

func (x *NominationPools_UpdateRolesCall) GetPoolId() uint32 {
	if x != nil {
		return x.PoolId
	}
	return 0
}

func (x *NominationPools_UpdateRolesCall) GetNewRoot() *NominationPools_NewRoot {
	if x != nil {
		return x.NewRoot
	}
	return nil
}

func (x *NominationPools_UpdateRolesCall) GetNewNominator() *NominationPools_NewNominator {
	if x != nil {
		return x.NewNominator
	}
	return nil
}

func (x *NominationPools_UpdateRolesCall) GetNewBouncer() *NominationPools_NewBouncer {
	if x != nil {
		return x.NewBouncer
	}
	return nil
}

type Referenda_RefundSubmissionDepositCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *Referenda_RefundSubmissionDepositCall) Reset() {
	*x = Referenda_RefundSubmissionDepositCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Referenda_RefundSubmissionDepositCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Referenda_RefundSubmissionDepositCall) ProtoMessage() {}

func (x *Referenda_RefundSubmissionDepositCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Referenda_RefundSubmissionDepositCall.ProtoReflect.Descriptor instead.
func (*Referenda_RefundSubmissionDepositCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{131}
}

func (x *Referenda_RefundSubmissionDepositCall) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type OriginsPallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OriginsPallet) Reset() {
	*x = OriginsPallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OriginsPallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OriginsPallet) ProtoMessage() {}

func (x *OriginsPallet) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OriginsPallet.ProtoReflect.Descriptor instead.
func (*OriginsPallet) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{132}
}

type NominationPools_Extra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*NominationPools_Extra_FreeBalance
	//	*NominationPools_Extra_Rewards
	Value isNominationPools_Extra_Value `protobuf_oneof:"value"`
}

func (x *NominationPools_Extra) Reset() {
	*x = NominationPools_Extra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NominationPools_Extra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NominationPools_Extra) ProtoMessage() {}

func (x *NominationPools_Extra) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NominationPools_Extra.ProtoReflect.Descriptor instead.
func (*NominationPools_Extra) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{133}
}

func (m *NominationPools_Extra) GetValue() isNominationPools_Extra_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *NominationPools_Extra) GetFreeBalance() *NominationPools_FreeBalance {
	if x, ok := x.GetValue().(*NominationPools_Extra_FreeBalance); ok {
		return x.FreeBalance
	}
	return nil
}

func (x *NominationPools_Extra) GetRewards() *NominationPools_Rewards {
	if x, ok := x.GetValue().(*NominationPools_Extra_Rewards); ok {
		return x.Rewards
	}
	return nil
}

type isNominationPools_Extra_Value interface {
	isNominationPools_Extra_Value()
}

type NominationPools_Extra_FreeBalance struct {
	FreeBalance *NominationPools_FreeBalance `protobuf:"bytes,1,opt,name=free_balance,json=freeBalance,proto3,oneof"`
}

type NominationPools_Extra_Rewards struct {
	Rewards *NominationPools_Rewards `protobuf:"bytes,2,opt,name=rewards,proto3,oneof"`
}

func (*NominationPools_Extra_FreeBalance) isNominationPools_Extra_Value() {}

func (*NominationPools_Extra_Rewards) isNominationPools_Extra_Value() {}

type GearVoucher_IssueCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spender       *SpCoreCryptoAccountId32 `protobuf:"bytes,1,opt,name=spender,proto3" json:"spender,omitempty"`
	Balance       string                   `protobuf:"bytes,2,opt,name=balance,proto3" json:"balance,omitempty"`
	Programs      *BTreeSet                `protobuf:"bytes,3,opt,name=programs,proto3,oneof" json:"programs,omitempty"`
	CodeUploading bool                     `protobuf:"varint,4,opt,name=code_uploading,json=codeUploading,proto3" json:"code_uploading,omitempty"`
	Duration      uint32                   `protobuf:"varint,5,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *GearVoucher_IssueCall) Reset() {
	*x = GearVoucher_IssueCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GearVoucher_IssueCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GearVoucher_IssueCall) ProtoMessage() {}

func (x *GearVoucher_IssueCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GearVoucher_IssueCall.ProtoReflect.Descriptor instead.
func (*GearVoucher_IssueCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{134}
}

func (x *GearVoucher_IssueCall) GetSpender() *SpCoreCryptoAccountId32 {
	if x != nil {
		return x.Spender
	}
	return nil
}

func (x *GearVoucher_IssueCall) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

func (x *GearVoucher_IssueCall) GetPrograms() *BTreeSet {
	if x != nil {
		return x.Programs
	}
	return nil
}

func (x *GearVoucher_IssueCall) GetCodeUploading() bool {
	if x != nil {
		return x.CodeUploading
	}
	return false
}

func (x *GearVoucher_IssueCall) GetDuration() uint32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

type GearVoucher_None struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GearVoucher_None) Reset() {
	*x = GearVoucher_None{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GearVoucher_None) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GearVoucher_None) ProtoMessage() {}

func (x *GearVoucher_None) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GearVoucher_None.ProtoReflect.Descriptor instead.
func (*GearVoucher_None) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{135}
}

type SpConsensusGrandpaAppSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 *SpCoreEd25519Signature `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *SpConsensusGrandpaAppSignature) Reset() {
	*x = SpConsensusGrandpaAppSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpConsensusGrandpaAppSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpConsensusGrandpaAppSignature) ProtoMessage() {}

func (x *SpConsensusGrandpaAppSignature) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpConsensusGrandpaAppSignature.ProtoReflect.Descriptor instead.
func (*SpConsensusGrandpaAppSignature) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{136}
}

func (x *SpConsensusGrandpaAppSignature) GetValue0() *SpCoreEd25519Signature {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Grandpa_Prevote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 *FinalityGrandpaEquivocation `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Grandpa_Prevote) Reset() {
	*x = Grandpa_Prevote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Grandpa_Prevote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Grandpa_Prevote) ProtoMessage() {}

func (x *Grandpa_Prevote) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Grandpa_Prevote.ProtoReflect.Descriptor instead.
func (*Grandpa_Prevote) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{137}
}

func (x *Grandpa_Prevote) GetValue0() *FinalityGrandpaEquivocation {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Balances_ForceTransferCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source *Balances_Source `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Dest   *Balances_Dest   `protobuf:"bytes,2,opt,name=dest,proto3" json:"dest,omitempty"`
	Value  string           `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Balances_ForceTransferCall) Reset() {
	*x = Balances_ForceTransferCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Balances_ForceTransferCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Balances_ForceTransferCall) ProtoMessage() {}

func (x *Balances_ForceTransferCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Balances_ForceTransferCall.ProtoReflect.Descriptor instead.
func (*Balances_ForceTransferCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{138}
}

func (x *Balances_ForceTransferCall) GetSource() *Balances_Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Balances_ForceTransferCall) GetDest() *Balances_Dest {
	if x != nil {
		return x.Dest
	}
	return nil
}

func (x *Balances_ForceTransferCall) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Preimage_EnsureUpdatedCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hashes []*PrimitiveTypesH256 `protobuf:"bytes,1,rep,name=hashes,proto3" json:"hashes,omitempty"`
}

func (x *Preimage_EnsureUpdatedCall) Reset() {
	*x = Preimage_EnsureUpdatedCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Preimage_EnsureUpdatedCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Preimage_EnsureUpdatedCall) ProtoMessage() {}

func (x *Preimage_EnsureUpdatedCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Preimage_EnsureUpdatedCall.ProtoReflect.Descriptor instead.
func (*Preimage_EnsureUpdatedCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{139}
}

func (x *Preimage_EnsureUpdatedCall) GetHashes() []*PrimitiveTypesH256 {
	if x != nil {
		return x.Hashes
	}
	return nil
}

type Proxy_Address20 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Proxy_Address20) Reset() {
	*x = Proxy_Address20{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proxy_Address20) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proxy_Address20) ProtoMessage() {}

func (x *Proxy_Address20) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proxy_Address20.ProtoReflect.Descriptor instead.
func (*Proxy_Address20) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{140}
}

func (x *Proxy_Address20) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type NominationPools_ClaimPayoutOtherCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Other *SpCoreCryptoAccountId32 `protobuf:"bytes,1,opt,name=other,proto3" json:"other,omitempty"`
}

func (x *NominationPools_ClaimPayoutOtherCall) Reset() {
	*x = NominationPools_ClaimPayoutOtherCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NominationPools_ClaimPayoutOtherCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NominationPools_ClaimPayoutOtherCall) ProtoMessage() {}

func (x *NominationPools_ClaimPayoutOtherCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NominationPools_ClaimPayoutOtherCall.ProtoReflect.Descriptor instead.
func (*NominationPools_ClaimPayoutOtherCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{141}
}

func (x *NominationPools_ClaimPayoutOtherCall) GetOther() *SpCoreCryptoAccountId32 {
	if x != nil {
		return x.Other
	}
	return nil
}

type System_SetCodeCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code []byte `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *System_SetCodeCall) Reset() {
	*x = System_SetCodeCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_SetCodeCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_SetCodeCall) ProtoMessage() {}

func (x *System_SetCodeCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_SetCodeCall.ProtoReflect.Descriptor instead.
func (*System_SetCodeCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{142}
}

func (x *System_SetCodeCall) GetCode() []byte {
	if x != nil {
		return x.Code
	}
	return nil
}

type Balances_Who struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*Balances_Who_Id
	//	*Balances_Who_Index
	//	*Balances_Who_Raw
	//	*Balances_Who_Address32
	//	*Balances_Who_Address20
	Value isBalances_Who_Value `protobuf_oneof:"value"`
}

func (x *Balances_Who) Reset() {
	*x = Balances_Who{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Balances_Who) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Balances_Who) ProtoMessage() {}

func (x *Balances_Who) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Balances_Who.ProtoReflect.Descriptor instead.
func (*Balances_Who) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{143}
}

func (m *Balances_Who) GetValue() isBalances_Who_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Balances_Who) GetId() *Balances_Id {
	if x, ok := x.GetValue().(*Balances_Who_Id); ok {
		return x.Id
	}
	return nil
}

func (x *Balances_Who) GetIndex() *Balances_Index {
	if x, ok := x.GetValue().(*Balances_Who_Index); ok {
		return x.Index
	}
	return nil
}

func (x *Balances_Who) GetRaw() *Balances_Raw {
	if x, ok := x.GetValue().(*Balances_Who_Raw); ok {
		return x.Raw
	}
	return nil
}

func (x *Balances_Who) GetAddress32() *Balances_Address32 {
	if x, ok := x.GetValue().(*Balances_Who_Address32); ok {
		return x.Address32
	}
	return nil
}

func (x *Balances_Who) GetAddress20() *Balances_Address20 {
	if x, ok := x.GetValue().(*Balances_Who_Address20); ok {
		return x.Address20
	}
	return nil
}

type isBalances_Who_Value interface {
	isBalances_Who_Value()
}

type Balances_Who_Id struct {
	Id *Balances_Id `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type Balances_Who_Index struct {
	Index *Balances_Index `protobuf:"bytes,2,opt,name=index,proto3,oneof"`
}

type Balances_Who_Raw struct {
	Raw *Balances_Raw `protobuf:"bytes,3,opt,name=raw,proto3,oneof"`
}

type Balances_Who_Address32 struct {
	Address32 *Balances_Address32 `protobuf:"bytes,4,opt,name=address32,proto3,oneof"`
}

type Balances_Who_Address20 struct {
	Address20 *Balances_Address20 `protobuf:"bytes,5,opt,name=address20,proto3,oneof"`
}

func (*Balances_Who_Id) isBalances_Who_Value() {}

func (*Balances_Who_Index) isBalances_Who_Value() {}

func (*Balances_Who_Raw) isBalances_Who_Value() {}

func (*Balances_Who_Address32) isBalances_Who_Value() {}

func (*Balances_Who_Address20) isBalances_Who_Value() {}

type WhitelistPallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Call:
	//
	//	*WhitelistPallet_WhitelistCallCall
	//	*WhitelistPallet_RemoveWhitelistedCallCall
	//	*WhitelistPallet_DispatchWhitelistedCallCall
	//	*WhitelistPallet_DispatchWhitelistedCallWithPreimageCall
	Call isWhitelistPallet_Call `protobuf_oneof:"call"`
}

func (x *WhitelistPallet) Reset() {
	*x = WhitelistPallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WhitelistPallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhitelistPallet) ProtoMessage() {}

func (x *WhitelistPallet) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhitelistPallet.ProtoReflect.Descriptor instead.
func (*WhitelistPallet) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{144}
}

func (m *WhitelistPallet) GetCall() isWhitelistPallet_Call {
	if m != nil {
		return m.Call
	}
	return nil
}

func (x *WhitelistPallet) GetWhitelistCallCall() *Whitelist_WhitelistCallCall {
	if x, ok := x.GetCall().(*WhitelistPallet_WhitelistCallCall); ok {
		return x.WhitelistCallCall
	}
	return nil
}

func (x *WhitelistPallet) GetRemoveWhitelistedCallCall() *Whitelist_RemoveWhitelistedCallCall {
	if x, ok := x.GetCall().(*WhitelistPallet_RemoveWhitelistedCallCall); ok {
		return x.RemoveWhitelistedCallCall
	}
	return nil
}

func (x *WhitelistPallet) GetDispatchWhitelistedCallCall() *Whitelist_DispatchWhitelistedCallCall {
	if x, ok := x.GetCall().(*WhitelistPallet_DispatchWhitelistedCallCall); ok {
		return x.DispatchWhitelistedCallCall
	}
	return nil
}

func (x *WhitelistPallet) GetDispatchWhitelistedCallWithPreimageCall() *Whitelist_DispatchWhitelistedCallWithPreimageCall {
	if x, ok := x.GetCall().(*WhitelistPallet_DispatchWhitelistedCallWithPreimageCall); ok {
		return x.DispatchWhitelistedCallWithPreimageCall
	}
	return nil
}

type isWhitelistPallet_Call interface {
	isWhitelistPallet_Call()
}

type WhitelistPallet_WhitelistCallCall struct {
	WhitelistCallCall *Whitelist_WhitelistCallCall `protobuf:"bytes,1,opt,name=whitelist_call_call,json=whitelistCallCall,proto3,oneof"`
}

type WhitelistPallet_RemoveWhitelistedCallCall struct {
	RemoveWhitelistedCallCall *Whitelist_RemoveWhitelistedCallCall `protobuf:"bytes,2,opt,name=remove_whitelisted_call_call,json=removeWhitelistedCallCall,proto3,oneof"`
}

type WhitelistPallet_DispatchWhitelistedCallCall struct {
	DispatchWhitelistedCallCall *Whitelist_DispatchWhitelistedCallCall `protobuf:"bytes,3,opt,name=dispatch_whitelisted_call_call,json=dispatchWhitelistedCallCall,proto3,oneof"`
}

type WhitelistPallet_DispatchWhitelistedCallWithPreimageCall struct {
	DispatchWhitelistedCallWithPreimageCall *Whitelist_DispatchWhitelistedCallWithPreimageCall `protobuf:"bytes,4,opt,name=dispatch_whitelisted_call_with_preimage_call,json=dispatchWhitelistedCallWithPreimageCall,proto3,oneof"`
}

func (*WhitelistPallet_WhitelistCallCall) isWhitelistPallet_Call() {}

func (*WhitelistPallet_RemoveWhitelistedCallCall) isWhitelistPallet_Call() {}

func (*WhitelistPallet_DispatchWhitelistedCallCall) isWhitelistPallet_Call() {}

func (*WhitelistPallet_DispatchWhitelistedCallWithPreimageCall) isWhitelistPallet_Call() {}

type Identity_Raw26 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Identity_Raw26) Reset() {
	*x = Identity_Raw26{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_Raw26) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_Raw26) ProtoMessage() {}

func (x *Identity_Raw26) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_Raw26.ProtoReflect.Descriptor instead.
func (*Identity_Raw26) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{145}
}

func (x *Identity_Raw26) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type NominationPools_SetStateCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoolId uint32                 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	State  *NominationPools_State `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *NominationPools_SetStateCall) Reset() {
	*x = NominationPools_SetStateCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NominationPools_SetStateCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NominationPools_SetStateCall) ProtoMessage() {}

func (x *NominationPools_SetStateCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NominationPools_SetStateCall.ProtoReflect.Descriptor instead.
func (*NominationPools_SetStateCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{146}
}

func (x *NominationPools_SetStateCall) GetPoolId() uint32 {
	if x != nil {
		return x.PoolId
	}
	return 0
}

func (x *NominationPools_SetStateCall) GetState() *NominationPools_State {
	if x != nil {
		return x.State
	}
	return nil
}

type SpCoreEd25519Public struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *SpCoreEd25519Public) Reset() {
	*x = SpCoreEd25519Public{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpCoreEd25519Public) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpCoreEd25519Public) ProtoMessage() {}

func (x *SpCoreEd25519Public) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpCoreEd25519Public.ProtoReflect.Descriptor instead.
func (*SpCoreEd25519Public) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{147}
}

func (x *SpCoreEd25519Public) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Treasury_RemoveApprovalCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProposalId uint32 `protobuf:"varint,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
}

func (x *Treasury_RemoveApprovalCall) Reset() {
	*x = Treasury_RemoveApprovalCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Treasury_RemoveApprovalCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Treasury_RemoveApprovalCall) ProtoMessage() {}

func (x *Treasury_RemoveApprovalCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Treasury_RemoveApprovalCall.ProtoReflect.Descriptor instead.
func (*Treasury_RemoveApprovalCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{148}
}

func (x *Treasury_RemoveApprovalCall) GetProposalId() uint32 {
	if x != nil {
		return x.ProposalId
	}
	return 0
}

type BagsList_Address20 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *BagsList_Address20) Reset() {
	*x = BagsList_Address20{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BagsList_Address20) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BagsList_Address20) ProtoMessage() {}

func (x *BagsList_Address20) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BagsList_Address20.ProtoReflect.Descriptor instead.
func (*BagsList_Address20) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{149}
}

func (x *BagsList_Address20) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Staking_WithdrawUnbondedCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumSlashingSpans uint32 `protobuf:"varint,1,opt,name=num_slashing_spans,json=numSlashingSpans,proto3" json:"num_slashing_spans,omitempty"`
}

func (x *Staking_WithdrawUnbondedCall) Reset() {
	*x = Staking_WithdrawUnbondedCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staking_WithdrawUnbondedCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staking_WithdrawUnbondedCall) ProtoMessage() {}

func (x *Staking_WithdrawUnbondedCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staking_WithdrawUnbondedCall.ProtoReflect.Descriptor instead.
func (*Staking_WithdrawUnbondedCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{150}
}

func (x *Staking_WithdrawUnbondedCall) GetNumSlashingSpans() uint32 {
	if x != nil {
		return x.NumSlashingSpans
	}
	return 0
}

type FellowshipReferenda_NudgeReferendumCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *FellowshipReferenda_NudgeReferendumCall) Reset() {
	*x = FellowshipReferenda_NudgeReferendumCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FellowshipReferenda_NudgeReferendumCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FellowshipReferenda_NudgeReferendumCall) ProtoMessage() {}

func (x *FellowshipReferenda_NudgeReferendumCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FellowshipReferenda_NudgeReferendumCall.ProtoReflect.Descriptor instead.
func (*FellowshipReferenda_NudgeReferendumCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{151}
}

func (x *FellowshipReferenda_NudgeReferendumCall) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type Identity_Raw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Identity_Raw) Reset() {
	*x = Identity_Raw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_Raw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_Raw) ProtoMessage() {}

func (x *Identity_Raw) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_Raw.ProtoReflect.Descriptor instead.
func (*Identity_Raw) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{152}
}

func (x *Identity_Raw) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type NominationPools_SetMetadataCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoolId   uint32 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	Metadata []byte `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *NominationPools_SetMetadataCall) Reset() {
	*x = NominationPools_SetMetadataCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NominationPools_SetMetadataCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NominationPools_SetMetadataCall) ProtoMessage() {}

func (x *NominationPools_SetMetadataCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NominationPools_SetMetadataCall.ProtoReflect.Descriptor instead.
func (*NominationPools_SetMetadataCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{153}
}

func (x *NominationPools_SetMetadataCall) GetPoolId() uint32 {
	if x != nil {
		return x.PoolId
	}
	return 0
}

func (x *NominationPools_SetMetadataCall) GetMetadata() []byte {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type SpCoreEd25519Signature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *SpCoreEd25519Signature) Reset() {
	*x = SpCoreEd25519Signature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpCoreEd25519Signature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpCoreEd25519Signature) ProtoMessage() {}

func (x *SpCoreEd25519Signature) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpCoreEd25519Signature.ProtoReflect.Descriptor instead.
func (*SpCoreEd25519Signature) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{154}
}

func (x *SpCoreEd25519Signature) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Referenda_Void struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 *Value0 `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Referenda_Void) Reset() {
	*x = Referenda_Void{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Referenda_Void) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Referenda_Void) ProtoMessage() {}

func (x *Referenda_Void) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Referenda_Void.ProtoReflect.Descriptor instead.
func (*Referenda_Void) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{155}
}

func (x *Referenda_Void) GetValue0() *Value0 {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Identity_Raw6 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Identity_Raw6) Reset() {
	*x = Identity_Raw6{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_Raw6) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_Raw6) ProtoMessage() {}

func (x *Identity_Raw6) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_Raw6.ProtoReflect.Descriptor instead.
func (*Identity_Raw6) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{156}
}

func (x *Identity_Raw6) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Referenda_RefundDecisionDepositCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *Referenda_RefundDecisionDepositCall) Reset() {
	*x = Referenda_RefundDecisionDepositCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Referenda_RefundDecisionDepositCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Referenda_RefundDecisionDepositCall) ProtoMessage() {}

func (x *Referenda_RefundDecisionDepositCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Referenda_RefundDecisionDepositCall.ProtoReflect.Descriptor instead.
func (*Referenda_RefundDecisionDepositCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{157}
}

func (x *Referenda_RefundDecisionDepositCall) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type Whitelist_RemoveWhitelistedCallCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallHash *PrimitiveTypesH256 `protobuf:"bytes,1,opt,name=call_hash,json=callHash,proto3" json:"call_hash,omitempty"`
}

func (x *Whitelist_RemoveWhitelistedCallCall) Reset() {
	*x = Whitelist_RemoveWhitelistedCallCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Whitelist_RemoveWhitelistedCallCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Whitelist_RemoveWhitelistedCallCall) ProtoMessage() {}

func (x *Whitelist_RemoveWhitelistedCallCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Whitelist_RemoveWhitelistedCallCall.ProtoReflect.Descriptor instead.
func (*Whitelist_RemoveWhitelistedCallCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{158}
}

func (x *Whitelist_RemoveWhitelistedCallCall) GetCallHash() *PrimitiveTypesH256 {
	if x != nil {
		return x.CallHash
	}
	return nil
}

type Identity_Raw17 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Identity_Raw17) Reset() {
	*x = Identity_Raw17{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_Raw17) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_Raw17) ProtoMessage() {}

func (x *Identity_Raw17) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_Raw17.ProtoReflect.Descriptor instead.
func (*Identity_Raw17) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{159}
}

func (x *Identity_Raw17) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Identity_TupleSpCoreCryptoAccountId32PalletIdentityTypesData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 *SpCoreCryptoAccountId32 `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
	Value1 *Identity_Value1         `protobuf:"bytes,2,opt,name=value1,proto3" json:"value1,omitempty"`
}

func (x *Identity_TupleSpCoreCryptoAccountId32PalletIdentityTypesData) Reset() {
	*x = Identity_TupleSpCoreCryptoAccountId32PalletIdentityTypesData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_TupleSpCoreCryptoAccountId32PalletIdentityTypesData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_TupleSpCoreCryptoAccountId32PalletIdentityTypesData) ProtoMessage() {}

func (x *Identity_TupleSpCoreCryptoAccountId32PalletIdentityTypesData) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_TupleSpCoreCryptoAccountId32PalletIdentityTypesData.ProtoReflect.Descriptor instead.
func (*Identity_TupleSpCoreCryptoAccountId32PalletIdentityTypesData) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{160}
}

func (x *Identity_TupleSpCoreCryptoAccountId32PalletIdentityTypesData) GetValue0() *SpCoreCryptoAccountId32 {
	if x != nil {
		return x.Value0
	}
	return nil
}

func (x *Identity_TupleSpCoreCryptoAccountId32PalletIdentityTypesData) GetValue1() *Identity_Value1 {
	if x != nil {
		return x.Value1
	}
	return nil
}

type Proxy_RemoveAnnouncementCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Real     *Proxy_Real         `protobuf:"bytes,1,opt,name=real,proto3" json:"real,omitempty"`
	CallHash *PrimitiveTypesH256 `protobuf:"bytes,2,opt,name=call_hash,json=callHash,proto3" json:"call_hash,omitempty"`
}

func (x *Proxy_RemoveAnnouncementCall) Reset() {
	*x = Proxy_RemoveAnnouncementCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proxy_RemoveAnnouncementCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proxy_RemoveAnnouncementCall) ProtoMessage() {}

func (x *Proxy_RemoveAnnouncementCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proxy_RemoveAnnouncementCall.ProtoReflect.Descriptor instead.
func (*Proxy_RemoveAnnouncementCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{161}
}

func (x *Proxy_RemoveAnnouncementCall) GetReal() *Proxy_Real {
	if x != nil {
		return x.Real
	}
	return nil
}

func (x *Proxy_RemoveAnnouncementCall) GetCallHash() *PrimitiveTypesH256 {
	if x != nil {
		return x.CallHash
	}
	return nil
}

type ChildBountiesPallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Call:
	//
	//	*ChildBountiesPallet_AddChildBountyCall
	//	*ChildBountiesPallet_ProposeCuratorCall
	//	*ChildBountiesPallet_AcceptCuratorCall
	//	*ChildBountiesPallet_UnassignCuratorCall
	//	*ChildBountiesPallet_AwardChildBountyCall
	//	*ChildBountiesPallet_ClaimChildBountyCall
	//	*ChildBountiesPallet_CloseChildBountyCall
	Call isChildBountiesPallet_Call `protobuf_oneof:"call"`
}

func (x *ChildBountiesPallet) Reset() {
	*x = ChildBountiesPallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChildBountiesPallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChildBountiesPallet) ProtoMessage() {}

func (x *ChildBountiesPallet) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChildBountiesPallet.ProtoReflect.Descriptor instead.
func (*ChildBountiesPallet) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{162}
}

func (m *ChildBountiesPallet) GetCall() isChildBountiesPallet_Call {
	if m != nil {
		return m.Call
	}
	return nil
}

func (x *ChildBountiesPallet) GetAddChildBountyCall() *ChildBounties_AddChildBountyCall {
	if x, ok := x.GetCall().(*ChildBountiesPallet_AddChildBountyCall); ok {
		return x.AddChildBountyCall
	}
	return nil
}

func (x *ChildBountiesPallet) GetProposeCuratorCall() *ChildBounties_ProposeCuratorCall {
	if x, ok := x.GetCall().(*ChildBountiesPallet_ProposeCuratorCall); ok {
		return x.ProposeCuratorCall
	}
	return nil
}

func (x *ChildBountiesPallet) GetAcceptCuratorCall() *ChildBounties_AcceptCuratorCall {
	if x, ok := x.GetCall().(*ChildBountiesPallet_AcceptCuratorCall); ok {
		return x.AcceptCuratorCall
	}
	return nil
}

func (x *ChildBountiesPallet) GetUnassignCuratorCall() *ChildBounties_UnassignCuratorCall {
	if x, ok := x.GetCall().(*ChildBountiesPallet_UnassignCuratorCall); ok {
		return x.UnassignCuratorCall
	}
	return nil
}

func (x *ChildBountiesPallet) GetAwardChildBountyCall() *ChildBounties_AwardChildBountyCall {
	if x, ok := x.GetCall().(*ChildBountiesPallet_AwardChildBountyCall); ok {
		return x.AwardChildBountyCall
	}
	return nil
}

func (x *ChildBountiesPallet) GetClaimChildBountyCall() *ChildBounties_ClaimChildBountyCall {
	if x, ok := x.GetCall().(*ChildBountiesPallet_ClaimChildBountyCall); ok {
		return x.ClaimChildBountyCall
	}
	return nil
}

func (x *ChildBountiesPallet) GetCloseChildBountyCall() *ChildBounties_CloseChildBountyCall {
	if x, ok := x.GetCall().(*ChildBountiesPallet_CloseChildBountyCall); ok {
		return x.CloseChildBountyCall
	}
	return nil
}

type isChildBountiesPallet_Call interface {
	isChildBountiesPallet_Call()
}

type ChildBountiesPallet_AddChildBountyCall struct {
	AddChildBountyCall *ChildBounties_AddChildBountyCall `protobuf:"bytes,1,opt,name=add_child_bounty_call,json=addChildBountyCall,proto3,oneof"`
}

type ChildBountiesPallet_ProposeCuratorCall struct {
	ProposeCuratorCall *ChildBounties_ProposeCuratorCall `protobuf:"bytes,2,opt,name=propose_curator_call,json=proposeCuratorCall,proto3,oneof"`
}

type ChildBountiesPallet_AcceptCuratorCall struct {
	AcceptCuratorCall *ChildBounties_AcceptCuratorCall `protobuf:"bytes,3,opt,name=accept_curator_call,json=acceptCuratorCall,proto3,oneof"`
}

type ChildBountiesPallet_UnassignCuratorCall struct {
	UnassignCuratorCall *ChildBounties_UnassignCuratorCall `protobuf:"bytes,4,opt,name=unassign_curator_call,json=unassignCuratorCall,proto3,oneof"`
}

type ChildBountiesPallet_AwardChildBountyCall struct {
	AwardChildBountyCall *ChildBounties_AwardChildBountyCall `protobuf:"bytes,5,opt,name=award_child_bounty_call,json=awardChildBountyCall,proto3,oneof"`
}

type ChildBountiesPallet_ClaimChildBountyCall struct {
	ClaimChildBountyCall *ChildBounties_ClaimChildBountyCall `protobuf:"bytes,6,opt,name=claim_child_bounty_call,json=claimChildBountyCall,proto3,oneof"`
}

type ChildBountiesPallet_CloseChildBountyCall struct {
	CloseChildBountyCall *ChildBounties_CloseChildBountyCall `protobuf:"bytes,7,opt,name=close_child_bounty_call,json=closeChildBountyCall,proto3,oneof"`
}

func (*ChildBountiesPallet_AddChildBountyCall) isChildBountiesPallet_Call() {}

func (*ChildBountiesPallet_ProposeCuratorCall) isChildBountiesPallet_Call() {}

func (*ChildBountiesPallet_AcceptCuratorCall) isChildBountiesPallet_Call() {}

func (*ChildBountiesPallet_UnassignCuratorCall) isChildBountiesPallet_Call() {}

func (*ChildBountiesPallet_AwardChildBountyCall) isChildBountiesPallet_Call() {}

func (*ChildBountiesPallet_ClaimChildBountyCall) isChildBountiesPallet_Call() {}

func (*ChildBountiesPallet_CloseChildBountyCall) isChildBountiesPallet_Call() {}

type Referenda_Inline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 *BoundedCollectionsBoundedVecBoundedVec `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Referenda_Inline) Reset() {
	*x = Referenda_Inline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Referenda_Inline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Referenda_Inline) ProtoMessage() {}

func (x *Referenda_Inline) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Referenda_Inline.ProtoReflect.Descriptor instead.
func (*Referenda_Inline) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{163}
}

func (x *Referenda_Inline) GetValue0() *BoundedCollectionsBoundedVecBoundedVec {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Scheduler_ScheduleNamedCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            []byte                       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	When          uint32                       `protobuf:"varint,2,opt,name=when,proto3" json:"when,omitempty"`
	MaybePeriodic *Scheduler_TupleUint32Uint32 `protobuf:"bytes,3,opt,name=maybe_periodic,json=maybePeriodic,proto3,oneof" json:"maybe_periodic,omitempty"`
	Priority      uint32                       `protobuf:"varint,4,opt,name=priority,proto3" json:"priority,omitempty"`
	// Types that are assignable to Call:
	//
	//	*Scheduler_ScheduleNamedCall_System
	//	*Scheduler_ScheduleNamedCall_Timestamp
	//	*Scheduler_ScheduleNamedCall_Babe
	//	*Scheduler_ScheduleNamedCall_Grandpa
	//	*Scheduler_ScheduleNamedCall_Balances
	//	*Scheduler_ScheduleNamedCall_Vesting
	//	*Scheduler_ScheduleNamedCall_BagsList
	//	*Scheduler_ScheduleNamedCall_ImOnline
	//	*Scheduler_ScheduleNamedCall_Staking
	//	*Scheduler_ScheduleNamedCall_Session
	//	*Scheduler_ScheduleNamedCall_Treasury
	//	*Scheduler_ScheduleNamedCall_Utility
	//	*Scheduler_ScheduleNamedCall_ConvictionVoting
	//	*Scheduler_ScheduleNamedCall_Referenda
	//	*Scheduler_ScheduleNamedCall_FellowshipCollective
	//	*Scheduler_ScheduleNamedCall_FellowshipReferenda
	//	*Scheduler_ScheduleNamedCall_Whitelist
	//	*Scheduler_ScheduleNamedCall_Scheduler
	//	*Scheduler_ScheduleNamedCall_Preimage
	//	*Scheduler_ScheduleNamedCall_Identity
	//	*Scheduler_ScheduleNamedCall_Proxy
	//	*Scheduler_ScheduleNamedCall_Multisig
	//	*Scheduler_ScheduleNamedCall_ElectionProviderMultiPhase
	//	*Scheduler_ScheduleNamedCall_Bounties
	//	*Scheduler_ScheduleNamedCall_ChildBounties
	//	*Scheduler_ScheduleNamedCall_NominationPools
	//	*Scheduler_ScheduleNamedCall_Gear
	//	*Scheduler_ScheduleNamedCall_StakingRewards
	//	*Scheduler_ScheduleNamedCall_GearVoucher
	Call isScheduler_ScheduleNamedCall_Call `protobuf_oneof:"call"`
}

func (x *Scheduler_ScheduleNamedCall) Reset() {
	*x = Scheduler_ScheduleNamedCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scheduler_ScheduleNamedCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scheduler_ScheduleNamedCall) ProtoMessage() {}

func (x *Scheduler_ScheduleNamedCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scheduler_ScheduleNamedCall.ProtoReflect.Descriptor instead.
func (*Scheduler_ScheduleNamedCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{164}
}

func (x *Scheduler_ScheduleNamedCall) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Scheduler_ScheduleNamedCall) GetWhen() uint32 {
	if x != nil {
		return x.When
	}
	return 0
}

func (x *Scheduler_ScheduleNamedCall) GetMaybePeriodic() *Scheduler_TupleUint32Uint32 {
	if x != nil {
		return x.MaybePeriodic
	}
	return nil
}

func (x *Scheduler_ScheduleNamedCall) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (m *Scheduler_ScheduleNamedCall) GetCall() isScheduler_ScheduleNamedCall_Call {
	if m != nil {
		return m.Call
	}
	return nil
}

func (x *Scheduler_ScheduleNamedCall) GetSystem() *SystemPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleNamedCall_System); ok {
		return x.System
	}
	return nil
}

func (x *Scheduler_ScheduleNamedCall) GetTimestamp() *TimestampPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleNamedCall_Timestamp); ok {
		return x.Timestamp
	}
	return nil
}

func (x *Scheduler_ScheduleNamedCall) GetBabe() *BabePallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleNamedCall_Babe); ok {
		return x.Babe
	}
	return nil
}

func (x *Scheduler_ScheduleNamedCall) GetGrandpa() *GrandpaPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleNamedCall_Grandpa); ok {
		return x.Grandpa
	}
	return nil
}

func (x *Scheduler_ScheduleNamedCall) GetBalances() *BalancesPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleNamedCall_Balances); ok {
		return x.Balances
	}
	return nil
}

func (x *Scheduler_ScheduleNamedCall) GetVesting() *VestingPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleNamedCall_Vesting); ok {
		return x.Vesting
	}
	return nil
}

func (x *Scheduler_ScheduleNamedCall) GetBagsList() *BagsListPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleNamedCall_BagsList); ok {
		return x.BagsList
	}
	return nil
}

func (x *Scheduler_ScheduleNamedCall) GetImOnline() *ImOnlinePallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleNamedCall_ImOnline); ok {
		return x.ImOnline
	}
	return nil
}

func (x *Scheduler_ScheduleNamedCall) GetStaking() *StakingPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleNamedCall_Staking); ok {
		return x.Staking
	}
	return nil
}

func (x *Scheduler_ScheduleNamedCall) GetSession() *SessionPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleNamedCall_Session); ok {
		return x.Session
	}
	return nil
}

func (x *Scheduler_ScheduleNamedCall) GetTreasury() *TreasuryPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleNamedCall_Treasury); ok {
		return x.Treasury
	}
	return nil
}

func (x *Scheduler_ScheduleNamedCall) GetUtility() *UtilityPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleNamedCall_Utility); ok {
		return x.Utility
	}
	return nil
}

func (x *Scheduler_ScheduleNamedCall) GetConvictionVoting() *ConvictionVotingPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleNamedCall_ConvictionVoting); ok {
		return x.ConvictionVoting
	}
	return nil
}

func (x *Scheduler_ScheduleNamedCall) GetReferenda() *ReferendaPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleNamedCall_Referenda); ok {
		return x.Referenda
	}
	return nil
}

func (x *Scheduler_ScheduleNamedCall) GetFellowshipCollective() *FellowshipCollectivePallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleNamedCall_FellowshipCollective); ok {
		return x.FellowshipCollective
	}
	return nil
}

func (x *Scheduler_ScheduleNamedCall) GetFellowshipReferenda() *FellowshipReferendaPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleNamedCall_FellowshipReferenda); ok {
		return x.FellowshipReferenda
	}
	return nil
}

func (x *Scheduler_ScheduleNamedCall) GetWhitelist() *WhitelistPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleNamedCall_Whitelist); ok {
		return x.Whitelist
	}
	return nil
}

func (x *Scheduler_ScheduleNamedCall) GetScheduler() *SchedulerPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleNamedCall_Scheduler); ok {
		return x.Scheduler
	}
	return nil
}

func (x *Scheduler_ScheduleNamedCall) GetPreimage() *PreimagePallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleNamedCall_Preimage); ok {
		return x.Preimage
	}
	return nil
}

func (x *Scheduler_ScheduleNamedCall) GetIdentity() *IdentityPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleNamedCall_Identity); ok {
		return x.Identity
	}
	return nil
}

func (x *Scheduler_ScheduleNamedCall) GetProxy() *ProxyPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleNamedCall_Proxy); ok {
		return x.Proxy
	}
	return nil
}

func (x *Scheduler_ScheduleNamedCall) GetMultisig() *MultisigPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleNamedCall_Multisig); ok {
		return x.Multisig
	}
	return nil
}

func (x *Scheduler_ScheduleNamedCall) GetElectionProviderMultiPhase() *ElectionProviderMultiPhasePallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleNamedCall_ElectionProviderMultiPhase); ok {
		return x.ElectionProviderMultiPhase
	}
	return nil
}

func (x *Scheduler_ScheduleNamedCall) GetBounties() *BountiesPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleNamedCall_Bounties); ok {
		return x.Bounties
	}
	return nil
}

func (x *Scheduler_ScheduleNamedCall) GetChildBounties() *ChildBountiesPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleNamedCall_ChildBounties); ok {
		return x.ChildBounties
	}
	return nil
}

func (x *Scheduler_ScheduleNamedCall) GetNominationPools() *NominationPoolsPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleNamedCall_NominationPools); ok {
		return x.NominationPools
	}
	return nil
}

func (x *Scheduler_ScheduleNamedCall) GetGear() *GearPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleNamedCall_Gear); ok {
		return x.Gear
	}
	return nil
}

func (x *Scheduler_ScheduleNamedCall) GetStakingRewards() *StakingRewardsPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleNamedCall_StakingRewards); ok {
		return x.StakingRewards
	}
	return nil
}

func (x *Scheduler_ScheduleNamedCall) GetGearVoucher() *GearVoucherPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleNamedCall_GearVoucher); ok {
		return x.GearVoucher
	}
	return nil
}

type isScheduler_ScheduleNamedCall_Call interface {
	isScheduler_ScheduleNamedCall_Call()
}

type Scheduler_ScheduleNamedCall_System struct {
	System *SystemPallet `protobuf:"bytes,5,opt,name=system,proto3,oneof"`
}

type Scheduler_ScheduleNamedCall_Timestamp struct {
	Timestamp *TimestampPallet `protobuf:"bytes,6,opt,name=timestamp,proto3,oneof"`
}

type Scheduler_ScheduleNamedCall_Babe struct {
	Babe *BabePallet `protobuf:"bytes,7,opt,name=babe,proto3,oneof"`
}

type Scheduler_ScheduleNamedCall_Grandpa struct {
	Grandpa *GrandpaPallet `protobuf:"bytes,8,opt,name=grandpa,proto3,oneof"`
}

type Scheduler_ScheduleNamedCall_Balances struct {
	Balances *BalancesPallet `protobuf:"bytes,9,opt,name=balances,proto3,oneof"`
}

type Scheduler_ScheduleNamedCall_Vesting struct {
	Vesting *VestingPallet `protobuf:"bytes,10,opt,name=vesting,proto3,oneof"`
}

type Scheduler_ScheduleNamedCall_BagsList struct {
	BagsList *BagsListPallet `protobuf:"bytes,11,opt,name=bags_list,json=bagsList,proto3,oneof"`
}

type Scheduler_ScheduleNamedCall_ImOnline struct {
	ImOnline *ImOnlinePallet `protobuf:"bytes,12,opt,name=im_online,json=imOnline,proto3,oneof"`
}

type Scheduler_ScheduleNamedCall_Staking struct {
	Staking *StakingPallet `protobuf:"bytes,13,opt,name=staking,proto3,oneof"`
}

type Scheduler_ScheduleNamedCall_Session struct {
	Session *SessionPallet `protobuf:"bytes,14,opt,name=session,proto3,oneof"`
}

type Scheduler_ScheduleNamedCall_Treasury struct {
	Treasury *TreasuryPallet `protobuf:"bytes,15,opt,name=treasury,proto3,oneof"`
}

type Scheduler_ScheduleNamedCall_Utility struct {
	Utility *UtilityPallet `protobuf:"bytes,16,opt,name=utility,proto3,oneof"`
}

type Scheduler_ScheduleNamedCall_ConvictionVoting struct {
	ConvictionVoting *ConvictionVotingPallet `protobuf:"bytes,17,opt,name=conviction_voting,json=convictionVoting,proto3,oneof"`
}

type Scheduler_ScheduleNamedCall_Referenda struct {
	Referenda *ReferendaPallet `protobuf:"bytes,18,opt,name=referenda,proto3,oneof"`
}

type Scheduler_ScheduleNamedCall_FellowshipCollective struct {
	FellowshipCollective *FellowshipCollectivePallet `protobuf:"bytes,19,opt,name=fellowship_collective,json=fellowshipCollective,proto3,oneof"`
}

type Scheduler_ScheduleNamedCall_FellowshipReferenda struct {
	FellowshipReferenda *FellowshipReferendaPallet `protobuf:"bytes,20,opt,name=fellowship_referenda,json=fellowshipReferenda,proto3,oneof"`
}

type Scheduler_ScheduleNamedCall_Whitelist struct {
	Whitelist *WhitelistPallet `protobuf:"bytes,21,opt,name=whitelist,proto3,oneof"`
}

type Scheduler_ScheduleNamedCall_Scheduler struct {
	Scheduler *SchedulerPallet `protobuf:"bytes,22,opt,name=scheduler,proto3,oneof"`
}

type Scheduler_ScheduleNamedCall_Preimage struct {
	Preimage *PreimagePallet `protobuf:"bytes,23,opt,name=preimage,proto3,oneof"`
}

type Scheduler_ScheduleNamedCall_Identity struct {
	Identity *IdentityPallet `protobuf:"bytes,24,opt,name=identity,proto3,oneof"`
}

type Scheduler_ScheduleNamedCall_Proxy struct {
	Proxy *ProxyPallet `protobuf:"bytes,25,opt,name=proxy,proto3,oneof"`
}

type Scheduler_ScheduleNamedCall_Multisig struct {
	Multisig *MultisigPallet `protobuf:"bytes,26,opt,name=multisig,proto3,oneof"`
}

type Scheduler_ScheduleNamedCall_ElectionProviderMultiPhase struct {
	ElectionProviderMultiPhase *ElectionProviderMultiPhasePallet `protobuf:"bytes,27,opt,name=election_provider_multi_phase,json=electionProviderMultiPhase,proto3,oneof"`
}

type Scheduler_ScheduleNamedCall_Bounties struct {
	Bounties *BountiesPallet `protobuf:"bytes,28,opt,name=bounties,proto3,oneof"`
}

type Scheduler_ScheduleNamedCall_ChildBounties struct {
	ChildBounties *ChildBountiesPallet `protobuf:"bytes,29,opt,name=child_bounties,json=childBounties,proto3,oneof"`
}

type Scheduler_ScheduleNamedCall_NominationPools struct {
	NominationPools *NominationPoolsPallet `protobuf:"bytes,30,opt,name=nomination_pools,json=nominationPools,proto3,oneof"`
}

type Scheduler_ScheduleNamedCall_Gear struct {
	Gear *GearPallet `protobuf:"bytes,31,opt,name=gear,proto3,oneof"`
}

type Scheduler_ScheduleNamedCall_StakingRewards struct {
	StakingRewards *StakingRewardsPallet `protobuf:"bytes,32,opt,name=staking_rewards,json=stakingRewards,proto3,oneof"`
}

type Scheduler_ScheduleNamedCall_GearVoucher struct {
	GearVoucher *GearVoucherPallet `protobuf:"bytes,33,opt,name=gear_voucher,json=gearVoucher,proto3,oneof"`
}

func (*Scheduler_ScheduleNamedCall_System) isScheduler_ScheduleNamedCall_Call() {}

func (*Scheduler_ScheduleNamedCall_Timestamp) isScheduler_ScheduleNamedCall_Call() {}

func (*Scheduler_ScheduleNamedCall_Babe) isScheduler_ScheduleNamedCall_Call() {}

func (*Scheduler_ScheduleNamedCall_Grandpa) isScheduler_ScheduleNamedCall_Call() {}

func (*Scheduler_ScheduleNamedCall_Balances) isScheduler_ScheduleNamedCall_Call() {}

func (*Scheduler_ScheduleNamedCall_Vesting) isScheduler_ScheduleNamedCall_Call() {}

func (*Scheduler_ScheduleNamedCall_BagsList) isScheduler_ScheduleNamedCall_Call() {}

func (*Scheduler_ScheduleNamedCall_ImOnline) isScheduler_ScheduleNamedCall_Call() {}

func (*Scheduler_ScheduleNamedCall_Staking) isScheduler_ScheduleNamedCall_Call() {}

func (*Scheduler_ScheduleNamedCall_Session) isScheduler_ScheduleNamedCall_Call() {}

func (*Scheduler_ScheduleNamedCall_Treasury) isScheduler_ScheduleNamedCall_Call() {}

func (*Scheduler_ScheduleNamedCall_Utility) isScheduler_ScheduleNamedCall_Call() {}

func (*Scheduler_ScheduleNamedCall_ConvictionVoting) isScheduler_ScheduleNamedCall_Call() {}

func (*Scheduler_ScheduleNamedCall_Referenda) isScheduler_ScheduleNamedCall_Call() {}

func (*Scheduler_ScheduleNamedCall_FellowshipCollective) isScheduler_ScheduleNamedCall_Call() {}

func (*Scheduler_ScheduleNamedCall_FellowshipReferenda) isScheduler_ScheduleNamedCall_Call() {}

func (*Scheduler_ScheduleNamedCall_Whitelist) isScheduler_ScheduleNamedCall_Call() {}

func (*Scheduler_ScheduleNamedCall_Scheduler) isScheduler_ScheduleNamedCall_Call() {}

func (*Scheduler_ScheduleNamedCall_Preimage) isScheduler_ScheduleNamedCall_Call() {}

func (*Scheduler_ScheduleNamedCall_Identity) isScheduler_ScheduleNamedCall_Call() {}

func (*Scheduler_ScheduleNamedCall_Proxy) isScheduler_ScheduleNamedCall_Call() {}

func (*Scheduler_ScheduleNamedCall_Multisig) isScheduler_ScheduleNamedCall_Call() {}

func (*Scheduler_ScheduleNamedCall_ElectionProviderMultiPhase) isScheduler_ScheduleNamedCall_Call() {}

func (*Scheduler_ScheduleNamedCall_Bounties) isScheduler_ScheduleNamedCall_Call() {}

func (*Scheduler_ScheduleNamedCall_ChildBounties) isScheduler_ScheduleNamedCall_Call() {}

func (*Scheduler_ScheduleNamedCall_NominationPools) isScheduler_ScheduleNamedCall_Call() {}

func (*Scheduler_ScheduleNamedCall_Gear) isScheduler_ScheduleNamedCall_Call() {}

func (*Scheduler_ScheduleNamedCall_StakingRewards) isScheduler_ScheduleNamedCall_Call() {}

func (*Scheduler_ScheduleNamedCall_GearVoucher) isScheduler_ScheduleNamedCall_Call() {}

type Identity_Raw4 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Identity_Raw4) Reset() {
	*x = Identity_Raw4{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_Raw4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_Raw4) ProtoMessage() {}

func (x *Identity_Raw4) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_Raw4.ProtoReflect.Descriptor instead.
func (*Identity_Raw4) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{165}
}

func (x *Identity_Raw4) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Identity_ClearIdentityCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Identity_ClearIdentityCall) Reset() {
	*x = Identity_ClearIdentityCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_ClearIdentityCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_ClearIdentityCall) ProtoMessage() {}

func (x *Identity_ClearIdentityCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_ClearIdentityCall.ProtoReflect.Descriptor instead.
func (*Identity_ClearIdentityCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{166}
}

type ElectionProviderMultiPhase_TupleUint32SpArithmeticPerThingsPerU16 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 uint32                       `protobuf:"varint,1,opt,name=value0,proto3" json:"value0,omitempty"`
	Value1 *SpArithmeticPerThingsPerU16 `protobuf:"bytes,2,opt,name=value1,proto3" json:"value1,omitempty"`
}

func (x *ElectionProviderMultiPhase_TupleUint32SpArithmeticPerThingsPerU16) Reset() {
	*x = ElectionProviderMultiPhase_TupleUint32SpArithmeticPerThingsPerU16{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectionProviderMultiPhase_TupleUint32SpArithmeticPerThingsPerU16) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectionProviderMultiPhase_TupleUint32SpArithmeticPerThingsPerU16) ProtoMessage() {}

func (x *ElectionProviderMultiPhase_TupleUint32SpArithmeticPerThingsPerU16) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectionProviderMultiPhase_TupleUint32SpArithmeticPerThingsPerU16.ProtoReflect.Descriptor instead.
func (*ElectionProviderMultiPhase_TupleUint32SpArithmeticPerThingsPerU16) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{167}
}

func (x *ElectionProviderMultiPhase_TupleUint32SpArithmeticPerThingsPerU16) GetValue0() uint32 {
	if x != nil {
		return x.Value0
	}
	return 0
}

func (x *ElectionProviderMultiPhase_TupleUint32SpArithmeticPerThingsPerU16) GetValue1() *SpArithmeticPerThingsPerU16 {
	if x != nil {
		return x.Value1
	}
	return nil
}

type Treasury_RejectProposalCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProposalId uint32 `protobuf:"varint,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
}

func (x *Treasury_RejectProposalCall) Reset() {
	*x = Treasury_RejectProposalCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Treasury_RejectProposalCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Treasury_RejectProposalCall) ProtoMessage() {}

func (x *Treasury_RejectProposalCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Treasury_RejectProposalCall.ProtoReflect.Descriptor instead.
func (*Treasury_RejectProposalCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{168}
}

func (x *Treasury_RejectProposalCall) GetProposalId() uint32 {
	if x != nil {
		return x.ProposalId
	}
	return 0
}

type FellowshipReferenda_Void struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 *Value0 `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *FellowshipReferenda_Void) Reset() {
	*x = FellowshipReferenda_Void{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FellowshipReferenda_Void) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FellowshipReferenda_Void) ProtoMessage() {}

func (x *FellowshipReferenda_Void) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FellowshipReferenda_Void.ProtoReflect.Descriptor instead.
func (*FellowshipReferenda_Void) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{169}
}

func (x *FellowshipReferenda_Void) GetValue0() *Value0 {
	if x != nil {
		return x.Value0
	}
	return nil
}

type NominationPools_Permissioned struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NominationPools_Permissioned) Reset() {
	*x = NominationPools_Permissioned{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NominationPools_Permissioned) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NominationPools_Permissioned) ProtoMessage() {}

func (x *NominationPools_Permissioned) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NominationPools_Permissioned.ProtoReflect.Descriptor instead.
func (*NominationPools_Permissioned) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{170}
}

type GearVoucher_PalletGearVoucherInternalVoucherId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *GearVoucher_PalletGearVoucherInternalVoucherId) Reset() {
	*x = GearVoucher_PalletGearVoucherInternalVoucherId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GearVoucher_PalletGearVoucherInternalVoucherId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GearVoucher_PalletGearVoucherInternalVoucherId) ProtoMessage() {}

func (x *GearVoucher_PalletGearVoucherInternalVoucherId) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GearVoucher_PalletGearVoucherInternalVoucherId.ProtoReflect.Descriptor instead.
func (*GearVoucher_PalletGearVoucherInternalVoucherId) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{171}
}

func (x *GearVoucher_PalletGearVoucherInternalVoucherId) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type FinalityGrandpaPrevote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetHash   *PrimitiveTypesH256 `protobuf:"bytes,1,opt,name=target_hash,json=targetHash,proto3" json:"target_hash,omitempty"`
	TargetNumber uint32              `protobuf:"varint,2,opt,name=target_number,json=targetNumber,proto3" json:"target_number,omitempty"`
}

func (x *FinalityGrandpaPrevote) Reset() {
	*x = FinalityGrandpaPrevote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinalityGrandpaPrevote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalityGrandpaPrevote) ProtoMessage() {}

func (x *FinalityGrandpaPrevote) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalityGrandpaPrevote.ProtoReflect.Descriptor instead.
func (*FinalityGrandpaPrevote) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{172}
}

func (x *FinalityGrandpaPrevote) GetTargetHash() *PrimitiveTypesH256 {
	if x != nil {
		return x.TargetHash
	}
	return nil
}

func (x *FinalityGrandpaPrevote) GetTargetNumber() uint32 {
	if x != nil {
		return x.TargetNumber
	}
	return 0
}

type Referenda_ProposalOrigin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*Referenda_ProposalOrigin_System
	//	*Referenda_ProposalOrigin_Origins
	//	*Referenda_ProposalOrigin_Void
	Value isReferenda_ProposalOrigin_Value `protobuf_oneof:"value"`
}

func (x *Referenda_ProposalOrigin) Reset() {
	*x = Referenda_ProposalOrigin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Referenda_ProposalOrigin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Referenda_ProposalOrigin) ProtoMessage() {}

func (x *Referenda_ProposalOrigin) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Referenda_ProposalOrigin.ProtoReflect.Descriptor instead.
func (*Referenda_ProposalOrigin) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{173}
}

func (m *Referenda_ProposalOrigin) GetValue() isReferenda_ProposalOrigin_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Referenda_ProposalOrigin) GetSystem() *Referenda_System {
	if x, ok := x.GetValue().(*Referenda_ProposalOrigin_System); ok {
		return x.System
	}
	return nil
}

func (x *Referenda_ProposalOrigin) GetOrigins() *Referenda_Origins {
	if x, ok := x.GetValue().(*Referenda_ProposalOrigin_Origins); ok {
		return x.Origins
	}
	return nil
}

func (x *Referenda_ProposalOrigin) GetVoid() *Referenda_Void {
	if x, ok := x.GetValue().(*Referenda_ProposalOrigin_Void); ok {
		return x.Void
	}
	return nil
}

type isReferenda_ProposalOrigin_Value interface {
	isReferenda_ProposalOrigin_Value()
}

type Referenda_ProposalOrigin_System struct {
	System *Referenda_System `protobuf:"bytes,1,opt,name=system,proto3,oneof"`
}

type Referenda_ProposalOrigin_Origins struct {
	Origins *Referenda_Origins `protobuf:"bytes,2,opt,name=origins,proto3,oneof"`
}

type Referenda_ProposalOrigin_Void struct {
	Void *Referenda_Void `protobuf:"bytes,3,opt,name=void,proto3,oneof"`
}

func (*Referenda_ProposalOrigin_System) isReferenda_ProposalOrigin_Value() {}

func (*Referenda_ProposalOrigin_Origins) isReferenda_ProposalOrigin_Value() {}

func (*Referenda_ProposalOrigin_Void) isReferenda_ProposalOrigin_Value() {}

type Scheduler_CancelCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	When  uint32 `protobuf:"varint,1,opt,name=when,proto3" json:"when,omitempty"`
	Index uint32 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *Scheduler_CancelCall) Reset() {
	*x = Scheduler_CancelCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scheduler_CancelCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scheduler_CancelCall) ProtoMessage() {}

func (x *Scheduler_CancelCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scheduler_CancelCall.ProtoReflect.Descriptor instead.
func (*Scheduler_CancelCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{174}
}

func (x *Scheduler_CancelCall) GetWhen() uint32 {
	if x != nil {
		return x.When
	}
	return 0
}

func (x *Scheduler_CancelCall) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type Proxy_Delegate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*Proxy_Delegate_Id
	//	*Proxy_Delegate_Index
	//	*Proxy_Delegate_Raw
	//	*Proxy_Delegate_Address32
	//	*Proxy_Delegate_Address20
	Value isProxy_Delegate_Value `protobuf_oneof:"value"`
}

func (x *Proxy_Delegate) Reset() {
	*x = Proxy_Delegate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proxy_Delegate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proxy_Delegate) ProtoMessage() {}

func (x *Proxy_Delegate) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proxy_Delegate.ProtoReflect.Descriptor instead.
func (*Proxy_Delegate) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{175}
}

func (m *Proxy_Delegate) GetValue() isProxy_Delegate_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Proxy_Delegate) GetId() *Proxy_Id {
	if x, ok := x.GetValue().(*Proxy_Delegate_Id); ok {
		return x.Id
	}
	return nil
}

func (x *Proxy_Delegate) GetIndex() *Proxy_Index {
	if x, ok := x.GetValue().(*Proxy_Delegate_Index); ok {
		return x.Index
	}
	return nil
}

func (x *Proxy_Delegate) GetRaw() *Proxy_Raw {
	if x, ok := x.GetValue().(*Proxy_Delegate_Raw); ok {
		return x.Raw
	}
	return nil
}

func (x *Proxy_Delegate) GetAddress32() *Proxy_Address32 {
	if x, ok := x.GetValue().(*Proxy_Delegate_Address32); ok {
		return x.Address32
	}
	return nil
}

func (x *Proxy_Delegate) GetAddress20() *Proxy_Address20 {
	if x, ok := x.GetValue().(*Proxy_Delegate_Address20); ok {
		return x.Address20
	}
	return nil
}

type isProxy_Delegate_Value interface {
	isProxy_Delegate_Value()
}

type Proxy_Delegate_Id struct {
	Id *Proxy_Id `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type Proxy_Delegate_Index struct {
	Index *Proxy_Index `protobuf:"bytes,2,opt,name=index,proto3,oneof"`
}

type Proxy_Delegate_Raw struct {
	Raw *Proxy_Raw `protobuf:"bytes,3,opt,name=raw,proto3,oneof"`
}

type Proxy_Delegate_Address32 struct {
	Address32 *Proxy_Address32 `protobuf:"bytes,4,opt,name=address32,proto3,oneof"`
}

type Proxy_Delegate_Address20 struct {
	Address20 *Proxy_Address20 `protobuf:"bytes,5,opt,name=address20,proto3,oneof"`
}

func (*Proxy_Delegate_Id) isProxy_Delegate_Value() {}

func (*Proxy_Delegate_Index) isProxy_Delegate_Value() {}

func (*Proxy_Delegate_Raw) isProxy_Delegate_Value() {}

func (*Proxy_Delegate_Address32) isProxy_Delegate_Value() {}

func (*Proxy_Delegate_Address20) isProxy_Delegate_Value() {}

type GearVoucher_CallDeprecatedCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Call *GearVoucher_Call `protobuf:"bytes,1,opt,name=call,proto3" json:"call,omitempty"`
}

func (x *GearVoucher_CallDeprecatedCall) Reset() {
	*x = GearVoucher_CallDeprecatedCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GearVoucher_CallDeprecatedCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GearVoucher_CallDeprecatedCall) ProtoMessage() {}

func (x *GearVoucher_CallDeprecatedCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GearVoucher_CallDeprecatedCall.ProtoReflect.Descriptor instead.
func (*GearVoucher_CallDeprecatedCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{176}
}

func (x *GearVoucher_CallDeprecatedCall) GetCall() *GearVoucher_Call {
	if x != nil {
		return x.Call
	}
	return nil
}

type GearVoucher_Some struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 *BTreeSet `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *GearVoucher_Some) Reset() {
	*x = GearVoucher_Some{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GearVoucher_Some) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GearVoucher_Some) ProtoMessage() {}

func (x *GearVoucher_Some) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GearVoucher_Some.ProtoReflect.Descriptor instead.
func (*GearVoucher_Some) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{177}
}

func (x *GearVoucher_Some) GetValue0() *BTreeSet {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Identity_AddRegistrarCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account *Identity_Account `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
}

func (x *Identity_AddRegistrarCall) Reset() {
	*x = Identity_AddRegistrarCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_AddRegistrarCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_AddRegistrarCall) ProtoMessage() {}

func (x *Identity_AddRegistrarCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_AddRegistrarCall.ProtoReflect.Descriptor instead.
func (*Identity_AddRegistrarCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{178}
}

func (x *Identity_AddRegistrarCall) GetAccount() *Identity_Account {
	if x != nil {
		return x.Account
	}
	return nil
}

type Bounties_ApproveBountyCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BountyId uint32 `protobuf:"varint,1,opt,name=bounty_id,json=bountyId,proto3" json:"bounty_id,omitempty"`
}

func (x *Bounties_ApproveBountyCall) Reset() {
	*x = Bounties_ApproveBountyCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bounties_ApproveBountyCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bounties_ApproveBountyCall) ProtoMessage() {}

func (x *Bounties_ApproveBountyCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bounties_ApproveBountyCall.ProtoReflect.Descriptor instead.
func (*Bounties_ApproveBountyCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{179}
}

func (x *Bounties_ApproveBountyCall) GetBountyId() uint32 {
	if x != nil {
		return x.BountyId
	}
	return 0
}

type NominationPools_Address20 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *NominationPools_Address20) Reset() {
	*x = NominationPools_Address20{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NominationPools_Address20) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NominationPools_Address20) ProtoMessage() {}

func (x *NominationPools_Address20) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NominationPools_Address20.ProtoReflect.Descriptor instead.
func (*NominationPools_Address20) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{180}
}

func (x *NominationPools_Address20) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type GearSchedulerPallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GearSchedulerPallet) Reset() {
	*x = GearSchedulerPallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GearSchedulerPallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GearSchedulerPallet) ProtoMessage() {}

func (x *GearSchedulerPallet) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GearSchedulerPallet.ProtoReflect.Descriptor instead.
func (*GearSchedulerPallet) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{181}
}

type StakingRewards_Raw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *StakingRewards_Raw) Reset() {
	*x = StakingRewards_Raw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakingRewards_Raw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakingRewards_Raw) ProtoMessage() {}

func (x *StakingRewards_Raw) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakingRewards_Raw.ProtoReflect.Descriptor instead.
func (*StakingRewards_Raw) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{182}
}

func (x *StakingRewards_Raw) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Identity_Raw12 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Identity_Raw12) Reset() {
	*x = Identity_Raw12{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_Raw12) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_Raw12) ProtoMessage() {}

func (x *Identity_Raw12) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_Raw12.ProtoReflect.Descriptor instead.
func (*Identity_Raw12) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{183}
}

func (x *Identity_Raw12) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Babe_PlanConfigChangeCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Babe_Config `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *Babe_PlanConfigChangeCall) Reset() {
	*x = Babe_PlanConfigChangeCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Babe_PlanConfigChangeCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Babe_PlanConfigChangeCall) ProtoMessage() {}

func (x *Babe_PlanConfigChangeCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Babe_PlanConfigChangeCall.ProtoReflect.Descriptor instead.
func (*Babe_PlanConfigChangeCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{184}
}

func (x *Babe_PlanConfigChangeCall) GetConfig() *Babe_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

type Staking_IncreaseValidatorCountCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Additional uint32 `protobuf:"varint,1,opt,name=additional,proto3" json:"additional,omitempty"`
}

func (x *Staking_IncreaseValidatorCountCall) Reset() {
	*x = Staking_IncreaseValidatorCountCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staking_IncreaseValidatorCountCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staking_IncreaseValidatorCountCall) ProtoMessage() {}

func (x *Staking_IncreaseValidatorCountCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staking_IncreaseValidatorCountCall.ProtoReflect.Descriptor instead.
func (*Staking_IncreaseValidatorCountCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{185}
}

func (x *Staking_IncreaseValidatorCountCall) GetAdditional() uint32 {
	if x != nil {
		return x.Additional
	}
	return 0
}

type Staking_RebondCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Staking_RebondCall) Reset() {
	*x = Staking_RebondCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staking_RebondCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staking_RebondCall) ProtoMessage() {}

func (x *Staking_RebondCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staking_RebondCall.ProtoReflect.Descriptor instead.
func (*Staking_RebondCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{186}
}

func (x *Staking_RebondCall) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type ConvictionVoting_Locked2X struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConvictionVoting_Locked2X) Reset() {
	*x = ConvictionVoting_Locked2X{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConvictionVoting_Locked2X) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvictionVoting_Locked2X) ProtoMessage() {}

func (x *ConvictionVoting_Locked2X) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvictionVoting_Locked2X.ProtoReflect.Descriptor instead.
func (*ConvictionVoting_Locked2X) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{187}
}

type Referenda_At struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 uint32 `protobuf:"varint,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Referenda_At) Reset() {
	*x = Referenda_At{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Referenda_At) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Referenda_At) ProtoMessage() {}

func (x *Referenda_At) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Referenda_At.ProtoReflect.Descriptor instead.
func (*Referenda_At) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{188}
}

func (x *Referenda_At) GetValue0() uint32 {
	if x != nil {
		return x.Value0
	}
	return 0
}

type System_KillStorageCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []*System_SystemKeysList `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *System_KillStorageCall) Reset() {
	*x = System_KillStorageCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_KillStorageCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_KillStorageCall) ProtoMessage() {}

func (x *System_KillStorageCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_KillStorageCall.ProtoReflect.Descriptor instead.
func (*System_KillStorageCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{189}
}

func (x *System_KillStorageCall) GetKeys() []*System_SystemKeysList {
	if x != nil {
		return x.Keys
	}
	return nil
}

type ImOnline_HeartbeatCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Heartbeat *ImOnline_PalletImOnlineHeartbeat                  `protobuf:"bytes,1,opt,name=heartbeat,proto3" json:"heartbeat,omitempty"`
	Signature *ImOnline_PalletImOnlineSr25519AppSr25519Signature `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *ImOnline_HeartbeatCall) Reset() {
	*x = ImOnline_HeartbeatCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImOnline_HeartbeatCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImOnline_HeartbeatCall) ProtoMessage() {}

func (x *ImOnline_HeartbeatCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImOnline_HeartbeatCall.ProtoReflect.Descriptor instead.
func (*ImOnline_HeartbeatCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{190}
}

func (x *ImOnline_HeartbeatCall) GetHeartbeat() *ImOnline_PalletImOnlineHeartbeat {
	if x != nil {
		return x.Heartbeat
	}
	return nil
}

func (x *ImOnline_HeartbeatCall) GetSignature() *ImOnline_PalletImOnlineSr25519AppSr25519Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type FellowshipCollective_VoteCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Poll uint32 `protobuf:"varint,1,opt,name=poll,proto3" json:"poll,omitempty"`
	Aye  bool   `protobuf:"varint,2,opt,name=aye,proto3" json:"aye,omitempty"`
}

func (x *FellowshipCollective_VoteCall) Reset() {
	*x = FellowshipCollective_VoteCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FellowshipCollective_VoteCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FellowshipCollective_VoteCall) ProtoMessage() {}

func (x *FellowshipCollective_VoteCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FellowshipCollective_VoteCall.ProtoReflect.Descriptor instead.
func (*FellowshipCollective_VoteCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{191}
}

func (x *FellowshipCollective_VoteCall) GetPoll() uint32 {
	if x != nil {
		return x.Poll
	}
	return 0
}

func (x *FellowshipCollective_VoteCall) GetAye() bool {
	if x != nil {
		return x.Aye
	}
	return false
}

type Bounties_Curator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*Bounties_Curator_Id
	//	*Bounties_Curator_Index
	//	*Bounties_Curator_Raw
	//	*Bounties_Curator_Address32
	//	*Bounties_Curator_Address20
	Value isBounties_Curator_Value `protobuf_oneof:"value"`
}

func (x *Bounties_Curator) Reset() {
	*x = Bounties_Curator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bounties_Curator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bounties_Curator) ProtoMessage() {}

func (x *Bounties_Curator) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bounties_Curator.ProtoReflect.Descriptor instead.
func (*Bounties_Curator) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{192}
}

func (m *Bounties_Curator) GetValue() isBounties_Curator_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Bounties_Curator) GetId() *Bounties_Id {
	if x, ok := x.GetValue().(*Bounties_Curator_Id); ok {
		return x.Id
	}
	return nil
}

func (x *Bounties_Curator) GetIndex() *Bounties_Index {
	if x, ok := x.GetValue().(*Bounties_Curator_Index); ok {
		return x.Index
	}
	return nil
}

func (x *Bounties_Curator) GetRaw() *Bounties_Raw {
	if x, ok := x.GetValue().(*Bounties_Curator_Raw); ok {
		return x.Raw
	}
	return nil
}

func (x *Bounties_Curator) GetAddress32() *Bounties_Address32 {
	if x, ok := x.GetValue().(*Bounties_Curator_Address32); ok {
		return x.Address32
	}
	return nil
}

func (x *Bounties_Curator) GetAddress20() *Bounties_Address20 {
	if x, ok := x.GetValue().(*Bounties_Curator_Address20); ok {
		return x.Address20
	}
	return nil
}

type isBounties_Curator_Value interface {
	isBounties_Curator_Value()
}

type Bounties_Curator_Id struct {
	Id *Bounties_Id `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type Bounties_Curator_Index struct {
	Index *Bounties_Index `protobuf:"bytes,2,opt,name=index,proto3,oneof"`
}

type Bounties_Curator_Raw struct {
	Raw *Bounties_Raw `protobuf:"bytes,3,opt,name=raw,proto3,oneof"`
}

type Bounties_Curator_Address32 struct {
	Address32 *Bounties_Address32 `protobuf:"bytes,4,opt,name=address32,proto3,oneof"`
}

type Bounties_Curator_Address20 struct {
	Address20 *Bounties_Address20 `protobuf:"bytes,5,opt,name=address20,proto3,oneof"`
}

func (*Bounties_Curator_Id) isBounties_Curator_Value() {}

func (*Bounties_Curator_Index) isBounties_Curator_Value() {}

func (*Bounties_Curator_Raw) isBounties_Curator_Value() {}

func (*Bounties_Curator_Address32) isBounties_Curator_Value() {}

func (*Bounties_Curator_Address20) isBounties_Curator_Value() {}

type Staking_Controller struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Staking_Controller) Reset() {
	*x = Staking_Controller{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staking_Controller) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staking_Controller) ProtoMessage() {}

func (x *Staking_Controller) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staking_Controller.ProtoReflect.Descriptor instead.
func (*Staking_Controller) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{193}
}

type Treasury_Address32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Treasury_Address32) Reset() {
	*x = Treasury_Address32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Treasury_Address32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Treasury_Address32) ProtoMessage() {}

func (x *Treasury_Address32) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Treasury_Address32.ProtoReflect.Descriptor instead.
func (*Treasury_Address32) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{194}
}

func (x *Treasury_Address32) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type ConvictionVoting_Address32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *ConvictionVoting_Address32) Reset() {
	*x = ConvictionVoting_Address32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConvictionVoting_Address32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvictionVoting_Address32) ProtoMessage() {}

func (x *ConvictionVoting_Address32) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvictionVoting_Address32.ProtoReflect.Descriptor instead.
func (*ConvictionVoting_Address32) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{195}
}

func (x *ConvictionVoting_Address32) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type FellowshipReferendaPallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Call:
	//
	//	*FellowshipReferendaPallet_SubmitCall
	//	*FellowshipReferendaPallet_PlaceDecisionDepositCall
	//	*FellowshipReferendaPallet_RefundDecisionDepositCall
	//	*FellowshipReferendaPallet_CancelCall
	//	*FellowshipReferendaPallet_KillCall
	//	*FellowshipReferendaPallet_NudgeReferendumCall
	//	*FellowshipReferendaPallet_OneFewerDecidingCall
	//	*FellowshipReferendaPallet_RefundSubmissionDepositCall
	//	*FellowshipReferendaPallet_SetMetadataCall
	Call isFellowshipReferendaPallet_Call `protobuf_oneof:"call"`
}

func (x *FellowshipReferendaPallet) Reset() {
	*x = FellowshipReferendaPallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FellowshipReferendaPallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FellowshipReferendaPallet) ProtoMessage() {}

func (x *FellowshipReferendaPallet) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FellowshipReferendaPallet.ProtoReflect.Descriptor instead.
func (*FellowshipReferendaPallet) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{196}
}

func (m *FellowshipReferendaPallet) GetCall() isFellowshipReferendaPallet_Call {
	if m != nil {
		return m.Call
	}
	return nil
}

func (x *FellowshipReferendaPallet) GetSubmitCall() *FellowshipReferenda_SubmitCall {
	if x, ok := x.GetCall().(*FellowshipReferendaPallet_SubmitCall); ok {
		return x.SubmitCall
	}
	return nil
}

func (x *FellowshipReferendaPallet) GetPlaceDecisionDepositCall() *FellowshipReferenda_PlaceDecisionDepositCall {
	if x, ok := x.GetCall().(*FellowshipReferendaPallet_PlaceDecisionDepositCall); ok {
		return x.PlaceDecisionDepositCall
	}
	return nil
}

func (x *FellowshipReferendaPallet) GetRefundDecisionDepositCall() *FellowshipReferenda_RefundDecisionDepositCall {
	if x, ok := x.GetCall().(*FellowshipReferendaPallet_RefundDecisionDepositCall); ok {
		return x.RefundDecisionDepositCall
	}
	return nil
}

func (x *FellowshipReferendaPallet) GetCancelCall() *FellowshipReferenda_CancelCall {
	if x, ok := x.GetCall().(*FellowshipReferendaPallet_CancelCall); ok {
		return x.CancelCall
	}
	return nil
}

func (x *FellowshipReferendaPallet) GetKillCall() *FellowshipReferenda_KillCall {
	if x, ok := x.GetCall().(*FellowshipReferendaPallet_KillCall); ok {
		return x.KillCall
	}
	return nil
}

func (x *FellowshipReferendaPallet) GetNudgeReferendumCall() *FellowshipReferenda_NudgeReferendumCall {
	if x, ok := x.GetCall().(*FellowshipReferendaPallet_NudgeReferendumCall); ok {
		return x.NudgeReferendumCall
	}
	return nil
}

func (x *FellowshipReferendaPallet) GetOneFewerDecidingCall() *FellowshipReferenda_OneFewerDecidingCall {
	if x, ok := x.GetCall().(*FellowshipReferendaPallet_OneFewerDecidingCall); ok {
		return x.OneFewerDecidingCall
	}
	return nil
}

func (x *FellowshipReferendaPallet) GetRefundSubmissionDepositCall() *FellowshipReferenda_RefundSubmissionDepositCall {
	if x, ok := x.GetCall().(*FellowshipReferendaPallet_RefundSubmissionDepositCall); ok {
		return x.RefundSubmissionDepositCall
	}
	return nil
}

func (x *FellowshipReferendaPallet) GetSetMetadataCall() *FellowshipReferenda_SetMetadataCall {
	if x, ok := x.GetCall().(*FellowshipReferendaPallet_SetMetadataCall); ok {
		return x.SetMetadataCall
	}
	return nil
}

type isFellowshipReferendaPallet_Call interface {
	isFellowshipReferendaPallet_Call()
}

type FellowshipReferendaPallet_SubmitCall struct {
	SubmitCall *FellowshipReferenda_SubmitCall `protobuf:"bytes,1,opt,name=submit_call,json=submitCall,proto3,oneof"`
}

type FellowshipReferendaPallet_PlaceDecisionDepositCall struct {
	PlaceDecisionDepositCall *FellowshipReferenda_PlaceDecisionDepositCall `protobuf:"bytes,2,opt,name=place_decision_deposit_call,json=placeDecisionDepositCall,proto3,oneof"`
}

type FellowshipReferendaPallet_RefundDecisionDepositCall struct {
	RefundDecisionDepositCall *FellowshipReferenda_RefundDecisionDepositCall `protobuf:"bytes,3,opt,name=refund_decision_deposit_call,json=refundDecisionDepositCall,proto3,oneof"`
}

type FellowshipReferendaPallet_CancelCall struct {
	CancelCall *FellowshipReferenda_CancelCall `protobuf:"bytes,4,opt,name=cancel_call,json=cancelCall,proto3,oneof"`
}

type FellowshipReferendaPallet_KillCall struct {
	KillCall *FellowshipReferenda_KillCall `protobuf:"bytes,5,opt,name=kill_call,json=killCall,proto3,oneof"`
}

type FellowshipReferendaPallet_NudgeReferendumCall struct {
	NudgeReferendumCall *FellowshipReferenda_NudgeReferendumCall `protobuf:"bytes,6,opt,name=nudge_referendum_call,json=nudgeReferendumCall,proto3,oneof"`
}

type FellowshipReferendaPallet_OneFewerDecidingCall struct {
	OneFewerDecidingCall *FellowshipReferenda_OneFewerDecidingCall `protobuf:"bytes,7,opt,name=one_fewer_deciding_call,json=oneFewerDecidingCall,proto3,oneof"`
}

type FellowshipReferendaPallet_RefundSubmissionDepositCall struct {
	RefundSubmissionDepositCall *FellowshipReferenda_RefundSubmissionDepositCall `protobuf:"bytes,8,opt,name=refund_submission_deposit_call,json=refundSubmissionDepositCall,proto3,oneof"`
}

type FellowshipReferendaPallet_SetMetadataCall struct {
	SetMetadataCall *FellowshipReferenda_SetMetadataCall `protobuf:"bytes,9,opt,name=set_metadata_call,json=setMetadataCall,proto3,oneof"`
}

func (*FellowshipReferendaPallet_SubmitCall) isFellowshipReferendaPallet_Call() {}

func (*FellowshipReferendaPallet_PlaceDecisionDepositCall) isFellowshipReferendaPallet_Call() {}

func (*FellowshipReferendaPallet_RefundDecisionDepositCall) isFellowshipReferendaPallet_Call() {}

func (*FellowshipReferendaPallet_CancelCall) isFellowshipReferendaPallet_Call() {}

func (*FellowshipReferendaPallet_KillCall) isFellowshipReferendaPallet_Call() {}

func (*FellowshipReferendaPallet_NudgeReferendumCall) isFellowshipReferendaPallet_Call() {}

func (*FellowshipReferendaPallet_OneFewerDecidingCall) isFellowshipReferendaPallet_Call() {}

func (*FellowshipReferendaPallet_RefundSubmissionDepositCall) isFellowshipReferendaPallet_Call() {}

func (*FellowshipReferendaPallet_SetMetadataCall) isFellowshipReferendaPallet_Call() {}

type Identity_SetAccountIdCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index uint32        `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	New   *Identity_New `protobuf:"bytes,2,opt,name=new,proto3" json:"new,omitempty"`
}

func (x *Identity_SetAccountIdCall) Reset() {
	*x = Identity_SetAccountIdCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_SetAccountIdCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_SetAccountIdCall) ProtoMessage() {}

func (x *Identity_SetAccountIdCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_SetAccountIdCall.ProtoReflect.Descriptor instead.
func (*Identity_SetAccountIdCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{197}
}

func (x *Identity_SetAccountIdCall) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Identity_SetAccountIdCall) GetNew() *Identity_New {
	if x != nil {
		return x.New
	}
	return nil
}

type Staking_Address32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Staking_Address32) Reset() {
	*x = Staking_Address32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staking_Address32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staking_Address32) ProtoMessage() {}

func (x *Staking_Address32) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staking_Address32.ProtoReflect.Descriptor instead.
func (*Staking_Address32) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{198}
}

func (x *Staking_Address32) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Staking_SetPayeeCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payee *Staking_Payee `protobuf:"bytes,1,opt,name=payee,proto3" json:"payee,omitempty"`
}

func (x *Staking_SetPayeeCall) Reset() {
	*x = Staking_SetPayeeCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staking_SetPayeeCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staking_SetPayeeCall) ProtoMessage() {}

func (x *Staking_SetPayeeCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staking_SetPayeeCall.ProtoReflect.Descriptor instead.
func (*Staking_SetPayeeCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{199}
}

func (x *Staking_SetPayeeCall) GetPayee() *Staking_Payee {
	if x != nil {
		return x.Payee
	}
	return nil
}

type Staking_MinValidatorBond struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*Staking_MinValidatorBond_Noop
	//	*Staking_MinValidatorBond_Set
	//	*Staking_MinValidatorBond_Remove
	Value isStaking_MinValidatorBond_Value `protobuf_oneof:"value"`
}

func (x *Staking_MinValidatorBond) Reset() {
	*x = Staking_MinValidatorBond{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staking_MinValidatorBond) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staking_MinValidatorBond) ProtoMessage() {}

func (x *Staking_MinValidatorBond) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staking_MinValidatorBond.ProtoReflect.Descriptor instead.
func (*Staking_MinValidatorBond) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{200}
}

func (m *Staking_MinValidatorBond) GetValue() isStaking_MinValidatorBond_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Staking_MinValidatorBond) GetNoop() *Staking_Noop {
	if x, ok := x.GetValue().(*Staking_MinValidatorBond_Noop); ok {
		return x.Noop
	}
	return nil
}

func (x *Staking_MinValidatorBond) GetSet() *Staking_Set {
	if x, ok := x.GetValue().(*Staking_MinValidatorBond_Set); ok {
		return x.Set
	}
	return nil
}

func (x *Staking_MinValidatorBond) GetRemove() *Staking_Remove {
	if x, ok := x.GetValue().(*Staking_MinValidatorBond_Remove); ok {
		return x.Remove
	}
	return nil
}

type isStaking_MinValidatorBond_Value interface {
	isStaking_MinValidatorBond_Value()
}

type Staking_MinValidatorBond_Noop struct {
	Noop *Staking_Noop `protobuf:"bytes,1,opt,name=noop,proto3,oneof"`
}

type Staking_MinValidatorBond_Set struct {
	Set *Staking_Set `protobuf:"bytes,2,opt,name=set,proto3,oneof"`
}

type Staking_MinValidatorBond_Remove struct {
	Remove *Staking_Remove `protobuf:"bytes,3,opt,name=remove,proto3,oneof"`
}

func (*Staking_MinValidatorBond_Noop) isStaking_MinValidatorBond_Value() {}

func (*Staking_MinValidatorBond_Set) isStaking_MinValidatorBond_Value() {}

func (*Staking_MinValidatorBond_Remove) isStaking_MinValidatorBond_Value() {}

type Identity_KillIdentityCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target *Identity_Target `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *Identity_KillIdentityCall) Reset() {
	*x = Identity_KillIdentityCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_KillIdentityCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_KillIdentityCall) ProtoMessage() {}

func (x *Identity_KillIdentityCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_KillIdentityCall.ProtoReflect.Descriptor instead.
func (*Identity_KillIdentityCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{201}
}

func (x *Identity_KillIdentityCall) GetTarget() *Identity_Target {
	if x != nil {
		return x.Target
	}
	return nil
}

type Gear_SendReplyCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplyToId *GprimitivesMessageId `protobuf:"bytes,1,opt,name=reply_to_id,json=replyToId,proto3" json:"reply_to_id,omitempty"`
	Payload   []byte                `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	GasLimit  uint64                `protobuf:"varint,3,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	Value     string                `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	KeepAlive bool                  `protobuf:"varint,5,opt,name=keep_alive,json=keepAlive,proto3" json:"keep_alive,omitempty"`
}

func (x *Gear_SendReplyCall) Reset() {
	*x = Gear_SendReplyCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Gear_SendReplyCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gear_SendReplyCall) ProtoMessage() {}

func (x *Gear_SendReplyCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gear_SendReplyCall.ProtoReflect.Descriptor instead.
func (*Gear_SendReplyCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{202}
}

func (x *Gear_SendReplyCall) GetReplyToId() *GprimitivesMessageId {
	if x != nil {
		return x.ReplyToId
	}
	return nil
}

func (x *Gear_SendReplyCall) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *Gear_SendReplyCall) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *Gear_SendReplyCall) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Gear_SendReplyCall) GetKeepAlive() bool {
	if x != nil {
		return x.KeepAlive
	}
	return false
}

type SpConsensusSlotsSlot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 uint64 `protobuf:"varint,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *SpConsensusSlotsSlot) Reset() {
	*x = SpConsensusSlotsSlot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpConsensusSlotsSlot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpConsensusSlotsSlot) ProtoMessage() {}

func (x *SpConsensusSlotsSlot) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpConsensusSlotsSlot.ProtoReflect.Descriptor instead.
func (*SpConsensusSlotsSlot) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{203}
}

func (x *SpConsensusSlotsSlot) GetValue0() uint64 {
	if x != nil {
		return x.Value0
	}
	return 0
}

type PrimitiveTypesH256 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *PrimitiveTypesH256) Reset() {
	*x = PrimitiveTypesH256{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrimitiveTypesH256) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrimitiveTypesH256) ProtoMessage() {}

func (x *PrimitiveTypesH256) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrimitiveTypesH256.ProtoReflect.Descriptor instead.
func (*PrimitiveTypesH256) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{204}
}

func (x *PrimitiveTypesH256) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Identity_BlakeTwo256 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Identity_BlakeTwo256) Reset() {
	*x = Identity_BlakeTwo256{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_BlakeTwo256) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_BlakeTwo256) ProtoMessage() {}

func (x *Identity_BlakeTwo256) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_BlakeTwo256.ProtoReflect.Descriptor instead.
func (*Identity_BlakeTwo256) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{205}
}

func (x *Identity_BlakeTwo256) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Bounties_ExtendBountyExpiryCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BountyId uint32 `protobuf:"varint,1,opt,name=bounty_id,json=bountyId,proto3" json:"bounty_id,omitempty"`
	Remark   []byte `protobuf:"bytes,2,opt,name=remark,proto3" json:"remark,omitempty"`
}

func (x *Bounties_ExtendBountyExpiryCall) Reset() {
	*x = Bounties_ExtendBountyExpiryCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bounties_ExtendBountyExpiryCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bounties_ExtendBountyExpiryCall) ProtoMessage() {}

func (x *Bounties_ExtendBountyExpiryCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bounties_ExtendBountyExpiryCall.ProtoReflect.Descriptor instead.
func (*Bounties_ExtendBountyExpiryCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{206}
}

func (x *Bounties_ExtendBountyExpiryCall) GetBountyId() uint32 {
	if x != nil {
		return x.BountyId
	}
	return 0
}

func (x *Bounties_ExtendBountyExpiryCall) GetRemark() []byte {
	if x != nil {
		return x.Remark
	}
	return nil
}

type Gear_UploadCodeCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code []byte `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *Gear_UploadCodeCall) Reset() {
	*x = Gear_UploadCodeCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Gear_UploadCodeCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gear_UploadCodeCall) ProtoMessage() {}

func (x *Gear_UploadCodeCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gear_UploadCodeCall.ProtoReflect.Descriptor instead.
func (*Gear_UploadCodeCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{207}
}

func (x *Gear_UploadCodeCall) GetCode() []byte {
	if x != nil {
		return x.Code
	}
	return nil
}

type Identity_Raw2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Identity_Raw2) Reset() {
	*x = Identity_Raw2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_Raw2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_Raw2) ProtoMessage() {}

func (x *Identity_Raw2) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_Raw2.ProtoReflect.Descriptor instead.
func (*Identity_Raw2) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{208}
}

func (x *Identity_Raw2) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes16Listuint32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 uint32                                                               `protobuf:"varint,1,opt,name=value0,proto3" json:"value0,omitempty"`
	Value1 []*ElectionProviderMultiPhase_TupleUint32SpArithmeticPerThingsPerU16 `protobuf:"bytes,2,rep,name=value1,proto3" json:"value1,omitempty"`
	Value2 uint32                                                               `protobuf:"varint,3,opt,name=value2,proto3" json:"value2,omitempty"`
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes16Listuint32) Reset() {
	*x = ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes16Listuint32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes16Listuint32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes16Listuint32) ProtoMessage() {
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes16Listuint32) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes16Listuint32.ProtoReflect.Descriptor instead.
func (*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes16Listuint32) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{209}
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes16Listuint32) GetValue0() uint32 {
	if x != nil {
		return x.Value0
	}
	return 0
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes16Listuint32) GetValue1() []*ElectionProviderMultiPhase_TupleUint32SpArithmeticPerThingsPerU16 {
	if x != nil {
		return x.Value1
	}
	return nil
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes16Listuint32) GetValue2() uint32 {
	if x != nil {
		return x.Value2
	}
	return 0
}

type Balances_Source struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*Balances_Source_Id
	//	*Balances_Source_Index
	//	*Balances_Source_Raw
	//	*Balances_Source_Address32
	//	*Balances_Source_Address20
	Value isBalances_Source_Value `protobuf_oneof:"value"`
}

func (x *Balances_Source) Reset() {
	*x = Balances_Source{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[210]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Balances_Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Balances_Source) ProtoMessage() {}

func (x *Balances_Source) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[210]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Balances_Source.ProtoReflect.Descriptor instead.
func (*Balances_Source) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{210}
}

func (m *Balances_Source) GetValue() isBalances_Source_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Balances_Source) GetId() *Balances_Id {
	if x, ok := x.GetValue().(*Balances_Source_Id); ok {
		return x.Id
	}
	return nil
}

func (x *Balances_Source) GetIndex() *Balances_Index {
	if x, ok := x.GetValue().(*Balances_Source_Index); ok {
		return x.Index
	}
	return nil
}

func (x *Balances_Source) GetRaw() *Balances_Raw {
	if x, ok := x.GetValue().(*Balances_Source_Raw); ok {
		return x.Raw
	}
	return nil
}

func (x *Balances_Source) GetAddress32() *Balances_Address32 {
	if x, ok := x.GetValue().(*Balances_Source_Address32); ok {
		return x.Address32
	}
	return nil
}

func (x *Balances_Source) GetAddress20() *Balances_Address20 {
	if x, ok := x.GetValue().(*Balances_Source_Address20); ok {
		return x.Address20
	}
	return nil
}

type isBalances_Source_Value interface {
	isBalances_Source_Value()
}

type Balances_Source_Id struct {
	Id *Balances_Id `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type Balances_Source_Index struct {
	Index *Balances_Index `protobuf:"bytes,2,opt,name=index,proto3,oneof"`
}

type Balances_Source_Raw struct {
	Raw *Balances_Raw `protobuf:"bytes,3,opt,name=raw,proto3,oneof"`
}

type Balances_Source_Address32 struct {
	Address32 *Balances_Address32 `protobuf:"bytes,4,opt,name=address32,proto3,oneof"`
}

type Balances_Source_Address20 struct {
	Address20 *Balances_Address20 `protobuf:"bytes,5,opt,name=address20,proto3,oneof"`
}

func (*Balances_Source_Id) isBalances_Source_Value() {}

func (*Balances_Source_Index) isBalances_Source_Value() {}

func (*Balances_Source_Raw) isBalances_Source_Value() {}

func (*Balances_Source_Address32) isBalances_Source_Value() {}

func (*Balances_Source_Address20) isBalances_Source_Value() {}

type BagsList_RebagCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dislocated *BagsList_Dislocated `protobuf:"bytes,1,opt,name=dislocated,proto3" json:"dislocated,omitempty"`
}

func (x *BagsList_RebagCall) Reset() {
	*x = BagsList_RebagCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[211]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BagsList_RebagCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BagsList_RebagCall) ProtoMessage() {}

func (x *BagsList_RebagCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[211]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BagsList_RebagCall.ProtoReflect.Descriptor instead.
func (*BagsList_RebagCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{211}
}

func (x *BagsList_RebagCall) GetDislocated() *BagsList_Dislocated {
	if x != nil {
		return x.Dislocated
	}
	return nil
}

type Staking_SetValidatorCountCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	New uint32 `protobuf:"varint,1,opt,name=new,proto3" json:"new,omitempty"`
}

func (x *Staking_SetValidatorCountCall) Reset() {
	*x = Staking_SetValidatorCountCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staking_SetValidatorCountCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staking_SetValidatorCountCall) ProtoMessage() {}

func (x *Staking_SetValidatorCountCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staking_SetValidatorCountCall.ProtoReflect.Descriptor instead.
func (*Staking_SetValidatorCountCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{212}
}

func (x *Staking_SetValidatorCountCall) GetNew() uint32 {
	if x != nil {
		return x.New
	}
	return 0
}

type Treasury_Index struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 *Treasury_TupleNull `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Treasury_Index) Reset() {
	*x = Treasury_Index{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[213]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Treasury_Index) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Treasury_Index) ProtoMessage() {}

func (x *Treasury_Index) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[213]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Treasury_Index.ProtoReflect.Descriptor instead.
func (*Treasury_Index) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{213}
}

func (x *Treasury_Index) GetValue0() *Treasury_TupleNull {
	if x != nil {
		return x.Value0
	}
	return nil
}

type FellowshipCollectivePallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Call:
	//
	//	*FellowshipCollectivePallet_AddMemberCall
	//	*FellowshipCollectivePallet_PromoteMemberCall
	//	*FellowshipCollectivePallet_DemoteMemberCall
	//	*FellowshipCollectivePallet_RemoveMemberCall
	//	*FellowshipCollectivePallet_VoteCall
	//	*FellowshipCollectivePallet_CleanupPollCall
	Call isFellowshipCollectivePallet_Call `protobuf_oneof:"call"`
}

func (x *FellowshipCollectivePallet) Reset() {
	*x = FellowshipCollectivePallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[214]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FellowshipCollectivePallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FellowshipCollectivePallet) ProtoMessage() {}

func (x *FellowshipCollectivePallet) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[214]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FellowshipCollectivePallet.ProtoReflect.Descriptor instead.
func (*FellowshipCollectivePallet) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{214}
}

func (m *FellowshipCollectivePallet) GetCall() isFellowshipCollectivePallet_Call {
	if m != nil {
		return m.Call
	}
	return nil
}

func (x *FellowshipCollectivePallet) GetAddMemberCall() *FellowshipCollective_AddMemberCall {
	if x, ok := x.GetCall().(*FellowshipCollectivePallet_AddMemberCall); ok {
		return x.AddMemberCall
	}
	return nil
}

func (x *FellowshipCollectivePallet) GetPromoteMemberCall() *FellowshipCollective_PromoteMemberCall {
	if x, ok := x.GetCall().(*FellowshipCollectivePallet_PromoteMemberCall); ok {
		return x.PromoteMemberCall
	}
	return nil
}

func (x *FellowshipCollectivePallet) GetDemoteMemberCall() *FellowshipCollective_DemoteMemberCall {
	if x, ok := x.GetCall().(*FellowshipCollectivePallet_DemoteMemberCall); ok {
		return x.DemoteMemberCall
	}
	return nil
}

func (x *FellowshipCollectivePallet) GetRemoveMemberCall() *FellowshipCollective_RemoveMemberCall {
	if x, ok := x.GetCall().(*FellowshipCollectivePallet_RemoveMemberCall); ok {
		return x.RemoveMemberCall
	}
	return nil
}

func (x *FellowshipCollectivePallet) GetVoteCall() *FellowshipCollective_VoteCall {
	if x, ok := x.GetCall().(*FellowshipCollectivePallet_VoteCall); ok {
		return x.VoteCall
	}
	return nil
}

func (x *FellowshipCollectivePallet) GetCleanupPollCall() *FellowshipCollective_CleanupPollCall {
	if x, ok := x.GetCall().(*FellowshipCollectivePallet_CleanupPollCall); ok {
		return x.CleanupPollCall
	}
	return nil
}

type isFellowshipCollectivePallet_Call interface {
	isFellowshipCollectivePallet_Call()
}

type FellowshipCollectivePallet_AddMemberCall struct {
	AddMemberCall *FellowshipCollective_AddMemberCall `protobuf:"bytes,1,opt,name=add_member_call,json=addMemberCall,proto3,oneof"`
}

type FellowshipCollectivePallet_PromoteMemberCall struct {
	PromoteMemberCall *FellowshipCollective_PromoteMemberCall `protobuf:"bytes,2,opt,name=promote_member_call,json=promoteMemberCall,proto3,oneof"`
}

type FellowshipCollectivePallet_DemoteMemberCall struct {
	DemoteMemberCall *FellowshipCollective_DemoteMemberCall `protobuf:"bytes,3,opt,name=demote_member_call,json=demoteMemberCall,proto3,oneof"`
}

type FellowshipCollectivePallet_RemoveMemberCall struct {
	RemoveMemberCall *FellowshipCollective_RemoveMemberCall `protobuf:"bytes,4,opt,name=remove_member_call,json=removeMemberCall,proto3,oneof"`
}

type FellowshipCollectivePallet_VoteCall struct {
	VoteCall *FellowshipCollective_VoteCall `protobuf:"bytes,5,opt,name=vote_call,json=voteCall,proto3,oneof"`
}

type FellowshipCollectivePallet_CleanupPollCall struct {
	CleanupPollCall *FellowshipCollective_CleanupPollCall `protobuf:"bytes,6,opt,name=cleanup_poll_call,json=cleanupPollCall,proto3,oneof"`
}

func (*FellowshipCollectivePallet_AddMemberCall) isFellowshipCollectivePallet_Call() {}

func (*FellowshipCollectivePallet_PromoteMemberCall) isFellowshipCollectivePallet_Call() {}

func (*FellowshipCollectivePallet_DemoteMemberCall) isFellowshipCollectivePallet_Call() {}

func (*FellowshipCollectivePallet_RemoveMemberCall) isFellowshipCollectivePallet_Call() {}

func (*FellowshipCollectivePallet_VoteCall) isFellowshipCollectivePallet_Call() {}

func (*FellowshipCollectivePallet_CleanupPollCall) isFellowshipCollectivePallet_Call() {}

type Staking_SetStakingConfigsCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinNominatorBond  *Staking_MinNominatorBond  `protobuf:"bytes,1,opt,name=min_nominator_bond,json=minNominatorBond,proto3" json:"min_nominator_bond,omitempty"`
	MinValidatorBond  *Staking_MinValidatorBond  `protobuf:"bytes,2,opt,name=min_validator_bond,json=minValidatorBond,proto3" json:"min_validator_bond,omitempty"`
	MaxNominatorCount *Staking_MaxNominatorCount `protobuf:"bytes,3,opt,name=max_nominator_count,json=maxNominatorCount,proto3" json:"max_nominator_count,omitempty"`
	MaxValidatorCount *Staking_MaxValidatorCount `protobuf:"bytes,4,opt,name=max_validator_count,json=maxValidatorCount,proto3" json:"max_validator_count,omitempty"`
	ChillThreshold    *Staking_ChillThreshold    `protobuf:"bytes,5,opt,name=chill_threshold,json=chillThreshold,proto3" json:"chill_threshold,omitempty"`
	MinCommission     *Staking_MinCommission     `protobuf:"bytes,6,opt,name=min_commission,json=minCommission,proto3" json:"min_commission,omitempty"`
}

func (x *Staking_SetStakingConfigsCall) Reset() {
	*x = Staking_SetStakingConfigsCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[215]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staking_SetStakingConfigsCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staking_SetStakingConfigsCall) ProtoMessage() {}

func (x *Staking_SetStakingConfigsCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[215]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staking_SetStakingConfigsCall.ProtoReflect.Descriptor instead.
func (*Staking_SetStakingConfigsCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{215}
}

func (x *Staking_SetStakingConfigsCall) GetMinNominatorBond() *Staking_MinNominatorBond {
	if x != nil {
		return x.MinNominatorBond
	}
	return nil
}

func (x *Staking_SetStakingConfigsCall) GetMinValidatorBond() *Staking_MinValidatorBond {
	if x != nil {
		return x.MinValidatorBond
	}
	return nil
}

func (x *Staking_SetStakingConfigsCall) GetMaxNominatorCount() *Staking_MaxNominatorCount {
	if x != nil {
		return x.MaxNominatorCount
	}
	return nil
}

func (x *Staking_SetStakingConfigsCall) GetMaxValidatorCount() *Staking_MaxValidatorCount {
	if x != nil {
		return x.MaxValidatorCount
	}
	return nil
}

func (x *Staking_SetStakingConfigsCall) GetChillThreshold() *Staking_ChillThreshold {
	if x != nil {
		return x.ChillThreshold
	}
	return nil
}

func (x *Staking_SetStakingConfigsCall) GetMinCommission() *Staking_MinCommission {
	if x != nil {
		return x.MinCommission
	}
	return nil
}

type Referenda_Lookup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash *PrimitiveTypesH256 `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Len  uint32              `protobuf:"varint,2,opt,name=len,proto3" json:"len,omitempty"`
}

func (x *Referenda_Lookup) Reset() {
	*x = Referenda_Lookup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[216]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Referenda_Lookup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Referenda_Lookup) ProtoMessage() {}

func (x *Referenda_Lookup) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[216]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Referenda_Lookup.ProtoReflect.Descriptor instead.
func (*Referenda_Lookup) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{216}
}

func (x *Referenda_Lookup) GetHash() *PrimitiveTypesH256 {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *Referenda_Lookup) GetLen() uint32 {
	if x != nil {
		return x.Len
	}
	return 0
}

type Vesting_VestCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Vesting_VestCall) Reset() {
	*x = Vesting_VestCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[217]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vesting_VestCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vesting_VestCall) ProtoMessage() {}

func (x *Vesting_VestCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[217]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vesting_VestCall.ProtoReflect.Descriptor instead.
func (*Vesting_VestCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{217}
}

type Staking_KickCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Who []*SpRuntimeMultiaddressMultiAddress `protobuf:"bytes,1,rep,name=who,proto3" json:"who,omitempty"`
}

func (x *Staking_KickCall) Reset() {
	*x = Staking_KickCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[218]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staking_KickCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staking_KickCall) ProtoMessage() {}

func (x *Staking_KickCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[218]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staking_KickCall.ProtoReflect.Descriptor instead.
func (*Staking_KickCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{218}
}

func (x *Staking_KickCall) GetWho() []*SpRuntimeMultiaddressMultiAddress {
	if x != nil {
		return x.Who
	}
	return nil
}

type FellowshipReferenda_PlaceDecisionDepositCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *FellowshipReferenda_PlaceDecisionDepositCall) Reset() {
	*x = FellowshipReferenda_PlaceDecisionDepositCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[219]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FellowshipReferenda_PlaceDecisionDepositCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FellowshipReferenda_PlaceDecisionDepositCall) ProtoMessage() {}

func (x *FellowshipReferenda_PlaceDecisionDepositCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[219]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FellowshipReferenda_PlaceDecisionDepositCall.ProtoReflect.Descriptor instead.
func (*FellowshipReferenda_PlaceDecisionDepositCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{219}
}

func (x *FellowshipReferenda_PlaceDecisionDepositCall) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type Utility_DispatchAsCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AsOrigin *Utility_AsOrigin `protobuf:"bytes,1,opt,name=as_origin,json=asOrigin,proto3" json:"as_origin,omitempty"`
	// Types that are assignable to Call:
	//
	//	*Utility_DispatchAsCall_System
	//	*Utility_DispatchAsCall_Timestamp
	//	*Utility_DispatchAsCall_Babe
	//	*Utility_DispatchAsCall_Grandpa
	//	*Utility_DispatchAsCall_Balances
	//	*Utility_DispatchAsCall_Vesting
	//	*Utility_DispatchAsCall_BagsList
	//	*Utility_DispatchAsCall_ImOnline
	//	*Utility_DispatchAsCall_Staking
	//	*Utility_DispatchAsCall_Session
	//	*Utility_DispatchAsCall_Treasury
	//	*Utility_DispatchAsCall_Utility
	//	*Utility_DispatchAsCall_ConvictionVoting
	//	*Utility_DispatchAsCall_Referenda
	//	*Utility_DispatchAsCall_FellowshipCollective
	//	*Utility_DispatchAsCall_FellowshipReferenda
	//	*Utility_DispatchAsCall_Whitelist
	//	*Utility_DispatchAsCall_Scheduler
	//	*Utility_DispatchAsCall_Preimage
	//	*Utility_DispatchAsCall_Identity
	//	*Utility_DispatchAsCall_Proxy
	//	*Utility_DispatchAsCall_Multisig
	//	*Utility_DispatchAsCall_ElectionProviderMultiPhase
	//	*Utility_DispatchAsCall_Bounties
	//	*Utility_DispatchAsCall_ChildBounties
	//	*Utility_DispatchAsCall_NominationPools
	//	*Utility_DispatchAsCall_Gear
	//	*Utility_DispatchAsCall_StakingRewards
	//	*Utility_DispatchAsCall_GearVoucher
	Call isUtility_DispatchAsCall_Call `protobuf_oneof:"call"`
}

func (x *Utility_DispatchAsCall) Reset() {
	*x = Utility_DispatchAsCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[220]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Utility_DispatchAsCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Utility_DispatchAsCall) ProtoMessage() {}

func (x *Utility_DispatchAsCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[220]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Utility_DispatchAsCall.ProtoReflect.Descriptor instead.
func (*Utility_DispatchAsCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{220}
}

func (x *Utility_DispatchAsCall) GetAsOrigin() *Utility_AsOrigin {
	if x != nil {
		return x.AsOrigin
	}
	return nil
}

func (m *Utility_DispatchAsCall) GetCall() isUtility_DispatchAsCall_Call {
	if m != nil {
		return m.Call
	}
	return nil
}

func (x *Utility_DispatchAsCall) GetSystem() *SystemPallet {
	if x, ok := x.GetCall().(*Utility_DispatchAsCall_System); ok {
		return x.System
	}
	return nil
}

func (x *Utility_DispatchAsCall) GetTimestamp() *TimestampPallet {
	if x, ok := x.GetCall().(*Utility_DispatchAsCall_Timestamp); ok {
		return x.Timestamp
	}
	return nil
}

func (x *Utility_DispatchAsCall) GetBabe() *BabePallet {
	if x, ok := x.GetCall().(*Utility_DispatchAsCall_Babe); ok {
		return x.Babe
	}
	return nil
}

func (x *Utility_DispatchAsCall) GetGrandpa() *GrandpaPallet {
	if x, ok := x.GetCall().(*Utility_DispatchAsCall_Grandpa); ok {
		return x.Grandpa
	}
	return nil
}

func (x *Utility_DispatchAsCall) GetBalances() *BalancesPallet {
	if x, ok := x.GetCall().(*Utility_DispatchAsCall_Balances); ok {
		return x.Balances
	}
	return nil
}

func (x *Utility_DispatchAsCall) GetVesting() *VestingPallet {
	if x, ok := x.GetCall().(*Utility_DispatchAsCall_Vesting); ok {
		return x.Vesting
	}
	return nil
}

func (x *Utility_DispatchAsCall) GetBagsList() *BagsListPallet {
	if x, ok := x.GetCall().(*Utility_DispatchAsCall_BagsList); ok {
		return x.BagsList
	}
	return nil
}

func (x *Utility_DispatchAsCall) GetImOnline() *ImOnlinePallet {
	if x, ok := x.GetCall().(*Utility_DispatchAsCall_ImOnline); ok {
		return x.ImOnline
	}
	return nil
}

func (x *Utility_DispatchAsCall) GetStaking() *StakingPallet {
	if x, ok := x.GetCall().(*Utility_DispatchAsCall_Staking); ok {
		return x.Staking
	}
	return nil
}

func (x *Utility_DispatchAsCall) GetSession() *SessionPallet {
	if x, ok := x.GetCall().(*Utility_DispatchAsCall_Session); ok {
		return x.Session
	}
	return nil
}

func (x *Utility_DispatchAsCall) GetTreasury() *TreasuryPallet {
	if x, ok := x.GetCall().(*Utility_DispatchAsCall_Treasury); ok {
		return x.Treasury
	}
	return nil
}

func (x *Utility_DispatchAsCall) GetUtility() *UtilityPallet {
	if x, ok := x.GetCall().(*Utility_DispatchAsCall_Utility); ok {
		return x.Utility
	}
	return nil
}

func (x *Utility_DispatchAsCall) GetConvictionVoting() *ConvictionVotingPallet {
	if x, ok := x.GetCall().(*Utility_DispatchAsCall_ConvictionVoting); ok {
		return x.ConvictionVoting
	}
	return nil
}

func (x *Utility_DispatchAsCall) GetReferenda() *ReferendaPallet {
	if x, ok := x.GetCall().(*Utility_DispatchAsCall_Referenda); ok {
		return x.Referenda
	}
	return nil
}

func (x *Utility_DispatchAsCall) GetFellowshipCollective() *FellowshipCollectivePallet {
	if x, ok := x.GetCall().(*Utility_DispatchAsCall_FellowshipCollective); ok {
		return x.FellowshipCollective
	}
	return nil
}

func (x *Utility_DispatchAsCall) GetFellowshipReferenda() *FellowshipReferendaPallet {
	if x, ok := x.GetCall().(*Utility_DispatchAsCall_FellowshipReferenda); ok {
		return x.FellowshipReferenda
	}
	return nil
}

func (x *Utility_DispatchAsCall) GetWhitelist() *WhitelistPallet {
	if x, ok := x.GetCall().(*Utility_DispatchAsCall_Whitelist); ok {
		return x.Whitelist
	}
	return nil
}

func (x *Utility_DispatchAsCall) GetScheduler() *SchedulerPallet {
	if x, ok := x.GetCall().(*Utility_DispatchAsCall_Scheduler); ok {
		return x.Scheduler
	}
	return nil
}

func (x *Utility_DispatchAsCall) GetPreimage() *PreimagePallet {
	if x, ok := x.GetCall().(*Utility_DispatchAsCall_Preimage); ok {
		return x.Preimage
	}
	return nil
}

func (x *Utility_DispatchAsCall) GetIdentity() *IdentityPallet {
	if x, ok := x.GetCall().(*Utility_DispatchAsCall_Identity); ok {
		return x.Identity
	}
	return nil
}

func (x *Utility_DispatchAsCall) GetProxy() *ProxyPallet {
	if x, ok := x.GetCall().(*Utility_DispatchAsCall_Proxy); ok {
		return x.Proxy
	}
	return nil
}

func (x *Utility_DispatchAsCall) GetMultisig() *MultisigPallet {
	if x, ok := x.GetCall().(*Utility_DispatchAsCall_Multisig); ok {
		return x.Multisig
	}
	return nil
}

func (x *Utility_DispatchAsCall) GetElectionProviderMultiPhase() *ElectionProviderMultiPhasePallet {
	if x, ok := x.GetCall().(*Utility_DispatchAsCall_ElectionProviderMultiPhase); ok {
		return x.ElectionProviderMultiPhase
	}
	return nil
}

func (x *Utility_DispatchAsCall) GetBounties() *BountiesPallet {
	if x, ok := x.GetCall().(*Utility_DispatchAsCall_Bounties); ok {
		return x.Bounties
	}
	return nil
}

func (x *Utility_DispatchAsCall) GetChildBounties() *ChildBountiesPallet {
	if x, ok := x.GetCall().(*Utility_DispatchAsCall_ChildBounties); ok {
		return x.ChildBounties
	}
	return nil
}

func (x *Utility_DispatchAsCall) GetNominationPools() *NominationPoolsPallet {
	if x, ok := x.GetCall().(*Utility_DispatchAsCall_NominationPools); ok {
		return x.NominationPools
	}
	return nil
}

func (x *Utility_DispatchAsCall) GetGear() *GearPallet {
	if x, ok := x.GetCall().(*Utility_DispatchAsCall_Gear); ok {
		return x.Gear
	}
	return nil
}

func (x *Utility_DispatchAsCall) GetStakingRewards() *StakingRewardsPallet {
	if x, ok := x.GetCall().(*Utility_DispatchAsCall_StakingRewards); ok {
		return x.StakingRewards
	}
	return nil
}

func (x *Utility_DispatchAsCall) GetGearVoucher() *GearVoucherPallet {
	if x, ok := x.GetCall().(*Utility_DispatchAsCall_GearVoucher); ok {
		return x.GearVoucher
	}
	return nil
}

type isUtility_DispatchAsCall_Call interface {
	isUtility_DispatchAsCall_Call()
}

type Utility_DispatchAsCall_System struct {
	System *SystemPallet `protobuf:"bytes,2,opt,name=system,proto3,oneof"`
}

type Utility_DispatchAsCall_Timestamp struct {
	Timestamp *TimestampPallet `protobuf:"bytes,3,opt,name=timestamp,proto3,oneof"`
}

type Utility_DispatchAsCall_Babe struct {
	Babe *BabePallet `protobuf:"bytes,4,opt,name=babe,proto3,oneof"`
}

type Utility_DispatchAsCall_Grandpa struct {
	Grandpa *GrandpaPallet `protobuf:"bytes,5,opt,name=grandpa,proto3,oneof"`
}

type Utility_DispatchAsCall_Balances struct {
	Balances *BalancesPallet `protobuf:"bytes,6,opt,name=balances,proto3,oneof"`
}

type Utility_DispatchAsCall_Vesting struct {
	Vesting *VestingPallet `protobuf:"bytes,7,opt,name=vesting,proto3,oneof"`
}

type Utility_DispatchAsCall_BagsList struct {
	BagsList *BagsListPallet `protobuf:"bytes,8,opt,name=bags_list,json=bagsList,proto3,oneof"`
}

type Utility_DispatchAsCall_ImOnline struct {
	ImOnline *ImOnlinePallet `protobuf:"bytes,9,opt,name=im_online,json=imOnline,proto3,oneof"`
}

type Utility_DispatchAsCall_Staking struct {
	Staking *StakingPallet `protobuf:"bytes,10,opt,name=staking,proto3,oneof"`
}

type Utility_DispatchAsCall_Session struct {
	Session *SessionPallet `protobuf:"bytes,11,opt,name=session,proto3,oneof"`
}

type Utility_DispatchAsCall_Treasury struct {
	Treasury *TreasuryPallet `protobuf:"bytes,12,opt,name=treasury,proto3,oneof"`
}

type Utility_DispatchAsCall_Utility struct {
	Utility *UtilityPallet `protobuf:"bytes,13,opt,name=utility,proto3,oneof"`
}

type Utility_DispatchAsCall_ConvictionVoting struct {
	ConvictionVoting *ConvictionVotingPallet `protobuf:"bytes,14,opt,name=conviction_voting,json=convictionVoting,proto3,oneof"`
}

type Utility_DispatchAsCall_Referenda struct {
	Referenda *ReferendaPallet `protobuf:"bytes,15,opt,name=referenda,proto3,oneof"`
}

type Utility_DispatchAsCall_FellowshipCollective struct {
	FellowshipCollective *FellowshipCollectivePallet `protobuf:"bytes,16,opt,name=fellowship_collective,json=fellowshipCollective,proto3,oneof"`
}

type Utility_DispatchAsCall_FellowshipReferenda struct {
	FellowshipReferenda *FellowshipReferendaPallet `protobuf:"bytes,17,opt,name=fellowship_referenda,json=fellowshipReferenda,proto3,oneof"`
}

type Utility_DispatchAsCall_Whitelist struct {
	Whitelist *WhitelistPallet `protobuf:"bytes,18,opt,name=whitelist,proto3,oneof"`
}

type Utility_DispatchAsCall_Scheduler struct {
	Scheduler *SchedulerPallet `protobuf:"bytes,19,opt,name=scheduler,proto3,oneof"`
}

type Utility_DispatchAsCall_Preimage struct {
	Preimage *PreimagePallet `protobuf:"bytes,20,opt,name=preimage,proto3,oneof"`
}

type Utility_DispatchAsCall_Identity struct {
	Identity *IdentityPallet `protobuf:"bytes,21,opt,name=identity,proto3,oneof"`
}

type Utility_DispatchAsCall_Proxy struct {
	Proxy *ProxyPallet `protobuf:"bytes,22,opt,name=proxy,proto3,oneof"`
}

type Utility_DispatchAsCall_Multisig struct {
	Multisig *MultisigPallet `protobuf:"bytes,23,opt,name=multisig,proto3,oneof"`
}

type Utility_DispatchAsCall_ElectionProviderMultiPhase struct {
	ElectionProviderMultiPhase *ElectionProviderMultiPhasePallet `protobuf:"bytes,24,opt,name=election_provider_multi_phase,json=electionProviderMultiPhase,proto3,oneof"`
}

type Utility_DispatchAsCall_Bounties struct {
	Bounties *BountiesPallet `protobuf:"bytes,25,opt,name=bounties,proto3,oneof"`
}

type Utility_DispatchAsCall_ChildBounties struct {
	ChildBounties *ChildBountiesPallet `protobuf:"bytes,26,opt,name=child_bounties,json=childBounties,proto3,oneof"`
}

type Utility_DispatchAsCall_NominationPools struct {
	NominationPools *NominationPoolsPallet `protobuf:"bytes,27,opt,name=nomination_pools,json=nominationPools,proto3,oneof"`
}

type Utility_DispatchAsCall_Gear struct {
	Gear *GearPallet `protobuf:"bytes,28,opt,name=gear,proto3,oneof"`
}

type Utility_DispatchAsCall_StakingRewards struct {
	StakingRewards *StakingRewardsPallet `protobuf:"bytes,29,opt,name=staking_rewards,json=stakingRewards,proto3,oneof"`
}

type Utility_DispatchAsCall_GearVoucher struct {
	GearVoucher *GearVoucherPallet `protobuf:"bytes,30,opt,name=gear_voucher,json=gearVoucher,proto3,oneof"`
}

func (*Utility_DispatchAsCall_System) isUtility_DispatchAsCall_Call() {}

func (*Utility_DispatchAsCall_Timestamp) isUtility_DispatchAsCall_Call() {}

func (*Utility_DispatchAsCall_Babe) isUtility_DispatchAsCall_Call() {}

func (*Utility_DispatchAsCall_Grandpa) isUtility_DispatchAsCall_Call() {}

func (*Utility_DispatchAsCall_Balances) isUtility_DispatchAsCall_Call() {}

func (*Utility_DispatchAsCall_Vesting) isUtility_DispatchAsCall_Call() {}

func (*Utility_DispatchAsCall_BagsList) isUtility_DispatchAsCall_Call() {}

func (*Utility_DispatchAsCall_ImOnline) isUtility_DispatchAsCall_Call() {}

func (*Utility_DispatchAsCall_Staking) isUtility_DispatchAsCall_Call() {}

func (*Utility_DispatchAsCall_Session) isUtility_DispatchAsCall_Call() {}

func (*Utility_DispatchAsCall_Treasury) isUtility_DispatchAsCall_Call() {}

func (*Utility_DispatchAsCall_Utility) isUtility_DispatchAsCall_Call() {}

func (*Utility_DispatchAsCall_ConvictionVoting) isUtility_DispatchAsCall_Call() {}

func (*Utility_DispatchAsCall_Referenda) isUtility_DispatchAsCall_Call() {}

func (*Utility_DispatchAsCall_FellowshipCollective) isUtility_DispatchAsCall_Call() {}

func (*Utility_DispatchAsCall_FellowshipReferenda) isUtility_DispatchAsCall_Call() {}

func (*Utility_DispatchAsCall_Whitelist) isUtility_DispatchAsCall_Call() {}

func (*Utility_DispatchAsCall_Scheduler) isUtility_DispatchAsCall_Call() {}

func (*Utility_DispatchAsCall_Preimage) isUtility_DispatchAsCall_Call() {}

func (*Utility_DispatchAsCall_Identity) isUtility_DispatchAsCall_Call() {}

func (*Utility_DispatchAsCall_Proxy) isUtility_DispatchAsCall_Call() {}

func (*Utility_DispatchAsCall_Multisig) isUtility_DispatchAsCall_Call() {}

func (*Utility_DispatchAsCall_ElectionProviderMultiPhase) isUtility_DispatchAsCall_Call() {}

func (*Utility_DispatchAsCall_Bounties) isUtility_DispatchAsCall_Call() {}

func (*Utility_DispatchAsCall_ChildBounties) isUtility_DispatchAsCall_Call() {}

func (*Utility_DispatchAsCall_NominationPools) isUtility_DispatchAsCall_Call() {}

func (*Utility_DispatchAsCall_Gear) isUtility_DispatchAsCall_Call() {}

func (*Utility_DispatchAsCall_StakingRewards) isUtility_DispatchAsCall_Call() {}

func (*Utility_DispatchAsCall_GearVoucher) isUtility_DispatchAsCall_Call() {}

type NominationPools_NewNominator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*NominationPools_NewNominator_Noop
	//	*NominationPools_NewNominator_Set
	//	*NominationPools_NewNominator_Remove
	Value isNominationPools_NewNominator_Value `protobuf_oneof:"value"`
}

func (x *NominationPools_NewNominator) Reset() {
	*x = NominationPools_NewNominator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[221]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NominationPools_NewNominator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NominationPools_NewNominator) ProtoMessage() {}

func (x *NominationPools_NewNominator) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[221]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NominationPools_NewNominator.ProtoReflect.Descriptor instead.
func (*NominationPools_NewNominator) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{221}
}

func (m *NominationPools_NewNominator) GetValue() isNominationPools_NewNominator_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *NominationPools_NewNominator) GetNoop() *NominationPools_Noop {
	if x, ok := x.GetValue().(*NominationPools_NewNominator_Noop); ok {
		return x.Noop
	}
	return nil
}

func (x *NominationPools_NewNominator) GetSet() *NominationPools_Set {
	if x, ok := x.GetValue().(*NominationPools_NewNominator_Set); ok {
		return x.Set
	}
	return nil
}

func (x *NominationPools_NewNominator) GetRemove() *NominationPools_Remove {
	if x, ok := x.GetValue().(*NominationPools_NewNominator_Remove); ok {
		return x.Remove
	}
	return nil
}

type isNominationPools_NewNominator_Value interface {
	isNominationPools_NewNominator_Value()
}

type NominationPools_NewNominator_Noop struct {
	Noop *NominationPools_Noop `protobuf:"bytes,1,opt,name=noop,proto3,oneof"`
}

type NominationPools_NewNominator_Set struct {
	Set *NominationPools_Set `protobuf:"bytes,2,opt,name=set,proto3,oneof"`
}

type NominationPools_NewNominator_Remove struct {
	Remove *NominationPools_Remove `protobuf:"bytes,3,opt,name=remove,proto3,oneof"`
}

func (*NominationPools_NewNominator_Noop) isNominationPools_NewNominator_Value() {}

func (*NominationPools_NewNominator_Set) isNominationPools_NewNominator_Value() {}

func (*NominationPools_NewNominator_Remove) isNominationPools_NewNominator_Value() {}

type Identity_Value0 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*Identity_Value0_None
	//	*Identity_Value0_Raw0
	//	*Identity_Value0_Raw1
	//	*Identity_Value0_Raw2
	//	*Identity_Value0_Raw3
	//	*Identity_Value0_Raw4
	//	*Identity_Value0_Raw5
	//	*Identity_Value0_Raw6
	//	*Identity_Value0_Raw7
	//	*Identity_Value0_Raw8
	//	*Identity_Value0_Raw9
	//	*Identity_Value0_Raw10
	//	*Identity_Value0_Raw11
	//	*Identity_Value0_Raw12
	//	*Identity_Value0_Raw13
	//	*Identity_Value0_Raw14
	//	*Identity_Value0_Raw15
	//	*Identity_Value0_Raw16
	//	*Identity_Value0_Raw17
	//	*Identity_Value0_Raw18
	//	*Identity_Value0_Raw19
	//	*Identity_Value0_Raw20
	//	*Identity_Value0_Raw21
	//	*Identity_Value0_Raw22
	//	*Identity_Value0_Raw23
	//	*Identity_Value0_Raw24
	//	*Identity_Value0_Raw25
	//	*Identity_Value0_Raw26
	//	*Identity_Value0_Raw27
	//	*Identity_Value0_Raw28
	//	*Identity_Value0_Raw29
	//	*Identity_Value0_Raw30
	//	*Identity_Value0_Raw31
	//	*Identity_Value0_Raw32
	//	*Identity_Value0_BlakeTwo256
	//	*Identity_Value0_Sha256
	//	*Identity_Value0_Keccak256
	//	*Identity_Value0_ShaThree256
	Value isIdentity_Value0_Value `protobuf_oneof:"value"`
}

func (x *Identity_Value0) Reset() {
	*x = Identity_Value0{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[222]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_Value0) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_Value0) ProtoMessage() {}

func (x *Identity_Value0) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[222]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_Value0.ProtoReflect.Descriptor instead.
func (*Identity_Value0) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{222}
}

func (m *Identity_Value0) GetValue() isIdentity_Value0_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Identity_Value0) GetNone() *Identity_None {
	if x, ok := x.GetValue().(*Identity_Value0_None); ok {
		return x.None
	}
	return nil
}

func (x *Identity_Value0) GetRaw0() *Identity_Raw0 {
	if x, ok := x.GetValue().(*Identity_Value0_Raw0); ok {
		return x.Raw0
	}
	return nil
}

func (x *Identity_Value0) GetRaw1() *Identity_Raw1 {
	if x, ok := x.GetValue().(*Identity_Value0_Raw1); ok {
		return x.Raw1
	}
	return nil
}

func (x *Identity_Value0) GetRaw2() *Identity_Raw2 {
	if x, ok := x.GetValue().(*Identity_Value0_Raw2); ok {
		return x.Raw2
	}
	return nil
}

func (x *Identity_Value0) GetRaw3() *Identity_Raw3 {
	if x, ok := x.GetValue().(*Identity_Value0_Raw3); ok {
		return x.Raw3
	}
	return nil
}

func (x *Identity_Value0) GetRaw4() *Identity_Raw4 {
	if x, ok := x.GetValue().(*Identity_Value0_Raw4); ok {
		return x.Raw4
	}
	return nil
}

func (x *Identity_Value0) GetRaw5() *Identity_Raw5 {
	if x, ok := x.GetValue().(*Identity_Value0_Raw5); ok {
		return x.Raw5
	}
	return nil
}

func (x *Identity_Value0) GetRaw6() *Identity_Raw6 {
	if x, ok := x.GetValue().(*Identity_Value0_Raw6); ok {
		return x.Raw6
	}
	return nil
}

func (x *Identity_Value0) GetRaw7() *Identity_Raw7 {
	if x, ok := x.GetValue().(*Identity_Value0_Raw7); ok {
		return x.Raw7
	}
	return nil
}

func (x *Identity_Value0) GetRaw8() *Identity_Raw8 {
	if x, ok := x.GetValue().(*Identity_Value0_Raw8); ok {
		return x.Raw8
	}
	return nil
}

func (x *Identity_Value0) GetRaw9() *Identity_Raw9 {
	if x, ok := x.GetValue().(*Identity_Value0_Raw9); ok {
		return x.Raw9
	}
	return nil
}

func (x *Identity_Value0) GetRaw10() *Identity_Raw10 {
	if x, ok := x.GetValue().(*Identity_Value0_Raw10); ok {
		return x.Raw10
	}
	return nil
}

func (x *Identity_Value0) GetRaw11() *Identity_Raw11 {
	if x, ok := x.GetValue().(*Identity_Value0_Raw11); ok {
		return x.Raw11
	}
	return nil
}

func (x *Identity_Value0) GetRaw12() *Identity_Raw12 {
	if x, ok := x.GetValue().(*Identity_Value0_Raw12); ok {
		return x.Raw12
	}
	return nil
}

func (x *Identity_Value0) GetRaw13() *Identity_Raw13 {
	if x, ok := x.GetValue().(*Identity_Value0_Raw13); ok {
		return x.Raw13
	}
	return nil
}

func (x *Identity_Value0) GetRaw14() *Identity_Raw14 {
	if x, ok := x.GetValue().(*Identity_Value0_Raw14); ok {
		return x.Raw14
	}
	return nil
}

func (x *Identity_Value0) GetRaw15() *Identity_Raw15 {
	if x, ok := x.GetValue().(*Identity_Value0_Raw15); ok {
		return x.Raw15
	}
	return nil
}

func (x *Identity_Value0) GetRaw16() *Identity_Raw16 {
	if x, ok := x.GetValue().(*Identity_Value0_Raw16); ok {
		return x.Raw16
	}
	return nil
}

func (x *Identity_Value0) GetRaw17() *Identity_Raw17 {
	if x, ok := x.GetValue().(*Identity_Value0_Raw17); ok {
		return x.Raw17
	}
	return nil
}

func (x *Identity_Value0) GetRaw18() *Identity_Raw18 {
	if x, ok := x.GetValue().(*Identity_Value0_Raw18); ok {
		return x.Raw18
	}
	return nil
}

func (x *Identity_Value0) GetRaw19() *Identity_Raw19 {
	if x, ok := x.GetValue().(*Identity_Value0_Raw19); ok {
		return x.Raw19
	}
	return nil
}

func (x *Identity_Value0) GetRaw20() *Identity_Raw20 {
	if x, ok := x.GetValue().(*Identity_Value0_Raw20); ok {
		return x.Raw20
	}
	return nil
}

func (x *Identity_Value0) GetRaw21() *Identity_Raw21 {
	if x, ok := x.GetValue().(*Identity_Value0_Raw21); ok {
		return x.Raw21
	}
	return nil
}

func (x *Identity_Value0) GetRaw22() *Identity_Raw22 {
	if x, ok := x.GetValue().(*Identity_Value0_Raw22); ok {
		return x.Raw22
	}
	return nil
}

func (x *Identity_Value0) GetRaw23() *Identity_Raw23 {
	if x, ok := x.GetValue().(*Identity_Value0_Raw23); ok {
		return x.Raw23
	}
	return nil
}

func (x *Identity_Value0) GetRaw24() *Identity_Raw24 {
	if x, ok := x.GetValue().(*Identity_Value0_Raw24); ok {
		return x.Raw24
	}
	return nil
}

func (x *Identity_Value0) GetRaw25() *Identity_Raw25 {
	if x, ok := x.GetValue().(*Identity_Value0_Raw25); ok {
		return x.Raw25
	}
	return nil
}

func (x *Identity_Value0) GetRaw26() *Identity_Raw26 {
	if x, ok := x.GetValue().(*Identity_Value0_Raw26); ok {
		return x.Raw26
	}
	return nil
}

func (x *Identity_Value0) GetRaw27() *Identity_Raw27 {
	if x, ok := x.GetValue().(*Identity_Value0_Raw27); ok {
		return x.Raw27
	}
	return nil
}

func (x *Identity_Value0) GetRaw28() *Identity_Raw28 {
	if x, ok := x.GetValue().(*Identity_Value0_Raw28); ok {
		return x.Raw28
	}
	return nil
}

func (x *Identity_Value0) GetRaw29() *Identity_Raw29 {
	if x, ok := x.GetValue().(*Identity_Value0_Raw29); ok {
		return x.Raw29
	}
	return nil
}

func (x *Identity_Value0) GetRaw30() *Identity_Raw30 {
	if x, ok := x.GetValue().(*Identity_Value0_Raw30); ok {
		return x.Raw30
	}
	return nil
}

func (x *Identity_Value0) GetRaw31() *Identity_Raw31 {
	if x, ok := x.GetValue().(*Identity_Value0_Raw31); ok {
		return x.Raw31
	}
	return nil
}

func (x *Identity_Value0) GetRaw32() *Identity_Raw32 {
	if x, ok := x.GetValue().(*Identity_Value0_Raw32); ok {
		return x.Raw32
	}
	return nil
}

func (x *Identity_Value0) GetBlakeTwo256() *Identity_BlakeTwo256 {
	if x, ok := x.GetValue().(*Identity_Value0_BlakeTwo256); ok {
		return x.BlakeTwo256
	}
	return nil
}

func (x *Identity_Value0) GetSha256() *Identity_Sha256 {
	if x, ok := x.GetValue().(*Identity_Value0_Sha256); ok {
		return x.Sha256
	}
	return nil
}

func (x *Identity_Value0) GetKeccak256() *Identity_Keccak256 {
	if x, ok := x.GetValue().(*Identity_Value0_Keccak256); ok {
		return x.Keccak256
	}
	return nil
}

func (x *Identity_Value0) GetShaThree256() *Identity_ShaThree256 {
	if x, ok := x.GetValue().(*Identity_Value0_ShaThree256); ok {
		return x.ShaThree256
	}
	return nil
}

type isIdentity_Value0_Value interface {
	isIdentity_Value0_Value()
}

type Identity_Value0_None struct {
	None *Identity_None `protobuf:"bytes,1,opt,name=none,proto3,oneof"`
}

type Identity_Value0_Raw0 struct {
	Raw0 *Identity_Raw0 `protobuf:"bytes,2,opt,name=raw0,proto3,oneof"`
}

type Identity_Value0_Raw1 struct {
	Raw1 *Identity_Raw1 `protobuf:"bytes,3,opt,name=raw1,proto3,oneof"`
}

type Identity_Value0_Raw2 struct {
	Raw2 *Identity_Raw2 `protobuf:"bytes,4,opt,name=raw2,proto3,oneof"`
}

type Identity_Value0_Raw3 struct {
	Raw3 *Identity_Raw3 `protobuf:"bytes,5,opt,name=raw3,proto3,oneof"`
}

type Identity_Value0_Raw4 struct {
	Raw4 *Identity_Raw4 `protobuf:"bytes,6,opt,name=raw4,proto3,oneof"`
}

type Identity_Value0_Raw5 struct {
	Raw5 *Identity_Raw5 `protobuf:"bytes,7,opt,name=raw5,proto3,oneof"`
}

type Identity_Value0_Raw6 struct {
	Raw6 *Identity_Raw6 `protobuf:"bytes,8,opt,name=raw6,proto3,oneof"`
}

type Identity_Value0_Raw7 struct {
	Raw7 *Identity_Raw7 `protobuf:"bytes,9,opt,name=raw7,proto3,oneof"`
}

type Identity_Value0_Raw8 struct {
	Raw8 *Identity_Raw8 `protobuf:"bytes,10,opt,name=raw8,proto3,oneof"`
}

type Identity_Value0_Raw9 struct {
	Raw9 *Identity_Raw9 `protobuf:"bytes,11,opt,name=raw9,proto3,oneof"`
}

type Identity_Value0_Raw10 struct {
	Raw10 *Identity_Raw10 `protobuf:"bytes,12,opt,name=raw10,proto3,oneof"`
}

type Identity_Value0_Raw11 struct {
	Raw11 *Identity_Raw11 `protobuf:"bytes,13,opt,name=raw11,proto3,oneof"`
}

type Identity_Value0_Raw12 struct {
	Raw12 *Identity_Raw12 `protobuf:"bytes,14,opt,name=raw12,proto3,oneof"`
}

type Identity_Value0_Raw13 struct {
	Raw13 *Identity_Raw13 `protobuf:"bytes,15,opt,name=raw13,proto3,oneof"`
}

type Identity_Value0_Raw14 struct {
	Raw14 *Identity_Raw14 `protobuf:"bytes,16,opt,name=raw14,proto3,oneof"`
}

type Identity_Value0_Raw15 struct {
	Raw15 *Identity_Raw15 `protobuf:"bytes,17,opt,name=raw15,proto3,oneof"`
}

type Identity_Value0_Raw16 struct {
	Raw16 *Identity_Raw16 `protobuf:"bytes,18,opt,name=raw16,proto3,oneof"`
}

type Identity_Value0_Raw17 struct {
	Raw17 *Identity_Raw17 `protobuf:"bytes,19,opt,name=raw17,proto3,oneof"`
}

type Identity_Value0_Raw18 struct {
	Raw18 *Identity_Raw18 `protobuf:"bytes,20,opt,name=raw18,proto3,oneof"`
}

type Identity_Value0_Raw19 struct {
	Raw19 *Identity_Raw19 `protobuf:"bytes,21,opt,name=raw19,proto3,oneof"`
}

type Identity_Value0_Raw20 struct {
	Raw20 *Identity_Raw20 `protobuf:"bytes,22,opt,name=raw20,proto3,oneof"`
}

type Identity_Value0_Raw21 struct {
	Raw21 *Identity_Raw21 `protobuf:"bytes,23,opt,name=raw21,proto3,oneof"`
}

type Identity_Value0_Raw22 struct {
	Raw22 *Identity_Raw22 `protobuf:"bytes,24,opt,name=raw22,proto3,oneof"`
}

type Identity_Value0_Raw23 struct {
	Raw23 *Identity_Raw23 `protobuf:"bytes,25,opt,name=raw23,proto3,oneof"`
}

type Identity_Value0_Raw24 struct {
	Raw24 *Identity_Raw24 `protobuf:"bytes,26,opt,name=raw24,proto3,oneof"`
}

type Identity_Value0_Raw25 struct {
	Raw25 *Identity_Raw25 `protobuf:"bytes,27,opt,name=raw25,proto3,oneof"`
}

type Identity_Value0_Raw26 struct {
	Raw26 *Identity_Raw26 `protobuf:"bytes,28,opt,name=raw26,proto3,oneof"`
}

type Identity_Value0_Raw27 struct {
	Raw27 *Identity_Raw27 `protobuf:"bytes,29,opt,name=raw27,proto3,oneof"`
}

type Identity_Value0_Raw28 struct {
	Raw28 *Identity_Raw28 `protobuf:"bytes,30,opt,name=raw28,proto3,oneof"`
}

type Identity_Value0_Raw29 struct {
	Raw29 *Identity_Raw29 `protobuf:"bytes,31,opt,name=raw29,proto3,oneof"`
}

type Identity_Value0_Raw30 struct {
	Raw30 *Identity_Raw30 `protobuf:"bytes,32,opt,name=raw30,proto3,oneof"`
}

type Identity_Value0_Raw31 struct {
	Raw31 *Identity_Raw31 `protobuf:"bytes,33,opt,name=raw31,proto3,oneof"`
}

type Identity_Value0_Raw32 struct {
	Raw32 *Identity_Raw32 `protobuf:"bytes,34,opt,name=raw32,proto3,oneof"`
}

type Identity_Value0_BlakeTwo256 struct {
	BlakeTwo256 *Identity_BlakeTwo256 `protobuf:"bytes,35,opt,name=blake_two256,json=blakeTwo256,proto3,oneof"`
}

type Identity_Value0_Sha256 struct {
	Sha256 *Identity_Sha256 `protobuf:"bytes,36,opt,name=sha256,proto3,oneof"`
}

type Identity_Value0_Keccak256 struct {
	Keccak256 *Identity_Keccak256 `protobuf:"bytes,37,opt,name=keccak256,proto3,oneof"`
}

type Identity_Value0_ShaThree256 struct {
	ShaThree256 *Identity_ShaThree256 `protobuf:"bytes,38,opt,name=sha_three256,json=shaThree256,proto3,oneof"`
}

func (*Identity_Value0_None) isIdentity_Value0_Value() {}

func (*Identity_Value0_Raw0) isIdentity_Value0_Value() {}

func (*Identity_Value0_Raw1) isIdentity_Value0_Value() {}

func (*Identity_Value0_Raw2) isIdentity_Value0_Value() {}

func (*Identity_Value0_Raw3) isIdentity_Value0_Value() {}

func (*Identity_Value0_Raw4) isIdentity_Value0_Value() {}

func (*Identity_Value0_Raw5) isIdentity_Value0_Value() {}

func (*Identity_Value0_Raw6) isIdentity_Value0_Value() {}

func (*Identity_Value0_Raw7) isIdentity_Value0_Value() {}

func (*Identity_Value0_Raw8) isIdentity_Value0_Value() {}

func (*Identity_Value0_Raw9) isIdentity_Value0_Value() {}

func (*Identity_Value0_Raw10) isIdentity_Value0_Value() {}

func (*Identity_Value0_Raw11) isIdentity_Value0_Value() {}

func (*Identity_Value0_Raw12) isIdentity_Value0_Value() {}

func (*Identity_Value0_Raw13) isIdentity_Value0_Value() {}

func (*Identity_Value0_Raw14) isIdentity_Value0_Value() {}

func (*Identity_Value0_Raw15) isIdentity_Value0_Value() {}

func (*Identity_Value0_Raw16) isIdentity_Value0_Value() {}

func (*Identity_Value0_Raw17) isIdentity_Value0_Value() {}

func (*Identity_Value0_Raw18) isIdentity_Value0_Value() {}

func (*Identity_Value0_Raw19) isIdentity_Value0_Value() {}

func (*Identity_Value0_Raw20) isIdentity_Value0_Value() {}

func (*Identity_Value0_Raw21) isIdentity_Value0_Value() {}

func (*Identity_Value0_Raw22) isIdentity_Value0_Value() {}

func (*Identity_Value0_Raw23) isIdentity_Value0_Value() {}

func (*Identity_Value0_Raw24) isIdentity_Value0_Value() {}

func (*Identity_Value0_Raw25) isIdentity_Value0_Value() {}

func (*Identity_Value0_Raw26) isIdentity_Value0_Value() {}

func (*Identity_Value0_Raw27) isIdentity_Value0_Value() {}

func (*Identity_Value0_Raw28) isIdentity_Value0_Value() {}

func (*Identity_Value0_Raw29) isIdentity_Value0_Value() {}

func (*Identity_Value0_Raw30) isIdentity_Value0_Value() {}

func (*Identity_Value0_Raw31) isIdentity_Value0_Value() {}

func (*Identity_Value0_Raw32) isIdentity_Value0_Value() {}

func (*Identity_Value0_BlakeTwo256) isIdentity_Value0_Value() {}

func (*Identity_Value0_Sha256) isIdentity_Value0_Value() {}

func (*Identity_Value0_Keccak256) isIdentity_Value0_Value() {}

func (*Identity_Value0_ShaThree256) isIdentity_Value0_Value() {}

type Identity_Twitter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*Identity_Twitter_None
	//	*Identity_Twitter_Raw0
	//	*Identity_Twitter_Raw1
	//	*Identity_Twitter_Raw2
	//	*Identity_Twitter_Raw3
	//	*Identity_Twitter_Raw4
	//	*Identity_Twitter_Raw5
	//	*Identity_Twitter_Raw6
	//	*Identity_Twitter_Raw7
	//	*Identity_Twitter_Raw8
	//	*Identity_Twitter_Raw9
	//	*Identity_Twitter_Raw10
	//	*Identity_Twitter_Raw11
	//	*Identity_Twitter_Raw12
	//	*Identity_Twitter_Raw13
	//	*Identity_Twitter_Raw14
	//	*Identity_Twitter_Raw15
	//	*Identity_Twitter_Raw16
	//	*Identity_Twitter_Raw17
	//	*Identity_Twitter_Raw18
	//	*Identity_Twitter_Raw19
	//	*Identity_Twitter_Raw20
	//	*Identity_Twitter_Raw21
	//	*Identity_Twitter_Raw22
	//	*Identity_Twitter_Raw23
	//	*Identity_Twitter_Raw24
	//	*Identity_Twitter_Raw25
	//	*Identity_Twitter_Raw26
	//	*Identity_Twitter_Raw27
	//	*Identity_Twitter_Raw28
	//	*Identity_Twitter_Raw29
	//	*Identity_Twitter_Raw30
	//	*Identity_Twitter_Raw31
	//	*Identity_Twitter_Raw32
	//	*Identity_Twitter_BlakeTwo256
	//	*Identity_Twitter_Sha256
	//	*Identity_Twitter_Keccak256
	//	*Identity_Twitter_ShaThree256
	Value isIdentity_Twitter_Value `protobuf_oneof:"value"`
}

func (x *Identity_Twitter) Reset() {
	*x = Identity_Twitter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[223]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_Twitter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_Twitter) ProtoMessage() {}

func (x *Identity_Twitter) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[223]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_Twitter.ProtoReflect.Descriptor instead.
func (*Identity_Twitter) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{223}
}

func (m *Identity_Twitter) GetValue() isIdentity_Twitter_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Identity_Twitter) GetNone() *Identity_None {
	if x, ok := x.GetValue().(*Identity_Twitter_None); ok {
		return x.None
	}
	return nil
}

func (x *Identity_Twitter) GetRaw0() *Identity_Raw0 {
	if x, ok := x.GetValue().(*Identity_Twitter_Raw0); ok {
		return x.Raw0
	}
	return nil
}

func (x *Identity_Twitter) GetRaw1() *Identity_Raw1 {
	if x, ok := x.GetValue().(*Identity_Twitter_Raw1); ok {
		return x.Raw1
	}
	return nil
}

func (x *Identity_Twitter) GetRaw2() *Identity_Raw2 {
	if x, ok := x.GetValue().(*Identity_Twitter_Raw2); ok {
		return x.Raw2
	}
	return nil
}

func (x *Identity_Twitter) GetRaw3() *Identity_Raw3 {
	if x, ok := x.GetValue().(*Identity_Twitter_Raw3); ok {
		return x.Raw3
	}
	return nil
}

func (x *Identity_Twitter) GetRaw4() *Identity_Raw4 {
	if x, ok := x.GetValue().(*Identity_Twitter_Raw4); ok {
		return x.Raw4
	}
	return nil
}

func (x *Identity_Twitter) GetRaw5() *Identity_Raw5 {
	if x, ok := x.GetValue().(*Identity_Twitter_Raw5); ok {
		return x.Raw5
	}
	return nil
}

func (x *Identity_Twitter) GetRaw6() *Identity_Raw6 {
	if x, ok := x.GetValue().(*Identity_Twitter_Raw6); ok {
		return x.Raw6
	}
	return nil
}

func (x *Identity_Twitter) GetRaw7() *Identity_Raw7 {
	if x, ok := x.GetValue().(*Identity_Twitter_Raw7); ok {
		return x.Raw7
	}
	return nil
}

func (x *Identity_Twitter) GetRaw8() *Identity_Raw8 {
	if x, ok := x.GetValue().(*Identity_Twitter_Raw8); ok {
		return x.Raw8
	}
	return nil
}

func (x *Identity_Twitter) GetRaw9() *Identity_Raw9 {
	if x, ok := x.GetValue().(*Identity_Twitter_Raw9); ok {
		return x.Raw9
	}
	return nil
}

func (x *Identity_Twitter) GetRaw10() *Identity_Raw10 {
	if x, ok := x.GetValue().(*Identity_Twitter_Raw10); ok {
		return x.Raw10
	}
	return nil
}

func (x *Identity_Twitter) GetRaw11() *Identity_Raw11 {
	if x, ok := x.GetValue().(*Identity_Twitter_Raw11); ok {
		return x.Raw11
	}
	return nil
}

func (x *Identity_Twitter) GetRaw12() *Identity_Raw12 {
	if x, ok := x.GetValue().(*Identity_Twitter_Raw12); ok {
		return x.Raw12
	}
	return nil
}

func (x *Identity_Twitter) GetRaw13() *Identity_Raw13 {
	if x, ok := x.GetValue().(*Identity_Twitter_Raw13); ok {
		return x.Raw13
	}
	return nil
}

func (x *Identity_Twitter) GetRaw14() *Identity_Raw14 {
	if x, ok := x.GetValue().(*Identity_Twitter_Raw14); ok {
		return x.Raw14
	}
	return nil
}

func (x *Identity_Twitter) GetRaw15() *Identity_Raw15 {
	if x, ok := x.GetValue().(*Identity_Twitter_Raw15); ok {
		return x.Raw15
	}
	return nil
}

func (x *Identity_Twitter) GetRaw16() *Identity_Raw16 {
	if x, ok := x.GetValue().(*Identity_Twitter_Raw16); ok {
		return x.Raw16
	}
	return nil
}

func (x *Identity_Twitter) GetRaw17() *Identity_Raw17 {
	if x, ok := x.GetValue().(*Identity_Twitter_Raw17); ok {
		return x.Raw17
	}
	return nil
}

func (x *Identity_Twitter) GetRaw18() *Identity_Raw18 {
	if x, ok := x.GetValue().(*Identity_Twitter_Raw18); ok {
		return x.Raw18
	}
	return nil
}

func (x *Identity_Twitter) GetRaw19() *Identity_Raw19 {
	if x, ok := x.GetValue().(*Identity_Twitter_Raw19); ok {
		return x.Raw19
	}
	return nil
}

func (x *Identity_Twitter) GetRaw20() *Identity_Raw20 {
	if x, ok := x.GetValue().(*Identity_Twitter_Raw20); ok {
		return x.Raw20
	}
	return nil
}

func (x *Identity_Twitter) GetRaw21() *Identity_Raw21 {
	if x, ok := x.GetValue().(*Identity_Twitter_Raw21); ok {
		return x.Raw21
	}
	return nil
}

func (x *Identity_Twitter) GetRaw22() *Identity_Raw22 {
	if x, ok := x.GetValue().(*Identity_Twitter_Raw22); ok {
		return x.Raw22
	}
	return nil
}

func (x *Identity_Twitter) GetRaw23() *Identity_Raw23 {
	if x, ok := x.GetValue().(*Identity_Twitter_Raw23); ok {
		return x.Raw23
	}
	return nil
}

func (x *Identity_Twitter) GetRaw24() *Identity_Raw24 {
	if x, ok := x.GetValue().(*Identity_Twitter_Raw24); ok {
		return x.Raw24
	}
	return nil
}

func (x *Identity_Twitter) GetRaw25() *Identity_Raw25 {
	if x, ok := x.GetValue().(*Identity_Twitter_Raw25); ok {
		return x.Raw25
	}
	return nil
}

func (x *Identity_Twitter) GetRaw26() *Identity_Raw26 {
	if x, ok := x.GetValue().(*Identity_Twitter_Raw26); ok {
		return x.Raw26
	}
	return nil
}

func (x *Identity_Twitter) GetRaw27() *Identity_Raw27 {
	if x, ok := x.GetValue().(*Identity_Twitter_Raw27); ok {
		return x.Raw27
	}
	return nil
}

func (x *Identity_Twitter) GetRaw28() *Identity_Raw28 {
	if x, ok := x.GetValue().(*Identity_Twitter_Raw28); ok {
		return x.Raw28
	}
	return nil
}

func (x *Identity_Twitter) GetRaw29() *Identity_Raw29 {
	if x, ok := x.GetValue().(*Identity_Twitter_Raw29); ok {
		return x.Raw29
	}
	return nil
}

func (x *Identity_Twitter) GetRaw30() *Identity_Raw30 {
	if x, ok := x.GetValue().(*Identity_Twitter_Raw30); ok {
		return x.Raw30
	}
	return nil
}

func (x *Identity_Twitter) GetRaw31() *Identity_Raw31 {
	if x, ok := x.GetValue().(*Identity_Twitter_Raw31); ok {
		return x.Raw31
	}
	return nil
}

func (x *Identity_Twitter) GetRaw32() *Identity_Raw32 {
	if x, ok := x.GetValue().(*Identity_Twitter_Raw32); ok {
		return x.Raw32
	}
	return nil
}

func (x *Identity_Twitter) GetBlakeTwo256() *Identity_BlakeTwo256 {
	if x, ok := x.GetValue().(*Identity_Twitter_BlakeTwo256); ok {
		return x.BlakeTwo256
	}
	return nil
}

func (x *Identity_Twitter) GetSha256() *Identity_Sha256 {
	if x, ok := x.GetValue().(*Identity_Twitter_Sha256); ok {
		return x.Sha256
	}
	return nil
}

func (x *Identity_Twitter) GetKeccak256() *Identity_Keccak256 {
	if x, ok := x.GetValue().(*Identity_Twitter_Keccak256); ok {
		return x.Keccak256
	}
	return nil
}

func (x *Identity_Twitter) GetShaThree256() *Identity_ShaThree256 {
	if x, ok := x.GetValue().(*Identity_Twitter_ShaThree256); ok {
		return x.ShaThree256
	}
	return nil
}

type isIdentity_Twitter_Value interface {
	isIdentity_Twitter_Value()
}

type Identity_Twitter_None struct {
	None *Identity_None `protobuf:"bytes,1,opt,name=none,proto3,oneof"`
}

type Identity_Twitter_Raw0 struct {
	Raw0 *Identity_Raw0 `protobuf:"bytes,2,opt,name=raw0,proto3,oneof"`
}

type Identity_Twitter_Raw1 struct {
	Raw1 *Identity_Raw1 `protobuf:"bytes,3,opt,name=raw1,proto3,oneof"`
}

type Identity_Twitter_Raw2 struct {
	Raw2 *Identity_Raw2 `protobuf:"bytes,4,opt,name=raw2,proto3,oneof"`
}

type Identity_Twitter_Raw3 struct {
	Raw3 *Identity_Raw3 `protobuf:"bytes,5,opt,name=raw3,proto3,oneof"`
}

type Identity_Twitter_Raw4 struct {
	Raw4 *Identity_Raw4 `protobuf:"bytes,6,opt,name=raw4,proto3,oneof"`
}

type Identity_Twitter_Raw5 struct {
	Raw5 *Identity_Raw5 `protobuf:"bytes,7,opt,name=raw5,proto3,oneof"`
}

type Identity_Twitter_Raw6 struct {
	Raw6 *Identity_Raw6 `protobuf:"bytes,8,opt,name=raw6,proto3,oneof"`
}

type Identity_Twitter_Raw7 struct {
	Raw7 *Identity_Raw7 `protobuf:"bytes,9,opt,name=raw7,proto3,oneof"`
}

type Identity_Twitter_Raw8 struct {
	Raw8 *Identity_Raw8 `protobuf:"bytes,10,opt,name=raw8,proto3,oneof"`
}

type Identity_Twitter_Raw9 struct {
	Raw9 *Identity_Raw9 `protobuf:"bytes,11,opt,name=raw9,proto3,oneof"`
}

type Identity_Twitter_Raw10 struct {
	Raw10 *Identity_Raw10 `protobuf:"bytes,12,opt,name=raw10,proto3,oneof"`
}

type Identity_Twitter_Raw11 struct {
	Raw11 *Identity_Raw11 `protobuf:"bytes,13,opt,name=raw11,proto3,oneof"`
}

type Identity_Twitter_Raw12 struct {
	Raw12 *Identity_Raw12 `protobuf:"bytes,14,opt,name=raw12,proto3,oneof"`
}

type Identity_Twitter_Raw13 struct {
	Raw13 *Identity_Raw13 `protobuf:"bytes,15,opt,name=raw13,proto3,oneof"`
}

type Identity_Twitter_Raw14 struct {
	Raw14 *Identity_Raw14 `protobuf:"bytes,16,opt,name=raw14,proto3,oneof"`
}

type Identity_Twitter_Raw15 struct {
	Raw15 *Identity_Raw15 `protobuf:"bytes,17,opt,name=raw15,proto3,oneof"`
}

type Identity_Twitter_Raw16 struct {
	Raw16 *Identity_Raw16 `protobuf:"bytes,18,opt,name=raw16,proto3,oneof"`
}

type Identity_Twitter_Raw17 struct {
	Raw17 *Identity_Raw17 `protobuf:"bytes,19,opt,name=raw17,proto3,oneof"`
}

type Identity_Twitter_Raw18 struct {
	Raw18 *Identity_Raw18 `protobuf:"bytes,20,opt,name=raw18,proto3,oneof"`
}

type Identity_Twitter_Raw19 struct {
	Raw19 *Identity_Raw19 `protobuf:"bytes,21,opt,name=raw19,proto3,oneof"`
}

type Identity_Twitter_Raw20 struct {
	Raw20 *Identity_Raw20 `protobuf:"bytes,22,opt,name=raw20,proto3,oneof"`
}

type Identity_Twitter_Raw21 struct {
	Raw21 *Identity_Raw21 `protobuf:"bytes,23,opt,name=raw21,proto3,oneof"`
}

type Identity_Twitter_Raw22 struct {
	Raw22 *Identity_Raw22 `protobuf:"bytes,24,opt,name=raw22,proto3,oneof"`
}

type Identity_Twitter_Raw23 struct {
	Raw23 *Identity_Raw23 `protobuf:"bytes,25,opt,name=raw23,proto3,oneof"`
}

type Identity_Twitter_Raw24 struct {
	Raw24 *Identity_Raw24 `protobuf:"bytes,26,opt,name=raw24,proto3,oneof"`
}

type Identity_Twitter_Raw25 struct {
	Raw25 *Identity_Raw25 `protobuf:"bytes,27,opt,name=raw25,proto3,oneof"`
}

type Identity_Twitter_Raw26 struct {
	Raw26 *Identity_Raw26 `protobuf:"bytes,28,opt,name=raw26,proto3,oneof"`
}

type Identity_Twitter_Raw27 struct {
	Raw27 *Identity_Raw27 `protobuf:"bytes,29,opt,name=raw27,proto3,oneof"`
}

type Identity_Twitter_Raw28 struct {
	Raw28 *Identity_Raw28 `protobuf:"bytes,30,opt,name=raw28,proto3,oneof"`
}

type Identity_Twitter_Raw29 struct {
	Raw29 *Identity_Raw29 `protobuf:"bytes,31,opt,name=raw29,proto3,oneof"`
}

type Identity_Twitter_Raw30 struct {
	Raw30 *Identity_Raw30 `protobuf:"bytes,32,opt,name=raw30,proto3,oneof"`
}

type Identity_Twitter_Raw31 struct {
	Raw31 *Identity_Raw31 `protobuf:"bytes,33,opt,name=raw31,proto3,oneof"`
}

type Identity_Twitter_Raw32 struct {
	Raw32 *Identity_Raw32 `protobuf:"bytes,34,opt,name=raw32,proto3,oneof"`
}

type Identity_Twitter_BlakeTwo256 struct {
	BlakeTwo256 *Identity_BlakeTwo256 `protobuf:"bytes,35,opt,name=blake_two256,json=blakeTwo256,proto3,oneof"`
}

type Identity_Twitter_Sha256 struct {
	Sha256 *Identity_Sha256 `protobuf:"bytes,36,opt,name=sha256,proto3,oneof"`
}

type Identity_Twitter_Keccak256 struct {
	Keccak256 *Identity_Keccak256 `protobuf:"bytes,37,opt,name=keccak256,proto3,oneof"`
}

type Identity_Twitter_ShaThree256 struct {
	ShaThree256 *Identity_ShaThree256 `protobuf:"bytes,38,opt,name=sha_three256,json=shaThree256,proto3,oneof"`
}

func (*Identity_Twitter_None) isIdentity_Twitter_Value() {}

func (*Identity_Twitter_Raw0) isIdentity_Twitter_Value() {}

func (*Identity_Twitter_Raw1) isIdentity_Twitter_Value() {}

func (*Identity_Twitter_Raw2) isIdentity_Twitter_Value() {}

func (*Identity_Twitter_Raw3) isIdentity_Twitter_Value() {}

func (*Identity_Twitter_Raw4) isIdentity_Twitter_Value() {}

func (*Identity_Twitter_Raw5) isIdentity_Twitter_Value() {}

func (*Identity_Twitter_Raw6) isIdentity_Twitter_Value() {}

func (*Identity_Twitter_Raw7) isIdentity_Twitter_Value() {}

func (*Identity_Twitter_Raw8) isIdentity_Twitter_Value() {}

func (*Identity_Twitter_Raw9) isIdentity_Twitter_Value() {}

func (*Identity_Twitter_Raw10) isIdentity_Twitter_Value() {}

func (*Identity_Twitter_Raw11) isIdentity_Twitter_Value() {}

func (*Identity_Twitter_Raw12) isIdentity_Twitter_Value() {}

func (*Identity_Twitter_Raw13) isIdentity_Twitter_Value() {}

func (*Identity_Twitter_Raw14) isIdentity_Twitter_Value() {}

func (*Identity_Twitter_Raw15) isIdentity_Twitter_Value() {}

func (*Identity_Twitter_Raw16) isIdentity_Twitter_Value() {}

func (*Identity_Twitter_Raw17) isIdentity_Twitter_Value() {}

func (*Identity_Twitter_Raw18) isIdentity_Twitter_Value() {}

func (*Identity_Twitter_Raw19) isIdentity_Twitter_Value() {}

func (*Identity_Twitter_Raw20) isIdentity_Twitter_Value() {}

func (*Identity_Twitter_Raw21) isIdentity_Twitter_Value() {}

func (*Identity_Twitter_Raw22) isIdentity_Twitter_Value() {}

func (*Identity_Twitter_Raw23) isIdentity_Twitter_Value() {}

func (*Identity_Twitter_Raw24) isIdentity_Twitter_Value() {}

func (*Identity_Twitter_Raw25) isIdentity_Twitter_Value() {}

func (*Identity_Twitter_Raw26) isIdentity_Twitter_Value() {}

func (*Identity_Twitter_Raw27) isIdentity_Twitter_Value() {}

func (*Identity_Twitter_Raw28) isIdentity_Twitter_Value() {}

func (*Identity_Twitter_Raw29) isIdentity_Twitter_Value() {}

func (*Identity_Twitter_Raw30) isIdentity_Twitter_Value() {}

func (*Identity_Twitter_Raw31) isIdentity_Twitter_Value() {}

func (*Identity_Twitter_Raw32) isIdentity_Twitter_Value() {}

func (*Identity_Twitter_BlakeTwo256) isIdentity_Twitter_Value() {}

func (*Identity_Twitter_Sha256) isIdentity_Twitter_Value() {}

func (*Identity_Twitter_Keccak256) isIdentity_Twitter_Value() {}

func (*Identity_Twitter_ShaThree256) isIdentity_Twitter_Value() {}

type Identity_OutOfDate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Identity_OutOfDate) Reset() {
	*x = Identity_OutOfDate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[224]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_OutOfDate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_OutOfDate) ProtoMessage() {}

func (x *Identity_OutOfDate) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[224]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_OutOfDate.ProtoReflect.Descriptor instead.
func (*Identity_OutOfDate) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{224}
}

type Babe_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*Babe_Config_V1
	Value isBabe_Config_Value `protobuf_oneof:"value"`
}

func (x *Babe_Config) Reset() {
	*x = Babe_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[225]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Babe_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Babe_Config) ProtoMessage() {}

func (x *Babe_Config) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[225]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Babe_Config.ProtoReflect.Descriptor instead.
func (*Babe_Config) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{225}
}

func (m *Babe_Config) GetValue() isBabe_Config_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Babe_Config) GetV1() *Babe_V1 {
	if x, ok := x.GetValue().(*Babe_Config_V1); ok {
		return x.V1
	}
	return nil
}

type isBabe_Config_Value interface {
	isBabe_Config_Value()
}

type Babe_Config_V1 struct {
	V1 *Babe_V1 `protobuf:"bytes,1,opt,name=v1,proto3,oneof"`
}

func (*Babe_Config_V1) isBabe_Config_Value() {}

type Treasury_Raw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Treasury_Raw) Reset() {
	*x = Treasury_Raw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[226]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Treasury_Raw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Treasury_Raw) ProtoMessage() {}

func (x *Treasury_Raw) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[226]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Treasury_Raw.ProtoReflect.Descriptor instead.
func (*Treasury_Raw) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{226}
}

func (x *Treasury_Raw) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type FellowshipCollective_Id struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 *SpCoreCryptoAccountId32 `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *FellowshipCollective_Id) Reset() {
	*x = FellowshipCollective_Id{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[227]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FellowshipCollective_Id) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FellowshipCollective_Id) ProtoMessage() {}

func (x *FellowshipCollective_Id) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[227]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FellowshipCollective_Id.ProtoReflect.Descriptor instead.
func (*FellowshipCollective_Id) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{227}
}

func (x *FellowshipCollective_Id) GetValue0() *SpCoreCryptoAccountId32 {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Scheduler_ScheduleNamedAfterCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            []byte                       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	After         uint32                       `protobuf:"varint,2,opt,name=after,proto3" json:"after,omitempty"`
	MaybePeriodic *Scheduler_TupleUint32Uint32 `protobuf:"bytes,3,opt,name=maybe_periodic,json=maybePeriodic,proto3,oneof" json:"maybe_periodic,omitempty"`
	Priority      uint32                       `protobuf:"varint,4,opt,name=priority,proto3" json:"priority,omitempty"`
	// Types that are assignable to Call:
	//
	//	*Scheduler_ScheduleNamedAfterCall_System
	//	*Scheduler_ScheduleNamedAfterCall_Timestamp
	//	*Scheduler_ScheduleNamedAfterCall_Babe
	//	*Scheduler_ScheduleNamedAfterCall_Grandpa
	//	*Scheduler_ScheduleNamedAfterCall_Balances
	//	*Scheduler_ScheduleNamedAfterCall_Vesting
	//	*Scheduler_ScheduleNamedAfterCall_BagsList
	//	*Scheduler_ScheduleNamedAfterCall_ImOnline
	//	*Scheduler_ScheduleNamedAfterCall_Staking
	//	*Scheduler_ScheduleNamedAfterCall_Session
	//	*Scheduler_ScheduleNamedAfterCall_Treasury
	//	*Scheduler_ScheduleNamedAfterCall_Utility
	//	*Scheduler_ScheduleNamedAfterCall_ConvictionVoting
	//	*Scheduler_ScheduleNamedAfterCall_Referenda
	//	*Scheduler_ScheduleNamedAfterCall_FellowshipCollective
	//	*Scheduler_ScheduleNamedAfterCall_FellowshipReferenda
	//	*Scheduler_ScheduleNamedAfterCall_Whitelist
	//	*Scheduler_ScheduleNamedAfterCall_Scheduler
	//	*Scheduler_ScheduleNamedAfterCall_Preimage
	//	*Scheduler_ScheduleNamedAfterCall_Identity
	//	*Scheduler_ScheduleNamedAfterCall_Proxy
	//	*Scheduler_ScheduleNamedAfterCall_Multisig
	//	*Scheduler_ScheduleNamedAfterCall_ElectionProviderMultiPhase
	//	*Scheduler_ScheduleNamedAfterCall_Bounties
	//	*Scheduler_ScheduleNamedAfterCall_ChildBounties
	//	*Scheduler_ScheduleNamedAfterCall_NominationPools
	//	*Scheduler_ScheduleNamedAfterCall_Gear
	//	*Scheduler_ScheduleNamedAfterCall_StakingRewards
	//	*Scheduler_ScheduleNamedAfterCall_GearVoucher
	Call isScheduler_ScheduleNamedAfterCall_Call `protobuf_oneof:"call"`
}

func (x *Scheduler_ScheduleNamedAfterCall) Reset() {
	*x = Scheduler_ScheduleNamedAfterCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[228]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scheduler_ScheduleNamedAfterCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scheduler_ScheduleNamedAfterCall) ProtoMessage() {}

func (x *Scheduler_ScheduleNamedAfterCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[228]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scheduler_ScheduleNamedAfterCall.ProtoReflect.Descriptor instead.
func (*Scheduler_ScheduleNamedAfterCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{228}
}

func (x *Scheduler_ScheduleNamedAfterCall) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Scheduler_ScheduleNamedAfterCall) GetAfter() uint32 {
	if x != nil {
		return x.After
	}
	return 0
}

func (x *Scheduler_ScheduleNamedAfterCall) GetMaybePeriodic() *Scheduler_TupleUint32Uint32 {
	if x != nil {
		return x.MaybePeriodic
	}
	return nil
}

func (x *Scheduler_ScheduleNamedAfterCall) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (m *Scheduler_ScheduleNamedAfterCall) GetCall() isScheduler_ScheduleNamedAfterCall_Call {
	if m != nil {
		return m.Call
	}
	return nil
}

func (x *Scheduler_ScheduleNamedAfterCall) GetSystem() *SystemPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleNamedAfterCall_System); ok {
		return x.System
	}
	return nil
}

func (x *Scheduler_ScheduleNamedAfterCall) GetTimestamp() *TimestampPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleNamedAfterCall_Timestamp); ok {
		return x.Timestamp
	}
	return nil
}

func (x *Scheduler_ScheduleNamedAfterCall) GetBabe() *BabePallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleNamedAfterCall_Babe); ok {
		return x.Babe
	}
	return nil
}

func (x *Scheduler_ScheduleNamedAfterCall) GetGrandpa() *GrandpaPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleNamedAfterCall_Grandpa); ok {
		return x.Grandpa
	}
	return nil
}

func (x *Scheduler_ScheduleNamedAfterCall) GetBalances() *BalancesPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleNamedAfterCall_Balances); ok {
		return x.Balances
	}
	return nil
}

func (x *Scheduler_ScheduleNamedAfterCall) GetVesting() *VestingPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleNamedAfterCall_Vesting); ok {
		return x.Vesting
	}
	return nil
}

func (x *Scheduler_ScheduleNamedAfterCall) GetBagsList() *BagsListPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleNamedAfterCall_BagsList); ok {
		return x.BagsList
	}
	return nil
}

func (x *Scheduler_ScheduleNamedAfterCall) GetImOnline() *ImOnlinePallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleNamedAfterCall_ImOnline); ok {
		return x.ImOnline
	}
	return nil
}

func (x *Scheduler_ScheduleNamedAfterCall) GetStaking() *StakingPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleNamedAfterCall_Staking); ok {
		return x.Staking
	}
	return nil
}

func (x *Scheduler_ScheduleNamedAfterCall) GetSession() *SessionPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleNamedAfterCall_Session); ok {
		return x.Session
	}
	return nil
}

func (x *Scheduler_ScheduleNamedAfterCall) GetTreasury() *TreasuryPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleNamedAfterCall_Treasury); ok {
		return x.Treasury
	}
	return nil
}

func (x *Scheduler_ScheduleNamedAfterCall) GetUtility() *UtilityPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleNamedAfterCall_Utility); ok {
		return x.Utility
	}
	return nil
}

func (x *Scheduler_ScheduleNamedAfterCall) GetConvictionVoting() *ConvictionVotingPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleNamedAfterCall_ConvictionVoting); ok {
		return x.ConvictionVoting
	}
	return nil
}

func (x *Scheduler_ScheduleNamedAfterCall) GetReferenda() *ReferendaPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleNamedAfterCall_Referenda); ok {
		return x.Referenda
	}
	return nil
}

func (x *Scheduler_ScheduleNamedAfterCall) GetFellowshipCollective() *FellowshipCollectivePallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleNamedAfterCall_FellowshipCollective); ok {
		return x.FellowshipCollective
	}
	return nil
}

func (x *Scheduler_ScheduleNamedAfterCall) GetFellowshipReferenda() *FellowshipReferendaPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleNamedAfterCall_FellowshipReferenda); ok {
		return x.FellowshipReferenda
	}
	return nil
}

func (x *Scheduler_ScheduleNamedAfterCall) GetWhitelist() *WhitelistPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleNamedAfterCall_Whitelist); ok {
		return x.Whitelist
	}
	return nil
}

func (x *Scheduler_ScheduleNamedAfterCall) GetScheduler() *SchedulerPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleNamedAfterCall_Scheduler); ok {
		return x.Scheduler
	}
	return nil
}

func (x *Scheduler_ScheduleNamedAfterCall) GetPreimage() *PreimagePallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleNamedAfterCall_Preimage); ok {
		return x.Preimage
	}
	return nil
}

func (x *Scheduler_ScheduleNamedAfterCall) GetIdentity() *IdentityPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleNamedAfterCall_Identity); ok {
		return x.Identity
	}
	return nil
}

func (x *Scheduler_ScheduleNamedAfterCall) GetProxy() *ProxyPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleNamedAfterCall_Proxy); ok {
		return x.Proxy
	}
	return nil
}

func (x *Scheduler_ScheduleNamedAfterCall) GetMultisig() *MultisigPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleNamedAfterCall_Multisig); ok {
		return x.Multisig
	}
	return nil
}

func (x *Scheduler_ScheduleNamedAfterCall) GetElectionProviderMultiPhase() *ElectionProviderMultiPhasePallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleNamedAfterCall_ElectionProviderMultiPhase); ok {
		return x.ElectionProviderMultiPhase
	}
	return nil
}

func (x *Scheduler_ScheduleNamedAfterCall) GetBounties() *BountiesPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleNamedAfterCall_Bounties); ok {
		return x.Bounties
	}
	return nil
}

func (x *Scheduler_ScheduleNamedAfterCall) GetChildBounties() *ChildBountiesPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleNamedAfterCall_ChildBounties); ok {
		return x.ChildBounties
	}
	return nil
}

func (x *Scheduler_ScheduleNamedAfterCall) GetNominationPools() *NominationPoolsPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleNamedAfterCall_NominationPools); ok {
		return x.NominationPools
	}
	return nil
}

func (x *Scheduler_ScheduleNamedAfterCall) GetGear() *GearPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleNamedAfterCall_Gear); ok {
		return x.Gear
	}
	return nil
}

func (x *Scheduler_ScheduleNamedAfterCall) GetStakingRewards() *StakingRewardsPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleNamedAfterCall_StakingRewards); ok {
		return x.StakingRewards
	}
	return nil
}

func (x *Scheduler_ScheduleNamedAfterCall) GetGearVoucher() *GearVoucherPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleNamedAfterCall_GearVoucher); ok {
		return x.GearVoucher
	}
	return nil
}

type isScheduler_ScheduleNamedAfterCall_Call interface {
	isScheduler_ScheduleNamedAfterCall_Call()
}

type Scheduler_ScheduleNamedAfterCall_System struct {
	System *SystemPallet `protobuf:"bytes,5,opt,name=system,proto3,oneof"`
}

type Scheduler_ScheduleNamedAfterCall_Timestamp struct {
	Timestamp *TimestampPallet `protobuf:"bytes,6,opt,name=timestamp,proto3,oneof"`
}

type Scheduler_ScheduleNamedAfterCall_Babe struct {
	Babe *BabePallet `protobuf:"bytes,7,opt,name=babe,proto3,oneof"`
}

type Scheduler_ScheduleNamedAfterCall_Grandpa struct {
	Grandpa *GrandpaPallet `protobuf:"bytes,8,opt,name=grandpa,proto3,oneof"`
}

type Scheduler_ScheduleNamedAfterCall_Balances struct {
	Balances *BalancesPallet `protobuf:"bytes,9,opt,name=balances,proto3,oneof"`
}

type Scheduler_ScheduleNamedAfterCall_Vesting struct {
	Vesting *VestingPallet `protobuf:"bytes,10,opt,name=vesting,proto3,oneof"`
}

type Scheduler_ScheduleNamedAfterCall_BagsList struct {
	BagsList *BagsListPallet `protobuf:"bytes,11,opt,name=bags_list,json=bagsList,proto3,oneof"`
}

type Scheduler_ScheduleNamedAfterCall_ImOnline struct {
	ImOnline *ImOnlinePallet `protobuf:"bytes,12,opt,name=im_online,json=imOnline,proto3,oneof"`
}

type Scheduler_ScheduleNamedAfterCall_Staking struct {
	Staking *StakingPallet `protobuf:"bytes,13,opt,name=staking,proto3,oneof"`
}

type Scheduler_ScheduleNamedAfterCall_Session struct {
	Session *SessionPallet `protobuf:"bytes,14,opt,name=session,proto3,oneof"`
}

type Scheduler_ScheduleNamedAfterCall_Treasury struct {
	Treasury *TreasuryPallet `protobuf:"bytes,15,opt,name=treasury,proto3,oneof"`
}

type Scheduler_ScheduleNamedAfterCall_Utility struct {
	Utility *UtilityPallet `protobuf:"bytes,16,opt,name=utility,proto3,oneof"`
}

type Scheduler_ScheduleNamedAfterCall_ConvictionVoting struct {
	ConvictionVoting *ConvictionVotingPallet `protobuf:"bytes,17,opt,name=conviction_voting,json=convictionVoting,proto3,oneof"`
}

type Scheduler_ScheduleNamedAfterCall_Referenda struct {
	Referenda *ReferendaPallet `protobuf:"bytes,18,opt,name=referenda,proto3,oneof"`
}

type Scheduler_ScheduleNamedAfterCall_FellowshipCollective struct {
	FellowshipCollective *FellowshipCollectivePallet `protobuf:"bytes,19,opt,name=fellowship_collective,json=fellowshipCollective,proto3,oneof"`
}

type Scheduler_ScheduleNamedAfterCall_FellowshipReferenda struct {
	FellowshipReferenda *FellowshipReferendaPallet `protobuf:"bytes,20,opt,name=fellowship_referenda,json=fellowshipReferenda,proto3,oneof"`
}

type Scheduler_ScheduleNamedAfterCall_Whitelist struct {
	Whitelist *WhitelistPallet `protobuf:"bytes,21,opt,name=whitelist,proto3,oneof"`
}

type Scheduler_ScheduleNamedAfterCall_Scheduler struct {
	Scheduler *SchedulerPallet `protobuf:"bytes,22,opt,name=scheduler,proto3,oneof"`
}

type Scheduler_ScheduleNamedAfterCall_Preimage struct {
	Preimage *PreimagePallet `protobuf:"bytes,23,opt,name=preimage,proto3,oneof"`
}

type Scheduler_ScheduleNamedAfterCall_Identity struct {
	Identity *IdentityPallet `protobuf:"bytes,24,opt,name=identity,proto3,oneof"`
}

type Scheduler_ScheduleNamedAfterCall_Proxy struct {
	Proxy *ProxyPallet `protobuf:"bytes,25,opt,name=proxy,proto3,oneof"`
}

type Scheduler_ScheduleNamedAfterCall_Multisig struct {
	Multisig *MultisigPallet `protobuf:"bytes,26,opt,name=multisig,proto3,oneof"`
}

type Scheduler_ScheduleNamedAfterCall_ElectionProviderMultiPhase struct {
	ElectionProviderMultiPhase *ElectionProviderMultiPhasePallet `protobuf:"bytes,27,opt,name=election_provider_multi_phase,json=electionProviderMultiPhase,proto3,oneof"`
}

type Scheduler_ScheduleNamedAfterCall_Bounties struct {
	Bounties *BountiesPallet `protobuf:"bytes,28,opt,name=bounties,proto3,oneof"`
}

type Scheduler_ScheduleNamedAfterCall_ChildBounties struct {
	ChildBounties *ChildBountiesPallet `protobuf:"bytes,29,opt,name=child_bounties,json=childBounties,proto3,oneof"`
}

type Scheduler_ScheduleNamedAfterCall_NominationPools struct {
	NominationPools *NominationPoolsPallet `protobuf:"bytes,30,opt,name=nomination_pools,json=nominationPools,proto3,oneof"`
}

type Scheduler_ScheduleNamedAfterCall_Gear struct {
	Gear *GearPallet `protobuf:"bytes,31,opt,name=gear,proto3,oneof"`
}

type Scheduler_ScheduleNamedAfterCall_StakingRewards struct {
	StakingRewards *StakingRewardsPallet `protobuf:"bytes,32,opt,name=staking_rewards,json=stakingRewards,proto3,oneof"`
}

type Scheduler_ScheduleNamedAfterCall_GearVoucher struct {
	GearVoucher *GearVoucherPallet `protobuf:"bytes,33,opt,name=gear_voucher,json=gearVoucher,proto3,oneof"`
}

func (*Scheduler_ScheduleNamedAfterCall_System) isScheduler_ScheduleNamedAfterCall_Call() {}

func (*Scheduler_ScheduleNamedAfterCall_Timestamp) isScheduler_ScheduleNamedAfterCall_Call() {}

func (*Scheduler_ScheduleNamedAfterCall_Babe) isScheduler_ScheduleNamedAfterCall_Call() {}

func (*Scheduler_ScheduleNamedAfterCall_Grandpa) isScheduler_ScheduleNamedAfterCall_Call() {}

func (*Scheduler_ScheduleNamedAfterCall_Balances) isScheduler_ScheduleNamedAfterCall_Call() {}

func (*Scheduler_ScheduleNamedAfterCall_Vesting) isScheduler_ScheduleNamedAfterCall_Call() {}

func (*Scheduler_ScheduleNamedAfterCall_BagsList) isScheduler_ScheduleNamedAfterCall_Call() {}

func (*Scheduler_ScheduleNamedAfterCall_ImOnline) isScheduler_ScheduleNamedAfterCall_Call() {}

func (*Scheduler_ScheduleNamedAfterCall_Staking) isScheduler_ScheduleNamedAfterCall_Call() {}

func (*Scheduler_ScheduleNamedAfterCall_Session) isScheduler_ScheduleNamedAfterCall_Call() {}

func (*Scheduler_ScheduleNamedAfterCall_Treasury) isScheduler_ScheduleNamedAfterCall_Call() {}

func (*Scheduler_ScheduleNamedAfterCall_Utility) isScheduler_ScheduleNamedAfterCall_Call() {}

func (*Scheduler_ScheduleNamedAfterCall_ConvictionVoting) isScheduler_ScheduleNamedAfterCall_Call() {}

func (*Scheduler_ScheduleNamedAfterCall_Referenda) isScheduler_ScheduleNamedAfterCall_Call() {}

func (*Scheduler_ScheduleNamedAfterCall_FellowshipCollective) isScheduler_ScheduleNamedAfterCall_Call() {
}

func (*Scheduler_ScheduleNamedAfterCall_FellowshipReferenda) isScheduler_ScheduleNamedAfterCall_Call() {
}

func (*Scheduler_ScheduleNamedAfterCall_Whitelist) isScheduler_ScheduleNamedAfterCall_Call() {}

func (*Scheduler_ScheduleNamedAfterCall_Scheduler) isScheduler_ScheduleNamedAfterCall_Call() {}

func (*Scheduler_ScheduleNamedAfterCall_Preimage) isScheduler_ScheduleNamedAfterCall_Call() {}

func (*Scheduler_ScheduleNamedAfterCall_Identity) isScheduler_ScheduleNamedAfterCall_Call() {}

func (*Scheduler_ScheduleNamedAfterCall_Proxy) isScheduler_ScheduleNamedAfterCall_Call() {}

func (*Scheduler_ScheduleNamedAfterCall_Multisig) isScheduler_ScheduleNamedAfterCall_Call() {}

func (*Scheduler_ScheduleNamedAfterCall_ElectionProviderMultiPhase) isScheduler_ScheduleNamedAfterCall_Call() {
}

func (*Scheduler_ScheduleNamedAfterCall_Bounties) isScheduler_ScheduleNamedAfterCall_Call() {}

func (*Scheduler_ScheduleNamedAfterCall_ChildBounties) isScheduler_ScheduleNamedAfterCall_Call() {}

func (*Scheduler_ScheduleNamedAfterCall_NominationPools) isScheduler_ScheduleNamedAfterCall_Call() {}

func (*Scheduler_ScheduleNamedAfterCall_Gear) isScheduler_ScheduleNamedAfterCall_Call() {}

func (*Scheduler_ScheduleNamedAfterCall_StakingRewards) isScheduler_ScheduleNamedAfterCall_Call() {}

func (*Scheduler_ScheduleNamedAfterCall_GearVoucher) isScheduler_ScheduleNamedAfterCall_Call() {}

type Preimage_UnrequestPreimageCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash *PrimitiveTypesH256 `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *Preimage_UnrequestPreimageCall) Reset() {
	*x = Preimage_UnrequestPreimageCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[229]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Preimage_UnrequestPreimageCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Preimage_UnrequestPreimageCall) ProtoMessage() {}

func (x *Preimage_UnrequestPreimageCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[229]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Preimage_UnrequestPreimageCall.ProtoReflect.Descriptor instead.
func (*Preimage_UnrequestPreimageCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{229}
}

func (x *Preimage_UnrequestPreimageCall) GetHash() *PrimitiveTypesH256 {
	if x != nil {
		return x.Hash
	}
	return nil
}

type ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes3Listuint32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 uint32                                                               `protobuf:"varint,1,opt,name=value0,proto3" json:"value0,omitempty"`
	Value1 []*ElectionProviderMultiPhase_TupleUint32SpArithmeticPerThingsPerU16 `protobuf:"bytes,2,rep,name=value1,proto3" json:"value1,omitempty"`
	Value2 uint32                                                               `protobuf:"varint,3,opt,name=value2,proto3" json:"value2,omitempty"`
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes3Listuint32) Reset() {
	*x = ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes3Listuint32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[230]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes3Listuint32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes3Listuint32) ProtoMessage() {
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes3Listuint32) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[230]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes3Listuint32.ProtoReflect.Descriptor instead.
func (*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes3Listuint32) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{230}
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes3Listuint32) GetValue0() uint32 {
	if x != nil {
		return x.Value0
	}
	return 0
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes3Listuint32) GetValue1() []*ElectionProviderMultiPhase_TupleUint32SpArithmeticPerThingsPerU16 {
	if x != nil {
		return x.Value1
	}
	return nil
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes3Listuint32) GetValue2() uint32 {
	if x != nil {
		return x.Value2
	}
	return 0
}

type System_SetCodeWithoutChecksCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code []byte `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *System_SetCodeWithoutChecksCall) Reset() {
	*x = System_SetCodeWithoutChecksCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[231]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_SetCodeWithoutChecksCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_SetCodeWithoutChecksCall) ProtoMessage() {}

func (x *System_SetCodeWithoutChecksCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[231]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_SetCodeWithoutChecksCall.ProtoReflect.Descriptor instead.
func (*System_SetCodeWithoutChecksCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{231}
}

func (x *System_SetCodeWithoutChecksCall) GetCode() []byte {
	if x != nil {
		return x.Code
	}
	return nil
}

type Balances_Address32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Balances_Address32) Reset() {
	*x = Balances_Address32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[232]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Balances_Address32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Balances_Address32) ProtoMessage() {}

func (x *Balances_Address32) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[232]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Balances_Address32.ProtoReflect.Descriptor instead.
func (*Balances_Address32) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{232}
}

func (x *Balances_Address32) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type ChildBounties_Id struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 *SpCoreCryptoAccountId32 `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *ChildBounties_Id) Reset() {
	*x = ChildBounties_Id{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[233]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChildBounties_Id) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChildBounties_Id) ProtoMessage() {}

func (x *ChildBounties_Id) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[233]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChildBounties_Id.ProtoReflect.Descriptor instead.
func (*ChildBounties_Id) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{233}
}

func (x *ChildBounties_Id) GetValue0() *SpCoreCryptoAccountId32 {
	if x != nil {
		return x.Value0
	}
	return nil
}

type StakingRewards_Address20 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *StakingRewards_Address20) Reset() {
	*x = StakingRewards_Address20{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[234]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakingRewards_Address20) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakingRewards_Address20) ProtoMessage() {}

func (x *StakingRewards_Address20) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[234]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakingRewards_Address20.ProtoReflect.Descriptor instead.
func (*StakingRewards_Address20) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{234}
}

func (x *StakingRewards_Address20) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type ConvictionVoting_Locked1X struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConvictionVoting_Locked1X) Reset() {
	*x = ConvictionVoting_Locked1X{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[235]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConvictionVoting_Locked1X) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvictionVoting_Locked1X) ProtoMessage() {}

func (x *ConvictionVoting_Locked1X) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[235]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvictionVoting_Locked1X.ProtoReflect.Descriptor instead.
func (*ConvictionVoting_Locked1X) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{235}
}

type FellowshipCollective_RemoveMemberCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Who     *FellowshipCollective_Who `protobuf:"bytes,1,opt,name=who,proto3" json:"who,omitempty"`
	MinRank uint32                    `protobuf:"varint,2,opt,name=min_rank,json=minRank,proto3" json:"min_rank,omitempty"`
}

func (x *FellowshipCollective_RemoveMemberCall) Reset() {
	*x = FellowshipCollective_RemoveMemberCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[236]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FellowshipCollective_RemoveMemberCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FellowshipCollective_RemoveMemberCall) ProtoMessage() {}

func (x *FellowshipCollective_RemoveMemberCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[236]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FellowshipCollective_RemoveMemberCall.ProtoReflect.Descriptor instead.
func (*FellowshipCollective_RemoveMemberCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{236}
}

func (x *FellowshipCollective_RemoveMemberCall) GetWho() *FellowshipCollective_Who {
	if x != nil {
		return x.Who
	}
	return nil
}

func (x *FellowshipCollective_RemoveMemberCall) GetMinRank() uint32 {
	if x != nil {
		return x.MinRank
	}
	return 0
}

type Identity_Raw16 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Identity_Raw16) Reset() {
	*x = Identity_Raw16{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[237]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_Raw16) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_Raw16) ProtoMessage() {}

func (x *Identity_Raw16) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[237]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_Raw16.ProtoReflect.Descriptor instead.
func (*Identity_Raw16) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{237}
}

func (x *Identity_Raw16) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Identity_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*Identity_Data_None
	//	*Identity_Data_Raw0
	//	*Identity_Data_Raw1
	//	*Identity_Data_Raw2
	//	*Identity_Data_Raw3
	//	*Identity_Data_Raw4
	//	*Identity_Data_Raw5
	//	*Identity_Data_Raw6
	//	*Identity_Data_Raw7
	//	*Identity_Data_Raw8
	//	*Identity_Data_Raw9
	//	*Identity_Data_Raw10
	//	*Identity_Data_Raw11
	//	*Identity_Data_Raw12
	//	*Identity_Data_Raw13
	//	*Identity_Data_Raw14
	//	*Identity_Data_Raw15
	//	*Identity_Data_Raw16
	//	*Identity_Data_Raw17
	//	*Identity_Data_Raw18
	//	*Identity_Data_Raw19
	//	*Identity_Data_Raw20
	//	*Identity_Data_Raw21
	//	*Identity_Data_Raw22
	//	*Identity_Data_Raw23
	//	*Identity_Data_Raw24
	//	*Identity_Data_Raw25
	//	*Identity_Data_Raw26
	//	*Identity_Data_Raw27
	//	*Identity_Data_Raw28
	//	*Identity_Data_Raw29
	//	*Identity_Data_Raw30
	//	*Identity_Data_Raw31
	//	*Identity_Data_Raw32
	//	*Identity_Data_BlakeTwo256
	//	*Identity_Data_Sha256
	//	*Identity_Data_Keccak256
	//	*Identity_Data_ShaThree256
	Value isIdentity_Data_Value `protobuf_oneof:"value"`
}

func (x *Identity_Data) Reset() {
	*x = Identity_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[238]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_Data) ProtoMessage() {}

func (x *Identity_Data) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[238]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_Data.ProtoReflect.Descriptor instead.
func (*Identity_Data) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{238}
}

func (m *Identity_Data) GetValue() isIdentity_Data_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Identity_Data) GetNone() *Identity_None {
	if x, ok := x.GetValue().(*Identity_Data_None); ok {
		return x.None
	}
	return nil
}

func (x *Identity_Data) GetRaw0() *Identity_Raw0 {
	if x, ok := x.GetValue().(*Identity_Data_Raw0); ok {
		return x.Raw0
	}
	return nil
}

func (x *Identity_Data) GetRaw1() *Identity_Raw1 {
	if x, ok := x.GetValue().(*Identity_Data_Raw1); ok {
		return x.Raw1
	}
	return nil
}

func (x *Identity_Data) GetRaw2() *Identity_Raw2 {
	if x, ok := x.GetValue().(*Identity_Data_Raw2); ok {
		return x.Raw2
	}
	return nil
}

func (x *Identity_Data) GetRaw3() *Identity_Raw3 {
	if x, ok := x.GetValue().(*Identity_Data_Raw3); ok {
		return x.Raw3
	}
	return nil
}

func (x *Identity_Data) GetRaw4() *Identity_Raw4 {
	if x, ok := x.GetValue().(*Identity_Data_Raw4); ok {
		return x.Raw4
	}
	return nil
}

func (x *Identity_Data) GetRaw5() *Identity_Raw5 {
	if x, ok := x.GetValue().(*Identity_Data_Raw5); ok {
		return x.Raw5
	}
	return nil
}

func (x *Identity_Data) GetRaw6() *Identity_Raw6 {
	if x, ok := x.GetValue().(*Identity_Data_Raw6); ok {
		return x.Raw6
	}
	return nil
}

func (x *Identity_Data) GetRaw7() *Identity_Raw7 {
	if x, ok := x.GetValue().(*Identity_Data_Raw7); ok {
		return x.Raw7
	}
	return nil
}

func (x *Identity_Data) GetRaw8() *Identity_Raw8 {
	if x, ok := x.GetValue().(*Identity_Data_Raw8); ok {
		return x.Raw8
	}
	return nil
}

func (x *Identity_Data) GetRaw9() *Identity_Raw9 {
	if x, ok := x.GetValue().(*Identity_Data_Raw9); ok {
		return x.Raw9
	}
	return nil
}

func (x *Identity_Data) GetRaw10() *Identity_Raw10 {
	if x, ok := x.GetValue().(*Identity_Data_Raw10); ok {
		return x.Raw10
	}
	return nil
}

func (x *Identity_Data) GetRaw11() *Identity_Raw11 {
	if x, ok := x.GetValue().(*Identity_Data_Raw11); ok {
		return x.Raw11
	}
	return nil
}

func (x *Identity_Data) GetRaw12() *Identity_Raw12 {
	if x, ok := x.GetValue().(*Identity_Data_Raw12); ok {
		return x.Raw12
	}
	return nil
}

func (x *Identity_Data) GetRaw13() *Identity_Raw13 {
	if x, ok := x.GetValue().(*Identity_Data_Raw13); ok {
		return x.Raw13
	}
	return nil
}

func (x *Identity_Data) GetRaw14() *Identity_Raw14 {
	if x, ok := x.GetValue().(*Identity_Data_Raw14); ok {
		return x.Raw14
	}
	return nil
}

func (x *Identity_Data) GetRaw15() *Identity_Raw15 {
	if x, ok := x.GetValue().(*Identity_Data_Raw15); ok {
		return x.Raw15
	}
	return nil
}

func (x *Identity_Data) GetRaw16() *Identity_Raw16 {
	if x, ok := x.GetValue().(*Identity_Data_Raw16); ok {
		return x.Raw16
	}
	return nil
}

func (x *Identity_Data) GetRaw17() *Identity_Raw17 {
	if x, ok := x.GetValue().(*Identity_Data_Raw17); ok {
		return x.Raw17
	}
	return nil
}

func (x *Identity_Data) GetRaw18() *Identity_Raw18 {
	if x, ok := x.GetValue().(*Identity_Data_Raw18); ok {
		return x.Raw18
	}
	return nil
}

func (x *Identity_Data) GetRaw19() *Identity_Raw19 {
	if x, ok := x.GetValue().(*Identity_Data_Raw19); ok {
		return x.Raw19
	}
	return nil
}

func (x *Identity_Data) GetRaw20() *Identity_Raw20 {
	if x, ok := x.GetValue().(*Identity_Data_Raw20); ok {
		return x.Raw20
	}
	return nil
}

func (x *Identity_Data) GetRaw21() *Identity_Raw21 {
	if x, ok := x.GetValue().(*Identity_Data_Raw21); ok {
		return x.Raw21
	}
	return nil
}

func (x *Identity_Data) GetRaw22() *Identity_Raw22 {
	if x, ok := x.GetValue().(*Identity_Data_Raw22); ok {
		return x.Raw22
	}
	return nil
}

func (x *Identity_Data) GetRaw23() *Identity_Raw23 {
	if x, ok := x.GetValue().(*Identity_Data_Raw23); ok {
		return x.Raw23
	}
	return nil
}

func (x *Identity_Data) GetRaw24() *Identity_Raw24 {
	if x, ok := x.GetValue().(*Identity_Data_Raw24); ok {
		return x.Raw24
	}
	return nil
}

func (x *Identity_Data) GetRaw25() *Identity_Raw25 {
	if x, ok := x.GetValue().(*Identity_Data_Raw25); ok {
		return x.Raw25
	}
	return nil
}

func (x *Identity_Data) GetRaw26() *Identity_Raw26 {
	if x, ok := x.GetValue().(*Identity_Data_Raw26); ok {
		return x.Raw26
	}
	return nil
}

func (x *Identity_Data) GetRaw27() *Identity_Raw27 {
	if x, ok := x.GetValue().(*Identity_Data_Raw27); ok {
		return x.Raw27
	}
	return nil
}

func (x *Identity_Data) GetRaw28() *Identity_Raw28 {
	if x, ok := x.GetValue().(*Identity_Data_Raw28); ok {
		return x.Raw28
	}
	return nil
}

func (x *Identity_Data) GetRaw29() *Identity_Raw29 {
	if x, ok := x.GetValue().(*Identity_Data_Raw29); ok {
		return x.Raw29
	}
	return nil
}

func (x *Identity_Data) GetRaw30() *Identity_Raw30 {
	if x, ok := x.GetValue().(*Identity_Data_Raw30); ok {
		return x.Raw30
	}
	return nil
}

func (x *Identity_Data) GetRaw31() *Identity_Raw31 {
	if x, ok := x.GetValue().(*Identity_Data_Raw31); ok {
		return x.Raw31
	}
	return nil
}

func (x *Identity_Data) GetRaw32() *Identity_Raw32 {
	if x, ok := x.GetValue().(*Identity_Data_Raw32); ok {
		return x.Raw32
	}
	return nil
}

func (x *Identity_Data) GetBlakeTwo256() *Identity_BlakeTwo256 {
	if x, ok := x.GetValue().(*Identity_Data_BlakeTwo256); ok {
		return x.BlakeTwo256
	}
	return nil
}

func (x *Identity_Data) GetSha256() *Identity_Sha256 {
	if x, ok := x.GetValue().(*Identity_Data_Sha256); ok {
		return x.Sha256
	}
	return nil
}

func (x *Identity_Data) GetKeccak256() *Identity_Keccak256 {
	if x, ok := x.GetValue().(*Identity_Data_Keccak256); ok {
		return x.Keccak256
	}
	return nil
}

func (x *Identity_Data) GetShaThree256() *Identity_ShaThree256 {
	if x, ok := x.GetValue().(*Identity_Data_ShaThree256); ok {
		return x.ShaThree256
	}
	return nil
}

type isIdentity_Data_Value interface {
	isIdentity_Data_Value()
}

type Identity_Data_None struct {
	None *Identity_None `protobuf:"bytes,1,opt,name=none,proto3,oneof"`
}

type Identity_Data_Raw0 struct {
	Raw0 *Identity_Raw0 `protobuf:"bytes,2,opt,name=raw0,proto3,oneof"`
}

type Identity_Data_Raw1 struct {
	Raw1 *Identity_Raw1 `protobuf:"bytes,3,opt,name=raw1,proto3,oneof"`
}

type Identity_Data_Raw2 struct {
	Raw2 *Identity_Raw2 `protobuf:"bytes,4,opt,name=raw2,proto3,oneof"`
}

type Identity_Data_Raw3 struct {
	Raw3 *Identity_Raw3 `protobuf:"bytes,5,opt,name=raw3,proto3,oneof"`
}

type Identity_Data_Raw4 struct {
	Raw4 *Identity_Raw4 `protobuf:"bytes,6,opt,name=raw4,proto3,oneof"`
}

type Identity_Data_Raw5 struct {
	Raw5 *Identity_Raw5 `protobuf:"bytes,7,opt,name=raw5,proto3,oneof"`
}

type Identity_Data_Raw6 struct {
	Raw6 *Identity_Raw6 `protobuf:"bytes,8,opt,name=raw6,proto3,oneof"`
}

type Identity_Data_Raw7 struct {
	Raw7 *Identity_Raw7 `protobuf:"bytes,9,opt,name=raw7,proto3,oneof"`
}

type Identity_Data_Raw8 struct {
	Raw8 *Identity_Raw8 `protobuf:"bytes,10,opt,name=raw8,proto3,oneof"`
}

type Identity_Data_Raw9 struct {
	Raw9 *Identity_Raw9 `protobuf:"bytes,11,opt,name=raw9,proto3,oneof"`
}

type Identity_Data_Raw10 struct {
	Raw10 *Identity_Raw10 `protobuf:"bytes,12,opt,name=raw10,proto3,oneof"`
}

type Identity_Data_Raw11 struct {
	Raw11 *Identity_Raw11 `protobuf:"bytes,13,opt,name=raw11,proto3,oneof"`
}

type Identity_Data_Raw12 struct {
	Raw12 *Identity_Raw12 `protobuf:"bytes,14,opt,name=raw12,proto3,oneof"`
}

type Identity_Data_Raw13 struct {
	Raw13 *Identity_Raw13 `protobuf:"bytes,15,opt,name=raw13,proto3,oneof"`
}

type Identity_Data_Raw14 struct {
	Raw14 *Identity_Raw14 `protobuf:"bytes,16,opt,name=raw14,proto3,oneof"`
}

type Identity_Data_Raw15 struct {
	Raw15 *Identity_Raw15 `protobuf:"bytes,17,opt,name=raw15,proto3,oneof"`
}

type Identity_Data_Raw16 struct {
	Raw16 *Identity_Raw16 `protobuf:"bytes,18,opt,name=raw16,proto3,oneof"`
}

type Identity_Data_Raw17 struct {
	Raw17 *Identity_Raw17 `protobuf:"bytes,19,opt,name=raw17,proto3,oneof"`
}

type Identity_Data_Raw18 struct {
	Raw18 *Identity_Raw18 `protobuf:"bytes,20,opt,name=raw18,proto3,oneof"`
}

type Identity_Data_Raw19 struct {
	Raw19 *Identity_Raw19 `protobuf:"bytes,21,opt,name=raw19,proto3,oneof"`
}

type Identity_Data_Raw20 struct {
	Raw20 *Identity_Raw20 `protobuf:"bytes,22,opt,name=raw20,proto3,oneof"`
}

type Identity_Data_Raw21 struct {
	Raw21 *Identity_Raw21 `protobuf:"bytes,23,opt,name=raw21,proto3,oneof"`
}

type Identity_Data_Raw22 struct {
	Raw22 *Identity_Raw22 `protobuf:"bytes,24,opt,name=raw22,proto3,oneof"`
}

type Identity_Data_Raw23 struct {
	Raw23 *Identity_Raw23 `protobuf:"bytes,25,opt,name=raw23,proto3,oneof"`
}

type Identity_Data_Raw24 struct {
	Raw24 *Identity_Raw24 `protobuf:"bytes,26,opt,name=raw24,proto3,oneof"`
}

type Identity_Data_Raw25 struct {
	Raw25 *Identity_Raw25 `protobuf:"bytes,27,opt,name=raw25,proto3,oneof"`
}

type Identity_Data_Raw26 struct {
	Raw26 *Identity_Raw26 `protobuf:"bytes,28,opt,name=raw26,proto3,oneof"`
}

type Identity_Data_Raw27 struct {
	Raw27 *Identity_Raw27 `protobuf:"bytes,29,opt,name=raw27,proto3,oneof"`
}

type Identity_Data_Raw28 struct {
	Raw28 *Identity_Raw28 `protobuf:"bytes,30,opt,name=raw28,proto3,oneof"`
}

type Identity_Data_Raw29 struct {
	Raw29 *Identity_Raw29 `protobuf:"bytes,31,opt,name=raw29,proto3,oneof"`
}

type Identity_Data_Raw30 struct {
	Raw30 *Identity_Raw30 `protobuf:"bytes,32,opt,name=raw30,proto3,oneof"`
}

type Identity_Data_Raw31 struct {
	Raw31 *Identity_Raw31 `protobuf:"bytes,33,opt,name=raw31,proto3,oneof"`
}

type Identity_Data_Raw32 struct {
	Raw32 *Identity_Raw32 `protobuf:"bytes,34,opt,name=raw32,proto3,oneof"`
}

type Identity_Data_BlakeTwo256 struct {
	BlakeTwo256 *Identity_BlakeTwo256 `protobuf:"bytes,35,opt,name=blake_two256,json=blakeTwo256,proto3,oneof"`
}

type Identity_Data_Sha256 struct {
	Sha256 *Identity_Sha256 `protobuf:"bytes,36,opt,name=sha256,proto3,oneof"`
}

type Identity_Data_Keccak256 struct {
	Keccak256 *Identity_Keccak256 `protobuf:"bytes,37,opt,name=keccak256,proto3,oneof"`
}

type Identity_Data_ShaThree256 struct {
	ShaThree256 *Identity_ShaThree256 `protobuf:"bytes,38,opt,name=sha_three256,json=shaThree256,proto3,oneof"`
}

func (*Identity_Data_None) isIdentity_Data_Value() {}

func (*Identity_Data_Raw0) isIdentity_Data_Value() {}

func (*Identity_Data_Raw1) isIdentity_Data_Value() {}

func (*Identity_Data_Raw2) isIdentity_Data_Value() {}

func (*Identity_Data_Raw3) isIdentity_Data_Value() {}

func (*Identity_Data_Raw4) isIdentity_Data_Value() {}

func (*Identity_Data_Raw5) isIdentity_Data_Value() {}

func (*Identity_Data_Raw6) isIdentity_Data_Value() {}

func (*Identity_Data_Raw7) isIdentity_Data_Value() {}

func (*Identity_Data_Raw8) isIdentity_Data_Value() {}

func (*Identity_Data_Raw9) isIdentity_Data_Value() {}

func (*Identity_Data_Raw10) isIdentity_Data_Value() {}

func (*Identity_Data_Raw11) isIdentity_Data_Value() {}

func (*Identity_Data_Raw12) isIdentity_Data_Value() {}

func (*Identity_Data_Raw13) isIdentity_Data_Value() {}

func (*Identity_Data_Raw14) isIdentity_Data_Value() {}

func (*Identity_Data_Raw15) isIdentity_Data_Value() {}

func (*Identity_Data_Raw16) isIdentity_Data_Value() {}

func (*Identity_Data_Raw17) isIdentity_Data_Value() {}

func (*Identity_Data_Raw18) isIdentity_Data_Value() {}

func (*Identity_Data_Raw19) isIdentity_Data_Value() {}

func (*Identity_Data_Raw20) isIdentity_Data_Value() {}

func (*Identity_Data_Raw21) isIdentity_Data_Value() {}

func (*Identity_Data_Raw22) isIdentity_Data_Value() {}

func (*Identity_Data_Raw23) isIdentity_Data_Value() {}

func (*Identity_Data_Raw24) isIdentity_Data_Value() {}

func (*Identity_Data_Raw25) isIdentity_Data_Value() {}

func (*Identity_Data_Raw26) isIdentity_Data_Value() {}

func (*Identity_Data_Raw27) isIdentity_Data_Value() {}

func (*Identity_Data_Raw28) isIdentity_Data_Value() {}

func (*Identity_Data_Raw29) isIdentity_Data_Value() {}

func (*Identity_Data_Raw30) isIdentity_Data_Value() {}

func (*Identity_Data_Raw31) isIdentity_Data_Value() {}

func (*Identity_Data_Raw32) isIdentity_Data_Value() {}

func (*Identity_Data_BlakeTwo256) isIdentity_Data_Value() {}

func (*Identity_Data_Sha256) isIdentity_Data_Value() {}

func (*Identity_Data_Keccak256) isIdentity_Data_Value() {}

func (*Identity_Data_ShaThree256) isIdentity_Data_Value() {}

type ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes6Listuint32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 uint32                                                               `protobuf:"varint,1,opt,name=value0,proto3" json:"value0,omitempty"`
	Value1 []*ElectionProviderMultiPhase_TupleUint32SpArithmeticPerThingsPerU16 `protobuf:"bytes,2,rep,name=value1,proto3" json:"value1,omitempty"`
	Value2 uint32                                                               `protobuf:"varint,3,opt,name=value2,proto3" json:"value2,omitempty"`
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes6Listuint32) Reset() {
	*x = ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes6Listuint32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[239]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes6Listuint32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes6Listuint32) ProtoMessage() {
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes6Listuint32) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[239]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes6Listuint32.ProtoReflect.Descriptor instead.
func (*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes6Listuint32) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{239}
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes6Listuint32) GetValue0() uint32 {
	if x != nil {
		return x.Value0
	}
	return 0
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes6Listuint32) GetValue1() []*ElectionProviderMultiPhase_TupleUint32SpArithmeticPerThingsPerU16 {
	if x != nil {
		return x.Value1
	}
	return nil
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes6Listuint32) GetValue2() uint32 {
	if x != nil {
		return x.Value2
	}
	return 0
}

type SpRuntimeGenericDigestDigest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Logs []*SpRuntimeGenericDigestDigestItem `protobuf:"bytes,1,rep,name=logs,proto3" json:"logs,omitempty"`
}

func (x *SpRuntimeGenericDigestDigest) Reset() {
	*x = SpRuntimeGenericDigestDigest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[240]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpRuntimeGenericDigestDigest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpRuntimeGenericDigestDigest) ProtoMessage() {}

func (x *SpRuntimeGenericDigestDigest) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[240]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpRuntimeGenericDigestDigest.ProtoReflect.Descriptor instead.
func (*SpRuntimeGenericDigestDigest) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{240}
}

func (x *SpRuntimeGenericDigestDigest) GetLogs() []*SpRuntimeGenericDigestDigestItem {
	if x != nil {
		return x.Logs
	}
	return nil
}

type FellowshipReferenda_Inline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 *BoundedCollectionsBoundedVecBoundedVec `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *FellowshipReferenda_Inline) Reset() {
	*x = FellowshipReferenda_Inline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[241]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FellowshipReferenda_Inline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FellowshipReferenda_Inline) ProtoMessage() {}

func (x *FellowshipReferenda_Inline) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[241]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FellowshipReferenda_Inline.ProtoReflect.Descriptor instead.
func (*FellowshipReferenda_Inline) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{241}
}

func (x *FellowshipReferenda_Inline) GetValue0() *BoundedCollectionsBoundedVecBoundedVec {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Identity_ProvideJudgementCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegIndex  uint32              `protobuf:"varint,1,opt,name=reg_index,json=regIndex,proto3" json:"reg_index,omitempty"`
	Target    *Identity_Target    `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	Judgement *Identity_Judgement `protobuf:"bytes,3,opt,name=judgement,proto3" json:"judgement,omitempty"`
	Identity  *PrimitiveTypesH256 `protobuf:"bytes,4,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (x *Identity_ProvideJudgementCall) Reset() {
	*x = Identity_ProvideJudgementCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[242]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_ProvideJudgementCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_ProvideJudgementCall) ProtoMessage() {}

func (x *Identity_ProvideJudgementCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[242]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_ProvideJudgementCall.ProtoReflect.Descriptor instead.
func (*Identity_ProvideJudgementCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{242}
}

func (x *Identity_ProvideJudgementCall) GetRegIndex() uint32 {
	if x != nil {
		return x.RegIndex
	}
	return 0
}

func (x *Identity_ProvideJudgementCall) GetTarget() *Identity_Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *Identity_ProvideJudgementCall) GetJudgement() *Identity_Judgement {
	if x != nil {
		return x.Judgement
	}
	return nil
}

func (x *Identity_ProvideJudgementCall) GetIdentity() *PrimitiveTypesH256 {
	if x != nil {
		return x.Identity
	}
	return nil
}

type ChildBounties_Curator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*ChildBounties_Curator_Id
	//	*ChildBounties_Curator_Index
	//	*ChildBounties_Curator_Raw
	//	*ChildBounties_Curator_Address32
	//	*ChildBounties_Curator_Address20
	Value isChildBounties_Curator_Value `protobuf_oneof:"value"`
}

func (x *ChildBounties_Curator) Reset() {
	*x = ChildBounties_Curator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[243]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChildBounties_Curator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChildBounties_Curator) ProtoMessage() {}

func (x *ChildBounties_Curator) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[243]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChildBounties_Curator.ProtoReflect.Descriptor instead.
func (*ChildBounties_Curator) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{243}
}

func (m *ChildBounties_Curator) GetValue() isChildBounties_Curator_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *ChildBounties_Curator) GetId() *ChildBounties_Id {
	if x, ok := x.GetValue().(*ChildBounties_Curator_Id); ok {
		return x.Id
	}
	return nil
}

func (x *ChildBounties_Curator) GetIndex() *ChildBounties_Index {
	if x, ok := x.GetValue().(*ChildBounties_Curator_Index); ok {
		return x.Index
	}
	return nil
}

func (x *ChildBounties_Curator) GetRaw() *ChildBounties_Raw {
	if x, ok := x.GetValue().(*ChildBounties_Curator_Raw); ok {
		return x.Raw
	}
	return nil
}

func (x *ChildBounties_Curator) GetAddress32() *ChildBounties_Address32 {
	if x, ok := x.GetValue().(*ChildBounties_Curator_Address32); ok {
		return x.Address32
	}
	return nil
}

func (x *ChildBounties_Curator) GetAddress20() *ChildBounties_Address20 {
	if x, ok := x.GetValue().(*ChildBounties_Curator_Address20); ok {
		return x.Address20
	}
	return nil
}

type isChildBounties_Curator_Value interface {
	isChildBounties_Curator_Value()
}

type ChildBounties_Curator_Id struct {
	Id *ChildBounties_Id `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type ChildBounties_Curator_Index struct {
	Index *ChildBounties_Index `protobuf:"bytes,2,opt,name=index,proto3,oneof"`
}

type ChildBounties_Curator_Raw struct {
	Raw *ChildBounties_Raw `protobuf:"bytes,3,opt,name=raw,proto3,oneof"`
}

type ChildBounties_Curator_Address32 struct {
	Address32 *ChildBounties_Address32 `protobuf:"bytes,4,opt,name=address32,proto3,oneof"`
}

type ChildBounties_Curator_Address20 struct {
	Address20 *ChildBounties_Address20 `protobuf:"bytes,5,opt,name=address20,proto3,oneof"`
}

func (*ChildBounties_Curator_Id) isChildBounties_Curator_Value() {}

func (*ChildBounties_Curator_Index) isChildBounties_Curator_Value() {}

func (*ChildBounties_Curator_Raw) isChildBounties_Curator_Value() {}

func (*ChildBounties_Curator_Address32) isChildBounties_Curator_Value() {}

func (*ChildBounties_Curator_Address20) isChildBounties_Curator_Value() {}

type Bounties_ClaimBountyCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BountyId uint32 `protobuf:"varint,1,opt,name=bounty_id,json=bountyId,proto3" json:"bounty_id,omitempty"`
}

func (x *Bounties_ClaimBountyCall) Reset() {
	*x = Bounties_ClaimBountyCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[244]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bounties_ClaimBountyCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bounties_ClaimBountyCall) ProtoMessage() {}

func (x *Bounties_ClaimBountyCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[244]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bounties_ClaimBountyCall.ProtoReflect.Descriptor instead.
func (*Bounties_ClaimBountyCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{244}
}

func (x *Bounties_ClaimBountyCall) GetBountyId() uint32 {
	if x != nil {
		return x.BountyId
	}
	return 0
}

type Staking_Remove struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Staking_Remove) Reset() {
	*x = Staking_Remove{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[245]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staking_Remove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staking_Remove) ProtoMessage() {}

func (x *Staking_Remove) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[245]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staking_Remove.ProtoReflect.Descriptor instead.
func (*Staking_Remove) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{245}
}

type Staking_MinCommission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*Staking_MinCommission_Noop
	//	*Staking_MinCommission_Set
	//	*Staking_MinCommission_Remove
	Value isStaking_MinCommission_Value `protobuf_oneof:"value"`
}

func (x *Staking_MinCommission) Reset() {
	*x = Staking_MinCommission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[246]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staking_MinCommission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staking_MinCommission) ProtoMessage() {}

func (x *Staking_MinCommission) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[246]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staking_MinCommission.ProtoReflect.Descriptor instead.
func (*Staking_MinCommission) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{246}
}

func (m *Staking_MinCommission) GetValue() isStaking_MinCommission_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Staking_MinCommission) GetNoop() *Staking_Noop {
	if x, ok := x.GetValue().(*Staking_MinCommission_Noop); ok {
		return x.Noop
	}
	return nil
}

func (x *Staking_MinCommission) GetSet() *Staking_Set {
	if x, ok := x.GetValue().(*Staking_MinCommission_Set); ok {
		return x.Set
	}
	return nil
}

func (x *Staking_MinCommission) GetRemove() *Staking_Remove {
	if x, ok := x.GetValue().(*Staking_MinCommission_Remove); ok {
		return x.Remove
	}
	return nil
}

type isStaking_MinCommission_Value interface {
	isStaking_MinCommission_Value()
}

type Staking_MinCommission_Noop struct {
	Noop *Staking_Noop `protobuf:"bytes,1,opt,name=noop,proto3,oneof"`
}

type Staking_MinCommission_Set struct {
	Set *Staking_Set `protobuf:"bytes,2,opt,name=set,proto3,oneof"`
}

type Staking_MinCommission_Remove struct {
	Remove *Staking_Remove `protobuf:"bytes,3,opt,name=remove,proto3,oneof"`
}

func (*Staking_MinCommission_Noop) isStaking_MinCommission_Value() {}

func (*Staking_MinCommission_Set) isStaking_MinCommission_Value() {}

func (*Staking_MinCommission_Remove) isStaking_MinCommission_Value() {}

type Signed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 *SpCoreCryptoAccountId32 `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Signed) Reset() {
	*x = Signed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[247]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Signed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signed) ProtoMessage() {}

func (x *Signed) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[247]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signed.ProtoReflect.Descriptor instead.
func (*Signed) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{247}
}

func (x *Signed) GetValue0() *SpCoreCryptoAccountId32 {
	if x != nil {
		return x.Value0
	}
	return nil
}

type UtilityPallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Call:
	//
	//	*UtilityPallet_BatchCall
	//	*UtilityPallet_AsDerivativeCall
	//	*UtilityPallet_BatchAllCall
	//	*UtilityPallet_DispatchAsCall
	//	*UtilityPallet_ForceBatchCall
	//	*UtilityPallet_WithWeightCall
	Call isUtilityPallet_Call `protobuf_oneof:"call"`
}

func (x *UtilityPallet) Reset() {
	*x = UtilityPallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[248]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UtilityPallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UtilityPallet) ProtoMessage() {}

func (x *UtilityPallet) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[248]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UtilityPallet.ProtoReflect.Descriptor instead.
func (*UtilityPallet) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{248}
}

func (m *UtilityPallet) GetCall() isUtilityPallet_Call {
	if m != nil {
		return m.Call
	}
	return nil
}

func (x *UtilityPallet) GetBatchCall() *Utility_BatchCall {
	if x, ok := x.GetCall().(*UtilityPallet_BatchCall); ok {
		return x.BatchCall
	}
	return nil
}

func (x *UtilityPallet) GetAsDerivativeCall() *Utility_AsDerivativeCall {
	if x, ok := x.GetCall().(*UtilityPallet_AsDerivativeCall); ok {
		return x.AsDerivativeCall
	}
	return nil
}

func (x *UtilityPallet) GetBatchAllCall() *Utility_BatchAllCall {
	if x, ok := x.GetCall().(*UtilityPallet_BatchAllCall); ok {
		return x.BatchAllCall
	}
	return nil
}

func (x *UtilityPallet) GetDispatchAsCall() *Utility_DispatchAsCall {
	if x, ok := x.GetCall().(*UtilityPallet_DispatchAsCall); ok {
		return x.DispatchAsCall
	}
	return nil
}

func (x *UtilityPallet) GetForceBatchCall() *Utility_ForceBatchCall {
	if x, ok := x.GetCall().(*UtilityPallet_ForceBatchCall); ok {
		return x.ForceBatchCall
	}
	return nil
}

func (x *UtilityPallet) GetWithWeightCall() *Utility_WithWeightCall {
	if x, ok := x.GetCall().(*UtilityPallet_WithWeightCall); ok {
		return x.WithWeightCall
	}
	return nil
}

type isUtilityPallet_Call interface {
	isUtilityPallet_Call()
}

type UtilityPallet_BatchCall struct {
	BatchCall *Utility_BatchCall `protobuf:"bytes,1,opt,name=batch_call,json=batchCall,proto3,oneof"`
}

type UtilityPallet_AsDerivativeCall struct {
	AsDerivativeCall *Utility_AsDerivativeCall `protobuf:"bytes,2,opt,name=as_derivative_call,json=asDerivativeCall,proto3,oneof"`
}

type UtilityPallet_BatchAllCall struct {
	BatchAllCall *Utility_BatchAllCall `protobuf:"bytes,3,opt,name=batch_all_call,json=batchAllCall,proto3,oneof"`
}

type UtilityPallet_DispatchAsCall struct {
	DispatchAsCall *Utility_DispatchAsCall `protobuf:"bytes,4,opt,name=dispatch_as_call,json=dispatchAsCall,proto3,oneof"`
}

type UtilityPallet_ForceBatchCall struct {
	ForceBatchCall *Utility_ForceBatchCall `protobuf:"bytes,5,opt,name=force_batch_call,json=forceBatchCall,proto3,oneof"`
}

type UtilityPallet_WithWeightCall struct {
	WithWeightCall *Utility_WithWeightCall `protobuf:"bytes,6,opt,name=with_weight_call,json=withWeightCall,proto3,oneof"`
}

func (*UtilityPallet_BatchCall) isUtilityPallet_Call() {}

func (*UtilityPallet_AsDerivativeCall) isUtilityPallet_Call() {}

func (*UtilityPallet_BatchAllCall) isUtilityPallet_Call() {}

func (*UtilityPallet_DispatchAsCall) isUtilityPallet_Call() {}

func (*UtilityPallet_ForceBatchCall) isUtilityPallet_Call() {}

func (*UtilityPallet_WithWeightCall) isUtilityPallet_Call() {}

type Proxy_Id struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 *SpCoreCryptoAccountId32 `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Proxy_Id) Reset() {
	*x = Proxy_Id{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[249]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proxy_Id) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proxy_Id) ProtoMessage() {}

func (x *Proxy_Id) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[249]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proxy_Id.ProtoReflect.Descriptor instead.
func (*Proxy_Id) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{249}
}

func (x *Proxy_Id) GetValue0() *SpCoreCryptoAccountId32 {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Gear_SetExecuteInherentCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Gear_SetExecuteInherentCall) Reset() {
	*x = Gear_SetExecuteInherentCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[250]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Gear_SetExecuteInherentCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gear_SetExecuteInherentCall) ProtoMessage() {}

func (x *Gear_SetExecuteInherentCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[250]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gear_SetExecuteInherentCall.ProtoReflect.Descriptor instead.
func (*Gear_SetExecuteInherentCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{250}
}

func (x *Gear_SetExecuteInherentCall) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type StakingRewardsPallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Call:
	//
	//	*StakingRewardsPallet_RefillCall
	//	*StakingRewardsPallet_ForceRefillCall
	//	*StakingRewardsPallet_WithdrawCall
	//	*StakingRewardsPallet_AlignSupplyCall
	Call isStakingRewardsPallet_Call `protobuf_oneof:"call"`
}

func (x *StakingRewardsPallet) Reset() {
	*x = StakingRewardsPallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[251]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakingRewardsPallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakingRewardsPallet) ProtoMessage() {}

func (x *StakingRewardsPallet) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[251]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakingRewardsPallet.ProtoReflect.Descriptor instead.
func (*StakingRewardsPallet) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{251}
}

func (m *StakingRewardsPallet) GetCall() isStakingRewardsPallet_Call {
	if m != nil {
		return m.Call
	}
	return nil
}

func (x *StakingRewardsPallet) GetRefillCall() *StakingRewards_RefillCall {
	if x, ok := x.GetCall().(*StakingRewardsPallet_RefillCall); ok {
		return x.RefillCall
	}
	return nil
}

func (x *StakingRewardsPallet) GetForceRefillCall() *StakingRewards_ForceRefillCall {
	if x, ok := x.GetCall().(*StakingRewardsPallet_ForceRefillCall); ok {
		return x.ForceRefillCall
	}
	return nil
}

func (x *StakingRewardsPallet) GetWithdrawCall() *StakingRewards_WithdrawCall {
	if x, ok := x.GetCall().(*StakingRewardsPallet_WithdrawCall); ok {
		return x.WithdrawCall
	}
	return nil
}

func (x *StakingRewardsPallet) GetAlignSupplyCall() *StakingRewards_AlignSupplyCall {
	if x, ok := x.GetCall().(*StakingRewardsPallet_AlignSupplyCall); ok {
		return x.AlignSupplyCall
	}
	return nil
}

type isStakingRewardsPallet_Call interface {
	isStakingRewardsPallet_Call()
}

type StakingRewardsPallet_RefillCall struct {
	RefillCall *StakingRewards_RefillCall `protobuf:"bytes,1,opt,name=refill_call,json=refillCall,proto3,oneof"`
}

type StakingRewardsPallet_ForceRefillCall struct {
	ForceRefillCall *StakingRewards_ForceRefillCall `protobuf:"bytes,2,opt,name=force_refill_call,json=forceRefillCall,proto3,oneof"`
}

type StakingRewardsPallet_WithdrawCall struct {
	WithdrawCall *StakingRewards_WithdrawCall `protobuf:"bytes,3,opt,name=withdraw_call,json=withdrawCall,proto3,oneof"`
}

type StakingRewardsPallet_AlignSupplyCall struct {
	AlignSupplyCall *StakingRewards_AlignSupplyCall `protobuf:"bytes,4,opt,name=align_supply_call,json=alignSupplyCall,proto3,oneof"`
}

func (*StakingRewardsPallet_RefillCall) isStakingRewardsPallet_Call() {}

func (*StakingRewardsPallet_ForceRefillCall) isStakingRewardsPallet_Call() {}

func (*StakingRewardsPallet_WithdrawCall) isStakingRewardsPallet_Call() {}

func (*StakingRewardsPallet_AlignSupplyCall) isStakingRewardsPallet_Call() {}

type GearVoucher_Call struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*GearVoucher_Call_SendMessage
	//	*GearVoucher_Call_SendReply
	//	*GearVoucher_Call_UploadCode
	//	*GearVoucher_Call_DeclineVoucher
	Value isGearVoucher_Call_Value `protobuf_oneof:"value"`
}

func (x *GearVoucher_Call) Reset() {
	*x = GearVoucher_Call{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[252]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GearVoucher_Call) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GearVoucher_Call) ProtoMessage() {}

func (x *GearVoucher_Call) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[252]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GearVoucher_Call.ProtoReflect.Descriptor instead.
func (*GearVoucher_Call) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{252}
}

func (m *GearVoucher_Call) GetValue() isGearVoucher_Call_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *GearVoucher_Call) GetSendMessage() *GearVoucher_SendMessage {
	if x, ok := x.GetValue().(*GearVoucher_Call_SendMessage); ok {
		return x.SendMessage
	}
	return nil
}

func (x *GearVoucher_Call) GetSendReply() *GearVoucher_SendReply {
	if x, ok := x.GetValue().(*GearVoucher_Call_SendReply); ok {
		return x.SendReply
	}
	return nil
}

func (x *GearVoucher_Call) GetUploadCode() *GearVoucher_UploadCode {
	if x, ok := x.GetValue().(*GearVoucher_Call_UploadCode); ok {
		return x.UploadCode
	}
	return nil
}

func (x *GearVoucher_Call) GetDeclineVoucher() *GearVoucher_DeclineVoucher {
	if x, ok := x.GetValue().(*GearVoucher_Call_DeclineVoucher); ok {
		return x.DeclineVoucher
	}
	return nil
}

type isGearVoucher_Call_Value interface {
	isGearVoucher_Call_Value()
}

type GearVoucher_Call_SendMessage struct {
	SendMessage *GearVoucher_SendMessage `protobuf:"bytes,1,opt,name=send_message,json=sendMessage,proto3,oneof"`
}

type GearVoucher_Call_SendReply struct {
	SendReply *GearVoucher_SendReply `protobuf:"bytes,2,opt,name=send_reply,json=sendReply,proto3,oneof"`
}

type GearVoucher_Call_UploadCode struct {
	UploadCode *GearVoucher_UploadCode `protobuf:"bytes,3,opt,name=upload_code,json=uploadCode,proto3,oneof"`
}

type GearVoucher_Call_DeclineVoucher struct {
	DeclineVoucher *GearVoucher_DeclineVoucher `protobuf:"bytes,4,opt,name=decline_voucher,json=declineVoucher,proto3,oneof"`
}

func (*GearVoucher_Call_SendMessage) isGearVoucher_Call_Value() {}

func (*GearVoucher_Call_SendReply) isGearVoucher_Call_Value() {}

func (*GearVoucher_Call_UploadCode) isGearVoucher_Call_Value() {}

func (*GearVoucher_Call_DeclineVoucher) isGearVoucher_Call_Value() {}

type System_RemarkCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Remark []byte `protobuf:"bytes,1,opt,name=remark,proto3" json:"remark,omitempty"`
}

func (x *System_RemarkCall) Reset() {
	*x = System_RemarkCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[253]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_RemarkCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_RemarkCall) ProtoMessage() {}

func (x *System_RemarkCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[253]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_RemarkCall.ProtoReflect.Descriptor instead.
func (*System_RemarkCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{253}
}

func (x *System_RemarkCall) GetRemark() []byte {
	if x != nil {
		return x.Remark
	}
	return nil
}

type SpRuntimeGenericHeaderHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentHash     *PrimitiveTypesH256           `protobuf:"bytes,1,opt,name=parent_hash,json=parentHash,proto3" json:"parent_hash,omitempty"`
	Number         uint32                        `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	StateRoot      *PrimitiveTypesH256           `protobuf:"bytes,3,opt,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty"`
	ExtrinsicsRoot *PrimitiveTypesH256           `protobuf:"bytes,4,opt,name=extrinsics_root,json=extrinsicsRoot,proto3" json:"extrinsics_root,omitempty"`
	Digest         *SpRuntimeGenericDigestDigest `protobuf:"bytes,5,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (x *SpRuntimeGenericHeaderHeader) Reset() {
	*x = SpRuntimeGenericHeaderHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[254]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpRuntimeGenericHeaderHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpRuntimeGenericHeaderHeader) ProtoMessage() {}

func (x *SpRuntimeGenericHeaderHeader) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[254]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpRuntimeGenericHeaderHeader.ProtoReflect.Descriptor instead.
func (*SpRuntimeGenericHeaderHeader) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{254}
}

func (x *SpRuntimeGenericHeaderHeader) GetParentHash() *PrimitiveTypesH256 {
	if x != nil {
		return x.ParentHash
	}
	return nil
}

func (x *SpRuntimeGenericHeaderHeader) GetNumber() uint32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *SpRuntimeGenericHeaderHeader) GetStateRoot() *PrimitiveTypesH256 {
	if x != nil {
		return x.StateRoot
	}
	return nil
}

func (x *SpRuntimeGenericHeaderHeader) GetExtrinsicsRoot() *PrimitiveTypesH256 {
	if x != nil {
		return x.ExtrinsicsRoot
	}
	return nil
}

func (x *SpRuntimeGenericHeaderHeader) GetDigest() *SpRuntimeGenericDigestDigest {
	if x != nil {
		return x.Digest
	}
	return nil
}

type Scheduler_ScheduleCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	When          uint32                       `protobuf:"varint,1,opt,name=when,proto3" json:"when,omitempty"`
	MaybePeriodic *Scheduler_TupleUint32Uint32 `protobuf:"bytes,2,opt,name=maybe_periodic,json=maybePeriodic,proto3,oneof" json:"maybe_periodic,omitempty"`
	Priority      uint32                       `protobuf:"varint,3,opt,name=priority,proto3" json:"priority,omitempty"`
	// Types that are assignable to Call:
	//
	//	*Scheduler_ScheduleCall_System
	//	*Scheduler_ScheduleCall_Timestamp
	//	*Scheduler_ScheduleCall_Babe
	//	*Scheduler_ScheduleCall_Grandpa
	//	*Scheduler_ScheduleCall_Balances
	//	*Scheduler_ScheduleCall_Vesting
	//	*Scheduler_ScheduleCall_BagsList
	//	*Scheduler_ScheduleCall_ImOnline
	//	*Scheduler_ScheduleCall_Staking
	//	*Scheduler_ScheduleCall_Session
	//	*Scheduler_ScheduleCall_Treasury
	//	*Scheduler_ScheduleCall_Utility
	//	*Scheduler_ScheduleCall_ConvictionVoting
	//	*Scheduler_ScheduleCall_Referenda
	//	*Scheduler_ScheduleCall_FellowshipCollective
	//	*Scheduler_ScheduleCall_FellowshipReferenda
	//	*Scheduler_ScheduleCall_Whitelist
	//	*Scheduler_ScheduleCall_Scheduler
	//	*Scheduler_ScheduleCall_Preimage
	//	*Scheduler_ScheduleCall_Identity
	//	*Scheduler_ScheduleCall_Proxy
	//	*Scheduler_ScheduleCall_Multisig
	//	*Scheduler_ScheduleCall_ElectionProviderMultiPhase
	//	*Scheduler_ScheduleCall_Bounties
	//	*Scheduler_ScheduleCall_ChildBounties
	//	*Scheduler_ScheduleCall_NominationPools
	//	*Scheduler_ScheduleCall_Gear
	//	*Scheduler_ScheduleCall_StakingRewards
	//	*Scheduler_ScheduleCall_GearVoucher
	Call isScheduler_ScheduleCall_Call `protobuf_oneof:"call"`
}

func (x *Scheduler_ScheduleCall) Reset() {
	*x = Scheduler_ScheduleCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[255]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scheduler_ScheduleCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scheduler_ScheduleCall) ProtoMessage() {}

func (x *Scheduler_ScheduleCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[255]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scheduler_ScheduleCall.ProtoReflect.Descriptor instead.
func (*Scheduler_ScheduleCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{255}
}

func (x *Scheduler_ScheduleCall) GetWhen() uint32 {
	if x != nil {
		return x.When
	}
	return 0
}

func (x *Scheduler_ScheduleCall) GetMaybePeriodic() *Scheduler_TupleUint32Uint32 {
	if x != nil {
		return x.MaybePeriodic
	}
	return nil
}

func (x *Scheduler_ScheduleCall) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (m *Scheduler_ScheduleCall) GetCall() isScheduler_ScheduleCall_Call {
	if m != nil {
		return m.Call
	}
	return nil
}

func (x *Scheduler_ScheduleCall) GetSystem() *SystemPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleCall_System); ok {
		return x.System
	}
	return nil
}

func (x *Scheduler_ScheduleCall) GetTimestamp() *TimestampPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleCall_Timestamp); ok {
		return x.Timestamp
	}
	return nil
}

func (x *Scheduler_ScheduleCall) GetBabe() *BabePallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleCall_Babe); ok {
		return x.Babe
	}
	return nil
}

func (x *Scheduler_ScheduleCall) GetGrandpa() *GrandpaPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleCall_Grandpa); ok {
		return x.Grandpa
	}
	return nil
}

func (x *Scheduler_ScheduleCall) GetBalances() *BalancesPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleCall_Balances); ok {
		return x.Balances
	}
	return nil
}

func (x *Scheduler_ScheduleCall) GetVesting() *VestingPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleCall_Vesting); ok {
		return x.Vesting
	}
	return nil
}

func (x *Scheduler_ScheduleCall) GetBagsList() *BagsListPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleCall_BagsList); ok {
		return x.BagsList
	}
	return nil
}

func (x *Scheduler_ScheduleCall) GetImOnline() *ImOnlinePallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleCall_ImOnline); ok {
		return x.ImOnline
	}
	return nil
}

func (x *Scheduler_ScheduleCall) GetStaking() *StakingPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleCall_Staking); ok {
		return x.Staking
	}
	return nil
}

func (x *Scheduler_ScheduleCall) GetSession() *SessionPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleCall_Session); ok {
		return x.Session
	}
	return nil
}

func (x *Scheduler_ScheduleCall) GetTreasury() *TreasuryPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleCall_Treasury); ok {
		return x.Treasury
	}
	return nil
}

func (x *Scheduler_ScheduleCall) GetUtility() *UtilityPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleCall_Utility); ok {
		return x.Utility
	}
	return nil
}

func (x *Scheduler_ScheduleCall) GetConvictionVoting() *ConvictionVotingPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleCall_ConvictionVoting); ok {
		return x.ConvictionVoting
	}
	return nil
}

func (x *Scheduler_ScheduleCall) GetReferenda() *ReferendaPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleCall_Referenda); ok {
		return x.Referenda
	}
	return nil
}

func (x *Scheduler_ScheduleCall) GetFellowshipCollective() *FellowshipCollectivePallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleCall_FellowshipCollective); ok {
		return x.FellowshipCollective
	}
	return nil
}

func (x *Scheduler_ScheduleCall) GetFellowshipReferenda() *FellowshipReferendaPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleCall_FellowshipReferenda); ok {
		return x.FellowshipReferenda
	}
	return nil
}

func (x *Scheduler_ScheduleCall) GetWhitelist() *WhitelistPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleCall_Whitelist); ok {
		return x.Whitelist
	}
	return nil
}

func (x *Scheduler_ScheduleCall) GetScheduler() *SchedulerPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleCall_Scheduler); ok {
		return x.Scheduler
	}
	return nil
}

func (x *Scheduler_ScheduleCall) GetPreimage() *PreimagePallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleCall_Preimage); ok {
		return x.Preimage
	}
	return nil
}

func (x *Scheduler_ScheduleCall) GetIdentity() *IdentityPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleCall_Identity); ok {
		return x.Identity
	}
	return nil
}

func (x *Scheduler_ScheduleCall) GetProxy() *ProxyPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleCall_Proxy); ok {
		return x.Proxy
	}
	return nil
}

func (x *Scheduler_ScheduleCall) GetMultisig() *MultisigPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleCall_Multisig); ok {
		return x.Multisig
	}
	return nil
}

func (x *Scheduler_ScheduleCall) GetElectionProviderMultiPhase() *ElectionProviderMultiPhasePallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleCall_ElectionProviderMultiPhase); ok {
		return x.ElectionProviderMultiPhase
	}
	return nil
}

func (x *Scheduler_ScheduleCall) GetBounties() *BountiesPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleCall_Bounties); ok {
		return x.Bounties
	}
	return nil
}

func (x *Scheduler_ScheduleCall) GetChildBounties() *ChildBountiesPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleCall_ChildBounties); ok {
		return x.ChildBounties
	}
	return nil
}

func (x *Scheduler_ScheduleCall) GetNominationPools() *NominationPoolsPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleCall_NominationPools); ok {
		return x.NominationPools
	}
	return nil
}

func (x *Scheduler_ScheduleCall) GetGear() *GearPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleCall_Gear); ok {
		return x.Gear
	}
	return nil
}

func (x *Scheduler_ScheduleCall) GetStakingRewards() *StakingRewardsPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleCall_StakingRewards); ok {
		return x.StakingRewards
	}
	return nil
}

func (x *Scheduler_ScheduleCall) GetGearVoucher() *GearVoucherPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleCall_GearVoucher); ok {
		return x.GearVoucher
	}
	return nil
}

type isScheduler_ScheduleCall_Call interface {
	isScheduler_ScheduleCall_Call()
}

type Scheduler_ScheduleCall_System struct {
	System *SystemPallet `protobuf:"bytes,4,opt,name=system,proto3,oneof"`
}

type Scheduler_ScheduleCall_Timestamp struct {
	Timestamp *TimestampPallet `protobuf:"bytes,5,opt,name=timestamp,proto3,oneof"`
}

type Scheduler_ScheduleCall_Babe struct {
	Babe *BabePallet `protobuf:"bytes,6,opt,name=babe,proto3,oneof"`
}

type Scheduler_ScheduleCall_Grandpa struct {
	Grandpa *GrandpaPallet `protobuf:"bytes,7,opt,name=grandpa,proto3,oneof"`
}

type Scheduler_ScheduleCall_Balances struct {
	Balances *BalancesPallet `protobuf:"bytes,8,opt,name=balances,proto3,oneof"`
}

type Scheduler_ScheduleCall_Vesting struct {
	Vesting *VestingPallet `protobuf:"bytes,9,opt,name=vesting,proto3,oneof"`
}

type Scheduler_ScheduleCall_BagsList struct {
	BagsList *BagsListPallet `protobuf:"bytes,10,opt,name=bags_list,json=bagsList,proto3,oneof"`
}

type Scheduler_ScheduleCall_ImOnline struct {
	ImOnline *ImOnlinePallet `protobuf:"bytes,11,opt,name=im_online,json=imOnline,proto3,oneof"`
}

type Scheduler_ScheduleCall_Staking struct {
	Staking *StakingPallet `protobuf:"bytes,12,opt,name=staking,proto3,oneof"`
}

type Scheduler_ScheduleCall_Session struct {
	Session *SessionPallet `protobuf:"bytes,13,opt,name=session,proto3,oneof"`
}

type Scheduler_ScheduleCall_Treasury struct {
	Treasury *TreasuryPallet `protobuf:"bytes,14,opt,name=treasury,proto3,oneof"`
}

type Scheduler_ScheduleCall_Utility struct {
	Utility *UtilityPallet `protobuf:"bytes,15,opt,name=utility,proto3,oneof"`
}

type Scheduler_ScheduleCall_ConvictionVoting struct {
	ConvictionVoting *ConvictionVotingPallet `protobuf:"bytes,16,opt,name=conviction_voting,json=convictionVoting,proto3,oneof"`
}

type Scheduler_ScheduleCall_Referenda struct {
	Referenda *ReferendaPallet `protobuf:"bytes,17,opt,name=referenda,proto3,oneof"`
}

type Scheduler_ScheduleCall_FellowshipCollective struct {
	FellowshipCollective *FellowshipCollectivePallet `protobuf:"bytes,18,opt,name=fellowship_collective,json=fellowshipCollective,proto3,oneof"`
}

type Scheduler_ScheduleCall_FellowshipReferenda struct {
	FellowshipReferenda *FellowshipReferendaPallet `protobuf:"bytes,19,opt,name=fellowship_referenda,json=fellowshipReferenda,proto3,oneof"`
}

type Scheduler_ScheduleCall_Whitelist struct {
	Whitelist *WhitelistPallet `protobuf:"bytes,20,opt,name=whitelist,proto3,oneof"`
}

type Scheduler_ScheduleCall_Scheduler struct {
	Scheduler *SchedulerPallet `protobuf:"bytes,21,opt,name=scheduler,proto3,oneof"`
}

type Scheduler_ScheduleCall_Preimage struct {
	Preimage *PreimagePallet `protobuf:"bytes,22,opt,name=preimage,proto3,oneof"`
}

type Scheduler_ScheduleCall_Identity struct {
	Identity *IdentityPallet `protobuf:"bytes,23,opt,name=identity,proto3,oneof"`
}

type Scheduler_ScheduleCall_Proxy struct {
	Proxy *ProxyPallet `protobuf:"bytes,24,opt,name=proxy,proto3,oneof"`
}

type Scheduler_ScheduleCall_Multisig struct {
	Multisig *MultisigPallet `protobuf:"bytes,25,opt,name=multisig,proto3,oneof"`
}

type Scheduler_ScheduleCall_ElectionProviderMultiPhase struct {
	ElectionProviderMultiPhase *ElectionProviderMultiPhasePallet `protobuf:"bytes,26,opt,name=election_provider_multi_phase,json=electionProviderMultiPhase,proto3,oneof"`
}

type Scheduler_ScheduleCall_Bounties struct {
	Bounties *BountiesPallet `protobuf:"bytes,27,opt,name=bounties,proto3,oneof"`
}

type Scheduler_ScheduleCall_ChildBounties struct {
	ChildBounties *ChildBountiesPallet `protobuf:"bytes,28,opt,name=child_bounties,json=childBounties,proto3,oneof"`
}

type Scheduler_ScheduleCall_NominationPools struct {
	NominationPools *NominationPoolsPallet `protobuf:"bytes,29,opt,name=nomination_pools,json=nominationPools,proto3,oneof"`
}

type Scheduler_ScheduleCall_Gear struct {
	Gear *GearPallet `protobuf:"bytes,30,opt,name=gear,proto3,oneof"`
}

type Scheduler_ScheduleCall_StakingRewards struct {
	StakingRewards *StakingRewardsPallet `protobuf:"bytes,31,opt,name=staking_rewards,json=stakingRewards,proto3,oneof"`
}

type Scheduler_ScheduleCall_GearVoucher struct {
	GearVoucher *GearVoucherPallet `protobuf:"bytes,32,opt,name=gear_voucher,json=gearVoucher,proto3,oneof"`
}

func (*Scheduler_ScheduleCall_System) isScheduler_ScheduleCall_Call() {}

func (*Scheduler_ScheduleCall_Timestamp) isScheduler_ScheduleCall_Call() {}

func (*Scheduler_ScheduleCall_Babe) isScheduler_ScheduleCall_Call() {}

func (*Scheduler_ScheduleCall_Grandpa) isScheduler_ScheduleCall_Call() {}

func (*Scheduler_ScheduleCall_Balances) isScheduler_ScheduleCall_Call() {}

func (*Scheduler_ScheduleCall_Vesting) isScheduler_ScheduleCall_Call() {}

func (*Scheduler_ScheduleCall_BagsList) isScheduler_ScheduleCall_Call() {}

func (*Scheduler_ScheduleCall_ImOnline) isScheduler_ScheduleCall_Call() {}

func (*Scheduler_ScheduleCall_Staking) isScheduler_ScheduleCall_Call() {}

func (*Scheduler_ScheduleCall_Session) isScheduler_ScheduleCall_Call() {}

func (*Scheduler_ScheduleCall_Treasury) isScheduler_ScheduleCall_Call() {}

func (*Scheduler_ScheduleCall_Utility) isScheduler_ScheduleCall_Call() {}

func (*Scheduler_ScheduleCall_ConvictionVoting) isScheduler_ScheduleCall_Call() {}

func (*Scheduler_ScheduleCall_Referenda) isScheduler_ScheduleCall_Call() {}

func (*Scheduler_ScheduleCall_FellowshipCollective) isScheduler_ScheduleCall_Call() {}

func (*Scheduler_ScheduleCall_FellowshipReferenda) isScheduler_ScheduleCall_Call() {}

func (*Scheduler_ScheduleCall_Whitelist) isScheduler_ScheduleCall_Call() {}

func (*Scheduler_ScheduleCall_Scheduler) isScheduler_ScheduleCall_Call() {}

func (*Scheduler_ScheduleCall_Preimage) isScheduler_ScheduleCall_Call() {}

func (*Scheduler_ScheduleCall_Identity) isScheduler_ScheduleCall_Call() {}

func (*Scheduler_ScheduleCall_Proxy) isScheduler_ScheduleCall_Call() {}

func (*Scheduler_ScheduleCall_Multisig) isScheduler_ScheduleCall_Call() {}

func (*Scheduler_ScheduleCall_ElectionProviderMultiPhase) isScheduler_ScheduleCall_Call() {}

func (*Scheduler_ScheduleCall_Bounties) isScheduler_ScheduleCall_Call() {}

func (*Scheduler_ScheduleCall_ChildBounties) isScheduler_ScheduleCall_Call() {}

func (*Scheduler_ScheduleCall_NominationPools) isScheduler_ScheduleCall_Call() {}

func (*Scheduler_ScheduleCall_Gear) isScheduler_ScheduleCall_Call() {}

func (*Scheduler_ScheduleCall_StakingRewards) isScheduler_ScheduleCall_Call() {}

func (*Scheduler_ScheduleCall_GearVoucher) isScheduler_ScheduleCall_Call() {}

type ChildBounties_ProposeCuratorCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentBountyId uint32                 `protobuf:"varint,1,opt,name=parent_bounty_id,json=parentBountyId,proto3" json:"parent_bounty_id,omitempty"`
	ChildBountyId  uint32                 `protobuf:"varint,2,opt,name=child_bounty_id,json=childBountyId,proto3" json:"child_bounty_id,omitempty"`
	Curator        *ChildBounties_Curator `protobuf:"bytes,3,opt,name=curator,proto3" json:"curator,omitempty"`
	Fee            string                 `protobuf:"bytes,4,opt,name=fee,proto3" json:"fee,omitempty"`
}

func (x *ChildBounties_ProposeCuratorCall) Reset() {
	*x = ChildBounties_ProposeCuratorCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[256]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChildBounties_ProposeCuratorCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChildBounties_ProposeCuratorCall) ProtoMessage() {}

func (x *ChildBounties_ProposeCuratorCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[256]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChildBounties_ProposeCuratorCall.ProtoReflect.Descriptor instead.
func (*ChildBounties_ProposeCuratorCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{256}
}

func (x *ChildBounties_ProposeCuratorCall) GetParentBountyId() uint32 {
	if x != nil {
		return x.ParentBountyId
	}
	return 0
}

func (x *ChildBounties_ProposeCuratorCall) GetChildBountyId() uint32 {
	if x != nil {
		return x.ChildBountyId
	}
	return 0
}

func (x *ChildBounties_ProposeCuratorCall) GetCurator() *ChildBounties_Curator {
	if x != nil {
		return x.Curator
	}
	return nil
}

func (x *ChildBounties_ProposeCuratorCall) GetFee() string {
	if x != nil {
		return x.Fee
	}
	return ""
}

type NominationPools_AdjustPoolDepositCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoolId uint32 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
}

func (x *NominationPools_AdjustPoolDepositCall) Reset() {
	*x = NominationPools_AdjustPoolDepositCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[257]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NominationPools_AdjustPoolDepositCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NominationPools_AdjustPoolDepositCall) ProtoMessage() {}

func (x *NominationPools_AdjustPoolDepositCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[257]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NominationPools_AdjustPoolDepositCall.ProtoReflect.Descriptor instead.
func (*NominationPools_AdjustPoolDepositCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{257}
}

func (x *NominationPools_AdjustPoolDepositCall) GetPoolId() uint32 {
	if x != nil {
		return x.PoolId
	}
	return 0
}

type Staking_MaxNominatorCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*Staking_MaxNominatorCount_Noop
	//	*Staking_MaxNominatorCount_Set
	//	*Staking_MaxNominatorCount_Remove
	Value isStaking_MaxNominatorCount_Value `protobuf_oneof:"value"`
}

func (x *Staking_MaxNominatorCount) Reset() {
	*x = Staking_MaxNominatorCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[258]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staking_MaxNominatorCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staking_MaxNominatorCount) ProtoMessage() {}

func (x *Staking_MaxNominatorCount) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[258]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staking_MaxNominatorCount.ProtoReflect.Descriptor instead.
func (*Staking_MaxNominatorCount) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{258}
}

func (m *Staking_MaxNominatorCount) GetValue() isStaking_MaxNominatorCount_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Staking_MaxNominatorCount) GetNoop() *Staking_Noop {
	if x, ok := x.GetValue().(*Staking_MaxNominatorCount_Noop); ok {
		return x.Noop
	}
	return nil
}

func (x *Staking_MaxNominatorCount) GetSet() *Staking_Set {
	if x, ok := x.GetValue().(*Staking_MaxNominatorCount_Set); ok {
		return x.Set
	}
	return nil
}

func (x *Staking_MaxNominatorCount) GetRemove() *Staking_Remove {
	if x, ok := x.GetValue().(*Staking_MaxNominatorCount_Remove); ok {
		return x.Remove
	}
	return nil
}

type isStaking_MaxNominatorCount_Value interface {
	isStaking_MaxNominatorCount_Value()
}

type Staking_MaxNominatorCount_Noop struct {
	Noop *Staking_Noop `protobuf:"bytes,1,opt,name=noop,proto3,oneof"`
}

type Staking_MaxNominatorCount_Set struct {
	Set *Staking_Set `protobuf:"bytes,2,opt,name=set,proto3,oneof"`
}

type Staking_MaxNominatorCount_Remove struct {
	Remove *Staking_Remove `protobuf:"bytes,3,opt,name=remove,proto3,oneof"`
}

func (*Staking_MaxNominatorCount_Noop) isStaking_MaxNominatorCount_Value() {}

func (*Staking_MaxNominatorCount_Set) isStaking_MaxNominatorCount_Value() {}

func (*Staking_MaxNominatorCount_Remove) isStaking_MaxNominatorCount_Value() {}

type Referenda_EnactmentMoment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*Referenda_EnactmentMoment_At
	//	*Referenda_EnactmentMoment_After
	Value isReferenda_EnactmentMoment_Value `protobuf_oneof:"value"`
}

func (x *Referenda_EnactmentMoment) Reset() {
	*x = Referenda_EnactmentMoment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[259]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Referenda_EnactmentMoment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Referenda_EnactmentMoment) ProtoMessage() {}

func (x *Referenda_EnactmentMoment) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[259]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Referenda_EnactmentMoment.ProtoReflect.Descriptor instead.
func (*Referenda_EnactmentMoment) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{259}
}

func (m *Referenda_EnactmentMoment) GetValue() isReferenda_EnactmentMoment_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Referenda_EnactmentMoment) GetAt() *Referenda_At {
	if x, ok := x.GetValue().(*Referenda_EnactmentMoment_At); ok {
		return x.At
	}
	return nil
}

func (x *Referenda_EnactmentMoment) GetAfter() *Referenda_After {
	if x, ok := x.GetValue().(*Referenda_EnactmentMoment_After); ok {
		return x.After
	}
	return nil
}

type isReferenda_EnactmentMoment_Value interface {
	isReferenda_EnactmentMoment_Value()
}

type Referenda_EnactmentMoment_At struct {
	At *Referenda_At `protobuf:"bytes,1,opt,name=at,proto3,oneof"`
}

type Referenda_EnactmentMoment_After struct {
	After *Referenda_After `protobuf:"bytes,2,opt,name=after,proto3,oneof"`
}

func (*Referenda_EnactmentMoment_At) isReferenda_EnactmentMoment_Value() {}

func (*Referenda_EnactmentMoment_After) isReferenda_EnactmentMoment_Value() {}

type NominationPools_PermissionlessCompound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NominationPools_PermissionlessCompound) Reset() {
	*x = NominationPools_PermissionlessCompound{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[260]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NominationPools_PermissionlessCompound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NominationPools_PermissionlessCompound) ProtoMessage() {}

func (x *NominationPools_PermissionlessCompound) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[260]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NominationPools_PermissionlessCompound.ProtoReflect.Descriptor instead.
func (*NominationPools_PermissionlessCompound) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{260}
}

type TupleNull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TupleNull) Reset() {
	*x = TupleNull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[261]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TupleNull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TupleNull) ProtoMessage() {}

func (x *TupleNull) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[261]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TupleNull.ProtoReflect.Descriptor instead.
func (*TupleNull) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{261}
}

type Staking_ReapStashCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stash            *SpCoreCryptoAccountId32 `protobuf:"bytes,1,opt,name=stash,proto3" json:"stash,omitempty"`
	NumSlashingSpans uint32                   `protobuf:"varint,2,opt,name=num_slashing_spans,json=numSlashingSpans,proto3" json:"num_slashing_spans,omitempty"`
}

func (x *Staking_ReapStashCall) Reset() {
	*x = Staking_ReapStashCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[262]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staking_ReapStashCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staking_ReapStashCall) ProtoMessage() {}

func (x *Staking_ReapStashCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[262]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staking_ReapStashCall.ProtoReflect.Descriptor instead.
func (*Staking_ReapStashCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{262}
}

func (x *Staking_ReapStashCall) GetStash() *SpCoreCryptoAccountId32 {
	if x != nil {
		return x.Stash
	}
	return nil
}

func (x *Staking_ReapStashCall) GetNumSlashingSpans() uint32 {
	if x != nil {
		return x.NumSlashingSpans
	}
	return 0
}

type NominationPools_JoinCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount string `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	PoolId uint32 `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
}

func (x *NominationPools_JoinCall) Reset() {
	*x = NominationPools_JoinCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[263]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NominationPools_JoinCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NominationPools_JoinCall) ProtoMessage() {}

func (x *NominationPools_JoinCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[263]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NominationPools_JoinCall.ProtoReflect.Descriptor instead.
func (*NominationPools_JoinCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{263}
}

func (x *NominationPools_JoinCall) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *NominationPools_JoinCall) GetPoolId() uint32 {
	if x != nil {
		return x.PoolId
	}
	return 0
}

type FellowshipReferenda_RefundDecisionDepositCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *FellowshipReferenda_RefundDecisionDepositCall) Reset() {
	*x = FellowshipReferenda_RefundDecisionDepositCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[264]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FellowshipReferenda_RefundDecisionDepositCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FellowshipReferenda_RefundDecisionDepositCall) ProtoMessage() {}

func (x *FellowshipReferenda_RefundDecisionDepositCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[264]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FellowshipReferenda_RefundDecisionDepositCall.ProtoReflect.Descriptor instead.
func (*FellowshipReferenda_RefundDecisionDepositCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{264}
}

func (x *FellowshipReferenda_RefundDecisionDepositCall) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type Identity_Raw27 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Identity_Raw27) Reset() {
	*x = Identity_Raw27{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[265]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_Raw27) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_Raw27) ProtoMessage() {}

func (x *Identity_Raw27) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[265]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_Raw27.ProtoReflect.Descriptor instead.
func (*Identity_Raw27) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{265}
}

func (x *Identity_Raw27) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Identity_RenameSubCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sub  *Identity_Sub  `protobuf:"bytes,1,opt,name=sub,proto3" json:"sub,omitempty"`
	Data *Identity_Data `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Identity_RenameSubCall) Reset() {
	*x = Identity_RenameSubCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[266]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_RenameSubCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_RenameSubCall) ProtoMessage() {}

func (x *Identity_RenameSubCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[266]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_RenameSubCall.ProtoReflect.Descriptor instead.
func (*Identity_RenameSubCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{266}
}

func (x *Identity_RenameSubCall) GetSub() *Identity_Sub {
	if x != nil {
		return x.Sub
	}
	return nil
}

func (x *Identity_RenameSubCall) GetData() *Identity_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type Proxy_ProxyCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Real           *Proxy_Real           `protobuf:"bytes,1,opt,name=real,proto3" json:"real,omitempty"`
	ForceProxyType *Proxy_ForceProxyType `protobuf:"bytes,2,opt,name=force_proxy_type,json=forceProxyType,proto3,oneof" json:"force_proxy_type,omitempty"`
	// Types that are assignable to Call:
	//
	//	*Proxy_ProxyCall_System
	//	*Proxy_ProxyCall_Timestamp
	//	*Proxy_ProxyCall_Babe
	//	*Proxy_ProxyCall_Grandpa
	//	*Proxy_ProxyCall_Balances
	//	*Proxy_ProxyCall_Vesting
	//	*Proxy_ProxyCall_BagsList
	//	*Proxy_ProxyCall_ImOnline
	//	*Proxy_ProxyCall_Staking
	//	*Proxy_ProxyCall_Session
	//	*Proxy_ProxyCall_Treasury
	//	*Proxy_ProxyCall_Utility
	//	*Proxy_ProxyCall_ConvictionVoting
	//	*Proxy_ProxyCall_Referenda
	//	*Proxy_ProxyCall_FellowshipCollective
	//	*Proxy_ProxyCall_FellowshipReferenda
	//	*Proxy_ProxyCall_Whitelist
	//	*Proxy_ProxyCall_Scheduler
	//	*Proxy_ProxyCall_Preimage
	//	*Proxy_ProxyCall_Identity
	//	*Proxy_ProxyCall_Proxy
	//	*Proxy_ProxyCall_Multisig
	//	*Proxy_ProxyCall_ElectionProviderMultiPhase
	//	*Proxy_ProxyCall_Bounties
	//	*Proxy_ProxyCall_ChildBounties
	//	*Proxy_ProxyCall_NominationPools
	//	*Proxy_ProxyCall_Gear
	//	*Proxy_ProxyCall_StakingRewards
	//	*Proxy_ProxyCall_GearVoucher
	Call isProxy_ProxyCall_Call `protobuf_oneof:"call"`
}

func (x *Proxy_ProxyCall) Reset() {
	*x = Proxy_ProxyCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[267]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proxy_ProxyCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proxy_ProxyCall) ProtoMessage() {}

func (x *Proxy_ProxyCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[267]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proxy_ProxyCall.ProtoReflect.Descriptor instead.
func (*Proxy_ProxyCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{267}
}

func (x *Proxy_ProxyCall) GetReal() *Proxy_Real {
	if x != nil {
		return x.Real
	}
	return nil
}

func (x *Proxy_ProxyCall) GetForceProxyType() *Proxy_ForceProxyType {
	if x != nil {
		return x.ForceProxyType
	}
	return nil
}

func (m *Proxy_ProxyCall) GetCall() isProxy_ProxyCall_Call {
	if m != nil {
		return m.Call
	}
	return nil
}

func (x *Proxy_ProxyCall) GetSystem() *SystemPallet {
	if x, ok := x.GetCall().(*Proxy_ProxyCall_System); ok {
		return x.System
	}
	return nil
}

func (x *Proxy_ProxyCall) GetTimestamp() *TimestampPallet {
	if x, ok := x.GetCall().(*Proxy_ProxyCall_Timestamp); ok {
		return x.Timestamp
	}
	return nil
}

func (x *Proxy_ProxyCall) GetBabe() *BabePallet {
	if x, ok := x.GetCall().(*Proxy_ProxyCall_Babe); ok {
		return x.Babe
	}
	return nil
}

func (x *Proxy_ProxyCall) GetGrandpa() *GrandpaPallet {
	if x, ok := x.GetCall().(*Proxy_ProxyCall_Grandpa); ok {
		return x.Grandpa
	}
	return nil
}

func (x *Proxy_ProxyCall) GetBalances() *BalancesPallet {
	if x, ok := x.GetCall().(*Proxy_ProxyCall_Balances); ok {
		return x.Balances
	}
	return nil
}

func (x *Proxy_ProxyCall) GetVesting() *VestingPallet {
	if x, ok := x.GetCall().(*Proxy_ProxyCall_Vesting); ok {
		return x.Vesting
	}
	return nil
}

func (x *Proxy_ProxyCall) GetBagsList() *BagsListPallet {
	if x, ok := x.GetCall().(*Proxy_ProxyCall_BagsList); ok {
		return x.BagsList
	}
	return nil
}

func (x *Proxy_ProxyCall) GetImOnline() *ImOnlinePallet {
	if x, ok := x.GetCall().(*Proxy_ProxyCall_ImOnline); ok {
		return x.ImOnline
	}
	return nil
}

func (x *Proxy_ProxyCall) GetStaking() *StakingPallet {
	if x, ok := x.GetCall().(*Proxy_ProxyCall_Staking); ok {
		return x.Staking
	}
	return nil
}

func (x *Proxy_ProxyCall) GetSession() *SessionPallet {
	if x, ok := x.GetCall().(*Proxy_ProxyCall_Session); ok {
		return x.Session
	}
	return nil
}

func (x *Proxy_ProxyCall) GetTreasury() *TreasuryPallet {
	if x, ok := x.GetCall().(*Proxy_ProxyCall_Treasury); ok {
		return x.Treasury
	}
	return nil
}

func (x *Proxy_ProxyCall) GetUtility() *UtilityPallet {
	if x, ok := x.GetCall().(*Proxy_ProxyCall_Utility); ok {
		return x.Utility
	}
	return nil
}

func (x *Proxy_ProxyCall) GetConvictionVoting() *ConvictionVotingPallet {
	if x, ok := x.GetCall().(*Proxy_ProxyCall_ConvictionVoting); ok {
		return x.ConvictionVoting
	}
	return nil
}

func (x *Proxy_ProxyCall) GetReferenda() *ReferendaPallet {
	if x, ok := x.GetCall().(*Proxy_ProxyCall_Referenda); ok {
		return x.Referenda
	}
	return nil
}

func (x *Proxy_ProxyCall) GetFellowshipCollective() *FellowshipCollectivePallet {
	if x, ok := x.GetCall().(*Proxy_ProxyCall_FellowshipCollective); ok {
		return x.FellowshipCollective
	}
	return nil
}

func (x *Proxy_ProxyCall) GetFellowshipReferenda() *FellowshipReferendaPallet {
	if x, ok := x.GetCall().(*Proxy_ProxyCall_FellowshipReferenda); ok {
		return x.FellowshipReferenda
	}
	return nil
}

func (x *Proxy_ProxyCall) GetWhitelist() *WhitelistPallet {
	if x, ok := x.GetCall().(*Proxy_ProxyCall_Whitelist); ok {
		return x.Whitelist
	}
	return nil
}

func (x *Proxy_ProxyCall) GetScheduler() *SchedulerPallet {
	if x, ok := x.GetCall().(*Proxy_ProxyCall_Scheduler); ok {
		return x.Scheduler
	}
	return nil
}

func (x *Proxy_ProxyCall) GetPreimage() *PreimagePallet {
	if x, ok := x.GetCall().(*Proxy_ProxyCall_Preimage); ok {
		return x.Preimage
	}
	return nil
}

func (x *Proxy_ProxyCall) GetIdentity() *IdentityPallet {
	if x, ok := x.GetCall().(*Proxy_ProxyCall_Identity); ok {
		return x.Identity
	}
	return nil
}

func (x *Proxy_ProxyCall) GetProxy() *ProxyPallet {
	if x, ok := x.GetCall().(*Proxy_ProxyCall_Proxy); ok {
		return x.Proxy
	}
	return nil
}

func (x *Proxy_ProxyCall) GetMultisig() *MultisigPallet {
	if x, ok := x.GetCall().(*Proxy_ProxyCall_Multisig); ok {
		return x.Multisig
	}
	return nil
}

func (x *Proxy_ProxyCall) GetElectionProviderMultiPhase() *ElectionProviderMultiPhasePallet {
	if x, ok := x.GetCall().(*Proxy_ProxyCall_ElectionProviderMultiPhase); ok {
		return x.ElectionProviderMultiPhase
	}
	return nil
}

func (x *Proxy_ProxyCall) GetBounties() *BountiesPallet {
	if x, ok := x.GetCall().(*Proxy_ProxyCall_Bounties); ok {
		return x.Bounties
	}
	return nil
}

func (x *Proxy_ProxyCall) GetChildBounties() *ChildBountiesPallet {
	if x, ok := x.GetCall().(*Proxy_ProxyCall_ChildBounties); ok {
		return x.ChildBounties
	}
	return nil
}

func (x *Proxy_ProxyCall) GetNominationPools() *NominationPoolsPallet {
	if x, ok := x.GetCall().(*Proxy_ProxyCall_NominationPools); ok {
		return x.NominationPools
	}
	return nil
}

func (x *Proxy_ProxyCall) GetGear() *GearPallet {
	if x, ok := x.GetCall().(*Proxy_ProxyCall_Gear); ok {
		return x.Gear
	}
	return nil
}

func (x *Proxy_ProxyCall) GetStakingRewards() *StakingRewardsPallet {
	if x, ok := x.GetCall().(*Proxy_ProxyCall_StakingRewards); ok {
		return x.StakingRewards
	}
	return nil
}

func (x *Proxy_ProxyCall) GetGearVoucher() *GearVoucherPallet {
	if x, ok := x.GetCall().(*Proxy_ProxyCall_GearVoucher); ok {
		return x.GearVoucher
	}
	return nil
}

type isProxy_ProxyCall_Call interface {
	isProxy_ProxyCall_Call()
}

type Proxy_ProxyCall_System struct {
	System *SystemPallet `protobuf:"bytes,3,opt,name=system,proto3,oneof"`
}

type Proxy_ProxyCall_Timestamp struct {
	Timestamp *TimestampPallet `protobuf:"bytes,4,opt,name=timestamp,proto3,oneof"`
}

type Proxy_ProxyCall_Babe struct {
	Babe *BabePallet `protobuf:"bytes,5,opt,name=babe,proto3,oneof"`
}

type Proxy_ProxyCall_Grandpa struct {
	Grandpa *GrandpaPallet `protobuf:"bytes,6,opt,name=grandpa,proto3,oneof"`
}

type Proxy_ProxyCall_Balances struct {
	Balances *BalancesPallet `protobuf:"bytes,7,opt,name=balances,proto3,oneof"`
}

type Proxy_ProxyCall_Vesting struct {
	Vesting *VestingPallet `protobuf:"bytes,8,opt,name=vesting,proto3,oneof"`
}

type Proxy_ProxyCall_BagsList struct {
	BagsList *BagsListPallet `protobuf:"bytes,9,opt,name=bags_list,json=bagsList,proto3,oneof"`
}

type Proxy_ProxyCall_ImOnline struct {
	ImOnline *ImOnlinePallet `protobuf:"bytes,10,opt,name=im_online,json=imOnline,proto3,oneof"`
}

type Proxy_ProxyCall_Staking struct {
	Staking *StakingPallet `protobuf:"bytes,11,opt,name=staking,proto3,oneof"`
}

type Proxy_ProxyCall_Session struct {
	Session *SessionPallet `protobuf:"bytes,12,opt,name=session,proto3,oneof"`
}

type Proxy_ProxyCall_Treasury struct {
	Treasury *TreasuryPallet `protobuf:"bytes,13,opt,name=treasury,proto3,oneof"`
}

type Proxy_ProxyCall_Utility struct {
	Utility *UtilityPallet `protobuf:"bytes,14,opt,name=utility,proto3,oneof"`
}

type Proxy_ProxyCall_ConvictionVoting struct {
	ConvictionVoting *ConvictionVotingPallet `protobuf:"bytes,15,opt,name=conviction_voting,json=convictionVoting,proto3,oneof"`
}

type Proxy_ProxyCall_Referenda struct {
	Referenda *ReferendaPallet `protobuf:"bytes,16,opt,name=referenda,proto3,oneof"`
}

type Proxy_ProxyCall_FellowshipCollective struct {
	FellowshipCollective *FellowshipCollectivePallet `protobuf:"bytes,17,opt,name=fellowship_collective,json=fellowshipCollective,proto3,oneof"`
}

type Proxy_ProxyCall_FellowshipReferenda struct {
	FellowshipReferenda *FellowshipReferendaPallet `protobuf:"bytes,18,opt,name=fellowship_referenda,json=fellowshipReferenda,proto3,oneof"`
}

type Proxy_ProxyCall_Whitelist struct {
	Whitelist *WhitelistPallet `protobuf:"bytes,19,opt,name=whitelist,proto3,oneof"`
}

type Proxy_ProxyCall_Scheduler struct {
	Scheduler *SchedulerPallet `protobuf:"bytes,20,opt,name=scheduler,proto3,oneof"`
}

type Proxy_ProxyCall_Preimage struct {
	Preimage *PreimagePallet `protobuf:"bytes,21,opt,name=preimage,proto3,oneof"`
}

type Proxy_ProxyCall_Identity struct {
	Identity *IdentityPallet `protobuf:"bytes,22,opt,name=identity,proto3,oneof"`
}

type Proxy_ProxyCall_Proxy struct {
	Proxy *ProxyPallet `protobuf:"bytes,23,opt,name=proxy,proto3,oneof"`
}

type Proxy_ProxyCall_Multisig struct {
	Multisig *MultisigPallet `protobuf:"bytes,24,opt,name=multisig,proto3,oneof"`
}

type Proxy_ProxyCall_ElectionProviderMultiPhase struct {
	ElectionProviderMultiPhase *ElectionProviderMultiPhasePallet `protobuf:"bytes,25,opt,name=election_provider_multi_phase,json=electionProviderMultiPhase,proto3,oneof"`
}

type Proxy_ProxyCall_Bounties struct {
	Bounties *BountiesPallet `protobuf:"bytes,26,opt,name=bounties,proto3,oneof"`
}

type Proxy_ProxyCall_ChildBounties struct {
	ChildBounties *ChildBountiesPallet `protobuf:"bytes,27,opt,name=child_bounties,json=childBounties,proto3,oneof"`
}

type Proxy_ProxyCall_NominationPools struct {
	NominationPools *NominationPoolsPallet `protobuf:"bytes,28,opt,name=nomination_pools,json=nominationPools,proto3,oneof"`
}

type Proxy_ProxyCall_Gear struct {
	Gear *GearPallet `protobuf:"bytes,29,opt,name=gear,proto3,oneof"`
}

type Proxy_ProxyCall_StakingRewards struct {
	StakingRewards *StakingRewardsPallet `protobuf:"bytes,30,opt,name=staking_rewards,json=stakingRewards,proto3,oneof"`
}

type Proxy_ProxyCall_GearVoucher struct {
	GearVoucher *GearVoucherPallet `protobuf:"bytes,31,opt,name=gear_voucher,json=gearVoucher,proto3,oneof"`
}

func (*Proxy_ProxyCall_System) isProxy_ProxyCall_Call() {}

func (*Proxy_ProxyCall_Timestamp) isProxy_ProxyCall_Call() {}

func (*Proxy_ProxyCall_Babe) isProxy_ProxyCall_Call() {}

func (*Proxy_ProxyCall_Grandpa) isProxy_ProxyCall_Call() {}

func (*Proxy_ProxyCall_Balances) isProxy_ProxyCall_Call() {}

func (*Proxy_ProxyCall_Vesting) isProxy_ProxyCall_Call() {}

func (*Proxy_ProxyCall_BagsList) isProxy_ProxyCall_Call() {}

func (*Proxy_ProxyCall_ImOnline) isProxy_ProxyCall_Call() {}

func (*Proxy_ProxyCall_Staking) isProxy_ProxyCall_Call() {}

func (*Proxy_ProxyCall_Session) isProxy_ProxyCall_Call() {}

func (*Proxy_ProxyCall_Treasury) isProxy_ProxyCall_Call() {}

func (*Proxy_ProxyCall_Utility) isProxy_ProxyCall_Call() {}

func (*Proxy_ProxyCall_ConvictionVoting) isProxy_ProxyCall_Call() {}

func (*Proxy_ProxyCall_Referenda) isProxy_ProxyCall_Call() {}

func (*Proxy_ProxyCall_FellowshipCollective) isProxy_ProxyCall_Call() {}

func (*Proxy_ProxyCall_FellowshipReferenda) isProxy_ProxyCall_Call() {}

func (*Proxy_ProxyCall_Whitelist) isProxy_ProxyCall_Call() {}

func (*Proxy_ProxyCall_Scheduler) isProxy_ProxyCall_Call() {}

func (*Proxy_ProxyCall_Preimage) isProxy_ProxyCall_Call() {}

func (*Proxy_ProxyCall_Identity) isProxy_ProxyCall_Call() {}

func (*Proxy_ProxyCall_Proxy) isProxy_ProxyCall_Call() {}

func (*Proxy_ProxyCall_Multisig) isProxy_ProxyCall_Call() {}

func (*Proxy_ProxyCall_ElectionProviderMultiPhase) isProxy_ProxyCall_Call() {}

func (*Proxy_ProxyCall_Bounties) isProxy_ProxyCall_Call() {}

func (*Proxy_ProxyCall_ChildBounties) isProxy_ProxyCall_Call() {}

func (*Proxy_ProxyCall_NominationPools) isProxy_ProxyCall_Call() {}

func (*Proxy_ProxyCall_Gear) isProxy_ProxyCall_Call() {}

func (*Proxy_ProxyCall_StakingRewards) isProxy_ProxyCall_Call() {}

func (*Proxy_ProxyCall_GearVoucher) isProxy_ProxyCall_Call() {}

type ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes15Listuint32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 uint32                                                               `protobuf:"varint,1,opt,name=value0,proto3" json:"value0,omitempty"`
	Value1 []*ElectionProviderMultiPhase_TupleUint32SpArithmeticPerThingsPerU16 `protobuf:"bytes,2,rep,name=value1,proto3" json:"value1,omitempty"`
	Value2 uint32                                                               `protobuf:"varint,3,opt,name=value2,proto3" json:"value2,omitempty"`
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes15Listuint32) Reset() {
	*x = ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes15Listuint32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[268]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes15Listuint32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes15Listuint32) ProtoMessage() {
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes15Listuint32) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[268]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes15Listuint32.ProtoReflect.Descriptor instead.
func (*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes15Listuint32) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{268}
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes15Listuint32) GetValue0() uint32 {
	if x != nil {
		return x.Value0
	}
	return 0
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes15Listuint32) GetValue1() []*ElectionProviderMultiPhase_TupleUint32SpArithmeticPerThingsPerU16 {
	if x != nil {
		return x.Value1
	}
	return nil
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes15Listuint32) GetValue2() uint32 {
	if x != nil {
		return x.Value2
	}
	return 0
}

type Balances_Address20 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Balances_Address20) Reset() {
	*x = Balances_Address20{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[269]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Balances_Address20) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Balances_Address20) ProtoMessage() {}

func (x *Balances_Address20) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[269]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Balances_Address20.ProtoReflect.Descriptor instead.
func (*Balances_Address20) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{269}
}

func (x *Balances_Address20) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Vesting_Address20 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Vesting_Address20) Reset() {
	*x = Vesting_Address20{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[270]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vesting_Address20) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vesting_Address20) ProtoMessage() {}

func (x *Vesting_Address20) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[270]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vesting_Address20.ProtoReflect.Descriptor instead.
func (*Vesting_Address20) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{270}
}

func (x *Vesting_Address20) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Bounties_CloseBountyCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BountyId uint32 `protobuf:"varint,1,opt,name=bounty_id,json=bountyId,proto3" json:"bounty_id,omitempty"`
}

func (x *Bounties_CloseBountyCall) Reset() {
	*x = Bounties_CloseBountyCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[271]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bounties_CloseBountyCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bounties_CloseBountyCall) ProtoMessage() {}

func (x *Bounties_CloseBountyCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[271]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bounties_CloseBountyCall.ProtoReflect.Descriptor instead.
func (*Bounties_CloseBountyCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{271}
}

func (x *Bounties_CloseBountyCall) GetBountyId() uint32 {
	if x != nil {
		return x.BountyId
	}
	return 0
}

type Bounties_AcceptCuratorCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BountyId uint32 `protobuf:"varint,1,opt,name=bounty_id,json=bountyId,proto3" json:"bounty_id,omitempty"`
}

func (x *Bounties_AcceptCuratorCall) Reset() {
	*x = Bounties_AcceptCuratorCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[272]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bounties_AcceptCuratorCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bounties_AcceptCuratorCall) ProtoMessage() {}

func (x *Bounties_AcceptCuratorCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[272]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bounties_AcceptCuratorCall.ProtoReflect.Descriptor instead.
func (*Bounties_AcceptCuratorCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{272}
}

func (x *Bounties_AcceptCuratorCall) GetBountyId() uint32 {
	if x != nil {
		return x.BountyId
	}
	return 0
}

type StakingRewards_Id struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 *SpCoreCryptoAccountId32 `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *StakingRewards_Id) Reset() {
	*x = StakingRewards_Id{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[273]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakingRewards_Id) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakingRewards_Id) ProtoMessage() {}

func (x *StakingRewards_Id) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[273]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakingRewards_Id.ProtoReflect.Descriptor instead.
func (*StakingRewards_Id) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{273}
}

func (x *StakingRewards_Id) GetValue0() *SpCoreCryptoAccountId32 {
	if x != nil {
		return x.Value0
	}
	return nil
}

type GearVoucher_UpdateCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spender         *SpCoreCryptoAccountId32                        `protobuf:"bytes,1,opt,name=spender,proto3" json:"spender,omitempty"`
	VoucherId       *GearVoucher_PalletGearVoucherInternalVoucherId `protobuf:"bytes,2,opt,name=voucher_id,json=voucherId,proto3" json:"voucher_id,omitempty"`
	MoveOwnership   *SpCoreCryptoAccountId32                        `protobuf:"bytes,3,opt,name=move_ownership,json=moveOwnership,proto3,oneof" json:"move_ownership,omitempty"`
	BalanceTopUp    *string                                         `protobuf:"bytes,4,opt,name=balance_top_up,json=balanceTopUp,proto3,oneof" json:"balance_top_up,omitempty"`
	AppendPrograms  *GearVoucher_AppendPrograms                     `protobuf:"bytes,5,opt,name=append_programs,json=appendPrograms,proto3,oneof" json:"append_programs,omitempty"`
	CodeUploading   *bool                                           `protobuf:"varint,6,opt,name=code_uploading,json=codeUploading,proto3,oneof" json:"code_uploading,omitempty"`
	ProlongDuration *uint32                                         `protobuf:"varint,7,opt,name=prolong_duration,json=prolongDuration,proto3,oneof" json:"prolong_duration,omitempty"`
}

func (x *GearVoucher_UpdateCall) Reset() {
	*x = GearVoucher_UpdateCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[274]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GearVoucher_UpdateCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GearVoucher_UpdateCall) ProtoMessage() {}

func (x *GearVoucher_UpdateCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[274]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GearVoucher_UpdateCall.ProtoReflect.Descriptor instead.
func (*GearVoucher_UpdateCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{274}
}

func (x *GearVoucher_UpdateCall) GetSpender() *SpCoreCryptoAccountId32 {
	if x != nil {
		return x.Spender
	}
	return nil
}

func (x *GearVoucher_UpdateCall) GetVoucherId() *GearVoucher_PalletGearVoucherInternalVoucherId {
	if x != nil {
		return x.VoucherId
	}
	return nil
}

func (x *GearVoucher_UpdateCall) GetMoveOwnership() *SpCoreCryptoAccountId32 {
	if x != nil {
		return x.MoveOwnership
	}
	return nil
}

func (x *GearVoucher_UpdateCall) GetBalanceTopUp() string {
	if x != nil && x.BalanceTopUp != nil {
		return *x.BalanceTopUp
	}
	return ""
}

func (x *GearVoucher_UpdateCall) GetAppendPrograms() *GearVoucher_AppendPrograms {
	if x != nil {
		return x.AppendPrograms
	}
	return nil
}

func (x *GearVoucher_UpdateCall) GetCodeUploading() bool {
	if x != nil && x.CodeUploading != nil {
		return *x.CodeUploading
	}
	return false
}

func (x *GearVoucher_UpdateCall) GetProlongDuration() uint32 {
	if x != nil && x.ProlongDuration != nil {
		return *x.ProlongDuration
	}
	return 0
}

type FinalityGrandpaEquivocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundNumber uint64                                                     `protobuf:"varint,1,opt,name=round_number,json=roundNumber,proto3" json:"round_number,omitempty"`
	Identity    *SpConsensusGrandpaAppPublic                               `protobuf:"bytes,2,opt,name=identity,proto3" json:"identity,omitempty"`
	First       *TupleFinalityGrandpaPrevotespConsensusGrandpaAppSignature `protobuf:"bytes,3,opt,name=first,proto3" json:"first,omitempty"`
	Second      *TupleFinalityGrandpaPrevotespConsensusGrandpaAppSignature `protobuf:"bytes,4,opt,name=second,proto3" json:"second,omitempty"`
}

func (x *FinalityGrandpaEquivocation) Reset() {
	*x = FinalityGrandpaEquivocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[275]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinalityGrandpaEquivocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalityGrandpaEquivocation) ProtoMessage() {}

func (x *FinalityGrandpaEquivocation) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[275]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalityGrandpaEquivocation.ProtoReflect.Descriptor instead.
func (*FinalityGrandpaEquivocation) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{275}
}

func (x *FinalityGrandpaEquivocation) GetRoundNumber() uint64 {
	if x != nil {
		return x.RoundNumber
	}
	return 0
}

func (x *FinalityGrandpaEquivocation) GetIdentity() *SpConsensusGrandpaAppPublic {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *FinalityGrandpaEquivocation) GetFirst() *TupleFinalityGrandpaPrevotespConsensusGrandpaAppSignature {
	if x != nil {
		return x.First
	}
	return nil
}

func (x *FinalityGrandpaEquivocation) GetSecond() *TupleFinalityGrandpaPrevotespConsensusGrandpaAppSignature {
	if x != nil {
		return x.Second
	}
	return nil
}

type HistoricalPallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HistoricalPallet) Reset() {
	*x = HistoricalPallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[276]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoricalPallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoricalPallet) ProtoMessage() {}

func (x *HistoricalPallet) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[276]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoricalPallet.ProtoReflect.Descriptor instead.
func (*HistoricalPallet) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{276}
}

type Utility_BatchAllCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Calls []*VaraRuntimeRuntimeCall `protobuf:"bytes,1,rep,name=calls,proto3" json:"calls,omitempty"`
}

func (x *Utility_BatchAllCall) Reset() {
	*x = Utility_BatchAllCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[277]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Utility_BatchAllCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Utility_BatchAllCall) ProtoMessage() {}

func (x *Utility_BatchAllCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[277]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Utility_BatchAllCall.ProtoReflect.Descriptor instead.
func (*Utility_BatchAllCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{277}
}

func (x *Utility_BatchAllCall) GetCalls() []*VaraRuntimeRuntimeCall {
	if x != nil {
		return x.Calls
	}
	return nil
}

type Root struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Root) Reset() {
	*x = Root{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[278]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Root) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Root) ProtoMessage() {}

func (x *Root) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[278]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Root.ProtoReflect.Descriptor instead.
func (*Root) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{278}
}

type ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes14Listuint32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 uint32                                                               `protobuf:"varint,1,opt,name=value0,proto3" json:"value0,omitempty"`
	Value1 []*ElectionProviderMultiPhase_TupleUint32SpArithmeticPerThingsPerU16 `protobuf:"bytes,2,rep,name=value1,proto3" json:"value1,omitempty"`
	Value2 uint32                                                               `protobuf:"varint,3,opt,name=value2,proto3" json:"value2,omitempty"`
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes14Listuint32) Reset() {
	*x = ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes14Listuint32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[279]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes14Listuint32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes14Listuint32) ProtoMessage() {
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes14Listuint32) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[279]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes14Listuint32.ProtoReflect.Descriptor instead.
func (*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes14Listuint32) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{279}
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes14Listuint32) GetValue0() uint32 {
	if x != nil {
		return x.Value0
	}
	return 0
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes14Listuint32) GetValue1() []*ElectionProviderMultiPhase_TupleUint32SpArithmeticPerThingsPerU16 {
	if x != nil {
		return x.Value1
	}
	return nil
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes14Listuint32) GetValue2() uint32 {
	if x != nil {
		return x.Value2
	}
	return 0
}

type Staking_TupleNull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *TupleNull `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Staking_TupleNull) Reset() {
	*x = Staking_TupleNull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[280]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staking_TupleNull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staking_TupleNull) ProtoMessage() {}

func (x *Staking_TupleNull) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[280]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staking_TupleNull.ProtoReflect.Descriptor instead.
func (*Staking_TupleNull) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{280}
}

func (x *Staking_TupleNull) GetValue() *TupleNull {
	if x != nil {
		return x.Value
	}
	return nil
}

type SpRuntimeMultiaddressMultiAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Targets *Staking_Targets `protobuf:"bytes,1,opt,name=targets,proto3" json:"targets,omitempty"`
}

func (x *SpRuntimeMultiaddressMultiAddress) Reset() {
	*x = SpRuntimeMultiaddressMultiAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[281]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpRuntimeMultiaddressMultiAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpRuntimeMultiaddressMultiAddress) ProtoMessage() {}

func (x *SpRuntimeMultiaddressMultiAddress) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[281]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpRuntimeMultiaddressMultiAddress.ProtoReflect.Descriptor instead.
func (*SpRuntimeMultiaddressMultiAddress) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{281}
}

func (x *SpRuntimeMultiaddressMultiAddress) GetTargets() *Staking_Targets {
	if x != nil {
		return x.Targets
	}
	return nil
}

type StakingPallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Call:
	//
	//	*StakingPallet_BondCall
	//	*StakingPallet_BondExtraCall
	//	*StakingPallet_UnbondCall
	//	*StakingPallet_WithdrawUnbondedCall
	//	*StakingPallet_ValidateCall
	//	*StakingPallet_NominateCall
	//	*StakingPallet_ChillCall
	//	*StakingPallet_SetPayeeCall
	//	*StakingPallet_SetControllerCall
	//	*StakingPallet_SetValidatorCountCall
	//	*StakingPallet_IncreaseValidatorCountCall
	//	*StakingPallet_ScaleValidatorCountCall
	//	*StakingPallet_ForceNoErasCall
	//	*StakingPallet_ForceNewEraCall
	//	*StakingPallet_SetInvulnerablesCall
	//	*StakingPallet_ForceUnstakeCall
	//	*StakingPallet_ForceNewEraAlwaysCall
	//	*StakingPallet_CancelDeferredSlashCall
	//	*StakingPallet_PayoutStakersCall
	//	*StakingPallet_RebondCall
	//	*StakingPallet_ReapStashCall
	//	*StakingPallet_KickCall
	//	*StakingPallet_SetStakingConfigsCall
	//	*StakingPallet_ChillOtherCall
	//	*StakingPallet_ForceApplyMinCommissionCall
	//	*StakingPallet_SetMinCommissionCall
	Call isStakingPallet_Call `protobuf_oneof:"call"`
}

func (x *StakingPallet) Reset() {
	*x = StakingPallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[282]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakingPallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakingPallet) ProtoMessage() {}

func (x *StakingPallet) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[282]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakingPallet.ProtoReflect.Descriptor instead.
func (*StakingPallet) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{282}
}

func (m *StakingPallet) GetCall() isStakingPallet_Call {
	if m != nil {
		return m.Call
	}
	return nil
}

func (x *StakingPallet) GetBondCall() *Staking_BondCall {
	if x, ok := x.GetCall().(*StakingPallet_BondCall); ok {
		return x.BondCall
	}
	return nil
}

func (x *StakingPallet) GetBondExtraCall() *Staking_BondExtraCall {
	if x, ok := x.GetCall().(*StakingPallet_BondExtraCall); ok {
		return x.BondExtraCall
	}
	return nil
}

func (x *StakingPallet) GetUnbondCall() *Staking_UnbondCall {
	if x, ok := x.GetCall().(*StakingPallet_UnbondCall); ok {
		return x.UnbondCall
	}
	return nil
}

func (x *StakingPallet) GetWithdrawUnbondedCall() *Staking_WithdrawUnbondedCall {
	if x, ok := x.GetCall().(*StakingPallet_WithdrawUnbondedCall); ok {
		return x.WithdrawUnbondedCall
	}
	return nil
}

func (x *StakingPallet) GetValidateCall() *Staking_ValidateCall {
	if x, ok := x.GetCall().(*StakingPallet_ValidateCall); ok {
		return x.ValidateCall
	}
	return nil
}

func (x *StakingPallet) GetNominateCall() *Staking_NominateCall {
	if x, ok := x.GetCall().(*StakingPallet_NominateCall); ok {
		return x.NominateCall
	}
	return nil
}

func (x *StakingPallet) GetChillCall() *Staking_ChillCall {
	if x, ok := x.GetCall().(*StakingPallet_ChillCall); ok {
		return x.ChillCall
	}
	return nil
}

func (x *StakingPallet) GetSetPayeeCall() *Staking_SetPayeeCall {
	if x, ok := x.GetCall().(*StakingPallet_SetPayeeCall); ok {
		return x.SetPayeeCall
	}
	return nil
}

func (x *StakingPallet) GetSetControllerCall() *Staking_SetControllerCall {
	if x, ok := x.GetCall().(*StakingPallet_SetControllerCall); ok {
		return x.SetControllerCall
	}
	return nil
}

func (x *StakingPallet) GetSetValidatorCountCall() *Staking_SetValidatorCountCall {
	if x, ok := x.GetCall().(*StakingPallet_SetValidatorCountCall); ok {
		return x.SetValidatorCountCall
	}
	return nil
}

func (x *StakingPallet) GetIncreaseValidatorCountCall() *Staking_IncreaseValidatorCountCall {
	if x, ok := x.GetCall().(*StakingPallet_IncreaseValidatorCountCall); ok {
		return x.IncreaseValidatorCountCall
	}
	return nil
}

func (x *StakingPallet) GetScaleValidatorCountCall() *Staking_ScaleValidatorCountCall {
	if x, ok := x.GetCall().(*StakingPallet_ScaleValidatorCountCall); ok {
		return x.ScaleValidatorCountCall
	}
	return nil
}

func (x *StakingPallet) GetForceNoErasCall() *Staking_ForceNoErasCall {
	if x, ok := x.GetCall().(*StakingPallet_ForceNoErasCall); ok {
		return x.ForceNoErasCall
	}
	return nil
}

func (x *StakingPallet) GetForceNewEraCall() *Staking_ForceNewEraCall {
	if x, ok := x.GetCall().(*StakingPallet_ForceNewEraCall); ok {
		return x.ForceNewEraCall
	}
	return nil
}

func (x *StakingPallet) GetSetInvulnerablesCall() *Staking_SetInvulnerablesCall {
	if x, ok := x.GetCall().(*StakingPallet_SetInvulnerablesCall); ok {
		return x.SetInvulnerablesCall
	}
	return nil
}

func (x *StakingPallet) GetForceUnstakeCall() *Staking_ForceUnstakeCall {
	if x, ok := x.GetCall().(*StakingPallet_ForceUnstakeCall); ok {
		return x.ForceUnstakeCall
	}
	return nil
}

func (x *StakingPallet) GetForceNewEraAlwaysCall() *Staking_ForceNewEraAlwaysCall {
	if x, ok := x.GetCall().(*StakingPallet_ForceNewEraAlwaysCall); ok {
		return x.ForceNewEraAlwaysCall
	}
	return nil
}

func (x *StakingPallet) GetCancelDeferredSlashCall() *Staking_CancelDeferredSlashCall {
	if x, ok := x.GetCall().(*StakingPallet_CancelDeferredSlashCall); ok {
		return x.CancelDeferredSlashCall
	}
	return nil
}

func (x *StakingPallet) GetPayoutStakersCall() *Staking_PayoutStakersCall {
	if x, ok := x.GetCall().(*StakingPallet_PayoutStakersCall); ok {
		return x.PayoutStakersCall
	}
	return nil
}

func (x *StakingPallet) GetRebondCall() *Staking_RebondCall {
	if x, ok := x.GetCall().(*StakingPallet_RebondCall); ok {
		return x.RebondCall
	}
	return nil
}

func (x *StakingPallet) GetReapStashCall() *Staking_ReapStashCall {
	if x, ok := x.GetCall().(*StakingPallet_ReapStashCall); ok {
		return x.ReapStashCall
	}
	return nil
}

func (x *StakingPallet) GetKickCall() *Staking_KickCall {
	if x, ok := x.GetCall().(*StakingPallet_KickCall); ok {
		return x.KickCall
	}
	return nil
}

func (x *StakingPallet) GetSetStakingConfigsCall() *Staking_SetStakingConfigsCall {
	if x, ok := x.GetCall().(*StakingPallet_SetStakingConfigsCall); ok {
		return x.SetStakingConfigsCall
	}
	return nil
}

func (x *StakingPallet) GetChillOtherCall() *Staking_ChillOtherCall {
	if x, ok := x.GetCall().(*StakingPallet_ChillOtherCall); ok {
		return x.ChillOtherCall
	}
	return nil
}

func (x *StakingPallet) GetForceApplyMinCommissionCall() *Staking_ForceApplyMinCommissionCall {
	if x, ok := x.GetCall().(*StakingPallet_ForceApplyMinCommissionCall); ok {
		return x.ForceApplyMinCommissionCall
	}
	return nil
}

func (x *StakingPallet) GetSetMinCommissionCall() *Staking_SetMinCommissionCall {
	if x, ok := x.GetCall().(*StakingPallet_SetMinCommissionCall); ok {
		return x.SetMinCommissionCall
	}
	return nil
}

type isStakingPallet_Call interface {
	isStakingPallet_Call()
}

type StakingPallet_BondCall struct {
	BondCall *Staking_BondCall `protobuf:"bytes,1,opt,name=bond_call,json=bondCall,proto3,oneof"`
}

type StakingPallet_BondExtraCall struct {
	BondExtraCall *Staking_BondExtraCall `protobuf:"bytes,2,opt,name=bond_extra_call,json=bondExtraCall,proto3,oneof"`
}

type StakingPallet_UnbondCall struct {
	UnbondCall *Staking_UnbondCall `protobuf:"bytes,3,opt,name=unbond_call,json=unbondCall,proto3,oneof"`
}

type StakingPallet_WithdrawUnbondedCall struct {
	WithdrawUnbondedCall *Staking_WithdrawUnbondedCall `protobuf:"bytes,4,opt,name=withdraw_unbonded_call,json=withdrawUnbondedCall,proto3,oneof"`
}

type StakingPallet_ValidateCall struct {
	ValidateCall *Staking_ValidateCall `protobuf:"bytes,5,opt,name=validate_call,json=validateCall,proto3,oneof"`
}

type StakingPallet_NominateCall struct {
	NominateCall *Staking_NominateCall `protobuf:"bytes,6,opt,name=nominate_call,json=nominateCall,proto3,oneof"`
}

type StakingPallet_ChillCall struct {
	ChillCall *Staking_ChillCall `protobuf:"bytes,7,opt,name=chill_call,json=chillCall,proto3,oneof"`
}

type StakingPallet_SetPayeeCall struct {
	SetPayeeCall *Staking_SetPayeeCall `protobuf:"bytes,8,opt,name=set_payee_call,json=setPayeeCall,proto3,oneof"`
}

type StakingPallet_SetControllerCall struct {
	SetControllerCall *Staking_SetControllerCall `protobuf:"bytes,9,opt,name=set_controller_call,json=setControllerCall,proto3,oneof"`
}

type StakingPallet_SetValidatorCountCall struct {
	SetValidatorCountCall *Staking_SetValidatorCountCall `protobuf:"bytes,10,opt,name=set_validator_count_call,json=setValidatorCountCall,proto3,oneof"`
}

type StakingPallet_IncreaseValidatorCountCall struct {
	IncreaseValidatorCountCall *Staking_IncreaseValidatorCountCall `protobuf:"bytes,11,opt,name=increase_validator_count_call,json=increaseValidatorCountCall,proto3,oneof"`
}

type StakingPallet_ScaleValidatorCountCall struct {
	ScaleValidatorCountCall *Staking_ScaleValidatorCountCall `protobuf:"bytes,12,opt,name=scale_validator_count_call,json=scaleValidatorCountCall,proto3,oneof"`
}

type StakingPallet_ForceNoErasCall struct {
	ForceNoErasCall *Staking_ForceNoErasCall `protobuf:"bytes,13,opt,name=force_no_eras_call,json=forceNoErasCall,proto3,oneof"`
}

type StakingPallet_ForceNewEraCall struct {
	ForceNewEraCall *Staking_ForceNewEraCall `protobuf:"bytes,14,opt,name=force_new_era_call,json=forceNewEraCall,proto3,oneof"`
}

type StakingPallet_SetInvulnerablesCall struct {
	SetInvulnerablesCall *Staking_SetInvulnerablesCall `protobuf:"bytes,15,opt,name=set_invulnerables_call,json=setInvulnerablesCall,proto3,oneof"`
}

type StakingPallet_ForceUnstakeCall struct {
	ForceUnstakeCall *Staking_ForceUnstakeCall `protobuf:"bytes,16,opt,name=force_unstake_call,json=forceUnstakeCall,proto3,oneof"`
}

type StakingPallet_ForceNewEraAlwaysCall struct {
	ForceNewEraAlwaysCall *Staking_ForceNewEraAlwaysCall `protobuf:"bytes,17,opt,name=force_new_era_always_call,json=forceNewEraAlwaysCall,proto3,oneof"`
}

type StakingPallet_CancelDeferredSlashCall struct {
	CancelDeferredSlashCall *Staking_CancelDeferredSlashCall `protobuf:"bytes,18,opt,name=cancel_deferred_slash_call,json=cancelDeferredSlashCall,proto3,oneof"`
}

type StakingPallet_PayoutStakersCall struct {
	PayoutStakersCall *Staking_PayoutStakersCall `protobuf:"bytes,19,opt,name=payout_stakers_call,json=payoutStakersCall,proto3,oneof"`
}

type StakingPallet_RebondCall struct {
	RebondCall *Staking_RebondCall `protobuf:"bytes,20,opt,name=rebond_call,json=rebondCall,proto3,oneof"`
}

type StakingPallet_ReapStashCall struct {
	ReapStashCall *Staking_ReapStashCall `protobuf:"bytes,21,opt,name=reap_stash_call,json=reapStashCall,proto3,oneof"`
}

type StakingPallet_KickCall struct {
	KickCall *Staking_KickCall `protobuf:"bytes,22,opt,name=kick_call,json=kickCall,proto3,oneof"`
}

type StakingPallet_SetStakingConfigsCall struct {
	SetStakingConfigsCall *Staking_SetStakingConfigsCall `protobuf:"bytes,23,opt,name=set_staking_configs_call,json=setStakingConfigsCall,proto3,oneof"`
}

type StakingPallet_ChillOtherCall struct {
	ChillOtherCall *Staking_ChillOtherCall `protobuf:"bytes,24,opt,name=chill_other_call,json=chillOtherCall,proto3,oneof"`
}

type StakingPallet_ForceApplyMinCommissionCall struct {
	ForceApplyMinCommissionCall *Staking_ForceApplyMinCommissionCall `protobuf:"bytes,25,opt,name=force_apply_min_commission_call,json=forceApplyMinCommissionCall,proto3,oneof"`
}

type StakingPallet_SetMinCommissionCall struct {
	SetMinCommissionCall *Staking_SetMinCommissionCall `protobuf:"bytes,26,opt,name=set_min_commission_call,json=setMinCommissionCall,proto3,oneof"`
}

func (*StakingPallet_BondCall) isStakingPallet_Call() {}

func (*StakingPallet_BondExtraCall) isStakingPallet_Call() {}

func (*StakingPallet_UnbondCall) isStakingPallet_Call() {}

func (*StakingPallet_WithdrawUnbondedCall) isStakingPallet_Call() {}

func (*StakingPallet_ValidateCall) isStakingPallet_Call() {}

func (*StakingPallet_NominateCall) isStakingPallet_Call() {}

func (*StakingPallet_ChillCall) isStakingPallet_Call() {}

func (*StakingPallet_SetPayeeCall) isStakingPallet_Call() {}

func (*StakingPallet_SetControllerCall) isStakingPallet_Call() {}

func (*StakingPallet_SetValidatorCountCall) isStakingPallet_Call() {}

func (*StakingPallet_IncreaseValidatorCountCall) isStakingPallet_Call() {}

func (*StakingPallet_ScaleValidatorCountCall) isStakingPallet_Call() {}

func (*StakingPallet_ForceNoErasCall) isStakingPallet_Call() {}

func (*StakingPallet_ForceNewEraCall) isStakingPallet_Call() {}

func (*StakingPallet_SetInvulnerablesCall) isStakingPallet_Call() {}

func (*StakingPallet_ForceUnstakeCall) isStakingPallet_Call() {}

func (*StakingPallet_ForceNewEraAlwaysCall) isStakingPallet_Call() {}

func (*StakingPallet_CancelDeferredSlashCall) isStakingPallet_Call() {}

func (*StakingPallet_PayoutStakersCall) isStakingPallet_Call() {}

func (*StakingPallet_RebondCall) isStakingPallet_Call() {}

func (*StakingPallet_ReapStashCall) isStakingPallet_Call() {}

func (*StakingPallet_KickCall) isStakingPallet_Call() {}

func (*StakingPallet_SetStakingConfigsCall) isStakingPallet_Call() {}

func (*StakingPallet_ChillOtherCall) isStakingPallet_Call() {}

func (*StakingPallet_ForceApplyMinCommissionCall) isStakingPallet_Call() {}

func (*StakingPallet_SetMinCommissionCall) isStakingPallet_Call() {}

type ConvictionVoting_Vote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*ConvictionVoting_Vote_Standard
	//	*ConvictionVoting_Vote_Split
	//	*ConvictionVoting_Vote_SplitAbstain
	Value isConvictionVoting_Vote_Value `protobuf_oneof:"value"`
}

func (x *ConvictionVoting_Vote) Reset() {
	*x = ConvictionVoting_Vote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[283]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConvictionVoting_Vote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvictionVoting_Vote) ProtoMessage() {}

func (x *ConvictionVoting_Vote) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[283]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvictionVoting_Vote.ProtoReflect.Descriptor instead.
func (*ConvictionVoting_Vote) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{283}
}

func (m *ConvictionVoting_Vote) GetValue() isConvictionVoting_Vote_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *ConvictionVoting_Vote) GetStandard() *ConvictionVoting_Standard {
	if x, ok := x.GetValue().(*ConvictionVoting_Vote_Standard); ok {
		return x.Standard
	}
	return nil
}

func (x *ConvictionVoting_Vote) GetSplit() *ConvictionVoting_Split {
	if x, ok := x.GetValue().(*ConvictionVoting_Vote_Split); ok {
		return x.Split
	}
	return nil
}

func (x *ConvictionVoting_Vote) GetSplitAbstain() *ConvictionVoting_SplitAbstain {
	if x, ok := x.GetValue().(*ConvictionVoting_Vote_SplitAbstain); ok {
		return x.SplitAbstain
	}
	return nil
}

type isConvictionVoting_Vote_Value interface {
	isConvictionVoting_Vote_Value()
}

type ConvictionVoting_Vote_Standard struct {
	Standard *ConvictionVoting_Standard `protobuf:"bytes,1,opt,name=standard,proto3,oneof"`
}

type ConvictionVoting_Vote_Split struct {
	Split *ConvictionVoting_Split `protobuf:"bytes,2,opt,name=split,proto3,oneof"`
}

type ConvictionVoting_Vote_SplitAbstain struct {
	SplitAbstain *ConvictionVoting_SplitAbstain `protobuf:"bytes,3,opt,name=split_abstain,json=splitAbstain,proto3,oneof"`
}

func (*ConvictionVoting_Vote_Standard) isConvictionVoting_Vote_Value() {}

func (*ConvictionVoting_Vote_Split) isConvictionVoting_Vote_Value() {}

func (*ConvictionVoting_Vote_SplitAbstain) isConvictionVoting_Vote_Value() {}

type GearVoucher_RevokeCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spender   *SpCoreCryptoAccountId32                        `protobuf:"bytes,1,opt,name=spender,proto3" json:"spender,omitempty"`
	VoucherId *GearVoucher_PalletGearVoucherInternalVoucherId `protobuf:"bytes,2,opt,name=voucher_id,json=voucherId,proto3" json:"voucher_id,omitempty"`
}

func (x *GearVoucher_RevokeCall) Reset() {
	*x = GearVoucher_RevokeCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[284]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GearVoucher_RevokeCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GearVoucher_RevokeCall) ProtoMessage() {}

func (x *GearVoucher_RevokeCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[284]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GearVoucher_RevokeCall.ProtoReflect.Descriptor instead.
func (*GearVoucher_RevokeCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{284}
}

func (x *GearVoucher_RevokeCall) GetSpender() *SpCoreCryptoAccountId32 {
	if x != nil {
		return x.Spender
	}
	return nil
}

func (x *GearVoucher_RevokeCall) GetVoucherId() *GearVoucher_PalletGearVoucherInternalVoucherId {
	if x != nil {
		return x.VoucherId
	}
	return nil
}

type NominationPools_ClaimCommissionCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoolId uint32 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
}

func (x *NominationPools_ClaimCommissionCall) Reset() {
	*x = NominationPools_ClaimCommissionCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[285]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NominationPools_ClaimCommissionCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NominationPools_ClaimCommissionCall) ProtoMessage() {}

func (x *NominationPools_ClaimCommissionCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[285]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NominationPools_ClaimCommissionCall.ProtoReflect.Descriptor instead.
func (*NominationPools_ClaimCommissionCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{285}
}

func (x *NominationPools_ClaimCommissionCall) GetPoolId() uint32 {
	if x != nil {
		return x.PoolId
	}
	return 0
}

type Vesting_Id struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 *SpCoreCryptoAccountId32 `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Vesting_Id) Reset() {
	*x = Vesting_Id{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[286]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vesting_Id) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vesting_Id) ProtoMessage() {}

func (x *Vesting_Id) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[286]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vesting_Id.ProtoReflect.Descriptor instead.
func (*Vesting_Id) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{286}
}

func (x *Vesting_Id) GetValue0() *SpCoreCryptoAccountId32 {
	if x != nil {
		return x.Value0
	}
	return nil
}

type ReferendaPallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Call:
	//
	//	*ReferendaPallet_SubmitCall
	//	*ReferendaPallet_PlaceDecisionDepositCall
	//	*ReferendaPallet_RefundDecisionDepositCall
	//	*ReferendaPallet_CancelCall
	//	*ReferendaPallet_KillCall
	//	*ReferendaPallet_NudgeReferendumCall
	//	*ReferendaPallet_OneFewerDecidingCall
	//	*ReferendaPallet_RefundSubmissionDepositCall
	//	*ReferendaPallet_SetMetadataCall
	Call isReferendaPallet_Call `protobuf_oneof:"call"`
}

func (x *ReferendaPallet) Reset() {
	*x = ReferendaPallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[287]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferendaPallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferendaPallet) ProtoMessage() {}

func (x *ReferendaPallet) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[287]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferendaPallet.ProtoReflect.Descriptor instead.
func (*ReferendaPallet) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{287}
}

func (m *ReferendaPallet) GetCall() isReferendaPallet_Call {
	if m != nil {
		return m.Call
	}
	return nil
}

func (x *ReferendaPallet) GetSubmitCall() *Referenda_SubmitCall {
	if x, ok := x.GetCall().(*ReferendaPallet_SubmitCall); ok {
		return x.SubmitCall
	}
	return nil
}

func (x *ReferendaPallet) GetPlaceDecisionDepositCall() *Referenda_PlaceDecisionDepositCall {
	if x, ok := x.GetCall().(*ReferendaPallet_PlaceDecisionDepositCall); ok {
		return x.PlaceDecisionDepositCall
	}
	return nil
}

func (x *ReferendaPallet) GetRefundDecisionDepositCall() *Referenda_RefundDecisionDepositCall {
	if x, ok := x.GetCall().(*ReferendaPallet_RefundDecisionDepositCall); ok {
		return x.RefundDecisionDepositCall
	}
	return nil
}

func (x *ReferendaPallet) GetCancelCall() *Referenda_CancelCall {
	if x, ok := x.GetCall().(*ReferendaPallet_CancelCall); ok {
		return x.CancelCall
	}
	return nil
}

func (x *ReferendaPallet) GetKillCall() *Referenda_KillCall {
	if x, ok := x.GetCall().(*ReferendaPallet_KillCall); ok {
		return x.KillCall
	}
	return nil
}

func (x *ReferendaPallet) GetNudgeReferendumCall() *Referenda_NudgeReferendumCall {
	if x, ok := x.GetCall().(*ReferendaPallet_NudgeReferendumCall); ok {
		return x.NudgeReferendumCall
	}
	return nil
}

func (x *ReferendaPallet) GetOneFewerDecidingCall() *Referenda_OneFewerDecidingCall {
	if x, ok := x.GetCall().(*ReferendaPallet_OneFewerDecidingCall); ok {
		return x.OneFewerDecidingCall
	}
	return nil
}

func (x *ReferendaPallet) GetRefundSubmissionDepositCall() *Referenda_RefundSubmissionDepositCall {
	if x, ok := x.GetCall().(*ReferendaPallet_RefundSubmissionDepositCall); ok {
		return x.RefundSubmissionDepositCall
	}
	return nil
}

func (x *ReferendaPallet) GetSetMetadataCall() *Referenda_SetMetadataCall {
	if x, ok := x.GetCall().(*ReferendaPallet_SetMetadataCall); ok {
		return x.SetMetadataCall
	}
	return nil
}

type isReferendaPallet_Call interface {
	isReferendaPallet_Call()
}

type ReferendaPallet_SubmitCall struct {
	SubmitCall *Referenda_SubmitCall `protobuf:"bytes,1,opt,name=submit_call,json=submitCall,proto3,oneof"`
}

type ReferendaPallet_PlaceDecisionDepositCall struct {
	PlaceDecisionDepositCall *Referenda_PlaceDecisionDepositCall `protobuf:"bytes,2,opt,name=place_decision_deposit_call,json=placeDecisionDepositCall,proto3,oneof"`
}

type ReferendaPallet_RefundDecisionDepositCall struct {
	RefundDecisionDepositCall *Referenda_RefundDecisionDepositCall `protobuf:"bytes,3,opt,name=refund_decision_deposit_call,json=refundDecisionDepositCall,proto3,oneof"`
}

type ReferendaPallet_CancelCall struct {
	CancelCall *Referenda_CancelCall `protobuf:"bytes,4,opt,name=cancel_call,json=cancelCall,proto3,oneof"`
}

type ReferendaPallet_KillCall struct {
	KillCall *Referenda_KillCall `protobuf:"bytes,5,opt,name=kill_call,json=killCall,proto3,oneof"`
}

type ReferendaPallet_NudgeReferendumCall struct {
	NudgeReferendumCall *Referenda_NudgeReferendumCall `protobuf:"bytes,6,opt,name=nudge_referendum_call,json=nudgeReferendumCall,proto3,oneof"`
}

type ReferendaPallet_OneFewerDecidingCall struct {
	OneFewerDecidingCall *Referenda_OneFewerDecidingCall `protobuf:"bytes,7,opt,name=one_fewer_deciding_call,json=oneFewerDecidingCall,proto3,oneof"`
}

type ReferendaPallet_RefundSubmissionDepositCall struct {
	RefundSubmissionDepositCall *Referenda_RefundSubmissionDepositCall `protobuf:"bytes,8,opt,name=refund_submission_deposit_call,json=refundSubmissionDepositCall,proto3,oneof"`
}

type ReferendaPallet_SetMetadataCall struct {
	SetMetadataCall *Referenda_SetMetadataCall `protobuf:"bytes,9,opt,name=set_metadata_call,json=setMetadataCall,proto3,oneof"`
}

func (*ReferendaPallet_SubmitCall) isReferendaPallet_Call() {}

func (*ReferendaPallet_PlaceDecisionDepositCall) isReferendaPallet_Call() {}

func (*ReferendaPallet_RefundDecisionDepositCall) isReferendaPallet_Call() {}

func (*ReferendaPallet_CancelCall) isReferendaPallet_Call() {}

func (*ReferendaPallet_KillCall) isReferendaPallet_Call() {}

func (*ReferendaPallet_NudgeReferendumCall) isReferendaPallet_Call() {}

func (*ReferendaPallet_OneFewerDecidingCall) isReferendaPallet_Call() {}

func (*ReferendaPallet_RefundSubmissionDepositCall) isReferendaPallet_Call() {}

func (*ReferendaPallet_SetMetadataCall) isReferendaPallet_Call() {}

type FellowshipReferenda_SetMetadataCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index     uint32              `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	MaybeHash *PrimitiveTypesH256 `protobuf:"bytes,2,opt,name=maybe_hash,json=maybeHash,proto3,oneof" json:"maybe_hash,omitempty"`
}

func (x *FellowshipReferenda_SetMetadataCall) Reset() {
	*x = FellowshipReferenda_SetMetadataCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[288]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FellowshipReferenda_SetMetadataCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FellowshipReferenda_SetMetadataCall) ProtoMessage() {}

func (x *FellowshipReferenda_SetMetadataCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[288]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FellowshipReferenda_SetMetadataCall.ProtoReflect.Descriptor instead.
func (*FellowshipReferenda_SetMetadataCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{288}
}

func (x *FellowshipReferenda_SetMetadataCall) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *FellowshipReferenda_SetMetadataCall) GetMaybeHash() *PrimitiveTypesH256 {
	if x != nil {
		return x.MaybeHash
	}
	return nil
}

type Identity_Raw31 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Identity_Raw31) Reset() {
	*x = Identity_Raw31{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[289]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_Raw31) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_Raw31) ProtoMessage() {}

func (x *Identity_Raw31) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[289]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_Raw31.ProtoReflect.Descriptor instead.
func (*Identity_Raw31) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{289}
}

func (x *Identity_Raw31) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Identity_TuplePalletIdentityTypesDatapalletIdentityTypesData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 *Identity_Value0 `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
	Value1 *Identity_Value1 `protobuf:"bytes,2,opt,name=value1,proto3" json:"value1,omitempty"`
}

func (x *Identity_TuplePalletIdentityTypesDatapalletIdentityTypesData) Reset() {
	*x = Identity_TuplePalletIdentityTypesDatapalletIdentityTypesData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[290]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_TuplePalletIdentityTypesDatapalletIdentityTypesData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_TuplePalletIdentityTypesDatapalletIdentityTypesData) ProtoMessage() {}

func (x *Identity_TuplePalletIdentityTypesDatapalletIdentityTypesData) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[290]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_TuplePalletIdentityTypesDatapalletIdentityTypesData.ProtoReflect.Descriptor instead.
func (*Identity_TuplePalletIdentityTypesDatapalletIdentityTypesData) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{290}
}

func (x *Identity_TuplePalletIdentityTypesDatapalletIdentityTypesData) GetValue0() *Identity_Value0 {
	if x != nil {
		return x.Value0
	}
	return nil
}

func (x *Identity_TuplePalletIdentityTypesDatapalletIdentityTypesData) GetValue1() *Identity_Value1 {
	if x != nil {
		return x.Value1
	}
	return nil
}

type System_SystemKeysList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []byte `protobuf:"bytes,1,opt,name=keys,proto3" json:"keys,omitempty"`
}

func (x *System_SystemKeysList) Reset() {
	*x = System_SystemKeysList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[291]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_SystemKeysList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_SystemKeysList) ProtoMessage() {}

func (x *System_SystemKeysList) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[291]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_SystemKeysList.ProtoReflect.Descriptor instead.
func (*System_SystemKeysList) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{291}
}

func (x *System_SystemKeysList) GetKeys() []byte {
	if x != nil {
		return x.Keys
	}
	return nil
}

type Balances_Dest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*Balances_Dest_Id
	//	*Balances_Dest_Index
	//	*Balances_Dest_Raw
	//	*Balances_Dest_Address32
	//	*Balances_Dest_Address20
	Value isBalances_Dest_Value `protobuf_oneof:"value"`
}

func (x *Balances_Dest) Reset() {
	*x = Balances_Dest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[292]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Balances_Dest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Balances_Dest) ProtoMessage() {}

func (x *Balances_Dest) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[292]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Balances_Dest.ProtoReflect.Descriptor instead.
func (*Balances_Dest) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{292}
}

func (m *Balances_Dest) GetValue() isBalances_Dest_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Balances_Dest) GetId() *Balances_Id {
	if x, ok := x.GetValue().(*Balances_Dest_Id); ok {
		return x.Id
	}
	return nil
}

func (x *Balances_Dest) GetIndex() *Balances_Index {
	if x, ok := x.GetValue().(*Balances_Dest_Index); ok {
		return x.Index
	}
	return nil
}

func (x *Balances_Dest) GetRaw() *Balances_Raw {
	if x, ok := x.GetValue().(*Balances_Dest_Raw); ok {
		return x.Raw
	}
	return nil
}

func (x *Balances_Dest) GetAddress32() *Balances_Address32 {
	if x, ok := x.GetValue().(*Balances_Dest_Address32); ok {
		return x.Address32
	}
	return nil
}

func (x *Balances_Dest) GetAddress20() *Balances_Address20 {
	if x, ok := x.GetValue().(*Balances_Dest_Address20); ok {
		return x.Address20
	}
	return nil
}

type isBalances_Dest_Value interface {
	isBalances_Dest_Value()
}

type Balances_Dest_Id struct {
	Id *Balances_Id `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type Balances_Dest_Index struct {
	Index *Balances_Index `protobuf:"bytes,2,opt,name=index,proto3,oneof"`
}

type Balances_Dest_Raw struct {
	Raw *Balances_Raw `protobuf:"bytes,3,opt,name=raw,proto3,oneof"`
}

type Balances_Dest_Address32 struct {
	Address32 *Balances_Address32 `protobuf:"bytes,4,opt,name=address32,proto3,oneof"`
}

type Balances_Dest_Address20 struct {
	Address20 *Balances_Address20 `protobuf:"bytes,5,opt,name=address20,proto3,oneof"`
}

func (*Balances_Dest_Id) isBalances_Dest_Value() {}

func (*Balances_Dest_Index) isBalances_Dest_Value() {}

func (*Balances_Dest_Raw) isBalances_Dest_Value() {}

func (*Balances_Dest_Address32) isBalances_Dest_Value() {}

func (*Balances_Dest_Address20) isBalances_Dest_Value() {}

type Proxy_Raw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Proxy_Raw) Reset() {
	*x = Proxy_Raw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[293]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proxy_Raw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proxy_Raw) ProtoMessage() {}

func (x *Proxy_Raw) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[293]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proxy_Raw.ProtoReflect.Descriptor instead.
func (*Proxy_Raw) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{293}
}

func (x *Proxy_Raw) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Bounties_TupleNull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *TupleNull `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Bounties_TupleNull) Reset() {
	*x = Bounties_TupleNull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[294]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bounties_TupleNull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bounties_TupleNull) ProtoMessage() {}

func (x *Bounties_TupleNull) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[294]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bounties_TupleNull.ProtoReflect.Descriptor instead.
func (*Bounties_TupleNull) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{294}
}

func (x *Bounties_TupleNull) GetValue() *TupleNull {
	if x != nil {
		return x.Value
	}
	return nil
}

type PrimarySlots struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PrimarySlots) Reset() {
	*x = PrimarySlots{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[295]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrimarySlots) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrimarySlots) ProtoMessage() {}

func (x *PrimarySlots) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[295]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrimarySlots.ProtoReflect.Descriptor instead.
func (*PrimarySlots) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{295}
}

type PrimaryAndSecondaryPlainSlots struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PrimaryAndSecondaryPlainSlots) Reset() {
	*x = PrimaryAndSecondaryPlainSlots{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[296]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrimaryAndSecondaryPlainSlots) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrimaryAndSecondaryPlainSlots) ProtoMessage() {}

func (x *PrimaryAndSecondaryPlainSlots) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[296]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrimaryAndSecondaryPlainSlots.ProtoReflect.Descriptor instead.
func (*PrimaryAndSecondaryPlainSlots) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{296}
}

type SessionPallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Call:
	//
	//	*SessionPallet_SetKeysCall
	//	*SessionPallet_PurgeKeysCall
	Call isSessionPallet_Call `protobuf_oneof:"call"`
}

func (x *SessionPallet) Reset() {
	*x = SessionPallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[297]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionPallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionPallet) ProtoMessage() {}

func (x *SessionPallet) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[297]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionPallet.ProtoReflect.Descriptor instead.
func (*SessionPallet) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{297}
}

func (m *SessionPallet) GetCall() isSessionPallet_Call {
	if m != nil {
		return m.Call
	}
	return nil
}

func (x *SessionPallet) GetSetKeysCall() *Session_SetKeysCall {
	if x, ok := x.GetCall().(*SessionPallet_SetKeysCall); ok {
		return x.SetKeysCall
	}
	return nil
}

func (x *SessionPallet) GetPurgeKeysCall() *Session_PurgeKeysCall {
	if x, ok := x.GetCall().(*SessionPallet_PurgeKeysCall); ok {
		return x.PurgeKeysCall
	}
	return nil
}

type isSessionPallet_Call interface {
	isSessionPallet_Call()
}

type SessionPallet_SetKeysCall struct {
	SetKeysCall *Session_SetKeysCall `protobuf:"bytes,1,opt,name=set_keys_call,json=setKeysCall,proto3,oneof"`
}

type SessionPallet_PurgeKeysCall struct {
	PurgeKeysCall *Session_PurgeKeysCall `protobuf:"bytes,2,opt,name=purge_keys_call,json=purgeKeysCall,proto3,oneof"`
}

func (*SessionPallet_SetKeysCall) isSessionPallet_Call() {}

func (*SessionPallet_PurgeKeysCall) isSessionPallet_Call() {}

type Identity_Raw9 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Identity_Raw9) Reset() {
	*x = Identity_Raw9{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[298]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_Raw9) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_Raw9) ProtoMessage() {}

func (x *Identity_Raw9) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[298]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_Raw9.ProtoReflect.Descriptor instead.
func (*Identity_Raw9) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{298}
}

func (x *Identity_Raw9) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Proxy_RemoveProxiesCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Proxy_RemoveProxiesCall) Reset() {
	*x = Proxy_RemoveProxiesCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[299]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proxy_RemoveProxiesCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proxy_RemoveProxiesCall) ProtoMessage() {}

func (x *Proxy_RemoveProxiesCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[299]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proxy_RemoveProxiesCall.ProtoReflect.Descriptor instead.
func (*Proxy_RemoveProxiesCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{299}
}

type Babe_Consensus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
	Value1 []byte `protobuf:"bytes,2,opt,name=value1,proto3" json:"value1,omitempty"`
}

func (x *Babe_Consensus) Reset() {
	*x = Babe_Consensus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[300]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Babe_Consensus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Babe_Consensus) ProtoMessage() {}

func (x *Babe_Consensus) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[300]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Babe_Consensus.ProtoReflect.Descriptor instead.
func (*Babe_Consensus) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{300}
}

func (x *Babe_Consensus) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

func (x *Babe_Consensus) GetValue1() []byte {
	if x != nil {
		return x.Value1
	}
	return nil
}

type Identity_KnownGood struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Identity_KnownGood) Reset() {
	*x = Identity_KnownGood{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[301]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_KnownGood) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_KnownGood) ProtoMessage() {}

func (x *Identity_KnownGood) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[301]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_KnownGood.ProtoReflect.Descriptor instead.
func (*Identity_KnownGood) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{301}
}

type Proxy_Real struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*Proxy_Real_Id
	//	*Proxy_Real_Index
	//	*Proxy_Real_Raw
	//	*Proxy_Real_Address32
	//	*Proxy_Real_Address20
	Value isProxy_Real_Value `protobuf_oneof:"value"`
}

func (x *Proxy_Real) Reset() {
	*x = Proxy_Real{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[302]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proxy_Real) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proxy_Real) ProtoMessage() {}

func (x *Proxy_Real) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[302]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proxy_Real.ProtoReflect.Descriptor instead.
func (*Proxy_Real) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{302}
}

func (m *Proxy_Real) GetValue() isProxy_Real_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Proxy_Real) GetId() *Proxy_Id {
	if x, ok := x.GetValue().(*Proxy_Real_Id); ok {
		return x.Id
	}
	return nil
}

func (x *Proxy_Real) GetIndex() *Proxy_Index {
	if x, ok := x.GetValue().(*Proxy_Real_Index); ok {
		return x.Index
	}
	return nil
}

func (x *Proxy_Real) GetRaw() *Proxy_Raw {
	if x, ok := x.GetValue().(*Proxy_Real_Raw); ok {
		return x.Raw
	}
	return nil
}

func (x *Proxy_Real) GetAddress32() *Proxy_Address32 {
	if x, ok := x.GetValue().(*Proxy_Real_Address32); ok {
		return x.Address32
	}
	return nil
}

func (x *Proxy_Real) GetAddress20() *Proxy_Address20 {
	if x, ok := x.GetValue().(*Proxy_Real_Address20); ok {
		return x.Address20
	}
	return nil
}

type isProxy_Real_Value interface {
	isProxy_Real_Value()
}

type Proxy_Real_Id struct {
	Id *Proxy_Id `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type Proxy_Real_Index struct {
	Index *Proxy_Index `protobuf:"bytes,2,opt,name=index,proto3,oneof"`
}

type Proxy_Real_Raw struct {
	Raw *Proxy_Raw `protobuf:"bytes,3,opt,name=raw,proto3,oneof"`
}

type Proxy_Real_Address32 struct {
	Address32 *Proxy_Address32 `protobuf:"bytes,4,opt,name=address32,proto3,oneof"`
}

type Proxy_Real_Address20 struct {
	Address20 *Proxy_Address20 `protobuf:"bytes,5,opt,name=address20,proto3,oneof"`
}

func (*Proxy_Real_Id) isProxy_Real_Value() {}

func (*Proxy_Real_Index) isProxy_Real_Value() {}

func (*Proxy_Real_Raw) isProxy_Real_Value() {}

func (*Proxy_Real_Address32) isProxy_Real_Value() {}

func (*Proxy_Real_Address20) isProxy_Real_Value() {}

type NominationPools_Noop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NominationPools_Noop) Reset() {
	*x = NominationPools_Noop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[303]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NominationPools_Noop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NominationPools_Noop) ProtoMessage() {}

func (x *NominationPools_Noop) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[303]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NominationPools_Noop.ProtoReflect.Descriptor instead.
func (*NominationPools_Noop) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{303}
}

type NominationPools_MaxPools struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*NominationPools_MaxPools_Noop
	//	*NominationPools_MaxPools_Set
	//	*NominationPools_MaxPools_Remove
	Value isNominationPools_MaxPools_Value `protobuf_oneof:"value"`
}

func (x *NominationPools_MaxPools) Reset() {
	*x = NominationPools_MaxPools{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[304]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NominationPools_MaxPools) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NominationPools_MaxPools) ProtoMessage() {}

func (x *NominationPools_MaxPools) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[304]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NominationPools_MaxPools.ProtoReflect.Descriptor instead.
func (*NominationPools_MaxPools) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{304}
}

func (m *NominationPools_MaxPools) GetValue() isNominationPools_MaxPools_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *NominationPools_MaxPools) GetNoop() *NominationPools_Noop {
	if x, ok := x.GetValue().(*NominationPools_MaxPools_Noop); ok {
		return x.Noop
	}
	return nil
}

func (x *NominationPools_MaxPools) GetSet() *NominationPools_Set {
	if x, ok := x.GetValue().(*NominationPools_MaxPools_Set); ok {
		return x.Set
	}
	return nil
}

func (x *NominationPools_MaxPools) GetRemove() *NominationPools_Remove {
	if x, ok := x.GetValue().(*NominationPools_MaxPools_Remove); ok {
		return x.Remove
	}
	return nil
}

type isNominationPools_MaxPools_Value interface {
	isNominationPools_MaxPools_Value()
}

type NominationPools_MaxPools_Noop struct {
	Noop *NominationPools_Noop `protobuf:"bytes,1,opt,name=noop,proto3,oneof"`
}

type NominationPools_MaxPools_Set struct {
	Set *NominationPools_Set `protobuf:"bytes,2,opt,name=set,proto3,oneof"`
}

type NominationPools_MaxPools_Remove struct {
	Remove *NominationPools_Remove `protobuf:"bytes,3,opt,name=remove,proto3,oneof"`
}

func (*NominationPools_MaxPools_Noop) isNominationPools_MaxPools_Value() {}

func (*NominationPools_MaxPools_Set) isNominationPools_MaxPools_Value() {}

func (*NominationPools_MaxPools_Remove) isNominationPools_MaxPools_Value() {}

type Treasury_ProposeSpendCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value       string                `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Beneficiary *Treasury_Beneficiary `protobuf:"bytes,2,opt,name=beneficiary,proto3" json:"beneficiary,omitempty"`
}

func (x *Treasury_ProposeSpendCall) Reset() {
	*x = Treasury_ProposeSpendCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[305]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Treasury_ProposeSpendCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Treasury_ProposeSpendCall) ProtoMessage() {}

func (x *Treasury_ProposeSpendCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[305]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Treasury_ProposeSpendCall.ProtoReflect.Descriptor instead.
func (*Treasury_ProposeSpendCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{305}
}

func (x *Treasury_ProposeSpendCall) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Treasury_ProposeSpendCall) GetBeneficiary() *Treasury_Beneficiary {
	if x != nil {
		return x.Beneficiary
	}
	return nil
}

type ConvictionVoting_TupleNull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *TupleNull `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ConvictionVoting_TupleNull) Reset() {
	*x = ConvictionVoting_TupleNull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[306]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConvictionVoting_TupleNull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvictionVoting_TupleNull) ProtoMessage() {}

func (x *ConvictionVoting_TupleNull) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[306]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvictionVoting_TupleNull.ProtoReflect.Descriptor instead.
func (*ConvictionVoting_TupleNull) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{306}
}

func (x *ConvictionVoting_TupleNull) GetValue() *TupleNull {
	if x != nil {
		return x.Value
	}
	return nil
}

type ConvictionVoting_UnlockCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Class  uint32                   `protobuf:"varint,1,opt,name=class,proto3" json:"class,omitempty"`
	Target *ConvictionVoting_Target `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *ConvictionVoting_UnlockCall) Reset() {
	*x = ConvictionVoting_UnlockCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[307]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConvictionVoting_UnlockCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvictionVoting_UnlockCall) ProtoMessage() {}

func (x *ConvictionVoting_UnlockCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[307]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvictionVoting_UnlockCall.ProtoReflect.Descriptor instead.
func (*ConvictionVoting_UnlockCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{307}
}

func (x *ConvictionVoting_UnlockCall) GetClass() uint32 {
	if x != nil {
		return x.Class
	}
	return 0
}

func (x *ConvictionVoting_UnlockCall) GetTarget() *ConvictionVoting_Target {
	if x != nil {
		return x.Target
	}
	return nil
}

type Identity_Sub struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*Identity_Sub_Id
	//	*Identity_Sub_Index
	//	*Identity_Sub_Raw
	//	*Identity_Sub_Address32
	//	*Identity_Sub_Address20
	Value isIdentity_Sub_Value `protobuf_oneof:"value"`
}

func (x *Identity_Sub) Reset() {
	*x = Identity_Sub{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[308]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_Sub) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_Sub) ProtoMessage() {}

func (x *Identity_Sub) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[308]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_Sub.ProtoReflect.Descriptor instead.
func (*Identity_Sub) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{308}
}

func (m *Identity_Sub) GetValue() isIdentity_Sub_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Identity_Sub) GetId() *Identity_Id {
	if x, ok := x.GetValue().(*Identity_Sub_Id); ok {
		return x.Id
	}
	return nil
}

func (x *Identity_Sub) GetIndex() *Identity_Index {
	if x, ok := x.GetValue().(*Identity_Sub_Index); ok {
		return x.Index
	}
	return nil
}

func (x *Identity_Sub) GetRaw() *Identity_Raw {
	if x, ok := x.GetValue().(*Identity_Sub_Raw); ok {
		return x.Raw
	}
	return nil
}

func (x *Identity_Sub) GetAddress32() *Identity_Address32 {
	if x, ok := x.GetValue().(*Identity_Sub_Address32); ok {
		return x.Address32
	}
	return nil
}

func (x *Identity_Sub) GetAddress20() *Identity_Address20 {
	if x, ok := x.GetValue().(*Identity_Sub_Address20); ok {
		return x.Address20
	}
	return nil
}

type isIdentity_Sub_Value interface {
	isIdentity_Sub_Value()
}

type Identity_Sub_Id struct {
	Id *Identity_Id `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type Identity_Sub_Index struct {
	Index *Identity_Index `protobuf:"bytes,2,opt,name=index,proto3,oneof"`
}

type Identity_Sub_Raw struct {
	Raw *Identity_Raw `protobuf:"bytes,3,opt,name=raw,proto3,oneof"`
}

type Identity_Sub_Address32 struct {
	Address32 *Identity_Address32 `protobuf:"bytes,4,opt,name=address32,proto3,oneof"`
}

type Identity_Sub_Address20 struct {
	Address20 *Identity_Address20 `protobuf:"bytes,5,opt,name=address20,proto3,oneof"`
}

func (*Identity_Sub_Id) isIdentity_Sub_Value() {}

func (*Identity_Sub_Index) isIdentity_Sub_Value() {}

func (*Identity_Sub_Raw) isIdentity_Sub_Value() {}

func (*Identity_Sub_Address32) isIdentity_Sub_Value() {}

func (*Identity_Sub_Address20) isIdentity_Sub_Value() {}

type Bounties_Address32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Bounties_Address32) Reset() {
	*x = Bounties_Address32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[309]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bounties_Address32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bounties_Address32) ProtoMessage() {}

func (x *Bounties_Address32) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[309]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bounties_Address32.ProtoReflect.Descriptor instead.
func (*Bounties_Address32) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{309}
}

func (x *Bounties_Address32) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Identity_LowQuality struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Identity_LowQuality) Reset() {
	*x = Identity_LowQuality{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[310]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_LowQuality) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_LowQuality) ProtoMessage() {}

func (x *Identity_LowQuality) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[310]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_LowQuality.ProtoReflect.Descriptor instead.
func (*Identity_LowQuality) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{310}
}

type MultisigPallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Call:
	//
	//	*MultisigPallet_AsMultiThreshold1Call
	//	*MultisigPallet_AsMultiCall
	//	*MultisigPallet_ApproveAsMultiCall
	//	*MultisigPallet_CancelAsMultiCall
	Call isMultisigPallet_Call `protobuf_oneof:"call"`
}

func (x *MultisigPallet) Reset() {
	*x = MultisigPallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[311]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultisigPallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultisigPallet) ProtoMessage() {}

func (x *MultisigPallet) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[311]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultisigPallet.ProtoReflect.Descriptor instead.
func (*MultisigPallet) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{311}
}

func (m *MultisigPallet) GetCall() isMultisigPallet_Call {
	if m != nil {
		return m.Call
	}
	return nil
}

func (x *MultisigPallet) GetAsMultiThreshold1Call() *Multisig_AsMultiThreshold1Call {
	if x, ok := x.GetCall().(*MultisigPallet_AsMultiThreshold1Call); ok {
		return x.AsMultiThreshold1Call
	}
	return nil
}

func (x *MultisigPallet) GetAsMultiCall() *Multisig_AsMultiCall {
	if x, ok := x.GetCall().(*MultisigPallet_AsMultiCall); ok {
		return x.AsMultiCall
	}
	return nil
}

func (x *MultisigPallet) GetApproveAsMultiCall() *Multisig_ApproveAsMultiCall {
	if x, ok := x.GetCall().(*MultisigPallet_ApproveAsMultiCall); ok {
		return x.ApproveAsMultiCall
	}
	return nil
}

func (x *MultisigPallet) GetCancelAsMultiCall() *Multisig_CancelAsMultiCall {
	if x, ok := x.GetCall().(*MultisigPallet_CancelAsMultiCall); ok {
		return x.CancelAsMultiCall
	}
	return nil
}

type isMultisigPallet_Call interface {
	isMultisigPallet_Call()
}

type MultisigPallet_AsMultiThreshold1Call struct {
	AsMultiThreshold1Call *Multisig_AsMultiThreshold1Call `protobuf:"bytes,1,opt,name=as_multi_threshold1_call,json=asMultiThreshold1Call,proto3,oneof"`
}

type MultisigPallet_AsMultiCall struct {
	AsMultiCall *Multisig_AsMultiCall `protobuf:"bytes,2,opt,name=as_multi_call,json=asMultiCall,proto3,oneof"`
}

type MultisigPallet_ApproveAsMultiCall struct {
	ApproveAsMultiCall *Multisig_ApproveAsMultiCall `protobuf:"bytes,3,opt,name=approve_as_multi_call,json=approveAsMultiCall,proto3,oneof"`
}

type MultisigPallet_CancelAsMultiCall struct {
	CancelAsMultiCall *Multisig_CancelAsMultiCall `protobuf:"bytes,4,opt,name=cancel_as_multi_call,json=cancelAsMultiCall,proto3,oneof"`
}

func (*MultisigPallet_AsMultiThreshold1Call) isMultisigPallet_Call() {}

func (*MultisigPallet_AsMultiCall) isMultisigPallet_Call() {}

func (*MultisigPallet_ApproveAsMultiCall) isMultisigPallet_Call() {}

func (*MultisigPallet_CancelAsMultiCall) isMultisigPallet_Call() {}

type ElectionProviderMultiPhase_GovernanceFallbackCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaybeMaxVoters  *uint32 `protobuf:"varint,1,opt,name=maybe_max_voters,json=maybeMaxVoters,proto3,oneof" json:"maybe_max_voters,omitempty"`
	MaybeMaxTargets *uint32 `protobuf:"varint,2,opt,name=maybe_max_targets,json=maybeMaxTargets,proto3,oneof" json:"maybe_max_targets,omitempty"`
}

func (x *ElectionProviderMultiPhase_GovernanceFallbackCall) Reset() {
	*x = ElectionProviderMultiPhase_GovernanceFallbackCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[312]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectionProviderMultiPhase_GovernanceFallbackCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectionProviderMultiPhase_GovernanceFallbackCall) ProtoMessage() {}

func (x *ElectionProviderMultiPhase_GovernanceFallbackCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[312]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectionProviderMultiPhase_GovernanceFallbackCall.ProtoReflect.Descriptor instead.
func (*ElectionProviderMultiPhase_GovernanceFallbackCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{312}
}

func (x *ElectionProviderMultiPhase_GovernanceFallbackCall) GetMaybeMaxVoters() uint32 {
	if x != nil && x.MaybeMaxVoters != nil {
		return *x.MaybeMaxVoters
	}
	return 0
}

func (x *ElectionProviderMultiPhase_GovernanceFallbackCall) GetMaybeMaxTargets() uint32 {
	if x != nil && x.MaybeMaxTargets != nil {
		return *x.MaybeMaxTargets
	}
	return 0
}

type Babe_V1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	C            *Babe_TupleUint64Uint64 `protobuf:"bytes,1,opt,name=c,proto3" json:"c,omitempty"`
	AllowedSlots *AllowedSlots           `protobuf:"bytes,2,opt,name=allowed_slots,json=allowedSlots,proto3" json:"allowed_slots,omitempty"`
}

func (x *Babe_V1) Reset() {
	*x = Babe_V1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[313]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Babe_V1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Babe_V1) ProtoMessage() {}

func (x *Babe_V1) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[313]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Babe_V1.ProtoReflect.Descriptor instead.
func (*Babe_V1) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{313}
}

func (x *Babe_V1) GetC() *Babe_TupleUint64Uint64 {
	if x != nil {
		return x.C
	}
	return nil
}

func (x *Babe_V1) GetAllowedSlots() *AllowedSlots {
	if x != nil {
		return x.AllowedSlots
	}
	return nil
}

type Grandpa_NoteStalledCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Delay                    uint32 `protobuf:"varint,1,opt,name=delay,proto3" json:"delay,omitempty"`
	BestFinalizedBlockNumber uint32 `protobuf:"varint,2,opt,name=best_finalized_block_number,json=bestFinalizedBlockNumber,proto3" json:"best_finalized_block_number,omitempty"`
}

func (x *Grandpa_NoteStalledCall) Reset() {
	*x = Grandpa_NoteStalledCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[314]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Grandpa_NoteStalledCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Grandpa_NoteStalledCall) ProtoMessage() {}

func (x *Grandpa_NoteStalledCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[314]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Grandpa_NoteStalledCall.ProtoReflect.Descriptor instead.
func (*Grandpa_NoteStalledCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{314}
}

func (x *Grandpa_NoteStalledCall) GetDelay() uint32 {
	if x != nil {
		return x.Delay
	}
	return 0
}

func (x *Grandpa_NoteStalledCall) GetBestFinalizedBlockNumber() uint32 {
	if x != nil {
		return x.BestFinalizedBlockNumber
	}
	return 0
}

type Session_SetKeysCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys  *VaraRuntimeSessionKeys `protobuf:"bytes,1,opt,name=keys,proto3" json:"keys,omitempty"`
	Proof []byte                  `protobuf:"bytes,2,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (x *Session_SetKeysCall) Reset() {
	*x = Session_SetKeysCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[315]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Session_SetKeysCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Session_SetKeysCall) ProtoMessage() {}

func (x *Session_SetKeysCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[315]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Session_SetKeysCall.ProtoReflect.Descriptor instead.
func (*Session_SetKeysCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{315}
}

func (x *Session_SetKeysCall) GetKeys() *VaraRuntimeSessionKeys {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *Session_SetKeysCall) GetProof() []byte {
	if x != nil {
		return x.Proof
	}
	return nil
}

type Treasury_Id struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 *SpCoreCryptoAccountId32 `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Treasury_Id) Reset() {
	*x = Treasury_Id{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[316]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Treasury_Id) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Treasury_Id) ProtoMessage() {}

func (x *Treasury_Id) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[316]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Treasury_Id.ProtoReflect.Descriptor instead.
func (*Treasury_Id) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{316}
}

func (x *Treasury_Id) GetValue0() *SpCoreCryptoAccountId32 {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Identity_Raw19 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Identity_Raw19) Reset() {
	*x = Identity_Raw19{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[317]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_Raw19) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_Raw19) ProtoMessage() {}

func (x *Identity_Raw19) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[317]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_Raw19.ProtoReflect.Descriptor instead.
func (*Identity_Raw19) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{317}
}

func (x *Identity_Raw19) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type NominationPools_Address32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *NominationPools_Address32) Reset() {
	*x = NominationPools_Address32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[318]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NominationPools_Address32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NominationPools_Address32) ProtoMessage() {}

func (x *NominationPools_Address32) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[318]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NominationPools_Address32.ProtoReflect.Descriptor instead.
func (*NominationPools_Address32) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{318}
}

func (x *NominationPools_Address32) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type StakingRewards_TupleNull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *TupleNull `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *StakingRewards_TupleNull) Reset() {
	*x = StakingRewards_TupleNull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[319]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakingRewards_TupleNull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakingRewards_TupleNull) ProtoMessage() {}

func (x *StakingRewards_TupleNull) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[319]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakingRewards_TupleNull.ProtoReflect.Descriptor instead.
func (*StakingRewards_TupleNull) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{319}
}

func (x *StakingRewards_TupleNull) GetValue() *TupleNull {
	if x != nil {
		return x.Value
	}
	return nil
}

type Identity_CancelRequestCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegIndex uint32 `protobuf:"varint,1,opt,name=reg_index,json=regIndex,proto3" json:"reg_index,omitempty"`
}

func (x *Identity_CancelRequestCall) Reset() {
	*x = Identity_CancelRequestCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[320]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_CancelRequestCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_CancelRequestCall) ProtoMessage() {}

func (x *Identity_CancelRequestCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[320]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_CancelRequestCall.ProtoReflect.Descriptor instead.
func (*Identity_CancelRequestCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{320}
}

func (x *Identity_CancelRequestCall) GetRegIndex() uint32 {
	if x != nil {
		return x.RegIndex
	}
	return 0
}

type Identity_AddSubCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sub  *Identity_Sub  `protobuf:"bytes,1,opt,name=sub,proto3" json:"sub,omitempty"`
	Data *Identity_Data `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Identity_AddSubCall) Reset() {
	*x = Identity_AddSubCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[321]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_AddSubCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_AddSubCall) ProtoMessage() {}

func (x *Identity_AddSubCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[321]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_AddSubCall.ProtoReflect.Descriptor instead.
func (*Identity_AddSubCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{321}
}

func (x *Identity_AddSubCall) GetSub() *Identity_Sub {
	if x != nil {
		return x.Sub
	}
	return nil
}

func (x *Identity_AddSubCall) GetData() *Identity_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes7Listuint32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 uint32                                                               `protobuf:"varint,1,opt,name=value0,proto3" json:"value0,omitempty"`
	Value1 []*ElectionProviderMultiPhase_TupleUint32SpArithmeticPerThingsPerU16 `protobuf:"bytes,2,rep,name=value1,proto3" json:"value1,omitempty"`
	Value2 uint32                                                               `protobuf:"varint,3,opt,name=value2,proto3" json:"value2,omitempty"`
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes7Listuint32) Reset() {
	*x = ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes7Listuint32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[322]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes7Listuint32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes7Listuint32) ProtoMessage() {
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes7Listuint32) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[322]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes7Listuint32.ProtoReflect.Descriptor instead.
func (*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes7Listuint32) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{322}
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes7Listuint32) GetValue0() uint32 {
	if x != nil {
		return x.Value0
	}
	return 0
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes7Listuint32) GetValue1() []*ElectionProviderMultiPhase_TupleUint32SpArithmeticPerThingsPerU16 {
	if x != nil {
		return x.Value1
	}
	return nil
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes7Listuint32) GetValue2() uint32 {
	if x != nil {
		return x.Value2
	}
	return 0
}

type NominationPools_GlobalMaxCommission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*NominationPools_GlobalMaxCommission_Noop
	//	*NominationPools_GlobalMaxCommission_Set
	//	*NominationPools_GlobalMaxCommission_Remove
	Value isNominationPools_GlobalMaxCommission_Value `protobuf_oneof:"value"`
}

func (x *NominationPools_GlobalMaxCommission) Reset() {
	*x = NominationPools_GlobalMaxCommission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[323]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NominationPools_GlobalMaxCommission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NominationPools_GlobalMaxCommission) ProtoMessage() {}

func (x *NominationPools_GlobalMaxCommission) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[323]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NominationPools_GlobalMaxCommission.ProtoReflect.Descriptor instead.
func (*NominationPools_GlobalMaxCommission) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{323}
}

func (m *NominationPools_GlobalMaxCommission) GetValue() isNominationPools_GlobalMaxCommission_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *NominationPools_GlobalMaxCommission) GetNoop() *NominationPools_Noop {
	if x, ok := x.GetValue().(*NominationPools_GlobalMaxCommission_Noop); ok {
		return x.Noop
	}
	return nil
}

func (x *NominationPools_GlobalMaxCommission) GetSet() *NominationPools_Set {
	if x, ok := x.GetValue().(*NominationPools_GlobalMaxCommission_Set); ok {
		return x.Set
	}
	return nil
}

func (x *NominationPools_GlobalMaxCommission) GetRemove() *NominationPools_Remove {
	if x, ok := x.GetValue().(*NominationPools_GlobalMaxCommission_Remove); ok {
		return x.Remove
	}
	return nil
}

type isNominationPools_GlobalMaxCommission_Value interface {
	isNominationPools_GlobalMaxCommission_Value()
}

type NominationPools_GlobalMaxCommission_Noop struct {
	Noop *NominationPools_Noop `protobuf:"bytes,1,opt,name=noop,proto3,oneof"`
}

type NominationPools_GlobalMaxCommission_Set struct {
	Set *NominationPools_Set `protobuf:"bytes,2,opt,name=set,proto3,oneof"`
}

type NominationPools_GlobalMaxCommission_Remove struct {
	Remove *NominationPools_Remove `protobuf:"bytes,3,opt,name=remove,proto3,oneof"`
}

func (*NominationPools_GlobalMaxCommission_Noop) isNominationPools_GlobalMaxCommission_Value() {}

func (*NominationPools_GlobalMaxCommission_Set) isNominationPools_GlobalMaxCommission_Value() {}

func (*NominationPools_GlobalMaxCommission_Remove) isNominationPools_GlobalMaxCommission_Value() {}

type SpCoreSr25519Signature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *SpCoreSr25519Signature) Reset() {
	*x = SpCoreSr25519Signature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[324]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpCoreSr25519Signature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpCoreSr25519Signature) ProtoMessage() {}

func (x *SpCoreSr25519Signature) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[324]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpCoreSr25519Signature.ProtoReflect.Descriptor instead.
func (*SpCoreSr25519Signature) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{324}
}

func (x *SpCoreSr25519Signature) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Preimage_NotePreimageCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bytes []byte `protobuf:"bytes,1,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (x *Preimage_NotePreimageCall) Reset() {
	*x = Preimage_NotePreimageCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[325]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Preimage_NotePreimageCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Preimage_NotePreimageCall) ProtoMessage() {}

func (x *Preimage_NotePreimageCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[325]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Preimage_NotePreimageCall.ProtoReflect.Descriptor instead.
func (*Preimage_NotePreimageCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{325}
}

func (x *Preimage_NotePreimageCall) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

type Identity_Raw8 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Identity_Raw8) Reset() {
	*x = Identity_Raw8{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[326]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_Raw8) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_Raw8) ProtoMessage() {}

func (x *Identity_Raw8) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[326]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_Raw8.ProtoReflect.Descriptor instead.
func (*Identity_Raw8) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{326}
}

func (x *Identity_Raw8) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Identity_Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*Identity_Image_None
	//	*Identity_Image_Raw0
	//	*Identity_Image_Raw1
	//	*Identity_Image_Raw2
	//	*Identity_Image_Raw3
	//	*Identity_Image_Raw4
	//	*Identity_Image_Raw5
	//	*Identity_Image_Raw6
	//	*Identity_Image_Raw7
	//	*Identity_Image_Raw8
	//	*Identity_Image_Raw9
	//	*Identity_Image_Raw10
	//	*Identity_Image_Raw11
	//	*Identity_Image_Raw12
	//	*Identity_Image_Raw13
	//	*Identity_Image_Raw14
	//	*Identity_Image_Raw15
	//	*Identity_Image_Raw16
	//	*Identity_Image_Raw17
	//	*Identity_Image_Raw18
	//	*Identity_Image_Raw19
	//	*Identity_Image_Raw20
	//	*Identity_Image_Raw21
	//	*Identity_Image_Raw22
	//	*Identity_Image_Raw23
	//	*Identity_Image_Raw24
	//	*Identity_Image_Raw25
	//	*Identity_Image_Raw26
	//	*Identity_Image_Raw27
	//	*Identity_Image_Raw28
	//	*Identity_Image_Raw29
	//	*Identity_Image_Raw30
	//	*Identity_Image_Raw31
	//	*Identity_Image_Raw32
	//	*Identity_Image_BlakeTwo256
	//	*Identity_Image_Sha256
	//	*Identity_Image_Keccak256
	//	*Identity_Image_ShaThree256
	Value isIdentity_Image_Value `protobuf_oneof:"value"`
}

func (x *Identity_Image) Reset() {
	*x = Identity_Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[327]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_Image) ProtoMessage() {}

func (x *Identity_Image) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[327]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_Image.ProtoReflect.Descriptor instead.
func (*Identity_Image) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{327}
}

func (m *Identity_Image) GetValue() isIdentity_Image_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Identity_Image) GetNone() *Identity_None {
	if x, ok := x.GetValue().(*Identity_Image_None); ok {
		return x.None
	}
	return nil
}

func (x *Identity_Image) GetRaw0() *Identity_Raw0 {
	if x, ok := x.GetValue().(*Identity_Image_Raw0); ok {
		return x.Raw0
	}
	return nil
}

func (x *Identity_Image) GetRaw1() *Identity_Raw1 {
	if x, ok := x.GetValue().(*Identity_Image_Raw1); ok {
		return x.Raw1
	}
	return nil
}

func (x *Identity_Image) GetRaw2() *Identity_Raw2 {
	if x, ok := x.GetValue().(*Identity_Image_Raw2); ok {
		return x.Raw2
	}
	return nil
}

func (x *Identity_Image) GetRaw3() *Identity_Raw3 {
	if x, ok := x.GetValue().(*Identity_Image_Raw3); ok {
		return x.Raw3
	}
	return nil
}

func (x *Identity_Image) GetRaw4() *Identity_Raw4 {
	if x, ok := x.GetValue().(*Identity_Image_Raw4); ok {
		return x.Raw4
	}
	return nil
}

func (x *Identity_Image) GetRaw5() *Identity_Raw5 {
	if x, ok := x.GetValue().(*Identity_Image_Raw5); ok {
		return x.Raw5
	}
	return nil
}

func (x *Identity_Image) GetRaw6() *Identity_Raw6 {
	if x, ok := x.GetValue().(*Identity_Image_Raw6); ok {
		return x.Raw6
	}
	return nil
}

func (x *Identity_Image) GetRaw7() *Identity_Raw7 {
	if x, ok := x.GetValue().(*Identity_Image_Raw7); ok {
		return x.Raw7
	}
	return nil
}

func (x *Identity_Image) GetRaw8() *Identity_Raw8 {
	if x, ok := x.GetValue().(*Identity_Image_Raw8); ok {
		return x.Raw8
	}
	return nil
}

func (x *Identity_Image) GetRaw9() *Identity_Raw9 {
	if x, ok := x.GetValue().(*Identity_Image_Raw9); ok {
		return x.Raw9
	}
	return nil
}

func (x *Identity_Image) GetRaw10() *Identity_Raw10 {
	if x, ok := x.GetValue().(*Identity_Image_Raw10); ok {
		return x.Raw10
	}
	return nil
}

func (x *Identity_Image) GetRaw11() *Identity_Raw11 {
	if x, ok := x.GetValue().(*Identity_Image_Raw11); ok {
		return x.Raw11
	}
	return nil
}

func (x *Identity_Image) GetRaw12() *Identity_Raw12 {
	if x, ok := x.GetValue().(*Identity_Image_Raw12); ok {
		return x.Raw12
	}
	return nil
}

func (x *Identity_Image) GetRaw13() *Identity_Raw13 {
	if x, ok := x.GetValue().(*Identity_Image_Raw13); ok {
		return x.Raw13
	}
	return nil
}

func (x *Identity_Image) GetRaw14() *Identity_Raw14 {
	if x, ok := x.GetValue().(*Identity_Image_Raw14); ok {
		return x.Raw14
	}
	return nil
}

func (x *Identity_Image) GetRaw15() *Identity_Raw15 {
	if x, ok := x.GetValue().(*Identity_Image_Raw15); ok {
		return x.Raw15
	}
	return nil
}

func (x *Identity_Image) GetRaw16() *Identity_Raw16 {
	if x, ok := x.GetValue().(*Identity_Image_Raw16); ok {
		return x.Raw16
	}
	return nil
}

func (x *Identity_Image) GetRaw17() *Identity_Raw17 {
	if x, ok := x.GetValue().(*Identity_Image_Raw17); ok {
		return x.Raw17
	}
	return nil
}

func (x *Identity_Image) GetRaw18() *Identity_Raw18 {
	if x, ok := x.GetValue().(*Identity_Image_Raw18); ok {
		return x.Raw18
	}
	return nil
}

func (x *Identity_Image) GetRaw19() *Identity_Raw19 {
	if x, ok := x.GetValue().(*Identity_Image_Raw19); ok {
		return x.Raw19
	}
	return nil
}

func (x *Identity_Image) GetRaw20() *Identity_Raw20 {
	if x, ok := x.GetValue().(*Identity_Image_Raw20); ok {
		return x.Raw20
	}
	return nil
}

func (x *Identity_Image) GetRaw21() *Identity_Raw21 {
	if x, ok := x.GetValue().(*Identity_Image_Raw21); ok {
		return x.Raw21
	}
	return nil
}

func (x *Identity_Image) GetRaw22() *Identity_Raw22 {
	if x, ok := x.GetValue().(*Identity_Image_Raw22); ok {
		return x.Raw22
	}
	return nil
}

func (x *Identity_Image) GetRaw23() *Identity_Raw23 {
	if x, ok := x.GetValue().(*Identity_Image_Raw23); ok {
		return x.Raw23
	}
	return nil
}

func (x *Identity_Image) GetRaw24() *Identity_Raw24 {
	if x, ok := x.GetValue().(*Identity_Image_Raw24); ok {
		return x.Raw24
	}
	return nil
}

func (x *Identity_Image) GetRaw25() *Identity_Raw25 {
	if x, ok := x.GetValue().(*Identity_Image_Raw25); ok {
		return x.Raw25
	}
	return nil
}

func (x *Identity_Image) GetRaw26() *Identity_Raw26 {
	if x, ok := x.GetValue().(*Identity_Image_Raw26); ok {
		return x.Raw26
	}
	return nil
}

func (x *Identity_Image) GetRaw27() *Identity_Raw27 {
	if x, ok := x.GetValue().(*Identity_Image_Raw27); ok {
		return x.Raw27
	}
	return nil
}

func (x *Identity_Image) GetRaw28() *Identity_Raw28 {
	if x, ok := x.GetValue().(*Identity_Image_Raw28); ok {
		return x.Raw28
	}
	return nil
}

func (x *Identity_Image) GetRaw29() *Identity_Raw29 {
	if x, ok := x.GetValue().(*Identity_Image_Raw29); ok {
		return x.Raw29
	}
	return nil
}

func (x *Identity_Image) GetRaw30() *Identity_Raw30 {
	if x, ok := x.GetValue().(*Identity_Image_Raw30); ok {
		return x.Raw30
	}
	return nil
}

func (x *Identity_Image) GetRaw31() *Identity_Raw31 {
	if x, ok := x.GetValue().(*Identity_Image_Raw31); ok {
		return x.Raw31
	}
	return nil
}

func (x *Identity_Image) GetRaw32() *Identity_Raw32 {
	if x, ok := x.GetValue().(*Identity_Image_Raw32); ok {
		return x.Raw32
	}
	return nil
}

func (x *Identity_Image) GetBlakeTwo256() *Identity_BlakeTwo256 {
	if x, ok := x.GetValue().(*Identity_Image_BlakeTwo256); ok {
		return x.BlakeTwo256
	}
	return nil
}

func (x *Identity_Image) GetSha256() *Identity_Sha256 {
	if x, ok := x.GetValue().(*Identity_Image_Sha256); ok {
		return x.Sha256
	}
	return nil
}

func (x *Identity_Image) GetKeccak256() *Identity_Keccak256 {
	if x, ok := x.GetValue().(*Identity_Image_Keccak256); ok {
		return x.Keccak256
	}
	return nil
}

func (x *Identity_Image) GetShaThree256() *Identity_ShaThree256 {
	if x, ok := x.GetValue().(*Identity_Image_ShaThree256); ok {
		return x.ShaThree256
	}
	return nil
}

type isIdentity_Image_Value interface {
	isIdentity_Image_Value()
}

type Identity_Image_None struct {
	None *Identity_None `protobuf:"bytes,1,opt,name=none,proto3,oneof"`
}

type Identity_Image_Raw0 struct {
	Raw0 *Identity_Raw0 `protobuf:"bytes,2,opt,name=raw0,proto3,oneof"`
}

type Identity_Image_Raw1 struct {
	Raw1 *Identity_Raw1 `protobuf:"bytes,3,opt,name=raw1,proto3,oneof"`
}

type Identity_Image_Raw2 struct {
	Raw2 *Identity_Raw2 `protobuf:"bytes,4,opt,name=raw2,proto3,oneof"`
}

type Identity_Image_Raw3 struct {
	Raw3 *Identity_Raw3 `protobuf:"bytes,5,opt,name=raw3,proto3,oneof"`
}

type Identity_Image_Raw4 struct {
	Raw4 *Identity_Raw4 `protobuf:"bytes,6,opt,name=raw4,proto3,oneof"`
}

type Identity_Image_Raw5 struct {
	Raw5 *Identity_Raw5 `protobuf:"bytes,7,opt,name=raw5,proto3,oneof"`
}

type Identity_Image_Raw6 struct {
	Raw6 *Identity_Raw6 `protobuf:"bytes,8,opt,name=raw6,proto3,oneof"`
}

type Identity_Image_Raw7 struct {
	Raw7 *Identity_Raw7 `protobuf:"bytes,9,opt,name=raw7,proto3,oneof"`
}

type Identity_Image_Raw8 struct {
	Raw8 *Identity_Raw8 `protobuf:"bytes,10,opt,name=raw8,proto3,oneof"`
}

type Identity_Image_Raw9 struct {
	Raw9 *Identity_Raw9 `protobuf:"bytes,11,opt,name=raw9,proto3,oneof"`
}

type Identity_Image_Raw10 struct {
	Raw10 *Identity_Raw10 `protobuf:"bytes,12,opt,name=raw10,proto3,oneof"`
}

type Identity_Image_Raw11 struct {
	Raw11 *Identity_Raw11 `protobuf:"bytes,13,opt,name=raw11,proto3,oneof"`
}

type Identity_Image_Raw12 struct {
	Raw12 *Identity_Raw12 `protobuf:"bytes,14,opt,name=raw12,proto3,oneof"`
}

type Identity_Image_Raw13 struct {
	Raw13 *Identity_Raw13 `protobuf:"bytes,15,opt,name=raw13,proto3,oneof"`
}

type Identity_Image_Raw14 struct {
	Raw14 *Identity_Raw14 `protobuf:"bytes,16,opt,name=raw14,proto3,oneof"`
}

type Identity_Image_Raw15 struct {
	Raw15 *Identity_Raw15 `protobuf:"bytes,17,opt,name=raw15,proto3,oneof"`
}

type Identity_Image_Raw16 struct {
	Raw16 *Identity_Raw16 `protobuf:"bytes,18,opt,name=raw16,proto3,oneof"`
}

type Identity_Image_Raw17 struct {
	Raw17 *Identity_Raw17 `protobuf:"bytes,19,opt,name=raw17,proto3,oneof"`
}

type Identity_Image_Raw18 struct {
	Raw18 *Identity_Raw18 `protobuf:"bytes,20,opt,name=raw18,proto3,oneof"`
}

type Identity_Image_Raw19 struct {
	Raw19 *Identity_Raw19 `protobuf:"bytes,21,opt,name=raw19,proto3,oneof"`
}

type Identity_Image_Raw20 struct {
	Raw20 *Identity_Raw20 `protobuf:"bytes,22,opt,name=raw20,proto3,oneof"`
}

type Identity_Image_Raw21 struct {
	Raw21 *Identity_Raw21 `protobuf:"bytes,23,opt,name=raw21,proto3,oneof"`
}

type Identity_Image_Raw22 struct {
	Raw22 *Identity_Raw22 `protobuf:"bytes,24,opt,name=raw22,proto3,oneof"`
}

type Identity_Image_Raw23 struct {
	Raw23 *Identity_Raw23 `protobuf:"bytes,25,opt,name=raw23,proto3,oneof"`
}

type Identity_Image_Raw24 struct {
	Raw24 *Identity_Raw24 `protobuf:"bytes,26,opt,name=raw24,proto3,oneof"`
}

type Identity_Image_Raw25 struct {
	Raw25 *Identity_Raw25 `protobuf:"bytes,27,opt,name=raw25,proto3,oneof"`
}

type Identity_Image_Raw26 struct {
	Raw26 *Identity_Raw26 `protobuf:"bytes,28,opt,name=raw26,proto3,oneof"`
}

type Identity_Image_Raw27 struct {
	Raw27 *Identity_Raw27 `protobuf:"bytes,29,opt,name=raw27,proto3,oneof"`
}

type Identity_Image_Raw28 struct {
	Raw28 *Identity_Raw28 `protobuf:"bytes,30,opt,name=raw28,proto3,oneof"`
}

type Identity_Image_Raw29 struct {
	Raw29 *Identity_Raw29 `protobuf:"bytes,31,opt,name=raw29,proto3,oneof"`
}

type Identity_Image_Raw30 struct {
	Raw30 *Identity_Raw30 `protobuf:"bytes,32,opt,name=raw30,proto3,oneof"`
}

type Identity_Image_Raw31 struct {
	Raw31 *Identity_Raw31 `protobuf:"bytes,33,opt,name=raw31,proto3,oneof"`
}

type Identity_Image_Raw32 struct {
	Raw32 *Identity_Raw32 `protobuf:"bytes,34,opt,name=raw32,proto3,oneof"`
}

type Identity_Image_BlakeTwo256 struct {
	BlakeTwo256 *Identity_BlakeTwo256 `protobuf:"bytes,35,opt,name=blake_two256,json=blakeTwo256,proto3,oneof"`
}

type Identity_Image_Sha256 struct {
	Sha256 *Identity_Sha256 `protobuf:"bytes,36,opt,name=sha256,proto3,oneof"`
}

type Identity_Image_Keccak256 struct {
	Keccak256 *Identity_Keccak256 `protobuf:"bytes,37,opt,name=keccak256,proto3,oneof"`
}

type Identity_Image_ShaThree256 struct {
	ShaThree256 *Identity_ShaThree256 `protobuf:"bytes,38,opt,name=sha_three256,json=shaThree256,proto3,oneof"`
}

func (*Identity_Image_None) isIdentity_Image_Value() {}

func (*Identity_Image_Raw0) isIdentity_Image_Value() {}

func (*Identity_Image_Raw1) isIdentity_Image_Value() {}

func (*Identity_Image_Raw2) isIdentity_Image_Value() {}

func (*Identity_Image_Raw3) isIdentity_Image_Value() {}

func (*Identity_Image_Raw4) isIdentity_Image_Value() {}

func (*Identity_Image_Raw5) isIdentity_Image_Value() {}

func (*Identity_Image_Raw6) isIdentity_Image_Value() {}

func (*Identity_Image_Raw7) isIdentity_Image_Value() {}

func (*Identity_Image_Raw8) isIdentity_Image_Value() {}

func (*Identity_Image_Raw9) isIdentity_Image_Value() {}

func (*Identity_Image_Raw10) isIdentity_Image_Value() {}

func (*Identity_Image_Raw11) isIdentity_Image_Value() {}

func (*Identity_Image_Raw12) isIdentity_Image_Value() {}

func (*Identity_Image_Raw13) isIdentity_Image_Value() {}

func (*Identity_Image_Raw14) isIdentity_Image_Value() {}

func (*Identity_Image_Raw15) isIdentity_Image_Value() {}

func (*Identity_Image_Raw16) isIdentity_Image_Value() {}

func (*Identity_Image_Raw17) isIdentity_Image_Value() {}

func (*Identity_Image_Raw18) isIdentity_Image_Value() {}

func (*Identity_Image_Raw19) isIdentity_Image_Value() {}

func (*Identity_Image_Raw20) isIdentity_Image_Value() {}

func (*Identity_Image_Raw21) isIdentity_Image_Value() {}

func (*Identity_Image_Raw22) isIdentity_Image_Value() {}

func (*Identity_Image_Raw23) isIdentity_Image_Value() {}

func (*Identity_Image_Raw24) isIdentity_Image_Value() {}

func (*Identity_Image_Raw25) isIdentity_Image_Value() {}

func (*Identity_Image_Raw26) isIdentity_Image_Value() {}

func (*Identity_Image_Raw27) isIdentity_Image_Value() {}

func (*Identity_Image_Raw28) isIdentity_Image_Value() {}

func (*Identity_Image_Raw29) isIdentity_Image_Value() {}

func (*Identity_Image_Raw30) isIdentity_Image_Value() {}

func (*Identity_Image_Raw31) isIdentity_Image_Value() {}

func (*Identity_Image_Raw32) isIdentity_Image_Value() {}

func (*Identity_Image_BlakeTwo256) isIdentity_Image_Value() {}

func (*Identity_Image_Sha256) isIdentity_Image_Value() {}

func (*Identity_Image_Keccak256) isIdentity_Image_Value() {}

func (*Identity_Image_ShaThree256) isIdentity_Image_Value() {}

type Identity_SetFeeCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Fee   string `protobuf:"bytes,2,opt,name=fee,proto3" json:"fee,omitempty"`
}

func (x *Identity_SetFeeCall) Reset() {
	*x = Identity_SetFeeCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[328]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_SetFeeCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_SetFeeCall) ProtoMessage() {}

func (x *Identity_SetFeeCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[328]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_SetFeeCall.ProtoReflect.Descriptor instead.
func (*Identity_SetFeeCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{328}
}

func (x *Identity_SetFeeCall) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Identity_SetFeeCall) GetFee() string {
	if x != nil {
		return x.Fee
	}
	return ""
}

type TupleFinalityGrandpaPrecommitspConsensusGrandpaAppSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 *FinalityGrandpaPrecommit       `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
	Value1 *SpConsensusGrandpaAppSignature `protobuf:"bytes,2,opt,name=value1,proto3" json:"value1,omitempty"`
}

func (x *TupleFinalityGrandpaPrecommitspConsensusGrandpaAppSignature) Reset() {
	*x = TupleFinalityGrandpaPrecommitspConsensusGrandpaAppSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[329]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TupleFinalityGrandpaPrecommitspConsensusGrandpaAppSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TupleFinalityGrandpaPrecommitspConsensusGrandpaAppSignature) ProtoMessage() {}

func (x *TupleFinalityGrandpaPrecommitspConsensusGrandpaAppSignature) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[329]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TupleFinalityGrandpaPrecommitspConsensusGrandpaAppSignature.ProtoReflect.Descriptor instead.
func (*TupleFinalityGrandpaPrecommitspConsensusGrandpaAppSignature) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{329}
}

func (x *TupleFinalityGrandpaPrecommitspConsensusGrandpaAppSignature) GetValue0() *FinalityGrandpaPrecommit {
	if x != nil {
		return x.Value0
	}
	return nil
}

func (x *TupleFinalityGrandpaPrecommitspConsensusGrandpaAppSignature) GetValue1() *SpConsensusGrandpaAppSignature {
	if x != nil {
		return x.Value1
	}
	return nil
}

type ConvictionVoting_RemoveOtherVoteCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target *ConvictionVoting_Target `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Class  uint32                   `protobuf:"varint,2,opt,name=class,proto3" json:"class,omitempty"`
	Index  uint32                   `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *ConvictionVoting_RemoveOtherVoteCall) Reset() {
	*x = ConvictionVoting_RemoveOtherVoteCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[330]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConvictionVoting_RemoveOtherVoteCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvictionVoting_RemoveOtherVoteCall) ProtoMessage() {}

func (x *ConvictionVoting_RemoveOtherVoteCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[330]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvictionVoting_RemoveOtherVoteCall.ProtoReflect.Descriptor instead.
func (*ConvictionVoting_RemoveOtherVoteCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{330}
}

func (x *ConvictionVoting_RemoveOtherVoteCall) GetTarget() *ConvictionVoting_Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *ConvictionVoting_RemoveOtherVoteCall) GetClass() uint32 {
	if x != nil {
		return x.Class
	}
	return 0
}

func (x *ConvictionVoting_RemoveOtherVoteCall) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type Identity_QuitSubCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Identity_QuitSubCall) Reset() {
	*x = Identity_QuitSubCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[331]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_QuitSubCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_QuitSubCall) ProtoMessage() {}

func (x *Identity_QuitSubCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[331]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_QuitSubCall.ProtoReflect.Descriptor instead.
func (*Identity_QuitSubCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{331}
}

type Bounties_Index struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 *Bounties_TupleNull `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Bounties_Index) Reset() {
	*x = Bounties_Index{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[332]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bounties_Index) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bounties_Index) ProtoMessage() {}

func (x *Bounties_Index) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[332]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bounties_Index.ProtoReflect.Descriptor instead.
func (*Bounties_Index) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{332}
}

func (x *Bounties_Index) GetValue0() *Bounties_TupleNull {
	if x != nil {
		return x.Value0
	}
	return nil
}

type SpNposElectionsSupport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total  string                                                           `protobuf:"bytes,1,opt,name=total,proto3" json:"total,omitempty"`
	Voters []*ElectionProviderMultiPhase_TupleSpCoreCryptoAccountId32String `protobuf:"bytes,2,rep,name=voters,proto3" json:"voters,omitempty"`
}

func (x *SpNposElectionsSupport) Reset() {
	*x = SpNposElectionsSupport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[333]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpNposElectionsSupport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpNposElectionsSupport) ProtoMessage() {}

func (x *SpNposElectionsSupport) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[333]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpNposElectionsSupport.ProtoReflect.Descriptor instead.
func (*SpNposElectionsSupport) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{333}
}

func (x *SpNposElectionsSupport) GetTotal() string {
	if x != nil {
		return x.Total
	}
	return ""
}

func (x *SpNposElectionsSupport) GetVoters() []*ElectionProviderMultiPhase_TupleSpCoreCryptoAccountId32String {
	if x != nil {
		return x.Voters
	}
	return nil
}

type ChildBounties_AcceptCuratorCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentBountyId uint32 `protobuf:"varint,1,opt,name=parent_bounty_id,json=parentBountyId,proto3" json:"parent_bounty_id,omitempty"`
	ChildBountyId  uint32 `protobuf:"varint,2,opt,name=child_bounty_id,json=childBountyId,proto3" json:"child_bounty_id,omitempty"`
}

func (x *ChildBounties_AcceptCuratorCall) Reset() {
	*x = ChildBounties_AcceptCuratorCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[334]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChildBounties_AcceptCuratorCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChildBounties_AcceptCuratorCall) ProtoMessage() {}

func (x *ChildBounties_AcceptCuratorCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[334]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChildBounties_AcceptCuratorCall.ProtoReflect.Descriptor instead.
func (*ChildBounties_AcceptCuratorCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{334}
}

func (x *ChildBounties_AcceptCuratorCall) GetParentBountyId() uint32 {
	if x != nil {
		return x.ParentBountyId
	}
	return 0
}

func (x *ChildBounties_AcceptCuratorCall) GetChildBountyId() uint32 {
	if x != nil {
		return x.ChildBountyId
	}
	return 0
}

type NominationPools_NewBouncer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*NominationPools_NewBouncer_Noop
	//	*NominationPools_NewBouncer_Set
	//	*NominationPools_NewBouncer_Remove
	Value isNominationPools_NewBouncer_Value `protobuf_oneof:"value"`
}

func (x *NominationPools_NewBouncer) Reset() {
	*x = NominationPools_NewBouncer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[335]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NominationPools_NewBouncer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NominationPools_NewBouncer) ProtoMessage() {}

func (x *NominationPools_NewBouncer) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[335]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NominationPools_NewBouncer.ProtoReflect.Descriptor instead.
func (*NominationPools_NewBouncer) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{335}
}

func (m *NominationPools_NewBouncer) GetValue() isNominationPools_NewBouncer_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *NominationPools_NewBouncer) GetNoop() *NominationPools_Noop {
	if x, ok := x.GetValue().(*NominationPools_NewBouncer_Noop); ok {
		return x.Noop
	}
	return nil
}

func (x *NominationPools_NewBouncer) GetSet() *NominationPools_Set {
	if x, ok := x.GetValue().(*NominationPools_NewBouncer_Set); ok {
		return x.Set
	}
	return nil
}

func (x *NominationPools_NewBouncer) GetRemove() *NominationPools_Remove {
	if x, ok := x.GetValue().(*NominationPools_NewBouncer_Remove); ok {
		return x.Remove
	}
	return nil
}

type isNominationPools_NewBouncer_Value interface {
	isNominationPools_NewBouncer_Value()
}

type NominationPools_NewBouncer_Noop struct {
	Noop *NominationPools_Noop `protobuf:"bytes,1,opt,name=noop,proto3,oneof"`
}

type NominationPools_NewBouncer_Set struct {
	Set *NominationPools_Set `protobuf:"bytes,2,opt,name=set,proto3,oneof"`
}

type NominationPools_NewBouncer_Remove struct {
	Remove *NominationPools_Remove `protobuf:"bytes,3,opt,name=remove,proto3,oneof"`
}

func (*NominationPools_NewBouncer_Noop) isNominationPools_NewBouncer_Value() {}

func (*NominationPools_NewBouncer_Set) isNominationPools_NewBouncer_Value() {}

func (*NominationPools_NewBouncer_Remove) isNominationPools_NewBouncer_Value() {}

type Balances_TransferKeepAliveCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dest  *Balances_Dest `protobuf:"bytes,1,opt,name=dest,proto3" json:"dest,omitempty"`
	Value string         `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Balances_TransferKeepAliveCall) Reset() {
	*x = Balances_TransferKeepAliveCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[336]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Balances_TransferKeepAliveCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Balances_TransferKeepAliveCall) ProtoMessage() {}

func (x *Balances_TransferKeepAliveCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[336]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Balances_TransferKeepAliveCall.ProtoReflect.Descriptor instead.
func (*Balances_TransferKeepAliveCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{336}
}

func (x *Balances_TransferKeepAliveCall) GetDest() *Balances_Dest {
	if x != nil {
		return x.Dest
	}
	return nil
}

func (x *Balances_TransferKeepAliveCall) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Staking_ForceApplyMinCommissionCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValidatorStash *SpCoreCryptoAccountId32 `protobuf:"bytes,1,opt,name=validator_stash,json=validatorStash,proto3" json:"validator_stash,omitempty"`
}

func (x *Staking_ForceApplyMinCommissionCall) Reset() {
	*x = Staking_ForceApplyMinCommissionCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[337]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staking_ForceApplyMinCommissionCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staking_ForceApplyMinCommissionCall) ProtoMessage() {}

func (x *Staking_ForceApplyMinCommissionCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[337]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staking_ForceApplyMinCommissionCall.ProtoReflect.Descriptor instead.
func (*Staking_ForceApplyMinCommissionCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{337}
}

func (x *Staking_ForceApplyMinCommissionCall) GetValidatorStash() *SpCoreCryptoAccountId32 {
	if x != nil {
		return x.ValidatorStash
	}
	return nil
}

type SpWeightsWeightV2Weight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefTime   uint64 `protobuf:"varint,1,opt,name=ref_time,json=refTime,proto3" json:"ref_time,omitempty"`
	ProofSize uint64 `protobuf:"varint,2,opt,name=proof_size,json=proofSize,proto3" json:"proof_size,omitempty"`
}

func (x *SpWeightsWeightV2Weight) Reset() {
	*x = SpWeightsWeightV2Weight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[338]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpWeightsWeightV2Weight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpWeightsWeightV2Weight) ProtoMessage() {}

func (x *SpWeightsWeightV2Weight) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[338]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpWeightsWeightV2Weight.ProtoReflect.Descriptor instead.
func (*SpWeightsWeightV2Weight) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{338}
}

func (x *SpWeightsWeightV2Weight) GetRefTime() uint64 {
	if x != nil {
		return x.RefTime
	}
	return 0
}

func (x *SpWeightsWeightV2Weight) GetProofSize() uint64 {
	if x != nil {
		return x.ProofSize
	}
	return 0
}

type Identity_Raw3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Identity_Raw3) Reset() {
	*x = Identity_Raw3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[339]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_Raw3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_Raw3) ProtoMessage() {}

func (x *Identity_Raw3) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[339]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_Raw3.ProtoReflect.Descriptor instead.
func (*Identity_Raw3) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{339}
}

func (x *Identity_Raw3) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Identity_Raw30 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Identity_Raw30) Reset() {
	*x = Identity_Raw30{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[340]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_Raw30) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_Raw30) ProtoMessage() {}

func (x *Identity_Raw30) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[340]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_Raw30.ProtoReflect.Descriptor instead.
func (*Identity_Raw30) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{340}
}

func (x *Identity_Raw30) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Gear_UploadProgramCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code        []byte `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Salt        []byte `protobuf:"bytes,2,opt,name=salt,proto3" json:"salt,omitempty"`
	InitPayload []byte `protobuf:"bytes,3,opt,name=init_payload,json=initPayload,proto3" json:"init_payload,omitempty"`
	GasLimit    uint64 `protobuf:"varint,4,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	Value       string `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	KeepAlive   bool   `protobuf:"varint,6,opt,name=keep_alive,json=keepAlive,proto3" json:"keep_alive,omitempty"`
}

func (x *Gear_UploadProgramCall) Reset() {
	*x = Gear_UploadProgramCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[341]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Gear_UploadProgramCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gear_UploadProgramCall) ProtoMessage() {}

func (x *Gear_UploadProgramCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[341]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gear_UploadProgramCall.ProtoReflect.Descriptor instead.
func (*Gear_UploadProgramCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{341}
}

func (x *Gear_UploadProgramCall) GetCode() []byte {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *Gear_UploadProgramCall) GetSalt() []byte {
	if x != nil {
		return x.Salt
	}
	return nil
}

func (x *Gear_UploadProgramCall) GetInitPayload() []byte {
	if x != nil {
		return x.InitPayload
	}
	return nil
}

func (x *Gear_UploadProgramCall) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *Gear_UploadProgramCall) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Gear_UploadProgramCall) GetKeepAlive() bool {
	if x != nil {
		return x.KeepAlive
	}
	return false
}

type GearVoucher_UploadCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code []byte `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *GearVoucher_UploadCode) Reset() {
	*x = GearVoucher_UploadCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[342]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GearVoucher_UploadCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GearVoucher_UploadCode) ProtoMessage() {}

func (x *GearVoucher_UploadCode) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[342]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GearVoucher_UploadCode.ProtoReflect.Descriptor instead.
func (*GearVoucher_UploadCode) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{342}
}

func (x *GearVoucher_UploadCode) GetCode() []byte {
	if x != nil {
		return x.Code
	}
	return nil
}

type Babe_BabeTrieNodesList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrieNodes []byte `protobuf:"bytes,1,opt,name=trie_nodes,json=trieNodes,proto3" json:"trie_nodes,omitempty"`
}

func (x *Babe_BabeTrieNodesList) Reset() {
	*x = Babe_BabeTrieNodesList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[343]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Babe_BabeTrieNodesList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Babe_BabeTrieNodesList) ProtoMessage() {}

func (x *Babe_BabeTrieNodesList) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[343]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Babe_BabeTrieNodesList.ProtoReflect.Descriptor instead.
func (*Babe_BabeTrieNodesList) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{343}
}

func (x *Babe_BabeTrieNodesList) GetTrieNodes() []byte {
	if x != nil {
		return x.TrieNodes
	}
	return nil
}

type Vesting_VestOtherCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target *Vesting_Target `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *Vesting_VestOtherCall) Reset() {
	*x = Vesting_VestOtherCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[344]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vesting_VestOtherCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vesting_VestOtherCall) ProtoMessage() {}

func (x *Vesting_VestOtherCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[344]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vesting_VestOtherCall.ProtoReflect.Descriptor instead.
func (*Vesting_VestOtherCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{344}
}

func (x *Vesting_VestOtherCall) GetTarget() *Vesting_Target {
	if x != nil {
		return x.Target
	}
	return nil
}

type Staking_Staked struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Staking_Staked) Reset() {
	*x = Staking_Staked{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[345]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staking_Staked) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staking_Staked) ProtoMessage() {}

func (x *Staking_Staked) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[345]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staking_Staked.ProtoReflect.Descriptor instead.
func (*Staking_Staked) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{345}
}

type ConvictionVoting_Locked5X struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConvictionVoting_Locked5X) Reset() {
	*x = ConvictionVoting_Locked5X{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[346]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConvictionVoting_Locked5X) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvictionVoting_Locked5X) ProtoMessage() {}

func (x *ConvictionVoting_Locked5X) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[346]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvictionVoting_Locked5X.ProtoReflect.Descriptor instead.
func (*ConvictionVoting_Locked5X) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{346}
}

type Identity_Value1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*Identity_Value1_None
	//	*Identity_Value1_Raw0
	//	*Identity_Value1_Raw1
	//	*Identity_Value1_Raw2
	//	*Identity_Value1_Raw3
	//	*Identity_Value1_Raw4
	//	*Identity_Value1_Raw5
	//	*Identity_Value1_Raw6
	//	*Identity_Value1_Raw7
	//	*Identity_Value1_Raw8
	//	*Identity_Value1_Raw9
	//	*Identity_Value1_Raw10
	//	*Identity_Value1_Raw11
	//	*Identity_Value1_Raw12
	//	*Identity_Value1_Raw13
	//	*Identity_Value1_Raw14
	//	*Identity_Value1_Raw15
	//	*Identity_Value1_Raw16
	//	*Identity_Value1_Raw17
	//	*Identity_Value1_Raw18
	//	*Identity_Value1_Raw19
	//	*Identity_Value1_Raw20
	//	*Identity_Value1_Raw21
	//	*Identity_Value1_Raw22
	//	*Identity_Value1_Raw23
	//	*Identity_Value1_Raw24
	//	*Identity_Value1_Raw25
	//	*Identity_Value1_Raw26
	//	*Identity_Value1_Raw27
	//	*Identity_Value1_Raw28
	//	*Identity_Value1_Raw29
	//	*Identity_Value1_Raw30
	//	*Identity_Value1_Raw31
	//	*Identity_Value1_Raw32
	//	*Identity_Value1_BlakeTwo256
	//	*Identity_Value1_Sha256
	//	*Identity_Value1_Keccak256
	//	*Identity_Value1_ShaThree256
	Value isIdentity_Value1_Value `protobuf_oneof:"value"`
}

func (x *Identity_Value1) Reset() {
	*x = Identity_Value1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[347]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_Value1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_Value1) ProtoMessage() {}

func (x *Identity_Value1) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[347]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_Value1.ProtoReflect.Descriptor instead.
func (*Identity_Value1) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{347}
}

func (m *Identity_Value1) GetValue() isIdentity_Value1_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Identity_Value1) GetNone() *Identity_None {
	if x, ok := x.GetValue().(*Identity_Value1_None); ok {
		return x.None
	}
	return nil
}

func (x *Identity_Value1) GetRaw0() *Identity_Raw0 {
	if x, ok := x.GetValue().(*Identity_Value1_Raw0); ok {
		return x.Raw0
	}
	return nil
}

func (x *Identity_Value1) GetRaw1() *Identity_Raw1 {
	if x, ok := x.GetValue().(*Identity_Value1_Raw1); ok {
		return x.Raw1
	}
	return nil
}

func (x *Identity_Value1) GetRaw2() *Identity_Raw2 {
	if x, ok := x.GetValue().(*Identity_Value1_Raw2); ok {
		return x.Raw2
	}
	return nil
}

func (x *Identity_Value1) GetRaw3() *Identity_Raw3 {
	if x, ok := x.GetValue().(*Identity_Value1_Raw3); ok {
		return x.Raw3
	}
	return nil
}

func (x *Identity_Value1) GetRaw4() *Identity_Raw4 {
	if x, ok := x.GetValue().(*Identity_Value1_Raw4); ok {
		return x.Raw4
	}
	return nil
}

func (x *Identity_Value1) GetRaw5() *Identity_Raw5 {
	if x, ok := x.GetValue().(*Identity_Value1_Raw5); ok {
		return x.Raw5
	}
	return nil
}

func (x *Identity_Value1) GetRaw6() *Identity_Raw6 {
	if x, ok := x.GetValue().(*Identity_Value1_Raw6); ok {
		return x.Raw6
	}
	return nil
}

func (x *Identity_Value1) GetRaw7() *Identity_Raw7 {
	if x, ok := x.GetValue().(*Identity_Value1_Raw7); ok {
		return x.Raw7
	}
	return nil
}

func (x *Identity_Value1) GetRaw8() *Identity_Raw8 {
	if x, ok := x.GetValue().(*Identity_Value1_Raw8); ok {
		return x.Raw8
	}
	return nil
}

func (x *Identity_Value1) GetRaw9() *Identity_Raw9 {
	if x, ok := x.GetValue().(*Identity_Value1_Raw9); ok {
		return x.Raw9
	}
	return nil
}

func (x *Identity_Value1) GetRaw10() *Identity_Raw10 {
	if x, ok := x.GetValue().(*Identity_Value1_Raw10); ok {
		return x.Raw10
	}
	return nil
}

func (x *Identity_Value1) GetRaw11() *Identity_Raw11 {
	if x, ok := x.GetValue().(*Identity_Value1_Raw11); ok {
		return x.Raw11
	}
	return nil
}

func (x *Identity_Value1) GetRaw12() *Identity_Raw12 {
	if x, ok := x.GetValue().(*Identity_Value1_Raw12); ok {
		return x.Raw12
	}
	return nil
}

func (x *Identity_Value1) GetRaw13() *Identity_Raw13 {
	if x, ok := x.GetValue().(*Identity_Value1_Raw13); ok {
		return x.Raw13
	}
	return nil
}

func (x *Identity_Value1) GetRaw14() *Identity_Raw14 {
	if x, ok := x.GetValue().(*Identity_Value1_Raw14); ok {
		return x.Raw14
	}
	return nil
}

func (x *Identity_Value1) GetRaw15() *Identity_Raw15 {
	if x, ok := x.GetValue().(*Identity_Value1_Raw15); ok {
		return x.Raw15
	}
	return nil
}

func (x *Identity_Value1) GetRaw16() *Identity_Raw16 {
	if x, ok := x.GetValue().(*Identity_Value1_Raw16); ok {
		return x.Raw16
	}
	return nil
}

func (x *Identity_Value1) GetRaw17() *Identity_Raw17 {
	if x, ok := x.GetValue().(*Identity_Value1_Raw17); ok {
		return x.Raw17
	}
	return nil
}

func (x *Identity_Value1) GetRaw18() *Identity_Raw18 {
	if x, ok := x.GetValue().(*Identity_Value1_Raw18); ok {
		return x.Raw18
	}
	return nil
}

func (x *Identity_Value1) GetRaw19() *Identity_Raw19 {
	if x, ok := x.GetValue().(*Identity_Value1_Raw19); ok {
		return x.Raw19
	}
	return nil
}

func (x *Identity_Value1) GetRaw20() *Identity_Raw20 {
	if x, ok := x.GetValue().(*Identity_Value1_Raw20); ok {
		return x.Raw20
	}
	return nil
}

func (x *Identity_Value1) GetRaw21() *Identity_Raw21 {
	if x, ok := x.GetValue().(*Identity_Value1_Raw21); ok {
		return x.Raw21
	}
	return nil
}

func (x *Identity_Value1) GetRaw22() *Identity_Raw22 {
	if x, ok := x.GetValue().(*Identity_Value1_Raw22); ok {
		return x.Raw22
	}
	return nil
}

func (x *Identity_Value1) GetRaw23() *Identity_Raw23 {
	if x, ok := x.GetValue().(*Identity_Value1_Raw23); ok {
		return x.Raw23
	}
	return nil
}

func (x *Identity_Value1) GetRaw24() *Identity_Raw24 {
	if x, ok := x.GetValue().(*Identity_Value1_Raw24); ok {
		return x.Raw24
	}
	return nil
}

func (x *Identity_Value1) GetRaw25() *Identity_Raw25 {
	if x, ok := x.GetValue().(*Identity_Value1_Raw25); ok {
		return x.Raw25
	}
	return nil
}

func (x *Identity_Value1) GetRaw26() *Identity_Raw26 {
	if x, ok := x.GetValue().(*Identity_Value1_Raw26); ok {
		return x.Raw26
	}
	return nil
}

func (x *Identity_Value1) GetRaw27() *Identity_Raw27 {
	if x, ok := x.GetValue().(*Identity_Value1_Raw27); ok {
		return x.Raw27
	}
	return nil
}

func (x *Identity_Value1) GetRaw28() *Identity_Raw28 {
	if x, ok := x.GetValue().(*Identity_Value1_Raw28); ok {
		return x.Raw28
	}
	return nil
}

func (x *Identity_Value1) GetRaw29() *Identity_Raw29 {
	if x, ok := x.GetValue().(*Identity_Value1_Raw29); ok {
		return x.Raw29
	}
	return nil
}

func (x *Identity_Value1) GetRaw30() *Identity_Raw30 {
	if x, ok := x.GetValue().(*Identity_Value1_Raw30); ok {
		return x.Raw30
	}
	return nil
}

func (x *Identity_Value1) GetRaw31() *Identity_Raw31 {
	if x, ok := x.GetValue().(*Identity_Value1_Raw31); ok {
		return x.Raw31
	}
	return nil
}

func (x *Identity_Value1) GetRaw32() *Identity_Raw32 {
	if x, ok := x.GetValue().(*Identity_Value1_Raw32); ok {
		return x.Raw32
	}
	return nil
}

func (x *Identity_Value1) GetBlakeTwo256() *Identity_BlakeTwo256 {
	if x, ok := x.GetValue().(*Identity_Value1_BlakeTwo256); ok {
		return x.BlakeTwo256
	}
	return nil
}

func (x *Identity_Value1) GetSha256() *Identity_Sha256 {
	if x, ok := x.GetValue().(*Identity_Value1_Sha256); ok {
		return x.Sha256
	}
	return nil
}

func (x *Identity_Value1) GetKeccak256() *Identity_Keccak256 {
	if x, ok := x.GetValue().(*Identity_Value1_Keccak256); ok {
		return x.Keccak256
	}
	return nil
}

func (x *Identity_Value1) GetShaThree256() *Identity_ShaThree256 {
	if x, ok := x.GetValue().(*Identity_Value1_ShaThree256); ok {
		return x.ShaThree256
	}
	return nil
}

type isIdentity_Value1_Value interface {
	isIdentity_Value1_Value()
}

type Identity_Value1_None struct {
	None *Identity_None `protobuf:"bytes,1,opt,name=none,proto3,oneof"`
}

type Identity_Value1_Raw0 struct {
	Raw0 *Identity_Raw0 `protobuf:"bytes,2,opt,name=raw0,proto3,oneof"`
}

type Identity_Value1_Raw1 struct {
	Raw1 *Identity_Raw1 `protobuf:"bytes,3,opt,name=raw1,proto3,oneof"`
}

type Identity_Value1_Raw2 struct {
	Raw2 *Identity_Raw2 `protobuf:"bytes,4,opt,name=raw2,proto3,oneof"`
}

type Identity_Value1_Raw3 struct {
	Raw3 *Identity_Raw3 `protobuf:"bytes,5,opt,name=raw3,proto3,oneof"`
}

type Identity_Value1_Raw4 struct {
	Raw4 *Identity_Raw4 `protobuf:"bytes,6,opt,name=raw4,proto3,oneof"`
}

type Identity_Value1_Raw5 struct {
	Raw5 *Identity_Raw5 `protobuf:"bytes,7,opt,name=raw5,proto3,oneof"`
}

type Identity_Value1_Raw6 struct {
	Raw6 *Identity_Raw6 `protobuf:"bytes,8,opt,name=raw6,proto3,oneof"`
}

type Identity_Value1_Raw7 struct {
	Raw7 *Identity_Raw7 `protobuf:"bytes,9,opt,name=raw7,proto3,oneof"`
}

type Identity_Value1_Raw8 struct {
	Raw8 *Identity_Raw8 `protobuf:"bytes,10,opt,name=raw8,proto3,oneof"`
}

type Identity_Value1_Raw9 struct {
	Raw9 *Identity_Raw9 `protobuf:"bytes,11,opt,name=raw9,proto3,oneof"`
}

type Identity_Value1_Raw10 struct {
	Raw10 *Identity_Raw10 `protobuf:"bytes,12,opt,name=raw10,proto3,oneof"`
}

type Identity_Value1_Raw11 struct {
	Raw11 *Identity_Raw11 `protobuf:"bytes,13,opt,name=raw11,proto3,oneof"`
}

type Identity_Value1_Raw12 struct {
	Raw12 *Identity_Raw12 `protobuf:"bytes,14,opt,name=raw12,proto3,oneof"`
}

type Identity_Value1_Raw13 struct {
	Raw13 *Identity_Raw13 `protobuf:"bytes,15,opt,name=raw13,proto3,oneof"`
}

type Identity_Value1_Raw14 struct {
	Raw14 *Identity_Raw14 `protobuf:"bytes,16,opt,name=raw14,proto3,oneof"`
}

type Identity_Value1_Raw15 struct {
	Raw15 *Identity_Raw15 `protobuf:"bytes,17,opt,name=raw15,proto3,oneof"`
}

type Identity_Value1_Raw16 struct {
	Raw16 *Identity_Raw16 `protobuf:"bytes,18,opt,name=raw16,proto3,oneof"`
}

type Identity_Value1_Raw17 struct {
	Raw17 *Identity_Raw17 `protobuf:"bytes,19,opt,name=raw17,proto3,oneof"`
}

type Identity_Value1_Raw18 struct {
	Raw18 *Identity_Raw18 `protobuf:"bytes,20,opt,name=raw18,proto3,oneof"`
}

type Identity_Value1_Raw19 struct {
	Raw19 *Identity_Raw19 `protobuf:"bytes,21,opt,name=raw19,proto3,oneof"`
}

type Identity_Value1_Raw20 struct {
	Raw20 *Identity_Raw20 `protobuf:"bytes,22,opt,name=raw20,proto3,oneof"`
}

type Identity_Value1_Raw21 struct {
	Raw21 *Identity_Raw21 `protobuf:"bytes,23,opt,name=raw21,proto3,oneof"`
}

type Identity_Value1_Raw22 struct {
	Raw22 *Identity_Raw22 `protobuf:"bytes,24,opt,name=raw22,proto3,oneof"`
}

type Identity_Value1_Raw23 struct {
	Raw23 *Identity_Raw23 `protobuf:"bytes,25,opt,name=raw23,proto3,oneof"`
}

type Identity_Value1_Raw24 struct {
	Raw24 *Identity_Raw24 `protobuf:"bytes,26,opt,name=raw24,proto3,oneof"`
}

type Identity_Value1_Raw25 struct {
	Raw25 *Identity_Raw25 `protobuf:"bytes,27,opt,name=raw25,proto3,oneof"`
}

type Identity_Value1_Raw26 struct {
	Raw26 *Identity_Raw26 `protobuf:"bytes,28,opt,name=raw26,proto3,oneof"`
}

type Identity_Value1_Raw27 struct {
	Raw27 *Identity_Raw27 `protobuf:"bytes,29,opt,name=raw27,proto3,oneof"`
}

type Identity_Value1_Raw28 struct {
	Raw28 *Identity_Raw28 `protobuf:"bytes,30,opt,name=raw28,proto3,oneof"`
}

type Identity_Value1_Raw29 struct {
	Raw29 *Identity_Raw29 `protobuf:"bytes,31,opt,name=raw29,proto3,oneof"`
}

type Identity_Value1_Raw30 struct {
	Raw30 *Identity_Raw30 `protobuf:"bytes,32,opt,name=raw30,proto3,oneof"`
}

type Identity_Value1_Raw31 struct {
	Raw31 *Identity_Raw31 `protobuf:"bytes,33,opt,name=raw31,proto3,oneof"`
}

type Identity_Value1_Raw32 struct {
	Raw32 *Identity_Raw32 `protobuf:"bytes,34,opt,name=raw32,proto3,oneof"`
}

type Identity_Value1_BlakeTwo256 struct {
	BlakeTwo256 *Identity_BlakeTwo256 `protobuf:"bytes,35,opt,name=blake_two256,json=blakeTwo256,proto3,oneof"`
}

type Identity_Value1_Sha256 struct {
	Sha256 *Identity_Sha256 `protobuf:"bytes,36,opt,name=sha256,proto3,oneof"`
}

type Identity_Value1_Keccak256 struct {
	Keccak256 *Identity_Keccak256 `protobuf:"bytes,37,opt,name=keccak256,proto3,oneof"`
}

type Identity_Value1_ShaThree256 struct {
	ShaThree256 *Identity_ShaThree256 `protobuf:"bytes,38,opt,name=sha_three256,json=shaThree256,proto3,oneof"`
}

func (*Identity_Value1_None) isIdentity_Value1_Value() {}

func (*Identity_Value1_Raw0) isIdentity_Value1_Value() {}

func (*Identity_Value1_Raw1) isIdentity_Value1_Value() {}

func (*Identity_Value1_Raw2) isIdentity_Value1_Value() {}

func (*Identity_Value1_Raw3) isIdentity_Value1_Value() {}

func (*Identity_Value1_Raw4) isIdentity_Value1_Value() {}

func (*Identity_Value1_Raw5) isIdentity_Value1_Value() {}

func (*Identity_Value1_Raw6) isIdentity_Value1_Value() {}

func (*Identity_Value1_Raw7) isIdentity_Value1_Value() {}

func (*Identity_Value1_Raw8) isIdentity_Value1_Value() {}

func (*Identity_Value1_Raw9) isIdentity_Value1_Value() {}

func (*Identity_Value1_Raw10) isIdentity_Value1_Value() {}

func (*Identity_Value1_Raw11) isIdentity_Value1_Value() {}

func (*Identity_Value1_Raw12) isIdentity_Value1_Value() {}

func (*Identity_Value1_Raw13) isIdentity_Value1_Value() {}

func (*Identity_Value1_Raw14) isIdentity_Value1_Value() {}

func (*Identity_Value1_Raw15) isIdentity_Value1_Value() {}

func (*Identity_Value1_Raw16) isIdentity_Value1_Value() {}

func (*Identity_Value1_Raw17) isIdentity_Value1_Value() {}

func (*Identity_Value1_Raw18) isIdentity_Value1_Value() {}

func (*Identity_Value1_Raw19) isIdentity_Value1_Value() {}

func (*Identity_Value1_Raw20) isIdentity_Value1_Value() {}

func (*Identity_Value1_Raw21) isIdentity_Value1_Value() {}

func (*Identity_Value1_Raw22) isIdentity_Value1_Value() {}

func (*Identity_Value1_Raw23) isIdentity_Value1_Value() {}

func (*Identity_Value1_Raw24) isIdentity_Value1_Value() {}

func (*Identity_Value1_Raw25) isIdentity_Value1_Value() {}

func (*Identity_Value1_Raw26) isIdentity_Value1_Value() {}

func (*Identity_Value1_Raw27) isIdentity_Value1_Value() {}

func (*Identity_Value1_Raw28) isIdentity_Value1_Value() {}

func (*Identity_Value1_Raw29) isIdentity_Value1_Value() {}

func (*Identity_Value1_Raw30) isIdentity_Value1_Value() {}

func (*Identity_Value1_Raw31) isIdentity_Value1_Value() {}

func (*Identity_Value1_Raw32) isIdentity_Value1_Value() {}

func (*Identity_Value1_BlakeTwo256) isIdentity_Value1_Value() {}

func (*Identity_Value1_Sha256) isIdentity_Value1_Value() {}

func (*Identity_Value1_Keccak256) isIdentity_Value1_Value() {}

func (*Identity_Value1_ShaThree256) isIdentity_Value1_Value() {}

type SpCoreSr25519Public struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *SpCoreSr25519Public) Reset() {
	*x = SpCoreSr25519Public{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[348]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpCoreSr25519Public) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpCoreSr25519Public) ProtoMessage() {}

func (x *SpCoreSr25519Public) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[348]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpCoreSr25519Public.ProtoReflect.Descriptor instead.
func (*SpCoreSr25519Public) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{348}
}

func (x *SpCoreSr25519Public) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Babe_ReportEquivocationUnsignedCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EquivocationProof *SpConsensusSlotsEquivocationProof `protobuf:"bytes,1,opt,name=equivocation_proof,json=equivocationProof,proto3" json:"equivocation_proof,omitempty"`
	KeyOwnerProof     *SpSessionMembershipProof          `protobuf:"bytes,2,opt,name=key_owner_proof,json=keyOwnerProof,proto3" json:"key_owner_proof,omitempty"`
}

func (x *Babe_ReportEquivocationUnsignedCall) Reset() {
	*x = Babe_ReportEquivocationUnsignedCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[349]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Babe_ReportEquivocationUnsignedCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Babe_ReportEquivocationUnsignedCall) ProtoMessage() {}

func (x *Babe_ReportEquivocationUnsignedCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[349]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Babe_ReportEquivocationUnsignedCall.ProtoReflect.Descriptor instead.
func (*Babe_ReportEquivocationUnsignedCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{349}
}

func (x *Babe_ReportEquivocationUnsignedCall) GetEquivocationProof() *SpConsensusSlotsEquivocationProof {
	if x != nil {
		return x.EquivocationProof
	}
	return nil
}

func (x *Babe_ReportEquivocationUnsignedCall) GetKeyOwnerProof() *SpSessionMembershipProof {
	if x != nil {
		return x.KeyOwnerProof
	}
	return nil
}

type BagsList_TupleNull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *TupleNull `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *BagsList_TupleNull) Reset() {
	*x = BagsList_TupleNull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[350]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BagsList_TupleNull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BagsList_TupleNull) ProtoMessage() {}

func (x *BagsList_TupleNull) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[350]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BagsList_TupleNull.ProtoReflect.Descriptor instead.
func (*BagsList_TupleNull) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{350}
}

func (x *BagsList_TupleNull) GetValue() *TupleNull {
	if x != nil {
		return x.Value
	}
	return nil
}

type Referenda_Origins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 *Value0 `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Referenda_Origins) Reset() {
	*x = Referenda_Origins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[351]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Referenda_Origins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Referenda_Origins) ProtoMessage() {}

func (x *Referenda_Origins) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[351]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Referenda_Origins.ProtoReflect.Descriptor instead.
func (*Referenda_Origins) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{351}
}

func (x *Referenda_Origins) GetValue0() *Value0 {
	if x != nil {
		return x.Value0
	}
	return nil
}

type ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes4Listuint32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 uint32                                                               `protobuf:"varint,1,opt,name=value0,proto3" json:"value0,omitempty"`
	Value1 []*ElectionProviderMultiPhase_TupleUint32SpArithmeticPerThingsPerU16 `protobuf:"bytes,2,rep,name=value1,proto3" json:"value1,omitempty"`
	Value2 uint32                                                               `protobuf:"varint,3,opt,name=value2,proto3" json:"value2,omitempty"`
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes4Listuint32) Reset() {
	*x = ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes4Listuint32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[352]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes4Listuint32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes4Listuint32) ProtoMessage() {
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes4Listuint32) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[352]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes4Listuint32.ProtoReflect.Descriptor instead.
func (*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes4Listuint32) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{352}
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes4Listuint32) GetValue0() uint32 {
	if x != nil {
		return x.Value0
	}
	return 0
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes4Listuint32) GetValue1() []*ElectionProviderMultiPhase_TupleUint32SpArithmeticPerThingsPerU16 {
	if x != nil {
		return x.Value1
	}
	return nil
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes4Listuint32) GetValue2() uint32 {
	if x != nil {
		return x.Value2
	}
	return 0
}

type Vesting_Target struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*Vesting_Target_Id
	//	*Vesting_Target_Index
	//	*Vesting_Target_Raw
	//	*Vesting_Target_Address32
	//	*Vesting_Target_Address20
	Value isVesting_Target_Value `protobuf_oneof:"value"`
}

func (x *Vesting_Target) Reset() {
	*x = Vesting_Target{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[353]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vesting_Target) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vesting_Target) ProtoMessage() {}

func (x *Vesting_Target) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[353]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vesting_Target.ProtoReflect.Descriptor instead.
func (*Vesting_Target) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{353}
}

func (m *Vesting_Target) GetValue() isVesting_Target_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Vesting_Target) GetId() *Vesting_Id {
	if x, ok := x.GetValue().(*Vesting_Target_Id); ok {
		return x.Id
	}
	return nil
}

func (x *Vesting_Target) GetIndex() *Vesting_Index {
	if x, ok := x.GetValue().(*Vesting_Target_Index); ok {
		return x.Index
	}
	return nil
}

func (x *Vesting_Target) GetRaw() *Vesting_Raw {
	if x, ok := x.GetValue().(*Vesting_Target_Raw); ok {
		return x.Raw
	}
	return nil
}

func (x *Vesting_Target) GetAddress32() *Vesting_Address32 {
	if x, ok := x.GetValue().(*Vesting_Target_Address32); ok {
		return x.Address32
	}
	return nil
}

func (x *Vesting_Target) GetAddress20() *Vesting_Address20 {
	if x, ok := x.GetValue().(*Vesting_Target_Address20); ok {
		return x.Address20
	}
	return nil
}

type isVesting_Target_Value interface {
	isVesting_Target_Value()
}

type Vesting_Target_Id struct {
	Id *Vesting_Id `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type Vesting_Target_Index struct {
	Index *Vesting_Index `protobuf:"bytes,2,opt,name=index,proto3,oneof"`
}

type Vesting_Target_Raw struct {
	Raw *Vesting_Raw `protobuf:"bytes,3,opt,name=raw,proto3,oneof"`
}

type Vesting_Target_Address32 struct {
	Address32 *Vesting_Address32 `protobuf:"bytes,4,opt,name=address32,proto3,oneof"`
}

type Vesting_Target_Address20 struct {
	Address20 *Vesting_Address20 `protobuf:"bytes,5,opt,name=address20,proto3,oneof"`
}

func (*Vesting_Target_Id) isVesting_Target_Value() {}

func (*Vesting_Target_Index) isVesting_Target_Value() {}

func (*Vesting_Target_Raw) isVesting_Target_Value() {}

func (*Vesting_Target_Address32) isVesting_Target_Value() {}

func (*Vesting_Target_Address20) isVesting_Target_Value() {}

type ConvictionVoting_Target struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*ConvictionVoting_Target_Id
	//	*ConvictionVoting_Target_Index
	//	*ConvictionVoting_Target_Raw
	//	*ConvictionVoting_Target_Address32
	//	*ConvictionVoting_Target_Address20
	Value isConvictionVoting_Target_Value `protobuf_oneof:"value"`
}

func (x *ConvictionVoting_Target) Reset() {
	*x = ConvictionVoting_Target{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[354]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConvictionVoting_Target) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvictionVoting_Target) ProtoMessage() {}

func (x *ConvictionVoting_Target) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[354]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvictionVoting_Target.ProtoReflect.Descriptor instead.
func (*ConvictionVoting_Target) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{354}
}

func (m *ConvictionVoting_Target) GetValue() isConvictionVoting_Target_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *ConvictionVoting_Target) GetId() *ConvictionVoting_Id {
	if x, ok := x.GetValue().(*ConvictionVoting_Target_Id); ok {
		return x.Id
	}
	return nil
}

func (x *ConvictionVoting_Target) GetIndex() *ConvictionVoting_Index {
	if x, ok := x.GetValue().(*ConvictionVoting_Target_Index); ok {
		return x.Index
	}
	return nil
}

func (x *ConvictionVoting_Target) GetRaw() *ConvictionVoting_Raw {
	if x, ok := x.GetValue().(*ConvictionVoting_Target_Raw); ok {
		return x.Raw
	}
	return nil
}

func (x *ConvictionVoting_Target) GetAddress32() *ConvictionVoting_Address32 {
	if x, ok := x.GetValue().(*ConvictionVoting_Target_Address32); ok {
		return x.Address32
	}
	return nil
}

func (x *ConvictionVoting_Target) GetAddress20() *ConvictionVoting_Address20 {
	if x, ok := x.GetValue().(*ConvictionVoting_Target_Address20); ok {
		return x.Address20
	}
	return nil
}

type isConvictionVoting_Target_Value interface {
	isConvictionVoting_Target_Value()
}

type ConvictionVoting_Target_Id struct {
	Id *ConvictionVoting_Id `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type ConvictionVoting_Target_Index struct {
	Index *ConvictionVoting_Index `protobuf:"bytes,2,opt,name=index,proto3,oneof"`
}

type ConvictionVoting_Target_Raw struct {
	Raw *ConvictionVoting_Raw `protobuf:"bytes,3,opt,name=raw,proto3,oneof"`
}

type ConvictionVoting_Target_Address32 struct {
	Address32 *ConvictionVoting_Address32 `protobuf:"bytes,4,opt,name=address32,proto3,oneof"`
}

type ConvictionVoting_Target_Address20 struct {
	Address20 *ConvictionVoting_Address20 `protobuf:"bytes,5,opt,name=address20,proto3,oneof"`
}

func (*ConvictionVoting_Target_Id) isConvictionVoting_Target_Value() {}

func (*ConvictionVoting_Target_Index) isConvictionVoting_Target_Value() {}

func (*ConvictionVoting_Target_Raw) isConvictionVoting_Target_Value() {}

func (*ConvictionVoting_Target_Address32) isConvictionVoting_Target_Value() {}

func (*ConvictionVoting_Target_Address20) isConvictionVoting_Target_Value() {}

type FellowshipCollective_Address20 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *FellowshipCollective_Address20) Reset() {
	*x = FellowshipCollective_Address20{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[355]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FellowshipCollective_Address20) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FellowshipCollective_Address20) ProtoMessage() {}

func (x *FellowshipCollective_Address20) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[355]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FellowshipCollective_Address20.ProtoReflect.Descriptor instead.
func (*FellowshipCollective_Address20) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{355}
}

func (x *FellowshipCollective_Address20) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Identity_Id struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 *SpCoreCryptoAccountId32 `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Identity_Id) Reset() {
	*x = Identity_Id{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[356]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_Id) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_Id) ProtoMessage() {}

func (x *Identity_Id) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[356]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_Id.ProtoReflect.Descriptor instead.
func (*Identity_Id) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{356}
}

func (x *Identity_Id) GetValue0() *SpCoreCryptoAccountId32 {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Gear_CreateProgramCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CodeId      *GprimitivesCodeId `protobuf:"bytes,1,opt,name=code_id,json=codeId,proto3" json:"code_id,omitempty"`
	Salt        []byte             `protobuf:"bytes,2,opt,name=salt,proto3" json:"salt,omitempty"`
	InitPayload []byte             `protobuf:"bytes,3,opt,name=init_payload,json=initPayload,proto3" json:"init_payload,omitempty"`
	GasLimit    uint64             `protobuf:"varint,4,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	Value       string             `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	KeepAlive   bool               `protobuf:"varint,6,opt,name=keep_alive,json=keepAlive,proto3" json:"keep_alive,omitempty"`
}

func (x *Gear_CreateProgramCall) Reset() {
	*x = Gear_CreateProgramCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[357]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Gear_CreateProgramCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gear_CreateProgramCall) ProtoMessage() {}

func (x *Gear_CreateProgramCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[357]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gear_CreateProgramCall.ProtoReflect.Descriptor instead.
func (*Gear_CreateProgramCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{357}
}

func (x *Gear_CreateProgramCall) GetCodeId() *GprimitivesCodeId {
	if x != nil {
		return x.CodeId
	}
	return nil
}

func (x *Gear_CreateProgramCall) GetSalt() []byte {
	if x != nil {
		return x.Salt
	}
	return nil
}

func (x *Gear_CreateProgramCall) GetInitPayload() []byte {
	if x != nil {
		return x.InitPayload
	}
	return nil
}

func (x *Gear_CreateProgramCall) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *Gear_CreateProgramCall) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Gear_CreateProgramCall) GetKeepAlive() bool {
	if x != nil {
		return x.KeepAlive
	}
	return false
}

type NominationPools_Remove struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NominationPools_Remove) Reset() {
	*x = NominationPools_Remove{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[358]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NominationPools_Remove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NominationPools_Remove) ProtoMessage() {}

func (x *NominationPools_Remove) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[358]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NominationPools_Remove.ProtoReflect.Descriptor instead.
func (*NominationPools_Remove) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{358}
}

type AllowedSlots struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*AllowedSlots_PrimarySlots
	//	*AllowedSlots_PrimaryAndSecondaryPlainSlots
	//	*AllowedSlots_PrimaryAndSecondaryVrfSlots
	Value isAllowedSlots_Value `protobuf_oneof:"value"`
}

func (x *AllowedSlots) Reset() {
	*x = AllowedSlots{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[359]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllowedSlots) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllowedSlots) ProtoMessage() {}

func (x *AllowedSlots) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[359]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllowedSlots.ProtoReflect.Descriptor instead.
func (*AllowedSlots) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{359}
}

func (m *AllowedSlots) GetValue() isAllowedSlots_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *AllowedSlots) GetPrimarySlots() *PrimarySlots {
	if x, ok := x.GetValue().(*AllowedSlots_PrimarySlots); ok {
		return x.PrimarySlots
	}
	return nil
}

func (x *AllowedSlots) GetPrimaryAndSecondaryPlainSlots() *PrimaryAndSecondaryPlainSlots {
	if x, ok := x.GetValue().(*AllowedSlots_PrimaryAndSecondaryPlainSlots); ok {
		return x.PrimaryAndSecondaryPlainSlots
	}
	return nil
}

func (x *AllowedSlots) GetPrimaryAndSecondaryVrfSlots() *PrimaryAndSecondaryVrfSlots {
	if x, ok := x.GetValue().(*AllowedSlots_PrimaryAndSecondaryVrfSlots); ok {
		return x.PrimaryAndSecondaryVrfSlots
	}
	return nil
}

type isAllowedSlots_Value interface {
	isAllowedSlots_Value()
}

type AllowedSlots_PrimarySlots struct {
	PrimarySlots *PrimarySlots `protobuf:"bytes,1,opt,name=primary_slots,json=primarySlots,proto3,oneof"`
}

type AllowedSlots_PrimaryAndSecondaryPlainSlots struct {
	PrimaryAndSecondaryPlainSlots *PrimaryAndSecondaryPlainSlots `protobuf:"bytes,2,opt,name=primary_and_secondary_plain_slots,json=primaryAndSecondaryPlainSlots,proto3,oneof"`
}

type AllowedSlots_PrimaryAndSecondaryVrfSlots struct {
	PrimaryAndSecondaryVrfSlots *PrimaryAndSecondaryVrfSlots `protobuf:"bytes,3,opt,name=primary_and_secondary_vrf_slots,json=primaryAndSecondaryVrfSlots,proto3,oneof"`
}

func (*AllowedSlots_PrimarySlots) isAllowedSlots_Value() {}

func (*AllowedSlots_PrimaryAndSecondaryPlainSlots) isAllowedSlots_Value() {}

func (*AllowedSlots_PrimaryAndSecondaryVrfSlots) isAllowedSlots_Value() {}

type ConvictionVoting_PalletConvictionVotingVoteVote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 uint32 `protobuf:"varint,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *ConvictionVoting_PalletConvictionVotingVoteVote) Reset() {
	*x = ConvictionVoting_PalletConvictionVotingVoteVote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[360]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConvictionVoting_PalletConvictionVotingVoteVote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvictionVoting_PalletConvictionVotingVoteVote) ProtoMessage() {}

func (x *ConvictionVoting_PalletConvictionVotingVoteVote) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[360]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvictionVoting_PalletConvictionVotingVoteVote.ProtoReflect.Descriptor instead.
func (*ConvictionVoting_PalletConvictionVotingVoteVote) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{360}
}

func (x *ConvictionVoting_PalletConvictionVotingVoteVote) GetValue0() uint32 {
	if x != nil {
		return x.Value0
	}
	return 0
}

type ConvictionVotingPallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Call:
	//
	//	*ConvictionVotingPallet_VoteCall
	//	*ConvictionVotingPallet_DelegateCall
	//	*ConvictionVotingPallet_UndelegateCall
	//	*ConvictionVotingPallet_UnlockCall
	//	*ConvictionVotingPallet_RemoveVoteCall
	//	*ConvictionVotingPallet_RemoveOtherVoteCall
	Call isConvictionVotingPallet_Call `protobuf_oneof:"call"`
}

func (x *ConvictionVotingPallet) Reset() {
	*x = ConvictionVotingPallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[361]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConvictionVotingPallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvictionVotingPallet) ProtoMessage() {}

func (x *ConvictionVotingPallet) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[361]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvictionVotingPallet.ProtoReflect.Descriptor instead.
func (*ConvictionVotingPallet) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{361}
}

func (m *ConvictionVotingPallet) GetCall() isConvictionVotingPallet_Call {
	if m != nil {
		return m.Call
	}
	return nil
}

func (x *ConvictionVotingPallet) GetVoteCall() *ConvictionVoting_VoteCall {
	if x, ok := x.GetCall().(*ConvictionVotingPallet_VoteCall); ok {
		return x.VoteCall
	}
	return nil
}

func (x *ConvictionVotingPallet) GetDelegateCall() *ConvictionVoting_DelegateCall {
	if x, ok := x.GetCall().(*ConvictionVotingPallet_DelegateCall); ok {
		return x.DelegateCall
	}
	return nil
}

func (x *ConvictionVotingPallet) GetUndelegateCall() *ConvictionVoting_UndelegateCall {
	if x, ok := x.GetCall().(*ConvictionVotingPallet_UndelegateCall); ok {
		return x.UndelegateCall
	}
	return nil
}

func (x *ConvictionVotingPallet) GetUnlockCall() *ConvictionVoting_UnlockCall {
	if x, ok := x.GetCall().(*ConvictionVotingPallet_UnlockCall); ok {
		return x.UnlockCall
	}
	return nil
}

func (x *ConvictionVotingPallet) GetRemoveVoteCall() *ConvictionVoting_RemoveVoteCall {
	if x, ok := x.GetCall().(*ConvictionVotingPallet_RemoveVoteCall); ok {
		return x.RemoveVoteCall
	}
	return nil
}

func (x *ConvictionVotingPallet) GetRemoveOtherVoteCall() *ConvictionVoting_RemoveOtherVoteCall {
	if x, ok := x.GetCall().(*ConvictionVotingPallet_RemoveOtherVoteCall); ok {
		return x.RemoveOtherVoteCall
	}
	return nil
}

type isConvictionVotingPallet_Call interface {
	isConvictionVotingPallet_Call()
}

type ConvictionVotingPallet_VoteCall struct {
	VoteCall *ConvictionVoting_VoteCall `protobuf:"bytes,1,opt,name=vote_call,json=voteCall,proto3,oneof"`
}

type ConvictionVotingPallet_DelegateCall struct {
	DelegateCall *ConvictionVoting_DelegateCall `protobuf:"bytes,2,opt,name=delegate_call,json=delegateCall,proto3,oneof"`
}

type ConvictionVotingPallet_UndelegateCall struct {
	UndelegateCall *ConvictionVoting_UndelegateCall `protobuf:"bytes,3,opt,name=undelegate_call,json=undelegateCall,proto3,oneof"`
}

type ConvictionVotingPallet_UnlockCall struct {
	UnlockCall *ConvictionVoting_UnlockCall `protobuf:"bytes,4,opt,name=unlock_call,json=unlockCall,proto3,oneof"`
}

type ConvictionVotingPallet_RemoveVoteCall struct {
	RemoveVoteCall *ConvictionVoting_RemoveVoteCall `protobuf:"bytes,5,opt,name=remove_vote_call,json=removeVoteCall,proto3,oneof"`
}

type ConvictionVotingPallet_RemoveOtherVoteCall struct {
	RemoveOtherVoteCall *ConvictionVoting_RemoveOtherVoteCall `protobuf:"bytes,6,opt,name=remove_other_vote_call,json=removeOtherVoteCall,proto3,oneof"`
}

func (*ConvictionVotingPallet_VoteCall) isConvictionVotingPallet_Call() {}

func (*ConvictionVotingPallet_DelegateCall) isConvictionVotingPallet_Call() {}

func (*ConvictionVotingPallet_UndelegateCall) isConvictionVotingPallet_Call() {}

func (*ConvictionVotingPallet_UnlockCall) isConvictionVotingPallet_Call() {}

func (*ConvictionVotingPallet_RemoveVoteCall) isConvictionVotingPallet_Call() {}

func (*ConvictionVotingPallet_RemoveOtherVoteCall) isConvictionVotingPallet_Call() {}

type Identity_Index struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 *Identity_TupleNull `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Identity_Index) Reset() {
	*x = Identity_Index{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[362]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_Index) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_Index) ProtoMessage() {}

func (x *Identity_Index) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[362]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_Index.ProtoReflect.Descriptor instead.
func (*Identity_Index) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{362}
}

func (x *Identity_Index) GetValue0() *Identity_TupleNull {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Identity_Account struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*Identity_Account_Id
	//	*Identity_Account_Index
	//	*Identity_Account_Raw
	//	*Identity_Account_Address32
	//	*Identity_Account_Address20
	Value isIdentity_Account_Value `protobuf_oneof:"value"`
}

func (x *Identity_Account) Reset() {
	*x = Identity_Account{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[363]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_Account) ProtoMessage() {}

func (x *Identity_Account) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[363]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_Account.ProtoReflect.Descriptor instead.
func (*Identity_Account) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{363}
}

func (m *Identity_Account) GetValue() isIdentity_Account_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Identity_Account) GetId() *Identity_Id {
	if x, ok := x.GetValue().(*Identity_Account_Id); ok {
		return x.Id
	}
	return nil
}

func (x *Identity_Account) GetIndex() *Identity_Index {
	if x, ok := x.GetValue().(*Identity_Account_Index); ok {
		return x.Index
	}
	return nil
}

func (x *Identity_Account) GetRaw() *Identity_Raw {
	if x, ok := x.GetValue().(*Identity_Account_Raw); ok {
		return x.Raw
	}
	return nil
}

func (x *Identity_Account) GetAddress32() *Identity_Address32 {
	if x, ok := x.GetValue().(*Identity_Account_Address32); ok {
		return x.Address32
	}
	return nil
}

func (x *Identity_Account) GetAddress20() *Identity_Address20 {
	if x, ok := x.GetValue().(*Identity_Account_Address20); ok {
		return x.Address20
	}
	return nil
}

type isIdentity_Account_Value interface {
	isIdentity_Account_Value()
}

type Identity_Account_Id struct {
	Id *Identity_Id `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type Identity_Account_Index struct {
	Index *Identity_Index `protobuf:"bytes,2,opt,name=index,proto3,oneof"`
}

type Identity_Account_Raw struct {
	Raw *Identity_Raw `protobuf:"bytes,3,opt,name=raw,proto3,oneof"`
}

type Identity_Account_Address32 struct {
	Address32 *Identity_Address32 `protobuf:"bytes,4,opt,name=address32,proto3,oneof"`
}

type Identity_Account_Address20 struct {
	Address20 *Identity_Address20 `protobuf:"bytes,5,opt,name=address20,proto3,oneof"`
}

func (*Identity_Account_Id) isIdentity_Account_Value() {}

func (*Identity_Account_Index) isIdentity_Account_Value() {}

func (*Identity_Account_Raw) isIdentity_Account_Value() {}

func (*Identity_Account_Address32) isIdentity_Account_Value() {}

func (*Identity_Account_Address20) isIdentity_Account_Value() {}

type Staking_Raw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Staking_Raw) Reset() {
	*x = Staking_Raw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[364]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staking_Raw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staking_Raw) ProtoMessage() {}

func (x *Staking_Raw) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[364]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staking_Raw.ProtoReflect.Descriptor instead.
func (*Staking_Raw) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{364}
}

func (x *Staking_Raw) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Proxy_KillPureCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spawner   *Proxy_Spawner   `protobuf:"bytes,1,opt,name=spawner,proto3" json:"spawner,omitempty"`
	ProxyType *Proxy_ProxyType `protobuf:"bytes,2,opt,name=proxy_type,json=proxyType,proto3" json:"proxy_type,omitempty"`
	Index     uint32           `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	Height    uint32           `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
	ExtIndex  uint32           `protobuf:"varint,5,opt,name=ext_index,json=extIndex,proto3" json:"ext_index,omitempty"`
}

func (x *Proxy_KillPureCall) Reset() {
	*x = Proxy_KillPureCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[365]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proxy_KillPureCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proxy_KillPureCall) ProtoMessage() {}

func (x *Proxy_KillPureCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[365]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proxy_KillPureCall.ProtoReflect.Descriptor instead.
func (*Proxy_KillPureCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{365}
}

func (x *Proxy_KillPureCall) GetSpawner() *Proxy_Spawner {
	if x != nil {
		return x.Spawner
	}
	return nil
}

func (x *Proxy_KillPureCall) GetProxyType() *Proxy_ProxyType {
	if x != nil {
		return x.ProxyType
	}
	return nil
}

func (x *Proxy_KillPureCall) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Proxy_KillPureCall) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Proxy_KillPureCall) GetExtIndex() uint32 {
	if x != nil {
		return x.ExtIndex
	}
	return 0
}

type Multisig_CancelAsMultiCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Threshold        uint32                            `protobuf:"varint,1,opt,name=threshold,proto3" json:"threshold,omitempty"`
	OtherSignatories []*SpCoreCryptoAccountId32        `protobuf:"bytes,2,rep,name=other_signatories,json=otherSignatories,proto3" json:"other_signatories,omitempty"`
	Timepoint        *Multisig_PalletMultisigTimepoint `protobuf:"bytes,3,opt,name=timepoint,proto3" json:"timepoint,omitempty"`
	CallHash         []byte                            `protobuf:"bytes,4,opt,name=call_hash,json=callHash,proto3" json:"call_hash,omitempty"`
}

func (x *Multisig_CancelAsMultiCall) Reset() {
	*x = Multisig_CancelAsMultiCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[366]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Multisig_CancelAsMultiCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Multisig_CancelAsMultiCall) ProtoMessage() {}

func (x *Multisig_CancelAsMultiCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[366]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Multisig_CancelAsMultiCall.ProtoReflect.Descriptor instead.
func (*Multisig_CancelAsMultiCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{366}
}

func (x *Multisig_CancelAsMultiCall) GetThreshold() uint32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *Multisig_CancelAsMultiCall) GetOtherSignatories() []*SpCoreCryptoAccountId32 {
	if x != nil {
		return x.OtherSignatories
	}
	return nil
}

func (x *Multisig_CancelAsMultiCall) GetTimepoint() *Multisig_PalletMultisigTimepoint {
	if x != nil {
		return x.Timepoint
	}
	return nil
}

func (x *Multisig_CancelAsMultiCall) GetCallHash() []byte {
	if x != nil {
		return x.CallHash
	}
	return nil
}

type Bounties_Address20 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Bounties_Address20) Reset() {
	*x = Bounties_Address20{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[367]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bounties_Address20) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bounties_Address20) ProtoMessage() {}

func (x *Bounties_Address20) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[367]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bounties_Address20.ProtoReflect.Descriptor instead.
func (*Bounties_Address20) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{367}
}

func (x *Bounties_Address20) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type GearPallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Call:
	//
	//	*GearPallet_UploadCodeCall
	//	*GearPallet_UploadProgramCall
	//	*GearPallet_CreateProgramCall
	//	*GearPallet_SendMessageCall
	//	*GearPallet_SendReplyCall
	//	*GearPallet_ClaimValueCall
	//	*GearPallet_RunCall
	//	*GearPallet_SetExecuteInherentCall
	Call isGearPallet_Call `protobuf_oneof:"call"`
}

func (x *GearPallet) Reset() {
	*x = GearPallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[368]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GearPallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GearPallet) ProtoMessage() {}

func (x *GearPallet) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[368]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GearPallet.ProtoReflect.Descriptor instead.
func (*GearPallet) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{368}
}

func (m *GearPallet) GetCall() isGearPallet_Call {
	if m != nil {
		return m.Call
	}
	return nil
}

func (x *GearPallet) GetUploadCodeCall() *Gear_UploadCodeCall {
	if x, ok := x.GetCall().(*GearPallet_UploadCodeCall); ok {
		return x.UploadCodeCall
	}
	return nil
}

func (x *GearPallet) GetUploadProgramCall() *Gear_UploadProgramCall {
	if x, ok := x.GetCall().(*GearPallet_UploadProgramCall); ok {
		return x.UploadProgramCall
	}
	return nil
}

func (x *GearPallet) GetCreateProgramCall() *Gear_CreateProgramCall {
	if x, ok := x.GetCall().(*GearPallet_CreateProgramCall); ok {
		return x.CreateProgramCall
	}
	return nil
}

func (x *GearPallet) GetSendMessageCall() *Gear_SendMessageCall {
	if x, ok := x.GetCall().(*GearPallet_SendMessageCall); ok {
		return x.SendMessageCall
	}
	return nil
}

func (x *GearPallet) GetSendReplyCall() *Gear_SendReplyCall {
	if x, ok := x.GetCall().(*GearPallet_SendReplyCall); ok {
		return x.SendReplyCall
	}
	return nil
}

func (x *GearPallet) GetClaimValueCall() *Gear_ClaimValueCall {
	if x, ok := x.GetCall().(*GearPallet_ClaimValueCall); ok {
		return x.ClaimValueCall
	}
	return nil
}

func (x *GearPallet) GetRunCall() *Gear_RunCall {
	if x, ok := x.GetCall().(*GearPallet_RunCall); ok {
		return x.RunCall
	}
	return nil
}

func (x *GearPallet) GetSetExecuteInherentCall() *Gear_SetExecuteInherentCall {
	if x, ok := x.GetCall().(*GearPallet_SetExecuteInherentCall); ok {
		return x.SetExecuteInherentCall
	}
	return nil
}

type isGearPallet_Call interface {
	isGearPallet_Call()
}

type GearPallet_UploadCodeCall struct {
	UploadCodeCall *Gear_UploadCodeCall `protobuf:"bytes,1,opt,name=upload_code_call,json=uploadCodeCall,proto3,oneof"`
}

type GearPallet_UploadProgramCall struct {
	UploadProgramCall *Gear_UploadProgramCall `protobuf:"bytes,2,opt,name=upload_program_call,json=uploadProgramCall,proto3,oneof"`
}

type GearPallet_CreateProgramCall struct {
	CreateProgramCall *Gear_CreateProgramCall `protobuf:"bytes,3,opt,name=create_program_call,json=createProgramCall,proto3,oneof"`
}

type GearPallet_SendMessageCall struct {
	SendMessageCall *Gear_SendMessageCall `protobuf:"bytes,4,opt,name=send_message_call,json=sendMessageCall,proto3,oneof"`
}

type GearPallet_SendReplyCall struct {
	SendReplyCall *Gear_SendReplyCall `protobuf:"bytes,5,opt,name=send_reply_call,json=sendReplyCall,proto3,oneof"`
}

type GearPallet_ClaimValueCall struct {
	ClaimValueCall *Gear_ClaimValueCall `protobuf:"bytes,6,opt,name=claim_value_call,json=claimValueCall,proto3,oneof"`
}

type GearPallet_RunCall struct {
	RunCall *Gear_RunCall `protobuf:"bytes,7,opt,name=run_call,json=runCall,proto3,oneof"`
}

type GearPallet_SetExecuteInherentCall struct {
	SetExecuteInherentCall *Gear_SetExecuteInherentCall `protobuf:"bytes,8,opt,name=set_execute_inherent_call,json=setExecuteInherentCall,proto3,oneof"`
}

func (*GearPallet_UploadCodeCall) isGearPallet_Call() {}

func (*GearPallet_UploadProgramCall) isGearPallet_Call() {}

func (*GearPallet_CreateProgramCall) isGearPallet_Call() {}

func (*GearPallet_SendMessageCall) isGearPallet_Call() {}

func (*GearPallet_SendReplyCall) isGearPallet_Call() {}

func (*GearPallet_ClaimValueCall) isGearPallet_Call() {}

func (*GearPallet_RunCall) isGearPallet_Call() {}

func (*GearPallet_SetExecuteInherentCall) isGearPallet_Call() {}

type Balances_TransferAllCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dest      *Balances_Dest `protobuf:"bytes,1,opt,name=dest,proto3" json:"dest,omitempty"`
	KeepAlive bool           `protobuf:"varint,2,opt,name=keep_alive,json=keepAlive,proto3" json:"keep_alive,omitempty"`
}

func (x *Balances_TransferAllCall) Reset() {
	*x = Balances_TransferAllCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[369]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Balances_TransferAllCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Balances_TransferAllCall) ProtoMessage() {}

func (x *Balances_TransferAllCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[369]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Balances_TransferAllCall.ProtoReflect.Descriptor instead.
func (*Balances_TransferAllCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{369}
}

func (x *Balances_TransferAllCall) GetDest() *Balances_Dest {
	if x != nil {
		return x.Dest
	}
	return nil
}

func (x *Balances_TransferAllCall) GetKeepAlive() bool {
	if x != nil {
		return x.KeepAlive
	}
	return false
}

type NominationPools_FreeBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 string `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *NominationPools_FreeBalance) Reset() {
	*x = NominationPools_FreeBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[370]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NominationPools_FreeBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NominationPools_FreeBalance) ProtoMessage() {}

func (x *NominationPools_FreeBalance) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[370]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NominationPools_FreeBalance.ProtoReflect.Descriptor instead.
func (*NominationPools_FreeBalance) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{370}
}

func (x *NominationPools_FreeBalance) GetValue0() string {
	if x != nil {
		return x.Value0
	}
	return ""
}

type GearBuiltinPallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GearBuiltinPallet) Reset() {
	*x = GearBuiltinPallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[371]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GearBuiltinPallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GearBuiltinPallet) ProtoMessage() {}

func (x *GearBuiltinPallet) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[371]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GearBuiltinPallet.ProtoReflect.Descriptor instead.
func (*GearBuiltinPallet) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{371}
}

type ChildBounties_CloseChildBountyCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentBountyId uint32 `protobuf:"varint,1,opt,name=parent_bounty_id,json=parentBountyId,proto3" json:"parent_bounty_id,omitempty"`
	ChildBountyId  uint32 `protobuf:"varint,2,opt,name=child_bounty_id,json=childBountyId,proto3" json:"child_bounty_id,omitempty"`
}

func (x *ChildBounties_CloseChildBountyCall) Reset() {
	*x = ChildBounties_CloseChildBountyCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[372]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChildBounties_CloseChildBountyCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChildBounties_CloseChildBountyCall) ProtoMessage() {}

func (x *ChildBounties_CloseChildBountyCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[372]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChildBounties_CloseChildBountyCall.ProtoReflect.Descriptor instead.
func (*ChildBounties_CloseChildBountyCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{372}
}

func (x *ChildBounties_CloseChildBountyCall) GetParentBountyId() uint32 {
	if x != nil {
		return x.ParentBountyId
	}
	return 0
}

func (x *ChildBounties_CloseChildBountyCall) GetChildBountyId() uint32 {
	if x != nil {
		return x.ChildBountyId
	}
	return 0
}

type NominationPools_SetClaimPermissionCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Permission *NominationPools_Permission `protobuf:"bytes,1,opt,name=permission,proto3" json:"permission,omitempty"`
}

func (x *NominationPools_SetClaimPermissionCall) Reset() {
	*x = NominationPools_SetClaimPermissionCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[373]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NominationPools_SetClaimPermissionCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NominationPools_SetClaimPermissionCall) ProtoMessage() {}

func (x *NominationPools_SetClaimPermissionCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[373]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NominationPools_SetClaimPermissionCall.ProtoReflect.Descriptor instead.
func (*NominationPools_SetClaimPermissionCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{373}
}

func (x *NominationPools_SetClaimPermissionCall) GetPermission() *NominationPools_Permission {
	if x != nil {
		return x.Permission
	}
	return nil
}

type Balances_Raw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Balances_Raw) Reset() {
	*x = Balances_Raw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[374]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Balances_Raw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Balances_Raw) ProtoMessage() {}

func (x *Balances_Raw) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[374]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Balances_Raw.ProtoReflect.Descriptor instead.
func (*Balances_Raw) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{374}
}

func (x *Balances_Raw) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type FellowshipReferenda_Origins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 *Value0 `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *FellowshipReferenda_Origins) Reset() {
	*x = FellowshipReferenda_Origins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[375]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FellowshipReferenda_Origins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FellowshipReferenda_Origins) ProtoMessage() {}

func (x *FellowshipReferenda_Origins) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[375]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FellowshipReferenda_Origins.ProtoReflect.Descriptor instead.
func (*FellowshipReferenda_Origins) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{375}
}

func (x *FellowshipReferenda_Origins) GetValue0() *Value0 {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Identity_Raw5 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Identity_Raw5) Reset() {
	*x = Identity_Raw5{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[376]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_Raw5) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_Raw5) ProtoMessage() {}

func (x *Identity_Raw5) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[376]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_Raw5.ProtoReflect.Descriptor instead.
func (*Identity_Raw5) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{376}
}

func (x *Identity_Raw5) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes5Listuint32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 uint32                                                               `protobuf:"varint,1,opt,name=value0,proto3" json:"value0,omitempty"`
	Value1 []*ElectionProviderMultiPhase_TupleUint32SpArithmeticPerThingsPerU16 `protobuf:"bytes,2,rep,name=value1,proto3" json:"value1,omitempty"`
	Value2 uint32                                                               `protobuf:"varint,3,opt,name=value2,proto3" json:"value2,omitempty"`
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes5Listuint32) Reset() {
	*x = ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes5Listuint32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[377]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes5Listuint32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes5Listuint32) ProtoMessage() {
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes5Listuint32) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[377]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes5Listuint32.ProtoReflect.Descriptor instead.
func (*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes5Listuint32) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{377}
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes5Listuint32) GetValue0() uint32 {
	if x != nil {
		return x.Value0
	}
	return 0
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes5Listuint32) GetValue1() []*ElectionProviderMultiPhase_TupleUint32SpArithmeticPerThingsPerU16 {
	if x != nil {
		return x.Value1
	}
	return nil
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes5Listuint32) GetValue2() uint32 {
	if x != nil {
		return x.Value2
	}
	return 0
}

type Bounties_Id struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 *SpCoreCryptoAccountId32 `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Bounties_Id) Reset() {
	*x = Bounties_Id{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[378]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bounties_Id) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bounties_Id) ProtoMessage() {}

func (x *Bounties_Id) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[378]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bounties_Id.ProtoReflect.Descriptor instead.
func (*Bounties_Id) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{378}
}

func (x *Bounties_Id) GetValue0() *SpCoreCryptoAccountId32 {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Identity_Address20 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Identity_Address20) Reset() {
	*x = Identity_Address20{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[379]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_Address20) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_Address20) ProtoMessage() {}

func (x *Identity_Address20) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[379]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_Address20.ProtoReflect.Descriptor instead.
func (*Identity_Address20) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{379}
}

func (x *Identity_Address20) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type GprimitivesActorId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *GprimitivesActorId) Reset() {
	*x = GprimitivesActorId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[380]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GprimitivesActorId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GprimitivesActorId) ProtoMessage() {}

func (x *GprimitivesActorId) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[380]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GprimitivesActorId.ProtoReflect.Descriptor instead.
func (*GprimitivesActorId) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{380}
}

func (x *GprimitivesActorId) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Referenda_After struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 uint32 `protobuf:"varint,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Referenda_After) Reset() {
	*x = Referenda_After{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[381]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Referenda_After) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Referenda_After) ProtoMessage() {}

func (x *Referenda_After) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[381]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Referenda_After.ProtoReflect.Descriptor instead.
func (*Referenda_After) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{381}
}

func (x *Referenda_After) GetValue0() uint32 {
	if x != nil {
		return x.Value0
	}
	return 0
}

type Referenda_SubmitCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProposalOrigin  *Referenda_ProposalOrigin  `protobuf:"bytes,1,opt,name=proposal_origin,json=proposalOrigin,proto3" json:"proposal_origin,omitempty"`
	Proposal        *Referenda_Proposal        `protobuf:"bytes,2,opt,name=proposal,proto3" json:"proposal,omitempty"`
	EnactmentMoment *Referenda_EnactmentMoment `protobuf:"bytes,3,opt,name=enactment_moment,json=enactmentMoment,proto3" json:"enactment_moment,omitempty"`
}

func (x *Referenda_SubmitCall) Reset() {
	*x = Referenda_SubmitCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[382]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Referenda_SubmitCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Referenda_SubmitCall) ProtoMessage() {}

func (x *Referenda_SubmitCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[382]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Referenda_SubmitCall.ProtoReflect.Descriptor instead.
func (*Referenda_SubmitCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{382}
}

func (x *Referenda_SubmitCall) GetProposalOrigin() *Referenda_ProposalOrigin {
	if x != nil {
		return x.ProposalOrigin
	}
	return nil
}

func (x *Referenda_SubmitCall) GetProposal() *Referenda_Proposal {
	if x != nil {
		return x.Proposal
	}
	return nil
}

func (x *Referenda_SubmitCall) GetEnactmentMoment() *Referenda_EnactmentMoment {
	if x != nil {
		return x.EnactmentMoment
	}
	return nil
}

type Identity_Email struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*Identity_Email_None
	//	*Identity_Email_Raw0
	//	*Identity_Email_Raw1
	//	*Identity_Email_Raw2
	//	*Identity_Email_Raw3
	//	*Identity_Email_Raw4
	//	*Identity_Email_Raw5
	//	*Identity_Email_Raw6
	//	*Identity_Email_Raw7
	//	*Identity_Email_Raw8
	//	*Identity_Email_Raw9
	//	*Identity_Email_Raw10
	//	*Identity_Email_Raw11
	//	*Identity_Email_Raw12
	//	*Identity_Email_Raw13
	//	*Identity_Email_Raw14
	//	*Identity_Email_Raw15
	//	*Identity_Email_Raw16
	//	*Identity_Email_Raw17
	//	*Identity_Email_Raw18
	//	*Identity_Email_Raw19
	//	*Identity_Email_Raw20
	//	*Identity_Email_Raw21
	//	*Identity_Email_Raw22
	//	*Identity_Email_Raw23
	//	*Identity_Email_Raw24
	//	*Identity_Email_Raw25
	//	*Identity_Email_Raw26
	//	*Identity_Email_Raw27
	//	*Identity_Email_Raw28
	//	*Identity_Email_Raw29
	//	*Identity_Email_Raw30
	//	*Identity_Email_Raw31
	//	*Identity_Email_Raw32
	//	*Identity_Email_BlakeTwo256
	//	*Identity_Email_Sha256
	//	*Identity_Email_Keccak256
	//	*Identity_Email_ShaThree256
	Value isIdentity_Email_Value `protobuf_oneof:"value"`
}

func (x *Identity_Email) Reset() {
	*x = Identity_Email{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[383]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_Email) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_Email) ProtoMessage() {}

func (x *Identity_Email) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[383]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_Email.ProtoReflect.Descriptor instead.
func (*Identity_Email) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{383}
}

func (m *Identity_Email) GetValue() isIdentity_Email_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Identity_Email) GetNone() *Identity_None {
	if x, ok := x.GetValue().(*Identity_Email_None); ok {
		return x.None
	}
	return nil
}

func (x *Identity_Email) GetRaw0() *Identity_Raw0 {
	if x, ok := x.GetValue().(*Identity_Email_Raw0); ok {
		return x.Raw0
	}
	return nil
}

func (x *Identity_Email) GetRaw1() *Identity_Raw1 {
	if x, ok := x.GetValue().(*Identity_Email_Raw1); ok {
		return x.Raw1
	}
	return nil
}

func (x *Identity_Email) GetRaw2() *Identity_Raw2 {
	if x, ok := x.GetValue().(*Identity_Email_Raw2); ok {
		return x.Raw2
	}
	return nil
}

func (x *Identity_Email) GetRaw3() *Identity_Raw3 {
	if x, ok := x.GetValue().(*Identity_Email_Raw3); ok {
		return x.Raw3
	}
	return nil
}

func (x *Identity_Email) GetRaw4() *Identity_Raw4 {
	if x, ok := x.GetValue().(*Identity_Email_Raw4); ok {
		return x.Raw4
	}
	return nil
}

func (x *Identity_Email) GetRaw5() *Identity_Raw5 {
	if x, ok := x.GetValue().(*Identity_Email_Raw5); ok {
		return x.Raw5
	}
	return nil
}

func (x *Identity_Email) GetRaw6() *Identity_Raw6 {
	if x, ok := x.GetValue().(*Identity_Email_Raw6); ok {
		return x.Raw6
	}
	return nil
}

func (x *Identity_Email) GetRaw7() *Identity_Raw7 {
	if x, ok := x.GetValue().(*Identity_Email_Raw7); ok {
		return x.Raw7
	}
	return nil
}

func (x *Identity_Email) GetRaw8() *Identity_Raw8 {
	if x, ok := x.GetValue().(*Identity_Email_Raw8); ok {
		return x.Raw8
	}
	return nil
}

func (x *Identity_Email) GetRaw9() *Identity_Raw9 {
	if x, ok := x.GetValue().(*Identity_Email_Raw9); ok {
		return x.Raw9
	}
	return nil
}

func (x *Identity_Email) GetRaw10() *Identity_Raw10 {
	if x, ok := x.GetValue().(*Identity_Email_Raw10); ok {
		return x.Raw10
	}
	return nil
}

func (x *Identity_Email) GetRaw11() *Identity_Raw11 {
	if x, ok := x.GetValue().(*Identity_Email_Raw11); ok {
		return x.Raw11
	}
	return nil
}

func (x *Identity_Email) GetRaw12() *Identity_Raw12 {
	if x, ok := x.GetValue().(*Identity_Email_Raw12); ok {
		return x.Raw12
	}
	return nil
}

func (x *Identity_Email) GetRaw13() *Identity_Raw13 {
	if x, ok := x.GetValue().(*Identity_Email_Raw13); ok {
		return x.Raw13
	}
	return nil
}

func (x *Identity_Email) GetRaw14() *Identity_Raw14 {
	if x, ok := x.GetValue().(*Identity_Email_Raw14); ok {
		return x.Raw14
	}
	return nil
}

func (x *Identity_Email) GetRaw15() *Identity_Raw15 {
	if x, ok := x.GetValue().(*Identity_Email_Raw15); ok {
		return x.Raw15
	}
	return nil
}

func (x *Identity_Email) GetRaw16() *Identity_Raw16 {
	if x, ok := x.GetValue().(*Identity_Email_Raw16); ok {
		return x.Raw16
	}
	return nil
}

func (x *Identity_Email) GetRaw17() *Identity_Raw17 {
	if x, ok := x.GetValue().(*Identity_Email_Raw17); ok {
		return x.Raw17
	}
	return nil
}

func (x *Identity_Email) GetRaw18() *Identity_Raw18 {
	if x, ok := x.GetValue().(*Identity_Email_Raw18); ok {
		return x.Raw18
	}
	return nil
}

func (x *Identity_Email) GetRaw19() *Identity_Raw19 {
	if x, ok := x.GetValue().(*Identity_Email_Raw19); ok {
		return x.Raw19
	}
	return nil
}

func (x *Identity_Email) GetRaw20() *Identity_Raw20 {
	if x, ok := x.GetValue().(*Identity_Email_Raw20); ok {
		return x.Raw20
	}
	return nil
}

func (x *Identity_Email) GetRaw21() *Identity_Raw21 {
	if x, ok := x.GetValue().(*Identity_Email_Raw21); ok {
		return x.Raw21
	}
	return nil
}

func (x *Identity_Email) GetRaw22() *Identity_Raw22 {
	if x, ok := x.GetValue().(*Identity_Email_Raw22); ok {
		return x.Raw22
	}
	return nil
}

func (x *Identity_Email) GetRaw23() *Identity_Raw23 {
	if x, ok := x.GetValue().(*Identity_Email_Raw23); ok {
		return x.Raw23
	}
	return nil
}

func (x *Identity_Email) GetRaw24() *Identity_Raw24 {
	if x, ok := x.GetValue().(*Identity_Email_Raw24); ok {
		return x.Raw24
	}
	return nil
}

func (x *Identity_Email) GetRaw25() *Identity_Raw25 {
	if x, ok := x.GetValue().(*Identity_Email_Raw25); ok {
		return x.Raw25
	}
	return nil
}

func (x *Identity_Email) GetRaw26() *Identity_Raw26 {
	if x, ok := x.GetValue().(*Identity_Email_Raw26); ok {
		return x.Raw26
	}
	return nil
}

func (x *Identity_Email) GetRaw27() *Identity_Raw27 {
	if x, ok := x.GetValue().(*Identity_Email_Raw27); ok {
		return x.Raw27
	}
	return nil
}

func (x *Identity_Email) GetRaw28() *Identity_Raw28 {
	if x, ok := x.GetValue().(*Identity_Email_Raw28); ok {
		return x.Raw28
	}
	return nil
}

func (x *Identity_Email) GetRaw29() *Identity_Raw29 {
	if x, ok := x.GetValue().(*Identity_Email_Raw29); ok {
		return x.Raw29
	}
	return nil
}

func (x *Identity_Email) GetRaw30() *Identity_Raw30 {
	if x, ok := x.GetValue().(*Identity_Email_Raw30); ok {
		return x.Raw30
	}
	return nil
}

func (x *Identity_Email) GetRaw31() *Identity_Raw31 {
	if x, ok := x.GetValue().(*Identity_Email_Raw31); ok {
		return x.Raw31
	}
	return nil
}

func (x *Identity_Email) GetRaw32() *Identity_Raw32 {
	if x, ok := x.GetValue().(*Identity_Email_Raw32); ok {
		return x.Raw32
	}
	return nil
}

func (x *Identity_Email) GetBlakeTwo256() *Identity_BlakeTwo256 {
	if x, ok := x.GetValue().(*Identity_Email_BlakeTwo256); ok {
		return x.BlakeTwo256
	}
	return nil
}

func (x *Identity_Email) GetSha256() *Identity_Sha256 {
	if x, ok := x.GetValue().(*Identity_Email_Sha256); ok {
		return x.Sha256
	}
	return nil
}

func (x *Identity_Email) GetKeccak256() *Identity_Keccak256 {
	if x, ok := x.GetValue().(*Identity_Email_Keccak256); ok {
		return x.Keccak256
	}
	return nil
}

func (x *Identity_Email) GetShaThree256() *Identity_ShaThree256 {
	if x, ok := x.GetValue().(*Identity_Email_ShaThree256); ok {
		return x.ShaThree256
	}
	return nil
}

type isIdentity_Email_Value interface {
	isIdentity_Email_Value()
}

type Identity_Email_None struct {
	None *Identity_None `protobuf:"bytes,1,opt,name=none,proto3,oneof"`
}

type Identity_Email_Raw0 struct {
	Raw0 *Identity_Raw0 `protobuf:"bytes,2,opt,name=raw0,proto3,oneof"`
}

type Identity_Email_Raw1 struct {
	Raw1 *Identity_Raw1 `protobuf:"bytes,3,opt,name=raw1,proto3,oneof"`
}

type Identity_Email_Raw2 struct {
	Raw2 *Identity_Raw2 `protobuf:"bytes,4,opt,name=raw2,proto3,oneof"`
}

type Identity_Email_Raw3 struct {
	Raw3 *Identity_Raw3 `protobuf:"bytes,5,opt,name=raw3,proto3,oneof"`
}

type Identity_Email_Raw4 struct {
	Raw4 *Identity_Raw4 `protobuf:"bytes,6,opt,name=raw4,proto3,oneof"`
}

type Identity_Email_Raw5 struct {
	Raw5 *Identity_Raw5 `protobuf:"bytes,7,opt,name=raw5,proto3,oneof"`
}

type Identity_Email_Raw6 struct {
	Raw6 *Identity_Raw6 `protobuf:"bytes,8,opt,name=raw6,proto3,oneof"`
}

type Identity_Email_Raw7 struct {
	Raw7 *Identity_Raw7 `protobuf:"bytes,9,opt,name=raw7,proto3,oneof"`
}

type Identity_Email_Raw8 struct {
	Raw8 *Identity_Raw8 `protobuf:"bytes,10,opt,name=raw8,proto3,oneof"`
}

type Identity_Email_Raw9 struct {
	Raw9 *Identity_Raw9 `protobuf:"bytes,11,opt,name=raw9,proto3,oneof"`
}

type Identity_Email_Raw10 struct {
	Raw10 *Identity_Raw10 `protobuf:"bytes,12,opt,name=raw10,proto3,oneof"`
}

type Identity_Email_Raw11 struct {
	Raw11 *Identity_Raw11 `protobuf:"bytes,13,opt,name=raw11,proto3,oneof"`
}

type Identity_Email_Raw12 struct {
	Raw12 *Identity_Raw12 `protobuf:"bytes,14,opt,name=raw12,proto3,oneof"`
}

type Identity_Email_Raw13 struct {
	Raw13 *Identity_Raw13 `protobuf:"bytes,15,opt,name=raw13,proto3,oneof"`
}

type Identity_Email_Raw14 struct {
	Raw14 *Identity_Raw14 `protobuf:"bytes,16,opt,name=raw14,proto3,oneof"`
}

type Identity_Email_Raw15 struct {
	Raw15 *Identity_Raw15 `protobuf:"bytes,17,opt,name=raw15,proto3,oneof"`
}

type Identity_Email_Raw16 struct {
	Raw16 *Identity_Raw16 `protobuf:"bytes,18,opt,name=raw16,proto3,oneof"`
}

type Identity_Email_Raw17 struct {
	Raw17 *Identity_Raw17 `protobuf:"bytes,19,opt,name=raw17,proto3,oneof"`
}

type Identity_Email_Raw18 struct {
	Raw18 *Identity_Raw18 `protobuf:"bytes,20,opt,name=raw18,proto3,oneof"`
}

type Identity_Email_Raw19 struct {
	Raw19 *Identity_Raw19 `protobuf:"bytes,21,opt,name=raw19,proto3,oneof"`
}

type Identity_Email_Raw20 struct {
	Raw20 *Identity_Raw20 `protobuf:"bytes,22,opt,name=raw20,proto3,oneof"`
}

type Identity_Email_Raw21 struct {
	Raw21 *Identity_Raw21 `protobuf:"bytes,23,opt,name=raw21,proto3,oneof"`
}

type Identity_Email_Raw22 struct {
	Raw22 *Identity_Raw22 `protobuf:"bytes,24,opt,name=raw22,proto3,oneof"`
}

type Identity_Email_Raw23 struct {
	Raw23 *Identity_Raw23 `protobuf:"bytes,25,opt,name=raw23,proto3,oneof"`
}

type Identity_Email_Raw24 struct {
	Raw24 *Identity_Raw24 `protobuf:"bytes,26,opt,name=raw24,proto3,oneof"`
}

type Identity_Email_Raw25 struct {
	Raw25 *Identity_Raw25 `protobuf:"bytes,27,opt,name=raw25,proto3,oneof"`
}

type Identity_Email_Raw26 struct {
	Raw26 *Identity_Raw26 `protobuf:"bytes,28,opt,name=raw26,proto3,oneof"`
}

type Identity_Email_Raw27 struct {
	Raw27 *Identity_Raw27 `protobuf:"bytes,29,opt,name=raw27,proto3,oneof"`
}

type Identity_Email_Raw28 struct {
	Raw28 *Identity_Raw28 `protobuf:"bytes,30,opt,name=raw28,proto3,oneof"`
}

type Identity_Email_Raw29 struct {
	Raw29 *Identity_Raw29 `protobuf:"bytes,31,opt,name=raw29,proto3,oneof"`
}

type Identity_Email_Raw30 struct {
	Raw30 *Identity_Raw30 `protobuf:"bytes,32,opt,name=raw30,proto3,oneof"`
}

type Identity_Email_Raw31 struct {
	Raw31 *Identity_Raw31 `protobuf:"bytes,33,opt,name=raw31,proto3,oneof"`
}

type Identity_Email_Raw32 struct {
	Raw32 *Identity_Raw32 `protobuf:"bytes,34,opt,name=raw32,proto3,oneof"`
}

type Identity_Email_BlakeTwo256 struct {
	BlakeTwo256 *Identity_BlakeTwo256 `protobuf:"bytes,35,opt,name=blake_two256,json=blakeTwo256,proto3,oneof"`
}

type Identity_Email_Sha256 struct {
	Sha256 *Identity_Sha256 `protobuf:"bytes,36,opt,name=sha256,proto3,oneof"`
}

type Identity_Email_Keccak256 struct {
	Keccak256 *Identity_Keccak256 `protobuf:"bytes,37,opt,name=keccak256,proto3,oneof"`
}

type Identity_Email_ShaThree256 struct {
	ShaThree256 *Identity_ShaThree256 `protobuf:"bytes,38,opt,name=sha_three256,json=shaThree256,proto3,oneof"`
}

func (*Identity_Email_None) isIdentity_Email_Value() {}

func (*Identity_Email_Raw0) isIdentity_Email_Value() {}

func (*Identity_Email_Raw1) isIdentity_Email_Value() {}

func (*Identity_Email_Raw2) isIdentity_Email_Value() {}

func (*Identity_Email_Raw3) isIdentity_Email_Value() {}

func (*Identity_Email_Raw4) isIdentity_Email_Value() {}

func (*Identity_Email_Raw5) isIdentity_Email_Value() {}

func (*Identity_Email_Raw6) isIdentity_Email_Value() {}

func (*Identity_Email_Raw7) isIdentity_Email_Value() {}

func (*Identity_Email_Raw8) isIdentity_Email_Value() {}

func (*Identity_Email_Raw9) isIdentity_Email_Value() {}

func (*Identity_Email_Raw10) isIdentity_Email_Value() {}

func (*Identity_Email_Raw11) isIdentity_Email_Value() {}

func (*Identity_Email_Raw12) isIdentity_Email_Value() {}

func (*Identity_Email_Raw13) isIdentity_Email_Value() {}

func (*Identity_Email_Raw14) isIdentity_Email_Value() {}

func (*Identity_Email_Raw15) isIdentity_Email_Value() {}

func (*Identity_Email_Raw16) isIdentity_Email_Value() {}

func (*Identity_Email_Raw17) isIdentity_Email_Value() {}

func (*Identity_Email_Raw18) isIdentity_Email_Value() {}

func (*Identity_Email_Raw19) isIdentity_Email_Value() {}

func (*Identity_Email_Raw20) isIdentity_Email_Value() {}

func (*Identity_Email_Raw21) isIdentity_Email_Value() {}

func (*Identity_Email_Raw22) isIdentity_Email_Value() {}

func (*Identity_Email_Raw23) isIdentity_Email_Value() {}

func (*Identity_Email_Raw24) isIdentity_Email_Value() {}

func (*Identity_Email_Raw25) isIdentity_Email_Value() {}

func (*Identity_Email_Raw26) isIdentity_Email_Value() {}

func (*Identity_Email_Raw27) isIdentity_Email_Value() {}

func (*Identity_Email_Raw28) isIdentity_Email_Value() {}

func (*Identity_Email_Raw29) isIdentity_Email_Value() {}

func (*Identity_Email_Raw30) isIdentity_Email_Value() {}

func (*Identity_Email_Raw31) isIdentity_Email_Value() {}

func (*Identity_Email_Raw32) isIdentity_Email_Value() {}

func (*Identity_Email_BlakeTwo256) isIdentity_Email_Value() {}

func (*Identity_Email_Sha256) isIdentity_Email_Value() {}

func (*Identity_Email_Keccak256) isIdentity_Email_Value() {}

func (*Identity_Email_ShaThree256) isIdentity_Email_Value() {}

type Identity_Erroneous struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Identity_Erroneous) Reset() {
	*x = Identity_Erroneous{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[384]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_Erroneous) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_Erroneous) ProtoMessage() {}

func (x *Identity_Erroneous) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[384]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_Erroneous.ProtoReflect.Descriptor instead.
func (*Identity_Erroneous) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{384}
}

type BTreeSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []*GprimitivesActorId `protobuf:"bytes,1,rep,name=value0,proto3" json:"value0,omitempty"`
}

func (x *BTreeSet) Reset() {
	*x = BTreeSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[385]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BTreeSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BTreeSet) ProtoMessage() {}

func (x *BTreeSet) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[385]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BTreeSet.ProtoReflect.Descriptor instead.
func (*BTreeSet) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{385}
}

func (x *BTreeSet) GetValue0() []*GprimitivesActorId {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Treasury_SpendCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetKind   *Treasury_TupleNull      `protobuf:"bytes,1,opt,name=asset_kind,json=assetKind,proto3" json:"asset_kind,omitempty"`
	Amount      string                   `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Beneficiary *SpCoreCryptoAccountId32 `protobuf:"bytes,3,opt,name=beneficiary,proto3" json:"beneficiary,omitempty"`
	ValidFrom   *uint32                  `protobuf:"varint,4,opt,name=valid_from,json=validFrom,proto3,oneof" json:"valid_from,omitempty"`
}

func (x *Treasury_SpendCall) Reset() {
	*x = Treasury_SpendCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[386]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Treasury_SpendCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Treasury_SpendCall) ProtoMessage() {}

func (x *Treasury_SpendCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[386]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Treasury_SpendCall.ProtoReflect.Descriptor instead.
func (*Treasury_SpendCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{386}
}

func (x *Treasury_SpendCall) GetAssetKind() *Treasury_TupleNull {
	if x != nil {
		return x.AssetKind
	}
	return nil
}

func (x *Treasury_SpendCall) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *Treasury_SpendCall) GetBeneficiary() *SpCoreCryptoAccountId32 {
	if x != nil {
		return x.Beneficiary
	}
	return nil
}

func (x *Treasury_SpendCall) GetValidFrom() uint32 {
	if x != nil && x.ValidFrom != nil {
		return *x.ValidFrom
	}
	return 0
}

type Identity_Raw28 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Identity_Raw28) Reset() {
	*x = Identity_Raw28{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[387]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_Raw28) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_Raw28) ProtoMessage() {}

func (x *Identity_Raw28) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[387]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_Raw28.ProtoReflect.Descriptor instead.
func (*Identity_Raw28) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{387}
}

func (x *Identity_Raw28) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Proxy_Any struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Proxy_Any) Reset() {
	*x = Proxy_Any{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[388]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proxy_Any) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proxy_Any) ProtoMessage() {}

func (x *Proxy_Any) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[388]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proxy_Any.ProtoReflect.Descriptor instead.
func (*Proxy_Any) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{388}
}

type NominationPools_MemberAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*NominationPools_MemberAccount_Id
	//	*NominationPools_MemberAccount_Index
	//	*NominationPools_MemberAccount_Raw
	//	*NominationPools_MemberAccount_Address32
	//	*NominationPools_MemberAccount_Address20
	Value isNominationPools_MemberAccount_Value `protobuf_oneof:"value"`
}

func (x *NominationPools_MemberAccount) Reset() {
	*x = NominationPools_MemberAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[389]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NominationPools_MemberAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NominationPools_MemberAccount) ProtoMessage() {}

func (x *NominationPools_MemberAccount) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[389]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NominationPools_MemberAccount.ProtoReflect.Descriptor instead.
func (*NominationPools_MemberAccount) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{389}
}

func (m *NominationPools_MemberAccount) GetValue() isNominationPools_MemberAccount_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *NominationPools_MemberAccount) GetId() *NominationPools_Id {
	if x, ok := x.GetValue().(*NominationPools_MemberAccount_Id); ok {
		return x.Id
	}
	return nil
}

func (x *NominationPools_MemberAccount) GetIndex() *NominationPools_Index {
	if x, ok := x.GetValue().(*NominationPools_MemberAccount_Index); ok {
		return x.Index
	}
	return nil
}

func (x *NominationPools_MemberAccount) GetRaw() *NominationPools_Raw {
	if x, ok := x.GetValue().(*NominationPools_MemberAccount_Raw); ok {
		return x.Raw
	}
	return nil
}

func (x *NominationPools_MemberAccount) GetAddress32() *NominationPools_Address32 {
	if x, ok := x.GetValue().(*NominationPools_MemberAccount_Address32); ok {
		return x.Address32
	}
	return nil
}

func (x *NominationPools_MemberAccount) GetAddress20() *NominationPools_Address20 {
	if x, ok := x.GetValue().(*NominationPools_MemberAccount_Address20); ok {
		return x.Address20
	}
	return nil
}

type isNominationPools_MemberAccount_Value interface {
	isNominationPools_MemberAccount_Value()
}

type NominationPools_MemberAccount_Id struct {
	Id *NominationPools_Id `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type NominationPools_MemberAccount_Index struct {
	Index *NominationPools_Index `protobuf:"bytes,2,opt,name=index,proto3,oneof"`
}

type NominationPools_MemberAccount_Raw struct {
	Raw *NominationPools_Raw `protobuf:"bytes,3,opt,name=raw,proto3,oneof"`
}

type NominationPools_MemberAccount_Address32 struct {
	Address32 *NominationPools_Address32 `protobuf:"bytes,4,opt,name=address32,proto3,oneof"`
}

type NominationPools_MemberAccount_Address20 struct {
	Address20 *NominationPools_Address20 `protobuf:"bytes,5,opt,name=address20,proto3,oneof"`
}

func (*NominationPools_MemberAccount_Id) isNominationPools_MemberAccount_Value() {}

func (*NominationPools_MemberAccount_Index) isNominationPools_MemberAccount_Value() {}

func (*NominationPools_MemberAccount_Raw) isNominationPools_MemberAccount_Value() {}

func (*NominationPools_MemberAccount_Address32) isNominationPools_MemberAccount_Value() {}

func (*NominationPools_MemberAccount_Address20) isNominationPools_MemberAccount_Value() {}

type NominationPools_NominateCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoolId     uint32                     `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	Validators []*SpCoreCryptoAccountId32 `protobuf:"bytes,2,rep,name=validators,proto3" json:"validators,omitempty"`
}

func (x *NominationPools_NominateCall) Reset() {
	*x = NominationPools_NominateCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[390]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NominationPools_NominateCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NominationPools_NominateCall) ProtoMessage() {}

func (x *NominationPools_NominateCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[390]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NominationPools_NominateCall.ProtoReflect.Descriptor instead.
func (*NominationPools_NominateCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{390}
}

func (x *NominationPools_NominateCall) GetPoolId() uint32 {
	if x != nil {
		return x.PoolId
	}
	return 0
}

func (x *NominationPools_NominateCall) GetValidators() []*SpCoreCryptoAccountId32 {
	if x != nil {
		return x.Validators
	}
	return nil
}

type BagsListPallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Call:
	//
	//	*BagsListPallet_RebagCall
	//	*BagsListPallet_PutInFrontOfCall
	//	*BagsListPallet_PutInFrontOfOtherCall
	Call isBagsListPallet_Call `protobuf_oneof:"call"`
}

func (x *BagsListPallet) Reset() {
	*x = BagsListPallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[391]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BagsListPallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BagsListPallet) ProtoMessage() {}

func (x *BagsListPallet) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[391]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BagsListPallet.ProtoReflect.Descriptor instead.
func (*BagsListPallet) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{391}
}

func (m *BagsListPallet) GetCall() isBagsListPallet_Call {
	if m != nil {
		return m.Call
	}
	return nil
}

func (x *BagsListPallet) GetRebagCall() *BagsList_RebagCall {
	if x, ok := x.GetCall().(*BagsListPallet_RebagCall); ok {
		return x.RebagCall
	}
	return nil
}

func (x *BagsListPallet) GetPutInFrontOfCall() *BagsList_PutInFrontOfCall {
	if x, ok := x.GetCall().(*BagsListPallet_PutInFrontOfCall); ok {
		return x.PutInFrontOfCall
	}
	return nil
}

func (x *BagsListPallet) GetPutInFrontOfOtherCall() *BagsList_PutInFrontOfOtherCall {
	if x, ok := x.GetCall().(*BagsListPallet_PutInFrontOfOtherCall); ok {
		return x.PutInFrontOfOtherCall
	}
	return nil
}

type isBagsListPallet_Call interface {
	isBagsListPallet_Call()
}

type BagsListPallet_RebagCall struct {
	RebagCall *BagsList_RebagCall `protobuf:"bytes,1,opt,name=rebag_call,json=rebagCall,proto3,oneof"`
}

type BagsListPallet_PutInFrontOfCall struct {
	PutInFrontOfCall *BagsList_PutInFrontOfCall `protobuf:"bytes,2,opt,name=put_in_front_of_call,json=putInFrontOfCall,proto3,oneof"`
}

type BagsListPallet_PutInFrontOfOtherCall struct {
	PutInFrontOfOtherCall *BagsList_PutInFrontOfOtherCall `protobuf:"bytes,3,opt,name=put_in_front_of_other_call,json=putInFrontOfOtherCall,proto3,oneof"`
}

func (*BagsListPallet_RebagCall) isBagsListPallet_Call() {}

func (*BagsListPallet_PutInFrontOfCall) isBagsListPallet_Call() {}

func (*BagsListPallet_PutInFrontOfOtherCall) isBagsListPallet_Call() {}

type Staking_ForceNewEraCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Staking_ForceNewEraCall) Reset() {
	*x = Staking_ForceNewEraCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[392]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staking_ForceNewEraCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staking_ForceNewEraCall) ProtoMessage() {}

func (x *Staking_ForceNewEraCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[392]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staking_ForceNewEraCall.ProtoReflect.Descriptor instead.
func (*Staking_ForceNewEraCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{392}
}

type SpAuthorityDiscoveryAppPublic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 *SpCoreSr25519Public `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *SpAuthorityDiscoveryAppPublic) Reset() {
	*x = SpAuthorityDiscoveryAppPublic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[393]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpAuthorityDiscoveryAppPublic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpAuthorityDiscoveryAppPublic) ProtoMessage() {}

func (x *SpAuthorityDiscoveryAppPublic) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[393]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpAuthorityDiscoveryAppPublic.ProtoReflect.Descriptor instead.
func (*SpAuthorityDiscoveryAppPublic) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{393}
}

func (x *SpAuthorityDiscoveryAppPublic) GetValue0() *SpCoreSr25519Public {
	if x != nil {
		return x.Value0
	}
	return nil
}

type IdentityPallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Call:
	//
	//	*IdentityPallet_AddRegistrarCall
	//	*IdentityPallet_SetIdentityCall
	//	*IdentityPallet_SetSubsCall
	//	*IdentityPallet_ClearIdentityCall
	//	*IdentityPallet_RequestJudgementCall
	//	*IdentityPallet_CancelRequestCall
	//	*IdentityPallet_SetFeeCall
	//	*IdentityPallet_SetAccountIdCall
	//	*IdentityPallet_SetFieldsCall
	//	*IdentityPallet_ProvideJudgementCall
	//	*IdentityPallet_KillIdentityCall
	//	*IdentityPallet_AddSubCall
	//	*IdentityPallet_RenameSubCall
	//	*IdentityPallet_RemoveSubCall
	//	*IdentityPallet_QuitSubCall
	Call isIdentityPallet_Call `protobuf_oneof:"call"`
}

func (x *IdentityPallet) Reset() {
	*x = IdentityPallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[394]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentityPallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityPallet) ProtoMessage() {}

func (x *IdentityPallet) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[394]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityPallet.ProtoReflect.Descriptor instead.
func (*IdentityPallet) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{394}
}

func (m *IdentityPallet) GetCall() isIdentityPallet_Call {
	if m != nil {
		return m.Call
	}
	return nil
}

func (x *IdentityPallet) GetAddRegistrarCall() *Identity_AddRegistrarCall {
	if x, ok := x.GetCall().(*IdentityPallet_AddRegistrarCall); ok {
		return x.AddRegistrarCall
	}
	return nil
}

func (x *IdentityPallet) GetSetIdentityCall() *Identity_SetIdentityCall {
	if x, ok := x.GetCall().(*IdentityPallet_SetIdentityCall); ok {
		return x.SetIdentityCall
	}
	return nil
}

func (x *IdentityPallet) GetSetSubsCall() *Identity_SetSubsCall {
	if x, ok := x.GetCall().(*IdentityPallet_SetSubsCall); ok {
		return x.SetSubsCall
	}
	return nil
}

func (x *IdentityPallet) GetClearIdentityCall() *Identity_ClearIdentityCall {
	if x, ok := x.GetCall().(*IdentityPallet_ClearIdentityCall); ok {
		return x.ClearIdentityCall
	}
	return nil
}

func (x *IdentityPallet) GetRequestJudgementCall() *Identity_RequestJudgementCall {
	if x, ok := x.GetCall().(*IdentityPallet_RequestJudgementCall); ok {
		return x.RequestJudgementCall
	}
	return nil
}

func (x *IdentityPallet) GetCancelRequestCall() *Identity_CancelRequestCall {
	if x, ok := x.GetCall().(*IdentityPallet_CancelRequestCall); ok {
		return x.CancelRequestCall
	}
	return nil
}

func (x *IdentityPallet) GetSetFeeCall() *Identity_SetFeeCall {
	if x, ok := x.GetCall().(*IdentityPallet_SetFeeCall); ok {
		return x.SetFeeCall
	}
	return nil
}

func (x *IdentityPallet) GetSetAccountIdCall() *Identity_SetAccountIdCall {
	if x, ok := x.GetCall().(*IdentityPallet_SetAccountIdCall); ok {
		return x.SetAccountIdCall
	}
	return nil
}

func (x *IdentityPallet) GetSetFieldsCall() *Identity_SetFieldsCall {
	if x, ok := x.GetCall().(*IdentityPallet_SetFieldsCall); ok {
		return x.SetFieldsCall
	}
	return nil
}

func (x *IdentityPallet) GetProvideJudgementCall() *Identity_ProvideJudgementCall {
	if x, ok := x.GetCall().(*IdentityPallet_ProvideJudgementCall); ok {
		return x.ProvideJudgementCall
	}
	return nil
}

func (x *IdentityPallet) GetKillIdentityCall() *Identity_KillIdentityCall {
	if x, ok := x.GetCall().(*IdentityPallet_KillIdentityCall); ok {
		return x.KillIdentityCall
	}
	return nil
}

func (x *IdentityPallet) GetAddSubCall() *Identity_AddSubCall {
	if x, ok := x.GetCall().(*IdentityPallet_AddSubCall); ok {
		return x.AddSubCall
	}
	return nil
}

func (x *IdentityPallet) GetRenameSubCall() *Identity_RenameSubCall {
	if x, ok := x.GetCall().(*IdentityPallet_RenameSubCall); ok {
		return x.RenameSubCall
	}
	return nil
}

func (x *IdentityPallet) GetRemoveSubCall() *Identity_RemoveSubCall {
	if x, ok := x.GetCall().(*IdentityPallet_RemoveSubCall); ok {
		return x.RemoveSubCall
	}
	return nil
}

func (x *IdentityPallet) GetQuitSubCall() *Identity_QuitSubCall {
	if x, ok := x.GetCall().(*IdentityPallet_QuitSubCall); ok {
		return x.QuitSubCall
	}
	return nil
}

type isIdentityPallet_Call interface {
	isIdentityPallet_Call()
}

type IdentityPallet_AddRegistrarCall struct {
	AddRegistrarCall *Identity_AddRegistrarCall `protobuf:"bytes,1,opt,name=add_registrar_call,json=addRegistrarCall,proto3,oneof"`
}

type IdentityPallet_SetIdentityCall struct {
	SetIdentityCall *Identity_SetIdentityCall `protobuf:"bytes,2,opt,name=set_identity_call,json=setIdentityCall,proto3,oneof"`
}

type IdentityPallet_SetSubsCall struct {
	SetSubsCall *Identity_SetSubsCall `protobuf:"bytes,3,opt,name=set_subs_call,json=setSubsCall,proto3,oneof"`
}

type IdentityPallet_ClearIdentityCall struct {
	ClearIdentityCall *Identity_ClearIdentityCall `protobuf:"bytes,4,opt,name=clear_identity_call,json=clearIdentityCall,proto3,oneof"`
}

type IdentityPallet_RequestJudgementCall struct {
	RequestJudgementCall *Identity_RequestJudgementCall `protobuf:"bytes,5,opt,name=request_judgement_call,json=requestJudgementCall,proto3,oneof"`
}

type IdentityPallet_CancelRequestCall struct {
	CancelRequestCall *Identity_CancelRequestCall `protobuf:"bytes,6,opt,name=cancel_request_call,json=cancelRequestCall,proto3,oneof"`
}

type IdentityPallet_SetFeeCall struct {
	SetFeeCall *Identity_SetFeeCall `protobuf:"bytes,7,opt,name=set_fee_call,json=setFeeCall,proto3,oneof"`
}

type IdentityPallet_SetAccountIdCall struct {
	SetAccountIdCall *Identity_SetAccountIdCall `protobuf:"bytes,8,opt,name=set_account_id_call,json=setAccountIdCall,proto3,oneof"`
}

type IdentityPallet_SetFieldsCall struct {
	SetFieldsCall *Identity_SetFieldsCall `protobuf:"bytes,9,opt,name=set_fields_call,json=setFieldsCall,proto3,oneof"`
}

type IdentityPallet_ProvideJudgementCall struct {
	ProvideJudgementCall *Identity_ProvideJudgementCall `protobuf:"bytes,10,opt,name=provide_judgement_call,json=provideJudgementCall,proto3,oneof"`
}

type IdentityPallet_KillIdentityCall struct {
	KillIdentityCall *Identity_KillIdentityCall `protobuf:"bytes,11,opt,name=kill_identity_call,json=killIdentityCall,proto3,oneof"`
}

type IdentityPallet_AddSubCall struct {
	AddSubCall *Identity_AddSubCall `protobuf:"bytes,12,opt,name=add_sub_call,json=addSubCall,proto3,oneof"`
}

type IdentityPallet_RenameSubCall struct {
	RenameSubCall *Identity_RenameSubCall `protobuf:"bytes,13,opt,name=rename_sub_call,json=renameSubCall,proto3,oneof"`
}

type IdentityPallet_RemoveSubCall struct {
	RemoveSubCall *Identity_RemoveSubCall `protobuf:"bytes,14,opt,name=remove_sub_call,json=removeSubCall,proto3,oneof"`
}

type IdentityPallet_QuitSubCall struct {
	QuitSubCall *Identity_QuitSubCall `protobuf:"bytes,15,opt,name=quit_sub_call,json=quitSubCall,proto3,oneof"`
}

func (*IdentityPallet_AddRegistrarCall) isIdentityPallet_Call() {}

func (*IdentityPallet_SetIdentityCall) isIdentityPallet_Call() {}

func (*IdentityPallet_SetSubsCall) isIdentityPallet_Call() {}

func (*IdentityPallet_ClearIdentityCall) isIdentityPallet_Call() {}

func (*IdentityPallet_RequestJudgementCall) isIdentityPallet_Call() {}

func (*IdentityPallet_CancelRequestCall) isIdentityPallet_Call() {}

func (*IdentityPallet_SetFeeCall) isIdentityPallet_Call() {}

func (*IdentityPallet_SetAccountIdCall) isIdentityPallet_Call() {}

func (*IdentityPallet_SetFieldsCall) isIdentityPallet_Call() {}

func (*IdentityPallet_ProvideJudgementCall) isIdentityPallet_Call() {}

func (*IdentityPallet_KillIdentityCall) isIdentityPallet_Call() {}

func (*IdentityPallet_AddSubCall) isIdentityPallet_Call() {}

func (*IdentityPallet_RenameSubCall) isIdentityPallet_Call() {}

func (*IdentityPallet_RemoveSubCall) isIdentityPallet_Call() {}

func (*IdentityPallet_QuitSubCall) isIdentityPallet_Call() {}

type GearGasPallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GearGasPallet) Reset() {
	*x = GearGasPallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[395]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GearGasPallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GearGasPallet) ProtoMessage() {}

func (x *GearGasPallet) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[395]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GearGasPallet.ProtoReflect.Descriptor instead.
func (*GearGasPallet) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{395}
}

type BagsList_Dislocated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*BagsList_Dislocated_Id
	//	*BagsList_Dislocated_Index
	//	*BagsList_Dislocated_Raw
	//	*BagsList_Dislocated_Address32
	//	*BagsList_Dislocated_Address20
	Value isBagsList_Dislocated_Value `protobuf_oneof:"value"`
}

func (x *BagsList_Dislocated) Reset() {
	*x = BagsList_Dislocated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[396]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BagsList_Dislocated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BagsList_Dislocated) ProtoMessage() {}

func (x *BagsList_Dislocated) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[396]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BagsList_Dislocated.ProtoReflect.Descriptor instead.
func (*BagsList_Dislocated) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{396}
}

func (m *BagsList_Dislocated) GetValue() isBagsList_Dislocated_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *BagsList_Dislocated) GetId() *BagsList_Id {
	if x, ok := x.GetValue().(*BagsList_Dislocated_Id); ok {
		return x.Id
	}
	return nil
}

func (x *BagsList_Dislocated) GetIndex() *BagsList_Index {
	if x, ok := x.GetValue().(*BagsList_Dislocated_Index); ok {
		return x.Index
	}
	return nil
}

func (x *BagsList_Dislocated) GetRaw() *BagsList_Raw {
	if x, ok := x.GetValue().(*BagsList_Dislocated_Raw); ok {
		return x.Raw
	}
	return nil
}

func (x *BagsList_Dislocated) GetAddress32() *BagsList_Address32 {
	if x, ok := x.GetValue().(*BagsList_Dislocated_Address32); ok {
		return x.Address32
	}
	return nil
}

func (x *BagsList_Dislocated) GetAddress20() *BagsList_Address20 {
	if x, ok := x.GetValue().(*BagsList_Dislocated_Address20); ok {
		return x.Address20
	}
	return nil
}

type isBagsList_Dislocated_Value interface {
	isBagsList_Dislocated_Value()
}

type BagsList_Dislocated_Id struct {
	Id *BagsList_Id `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type BagsList_Dislocated_Index struct {
	Index *BagsList_Index `protobuf:"bytes,2,opt,name=index,proto3,oneof"`
}

type BagsList_Dislocated_Raw struct {
	Raw *BagsList_Raw `protobuf:"bytes,3,opt,name=raw,proto3,oneof"`
}

type BagsList_Dislocated_Address32 struct {
	Address32 *BagsList_Address32 `protobuf:"bytes,4,opt,name=address32,proto3,oneof"`
}

type BagsList_Dislocated_Address20 struct {
	Address20 *BagsList_Address20 `protobuf:"bytes,5,opt,name=address20,proto3,oneof"`
}

func (*BagsList_Dislocated_Id) isBagsList_Dislocated_Value() {}

func (*BagsList_Dislocated_Index) isBagsList_Dislocated_Value() {}

func (*BagsList_Dislocated_Raw) isBagsList_Dislocated_Value() {}

func (*BagsList_Dislocated_Address32) isBagsList_Dislocated_Value() {}

func (*BagsList_Dislocated_Address20) isBagsList_Dislocated_Value() {}

type Identity_ShaThree256 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Identity_ShaThree256) Reset() {
	*x = Identity_ShaThree256{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[397]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_ShaThree256) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_ShaThree256) ProtoMessage() {}

func (x *Identity_ShaThree256) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[397]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_ShaThree256.ProtoReflect.Descriptor instead.
func (*Identity_ShaThree256) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{397}
}

func (x *Identity_ShaThree256) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type NominationPools_PoolWithdrawUnbondedCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoolId           uint32 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	NumSlashingSpans uint32 `protobuf:"varint,2,opt,name=num_slashing_spans,json=numSlashingSpans,proto3" json:"num_slashing_spans,omitempty"`
}

func (x *NominationPools_PoolWithdrawUnbondedCall) Reset() {
	*x = NominationPools_PoolWithdrawUnbondedCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[398]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NominationPools_PoolWithdrawUnbondedCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NominationPools_PoolWithdrawUnbondedCall) ProtoMessage() {}

func (x *NominationPools_PoolWithdrawUnbondedCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[398]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NominationPools_PoolWithdrawUnbondedCall.ProtoReflect.Descriptor instead.
func (*NominationPools_PoolWithdrawUnbondedCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{398}
}

func (x *NominationPools_PoolWithdrawUnbondedCall) GetPoolId() uint32 {
	if x != nil {
		return x.PoolId
	}
	return 0
}

func (x *NominationPools_PoolWithdrawUnbondedCall) GetNumSlashingSpans() uint32 {
	if x != nil {
		return x.NumSlashingSpans
	}
	return 0
}

type StakingRewards_To struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*StakingRewards_To_Id
	//	*StakingRewards_To_Index
	//	*StakingRewards_To_Raw
	//	*StakingRewards_To_Address32
	//	*StakingRewards_To_Address20
	Value isStakingRewards_To_Value `protobuf_oneof:"value"`
}

func (x *StakingRewards_To) Reset() {
	*x = StakingRewards_To{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[399]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakingRewards_To) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakingRewards_To) ProtoMessage() {}

func (x *StakingRewards_To) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[399]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakingRewards_To.ProtoReflect.Descriptor instead.
func (*StakingRewards_To) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{399}
}

func (m *StakingRewards_To) GetValue() isStakingRewards_To_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *StakingRewards_To) GetId() *StakingRewards_Id {
	if x, ok := x.GetValue().(*StakingRewards_To_Id); ok {
		return x.Id
	}
	return nil
}

func (x *StakingRewards_To) GetIndex() *StakingRewards_Index {
	if x, ok := x.GetValue().(*StakingRewards_To_Index); ok {
		return x.Index
	}
	return nil
}

func (x *StakingRewards_To) GetRaw() *StakingRewards_Raw {
	if x, ok := x.GetValue().(*StakingRewards_To_Raw); ok {
		return x.Raw
	}
	return nil
}

func (x *StakingRewards_To) GetAddress32() *StakingRewards_Address32 {
	if x, ok := x.GetValue().(*StakingRewards_To_Address32); ok {
		return x.Address32
	}
	return nil
}

func (x *StakingRewards_To) GetAddress20() *StakingRewards_Address20 {
	if x, ok := x.GetValue().(*StakingRewards_To_Address20); ok {
		return x.Address20
	}
	return nil
}

type isStakingRewards_To_Value interface {
	isStakingRewards_To_Value()
}

type StakingRewards_To_Id struct {
	Id *StakingRewards_Id `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type StakingRewards_To_Index struct {
	Index *StakingRewards_Index `protobuf:"bytes,2,opt,name=index,proto3,oneof"`
}

type StakingRewards_To_Raw struct {
	Raw *StakingRewards_Raw `protobuf:"bytes,3,opt,name=raw,proto3,oneof"`
}

type StakingRewards_To_Address32 struct {
	Address32 *StakingRewards_Address32 `protobuf:"bytes,4,opt,name=address32,proto3,oneof"`
}

type StakingRewards_To_Address20 struct {
	Address20 *StakingRewards_Address20 `protobuf:"bytes,5,opt,name=address20,proto3,oneof"`
}

func (*StakingRewards_To_Id) isStakingRewards_To_Value() {}

func (*StakingRewards_To_Index) isStakingRewards_To_Value() {}

func (*StakingRewards_To_Raw) isStakingRewards_To_Value() {}

func (*StakingRewards_To_Address32) isStakingRewards_To_Value() {}

func (*StakingRewards_To_Address20) isStakingRewards_To_Value() {}

type Identity_Judgement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*Identity_Judgement_Unknown
	//	*Identity_Judgement_FeePaid
	//	*Identity_Judgement_Reasonable
	//	*Identity_Judgement_KnownGood
	//	*Identity_Judgement_OutOfDate
	//	*Identity_Judgement_LowQuality
	//	*Identity_Judgement_Erroneous
	Value isIdentity_Judgement_Value `protobuf_oneof:"value"`
}

func (x *Identity_Judgement) Reset() {
	*x = Identity_Judgement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[400]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_Judgement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_Judgement) ProtoMessage() {}

func (x *Identity_Judgement) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[400]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_Judgement.ProtoReflect.Descriptor instead.
func (*Identity_Judgement) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{400}
}

func (m *Identity_Judgement) GetValue() isIdentity_Judgement_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Identity_Judgement) GetUnknown() *Identity_Unknown {
	if x, ok := x.GetValue().(*Identity_Judgement_Unknown); ok {
		return x.Unknown
	}
	return nil
}

func (x *Identity_Judgement) GetFeePaid() *Identity_FeePaid {
	if x, ok := x.GetValue().(*Identity_Judgement_FeePaid); ok {
		return x.FeePaid
	}
	return nil
}

func (x *Identity_Judgement) GetReasonable() *Identity_Reasonable {
	if x, ok := x.GetValue().(*Identity_Judgement_Reasonable); ok {
		return x.Reasonable
	}
	return nil
}

func (x *Identity_Judgement) GetKnownGood() *Identity_KnownGood {
	if x, ok := x.GetValue().(*Identity_Judgement_KnownGood); ok {
		return x.KnownGood
	}
	return nil
}

func (x *Identity_Judgement) GetOutOfDate() *Identity_OutOfDate {
	if x, ok := x.GetValue().(*Identity_Judgement_OutOfDate); ok {
		return x.OutOfDate
	}
	return nil
}

func (x *Identity_Judgement) GetLowQuality() *Identity_LowQuality {
	if x, ok := x.GetValue().(*Identity_Judgement_LowQuality); ok {
		return x.LowQuality
	}
	return nil
}

func (x *Identity_Judgement) GetErroneous() *Identity_Erroneous {
	if x, ok := x.GetValue().(*Identity_Judgement_Erroneous); ok {
		return x.Erroneous
	}
	return nil
}

type isIdentity_Judgement_Value interface {
	isIdentity_Judgement_Value()
}

type Identity_Judgement_Unknown struct {
	Unknown *Identity_Unknown `protobuf:"bytes,1,opt,name=unknown,proto3,oneof"`
}

type Identity_Judgement_FeePaid struct {
	FeePaid *Identity_FeePaid `protobuf:"bytes,2,opt,name=fee_paid,json=feePaid,proto3,oneof"`
}

type Identity_Judgement_Reasonable struct {
	Reasonable *Identity_Reasonable `protobuf:"bytes,3,opt,name=reasonable,proto3,oneof"`
}

type Identity_Judgement_KnownGood struct {
	KnownGood *Identity_KnownGood `protobuf:"bytes,4,opt,name=known_good,json=knownGood,proto3,oneof"`
}

type Identity_Judgement_OutOfDate struct {
	OutOfDate *Identity_OutOfDate `protobuf:"bytes,5,opt,name=out_of_date,json=outOfDate,proto3,oneof"`
}

type Identity_Judgement_LowQuality struct {
	LowQuality *Identity_LowQuality `protobuf:"bytes,6,opt,name=low_quality,json=lowQuality,proto3,oneof"`
}

type Identity_Judgement_Erroneous struct {
	Erroneous *Identity_Erroneous `protobuf:"bytes,7,opt,name=erroneous,proto3,oneof"`
}

func (*Identity_Judgement_Unknown) isIdentity_Judgement_Value() {}

func (*Identity_Judgement_FeePaid) isIdentity_Judgement_Value() {}

func (*Identity_Judgement_Reasonable) isIdentity_Judgement_Value() {}

func (*Identity_Judgement_KnownGood) isIdentity_Judgement_Value() {}

func (*Identity_Judgement_OutOfDate) isIdentity_Judgement_Value() {}

func (*Identity_Judgement_LowQuality) isIdentity_Judgement_Value() {}

func (*Identity_Judgement_Erroneous) isIdentity_Judgement_Value() {}

type Bounties_Raw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Bounties_Raw) Reset() {
	*x = Bounties_Raw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[401]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bounties_Raw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bounties_Raw) ProtoMessage() {}

func (x *Bounties_Raw) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[401]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bounties_Raw.ProtoReflect.Descriptor instead.
func (*Bounties_Raw) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{401}
}

func (x *Bounties_Raw) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type StakingRewards_WithdrawCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	To    *StakingRewards_To `protobuf:"bytes,1,opt,name=to,proto3" json:"to,omitempty"`
	Value string             `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *StakingRewards_WithdrawCall) Reset() {
	*x = StakingRewards_WithdrawCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[402]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakingRewards_WithdrawCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakingRewards_WithdrawCall) ProtoMessage() {}

func (x *StakingRewards_WithdrawCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[402]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakingRewards_WithdrawCall.ProtoReflect.Descriptor instead.
func (*StakingRewards_WithdrawCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{402}
}

func (x *StakingRewards_WithdrawCall) GetTo() *StakingRewards_To {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *StakingRewards_WithdrawCall) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Babe_PreRuntime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
	Value1 []byte `protobuf:"bytes,2,opt,name=value1,proto3" json:"value1,omitempty"`
}

func (x *Babe_PreRuntime) Reset() {
	*x = Babe_PreRuntime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[403]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Babe_PreRuntime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Babe_PreRuntime) ProtoMessage() {}

func (x *Babe_PreRuntime) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[403]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Babe_PreRuntime.ProtoReflect.Descriptor instead.
func (*Babe_PreRuntime) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{403}
}

func (x *Babe_PreRuntime) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

func (x *Babe_PreRuntime) GetValue1() []byte {
	if x != nil {
		return x.Value1
	}
	return nil
}

type BalancesPallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Call:
	//
	//	*BalancesPallet_TransferAllowDeathCall
	//	*BalancesPallet_ForceTransferCall
	//	*BalancesPallet_TransferKeepAliveCall
	//	*BalancesPallet_TransferAllCall
	//	*BalancesPallet_ForceUnreserveCall
	//	*BalancesPallet_UpgradeAccountsCall
	//	*BalancesPallet_ForceSetBalanceCall
	Call isBalancesPallet_Call `protobuf_oneof:"call"`
}

func (x *BalancesPallet) Reset() {
	*x = BalancesPallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[404]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BalancesPallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalancesPallet) ProtoMessage() {}

func (x *BalancesPallet) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[404]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalancesPallet.ProtoReflect.Descriptor instead.
func (*BalancesPallet) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{404}
}

func (m *BalancesPallet) GetCall() isBalancesPallet_Call {
	if m != nil {
		return m.Call
	}
	return nil
}

func (x *BalancesPallet) GetTransferAllowDeathCall() *Balances_TransferAllowDeathCall {
	if x, ok := x.GetCall().(*BalancesPallet_TransferAllowDeathCall); ok {
		return x.TransferAllowDeathCall
	}
	return nil
}

func (x *BalancesPallet) GetForceTransferCall() *Balances_ForceTransferCall {
	if x, ok := x.GetCall().(*BalancesPallet_ForceTransferCall); ok {
		return x.ForceTransferCall
	}
	return nil
}

func (x *BalancesPallet) GetTransferKeepAliveCall() *Balances_TransferKeepAliveCall {
	if x, ok := x.GetCall().(*BalancesPallet_TransferKeepAliveCall); ok {
		return x.TransferKeepAliveCall
	}
	return nil
}

func (x *BalancesPallet) GetTransferAllCall() *Balances_TransferAllCall {
	if x, ok := x.GetCall().(*BalancesPallet_TransferAllCall); ok {
		return x.TransferAllCall
	}
	return nil
}

func (x *BalancesPallet) GetForceUnreserveCall() *Balances_ForceUnreserveCall {
	if x, ok := x.GetCall().(*BalancesPallet_ForceUnreserveCall); ok {
		return x.ForceUnreserveCall
	}
	return nil
}

func (x *BalancesPallet) GetUpgradeAccountsCall() *Balances_UpgradeAccountsCall {
	if x, ok := x.GetCall().(*BalancesPallet_UpgradeAccountsCall); ok {
		return x.UpgradeAccountsCall
	}
	return nil
}

func (x *BalancesPallet) GetForceSetBalanceCall() *Balances_ForceSetBalanceCall {
	if x, ok := x.GetCall().(*BalancesPallet_ForceSetBalanceCall); ok {
		return x.ForceSetBalanceCall
	}
	return nil
}

type isBalancesPallet_Call interface {
	isBalancesPallet_Call()
}

type BalancesPallet_TransferAllowDeathCall struct {
	TransferAllowDeathCall *Balances_TransferAllowDeathCall `protobuf:"bytes,1,opt,name=transfer_allow_death_call,json=transferAllowDeathCall,proto3,oneof"`
}

type BalancesPallet_ForceTransferCall struct {
	ForceTransferCall *Balances_ForceTransferCall `protobuf:"bytes,2,opt,name=force_transfer_call,json=forceTransferCall,proto3,oneof"`
}

type BalancesPallet_TransferKeepAliveCall struct {
	TransferKeepAliveCall *Balances_TransferKeepAliveCall `protobuf:"bytes,3,opt,name=transfer_keep_alive_call,json=transferKeepAliveCall,proto3,oneof"`
}

type BalancesPallet_TransferAllCall struct {
	TransferAllCall *Balances_TransferAllCall `protobuf:"bytes,4,opt,name=transfer_all_call,json=transferAllCall,proto3,oneof"`
}

type BalancesPallet_ForceUnreserveCall struct {
	ForceUnreserveCall *Balances_ForceUnreserveCall `protobuf:"bytes,5,opt,name=force_unreserve_call,json=forceUnreserveCall,proto3,oneof"`
}

type BalancesPallet_UpgradeAccountsCall struct {
	UpgradeAccountsCall *Balances_UpgradeAccountsCall `protobuf:"bytes,6,opt,name=upgrade_accounts_call,json=upgradeAccountsCall,proto3,oneof"`
}

type BalancesPallet_ForceSetBalanceCall struct {
	ForceSetBalanceCall *Balances_ForceSetBalanceCall `protobuf:"bytes,7,opt,name=force_set_balance_call,json=forceSetBalanceCall,proto3,oneof"`
}

func (*BalancesPallet_TransferAllowDeathCall) isBalancesPallet_Call() {}

func (*BalancesPallet_ForceTransferCall) isBalancesPallet_Call() {}

func (*BalancesPallet_TransferKeepAliveCall) isBalancesPallet_Call() {}

func (*BalancesPallet_TransferAllCall) isBalancesPallet_Call() {}

func (*BalancesPallet_ForceUnreserveCall) isBalancesPallet_Call() {}

func (*BalancesPallet_UpgradeAccountsCall) isBalancesPallet_Call() {}

func (*BalancesPallet_ForceSetBalanceCall) isBalancesPallet_Call() {}

type BagsList_Lighter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*BagsList_Lighter_Id
	//	*BagsList_Lighter_Index
	//	*BagsList_Lighter_Raw
	//	*BagsList_Lighter_Address32
	//	*BagsList_Lighter_Address20
	Value isBagsList_Lighter_Value `protobuf_oneof:"value"`
}

func (x *BagsList_Lighter) Reset() {
	*x = BagsList_Lighter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[405]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BagsList_Lighter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BagsList_Lighter) ProtoMessage() {}

func (x *BagsList_Lighter) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[405]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BagsList_Lighter.ProtoReflect.Descriptor instead.
func (*BagsList_Lighter) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{405}
}

func (m *BagsList_Lighter) GetValue() isBagsList_Lighter_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *BagsList_Lighter) GetId() *BagsList_Id {
	if x, ok := x.GetValue().(*BagsList_Lighter_Id); ok {
		return x.Id
	}
	return nil
}

func (x *BagsList_Lighter) GetIndex() *BagsList_Index {
	if x, ok := x.GetValue().(*BagsList_Lighter_Index); ok {
		return x.Index
	}
	return nil
}

func (x *BagsList_Lighter) GetRaw() *BagsList_Raw {
	if x, ok := x.GetValue().(*BagsList_Lighter_Raw); ok {
		return x.Raw
	}
	return nil
}

func (x *BagsList_Lighter) GetAddress32() *BagsList_Address32 {
	if x, ok := x.GetValue().(*BagsList_Lighter_Address32); ok {
		return x.Address32
	}
	return nil
}

func (x *BagsList_Lighter) GetAddress20() *BagsList_Address20 {
	if x, ok := x.GetValue().(*BagsList_Lighter_Address20); ok {
		return x.Address20
	}
	return nil
}

type isBagsList_Lighter_Value interface {
	isBagsList_Lighter_Value()
}

type BagsList_Lighter_Id struct {
	Id *BagsList_Id `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type BagsList_Lighter_Index struct {
	Index *BagsList_Index `protobuf:"bytes,2,opt,name=index,proto3,oneof"`
}

type BagsList_Lighter_Raw struct {
	Raw *BagsList_Raw `protobuf:"bytes,3,opt,name=raw,proto3,oneof"`
}

type BagsList_Lighter_Address32 struct {
	Address32 *BagsList_Address32 `protobuf:"bytes,4,opt,name=address32,proto3,oneof"`
}

type BagsList_Lighter_Address20 struct {
	Address20 *BagsList_Address20 `protobuf:"bytes,5,opt,name=address20,proto3,oneof"`
}

func (*BagsList_Lighter_Id) isBagsList_Lighter_Value() {}

func (*BagsList_Lighter_Index) isBagsList_Lighter_Value() {}

func (*BagsList_Lighter_Raw) isBagsList_Lighter_Value() {}

func (*BagsList_Lighter_Address32) isBagsList_Lighter_Value() {}

func (*BagsList_Lighter_Address20) isBagsList_Lighter_Value() {}

type Treasury_Address20 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Treasury_Address20) Reset() {
	*x = Treasury_Address20{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[406]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Treasury_Address20) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Treasury_Address20) ProtoMessage() {}

func (x *Treasury_Address20) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[406]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Treasury_Address20.ProtoReflect.Descriptor instead.
func (*Treasury_Address20) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{406}
}

func (x *Treasury_Address20) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Identity_Legal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*Identity_Legal_None
	//	*Identity_Legal_Raw0
	//	*Identity_Legal_Raw1
	//	*Identity_Legal_Raw2
	//	*Identity_Legal_Raw3
	//	*Identity_Legal_Raw4
	//	*Identity_Legal_Raw5
	//	*Identity_Legal_Raw6
	//	*Identity_Legal_Raw7
	//	*Identity_Legal_Raw8
	//	*Identity_Legal_Raw9
	//	*Identity_Legal_Raw10
	//	*Identity_Legal_Raw11
	//	*Identity_Legal_Raw12
	//	*Identity_Legal_Raw13
	//	*Identity_Legal_Raw14
	//	*Identity_Legal_Raw15
	//	*Identity_Legal_Raw16
	//	*Identity_Legal_Raw17
	//	*Identity_Legal_Raw18
	//	*Identity_Legal_Raw19
	//	*Identity_Legal_Raw20
	//	*Identity_Legal_Raw21
	//	*Identity_Legal_Raw22
	//	*Identity_Legal_Raw23
	//	*Identity_Legal_Raw24
	//	*Identity_Legal_Raw25
	//	*Identity_Legal_Raw26
	//	*Identity_Legal_Raw27
	//	*Identity_Legal_Raw28
	//	*Identity_Legal_Raw29
	//	*Identity_Legal_Raw30
	//	*Identity_Legal_Raw31
	//	*Identity_Legal_Raw32
	//	*Identity_Legal_BlakeTwo256
	//	*Identity_Legal_Sha256
	//	*Identity_Legal_Keccak256
	//	*Identity_Legal_ShaThree256
	Value isIdentity_Legal_Value `protobuf_oneof:"value"`
}

func (x *Identity_Legal) Reset() {
	*x = Identity_Legal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[407]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_Legal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_Legal) ProtoMessage() {}

func (x *Identity_Legal) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[407]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_Legal.ProtoReflect.Descriptor instead.
func (*Identity_Legal) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{407}
}

func (m *Identity_Legal) GetValue() isIdentity_Legal_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Identity_Legal) GetNone() *Identity_None {
	if x, ok := x.GetValue().(*Identity_Legal_None); ok {
		return x.None
	}
	return nil
}

func (x *Identity_Legal) GetRaw0() *Identity_Raw0 {
	if x, ok := x.GetValue().(*Identity_Legal_Raw0); ok {
		return x.Raw0
	}
	return nil
}

func (x *Identity_Legal) GetRaw1() *Identity_Raw1 {
	if x, ok := x.GetValue().(*Identity_Legal_Raw1); ok {
		return x.Raw1
	}
	return nil
}

func (x *Identity_Legal) GetRaw2() *Identity_Raw2 {
	if x, ok := x.GetValue().(*Identity_Legal_Raw2); ok {
		return x.Raw2
	}
	return nil
}

func (x *Identity_Legal) GetRaw3() *Identity_Raw3 {
	if x, ok := x.GetValue().(*Identity_Legal_Raw3); ok {
		return x.Raw3
	}
	return nil
}

func (x *Identity_Legal) GetRaw4() *Identity_Raw4 {
	if x, ok := x.GetValue().(*Identity_Legal_Raw4); ok {
		return x.Raw4
	}
	return nil
}

func (x *Identity_Legal) GetRaw5() *Identity_Raw5 {
	if x, ok := x.GetValue().(*Identity_Legal_Raw5); ok {
		return x.Raw5
	}
	return nil
}

func (x *Identity_Legal) GetRaw6() *Identity_Raw6 {
	if x, ok := x.GetValue().(*Identity_Legal_Raw6); ok {
		return x.Raw6
	}
	return nil
}

func (x *Identity_Legal) GetRaw7() *Identity_Raw7 {
	if x, ok := x.GetValue().(*Identity_Legal_Raw7); ok {
		return x.Raw7
	}
	return nil
}

func (x *Identity_Legal) GetRaw8() *Identity_Raw8 {
	if x, ok := x.GetValue().(*Identity_Legal_Raw8); ok {
		return x.Raw8
	}
	return nil
}

func (x *Identity_Legal) GetRaw9() *Identity_Raw9 {
	if x, ok := x.GetValue().(*Identity_Legal_Raw9); ok {
		return x.Raw9
	}
	return nil
}

func (x *Identity_Legal) GetRaw10() *Identity_Raw10 {
	if x, ok := x.GetValue().(*Identity_Legal_Raw10); ok {
		return x.Raw10
	}
	return nil
}

func (x *Identity_Legal) GetRaw11() *Identity_Raw11 {
	if x, ok := x.GetValue().(*Identity_Legal_Raw11); ok {
		return x.Raw11
	}
	return nil
}

func (x *Identity_Legal) GetRaw12() *Identity_Raw12 {
	if x, ok := x.GetValue().(*Identity_Legal_Raw12); ok {
		return x.Raw12
	}
	return nil
}

func (x *Identity_Legal) GetRaw13() *Identity_Raw13 {
	if x, ok := x.GetValue().(*Identity_Legal_Raw13); ok {
		return x.Raw13
	}
	return nil
}

func (x *Identity_Legal) GetRaw14() *Identity_Raw14 {
	if x, ok := x.GetValue().(*Identity_Legal_Raw14); ok {
		return x.Raw14
	}
	return nil
}

func (x *Identity_Legal) GetRaw15() *Identity_Raw15 {
	if x, ok := x.GetValue().(*Identity_Legal_Raw15); ok {
		return x.Raw15
	}
	return nil
}

func (x *Identity_Legal) GetRaw16() *Identity_Raw16 {
	if x, ok := x.GetValue().(*Identity_Legal_Raw16); ok {
		return x.Raw16
	}
	return nil
}

func (x *Identity_Legal) GetRaw17() *Identity_Raw17 {
	if x, ok := x.GetValue().(*Identity_Legal_Raw17); ok {
		return x.Raw17
	}
	return nil
}

func (x *Identity_Legal) GetRaw18() *Identity_Raw18 {
	if x, ok := x.GetValue().(*Identity_Legal_Raw18); ok {
		return x.Raw18
	}
	return nil
}

func (x *Identity_Legal) GetRaw19() *Identity_Raw19 {
	if x, ok := x.GetValue().(*Identity_Legal_Raw19); ok {
		return x.Raw19
	}
	return nil
}

func (x *Identity_Legal) GetRaw20() *Identity_Raw20 {
	if x, ok := x.GetValue().(*Identity_Legal_Raw20); ok {
		return x.Raw20
	}
	return nil
}

func (x *Identity_Legal) GetRaw21() *Identity_Raw21 {
	if x, ok := x.GetValue().(*Identity_Legal_Raw21); ok {
		return x.Raw21
	}
	return nil
}

func (x *Identity_Legal) GetRaw22() *Identity_Raw22 {
	if x, ok := x.GetValue().(*Identity_Legal_Raw22); ok {
		return x.Raw22
	}
	return nil
}

func (x *Identity_Legal) GetRaw23() *Identity_Raw23 {
	if x, ok := x.GetValue().(*Identity_Legal_Raw23); ok {
		return x.Raw23
	}
	return nil
}

func (x *Identity_Legal) GetRaw24() *Identity_Raw24 {
	if x, ok := x.GetValue().(*Identity_Legal_Raw24); ok {
		return x.Raw24
	}
	return nil
}

func (x *Identity_Legal) GetRaw25() *Identity_Raw25 {
	if x, ok := x.GetValue().(*Identity_Legal_Raw25); ok {
		return x.Raw25
	}
	return nil
}

func (x *Identity_Legal) GetRaw26() *Identity_Raw26 {
	if x, ok := x.GetValue().(*Identity_Legal_Raw26); ok {
		return x.Raw26
	}
	return nil
}

func (x *Identity_Legal) GetRaw27() *Identity_Raw27 {
	if x, ok := x.GetValue().(*Identity_Legal_Raw27); ok {
		return x.Raw27
	}
	return nil
}

func (x *Identity_Legal) GetRaw28() *Identity_Raw28 {
	if x, ok := x.GetValue().(*Identity_Legal_Raw28); ok {
		return x.Raw28
	}
	return nil
}

func (x *Identity_Legal) GetRaw29() *Identity_Raw29 {
	if x, ok := x.GetValue().(*Identity_Legal_Raw29); ok {
		return x.Raw29
	}
	return nil
}

func (x *Identity_Legal) GetRaw30() *Identity_Raw30 {
	if x, ok := x.GetValue().(*Identity_Legal_Raw30); ok {
		return x.Raw30
	}
	return nil
}

func (x *Identity_Legal) GetRaw31() *Identity_Raw31 {
	if x, ok := x.GetValue().(*Identity_Legal_Raw31); ok {
		return x.Raw31
	}
	return nil
}

func (x *Identity_Legal) GetRaw32() *Identity_Raw32 {
	if x, ok := x.GetValue().(*Identity_Legal_Raw32); ok {
		return x.Raw32
	}
	return nil
}

func (x *Identity_Legal) GetBlakeTwo256() *Identity_BlakeTwo256 {
	if x, ok := x.GetValue().(*Identity_Legal_BlakeTwo256); ok {
		return x.BlakeTwo256
	}
	return nil
}

func (x *Identity_Legal) GetSha256() *Identity_Sha256 {
	if x, ok := x.GetValue().(*Identity_Legal_Sha256); ok {
		return x.Sha256
	}
	return nil
}

func (x *Identity_Legal) GetKeccak256() *Identity_Keccak256 {
	if x, ok := x.GetValue().(*Identity_Legal_Keccak256); ok {
		return x.Keccak256
	}
	return nil
}

func (x *Identity_Legal) GetShaThree256() *Identity_ShaThree256 {
	if x, ok := x.GetValue().(*Identity_Legal_ShaThree256); ok {
		return x.ShaThree256
	}
	return nil
}

type isIdentity_Legal_Value interface {
	isIdentity_Legal_Value()
}

type Identity_Legal_None struct {
	None *Identity_None `protobuf:"bytes,1,opt,name=none,proto3,oneof"`
}

type Identity_Legal_Raw0 struct {
	Raw0 *Identity_Raw0 `protobuf:"bytes,2,opt,name=raw0,proto3,oneof"`
}

type Identity_Legal_Raw1 struct {
	Raw1 *Identity_Raw1 `protobuf:"bytes,3,opt,name=raw1,proto3,oneof"`
}

type Identity_Legal_Raw2 struct {
	Raw2 *Identity_Raw2 `protobuf:"bytes,4,opt,name=raw2,proto3,oneof"`
}

type Identity_Legal_Raw3 struct {
	Raw3 *Identity_Raw3 `protobuf:"bytes,5,opt,name=raw3,proto3,oneof"`
}

type Identity_Legal_Raw4 struct {
	Raw4 *Identity_Raw4 `protobuf:"bytes,6,opt,name=raw4,proto3,oneof"`
}

type Identity_Legal_Raw5 struct {
	Raw5 *Identity_Raw5 `protobuf:"bytes,7,opt,name=raw5,proto3,oneof"`
}

type Identity_Legal_Raw6 struct {
	Raw6 *Identity_Raw6 `protobuf:"bytes,8,opt,name=raw6,proto3,oneof"`
}

type Identity_Legal_Raw7 struct {
	Raw7 *Identity_Raw7 `protobuf:"bytes,9,opt,name=raw7,proto3,oneof"`
}

type Identity_Legal_Raw8 struct {
	Raw8 *Identity_Raw8 `protobuf:"bytes,10,opt,name=raw8,proto3,oneof"`
}

type Identity_Legal_Raw9 struct {
	Raw9 *Identity_Raw9 `protobuf:"bytes,11,opt,name=raw9,proto3,oneof"`
}

type Identity_Legal_Raw10 struct {
	Raw10 *Identity_Raw10 `protobuf:"bytes,12,opt,name=raw10,proto3,oneof"`
}

type Identity_Legal_Raw11 struct {
	Raw11 *Identity_Raw11 `protobuf:"bytes,13,opt,name=raw11,proto3,oneof"`
}

type Identity_Legal_Raw12 struct {
	Raw12 *Identity_Raw12 `protobuf:"bytes,14,opt,name=raw12,proto3,oneof"`
}

type Identity_Legal_Raw13 struct {
	Raw13 *Identity_Raw13 `protobuf:"bytes,15,opt,name=raw13,proto3,oneof"`
}

type Identity_Legal_Raw14 struct {
	Raw14 *Identity_Raw14 `protobuf:"bytes,16,opt,name=raw14,proto3,oneof"`
}

type Identity_Legal_Raw15 struct {
	Raw15 *Identity_Raw15 `protobuf:"bytes,17,opt,name=raw15,proto3,oneof"`
}

type Identity_Legal_Raw16 struct {
	Raw16 *Identity_Raw16 `protobuf:"bytes,18,opt,name=raw16,proto3,oneof"`
}

type Identity_Legal_Raw17 struct {
	Raw17 *Identity_Raw17 `protobuf:"bytes,19,opt,name=raw17,proto3,oneof"`
}

type Identity_Legal_Raw18 struct {
	Raw18 *Identity_Raw18 `protobuf:"bytes,20,opt,name=raw18,proto3,oneof"`
}

type Identity_Legal_Raw19 struct {
	Raw19 *Identity_Raw19 `protobuf:"bytes,21,opt,name=raw19,proto3,oneof"`
}

type Identity_Legal_Raw20 struct {
	Raw20 *Identity_Raw20 `protobuf:"bytes,22,opt,name=raw20,proto3,oneof"`
}

type Identity_Legal_Raw21 struct {
	Raw21 *Identity_Raw21 `protobuf:"bytes,23,opt,name=raw21,proto3,oneof"`
}

type Identity_Legal_Raw22 struct {
	Raw22 *Identity_Raw22 `protobuf:"bytes,24,opt,name=raw22,proto3,oneof"`
}

type Identity_Legal_Raw23 struct {
	Raw23 *Identity_Raw23 `protobuf:"bytes,25,opt,name=raw23,proto3,oneof"`
}

type Identity_Legal_Raw24 struct {
	Raw24 *Identity_Raw24 `protobuf:"bytes,26,opt,name=raw24,proto3,oneof"`
}

type Identity_Legal_Raw25 struct {
	Raw25 *Identity_Raw25 `protobuf:"bytes,27,opt,name=raw25,proto3,oneof"`
}

type Identity_Legal_Raw26 struct {
	Raw26 *Identity_Raw26 `protobuf:"bytes,28,opt,name=raw26,proto3,oneof"`
}

type Identity_Legal_Raw27 struct {
	Raw27 *Identity_Raw27 `protobuf:"bytes,29,opt,name=raw27,proto3,oneof"`
}

type Identity_Legal_Raw28 struct {
	Raw28 *Identity_Raw28 `protobuf:"bytes,30,opt,name=raw28,proto3,oneof"`
}

type Identity_Legal_Raw29 struct {
	Raw29 *Identity_Raw29 `protobuf:"bytes,31,opt,name=raw29,proto3,oneof"`
}

type Identity_Legal_Raw30 struct {
	Raw30 *Identity_Raw30 `protobuf:"bytes,32,opt,name=raw30,proto3,oneof"`
}

type Identity_Legal_Raw31 struct {
	Raw31 *Identity_Raw31 `protobuf:"bytes,33,opt,name=raw31,proto3,oneof"`
}

type Identity_Legal_Raw32 struct {
	Raw32 *Identity_Raw32 `protobuf:"bytes,34,opt,name=raw32,proto3,oneof"`
}

type Identity_Legal_BlakeTwo256 struct {
	BlakeTwo256 *Identity_BlakeTwo256 `protobuf:"bytes,35,opt,name=blake_two256,json=blakeTwo256,proto3,oneof"`
}

type Identity_Legal_Sha256 struct {
	Sha256 *Identity_Sha256 `protobuf:"bytes,36,opt,name=sha256,proto3,oneof"`
}

type Identity_Legal_Keccak256 struct {
	Keccak256 *Identity_Keccak256 `protobuf:"bytes,37,opt,name=keccak256,proto3,oneof"`
}

type Identity_Legal_ShaThree256 struct {
	ShaThree256 *Identity_ShaThree256 `protobuf:"bytes,38,opt,name=sha_three256,json=shaThree256,proto3,oneof"`
}

func (*Identity_Legal_None) isIdentity_Legal_Value() {}

func (*Identity_Legal_Raw0) isIdentity_Legal_Value() {}

func (*Identity_Legal_Raw1) isIdentity_Legal_Value() {}

func (*Identity_Legal_Raw2) isIdentity_Legal_Value() {}

func (*Identity_Legal_Raw3) isIdentity_Legal_Value() {}

func (*Identity_Legal_Raw4) isIdentity_Legal_Value() {}

func (*Identity_Legal_Raw5) isIdentity_Legal_Value() {}

func (*Identity_Legal_Raw6) isIdentity_Legal_Value() {}

func (*Identity_Legal_Raw7) isIdentity_Legal_Value() {}

func (*Identity_Legal_Raw8) isIdentity_Legal_Value() {}

func (*Identity_Legal_Raw9) isIdentity_Legal_Value() {}

func (*Identity_Legal_Raw10) isIdentity_Legal_Value() {}

func (*Identity_Legal_Raw11) isIdentity_Legal_Value() {}

func (*Identity_Legal_Raw12) isIdentity_Legal_Value() {}

func (*Identity_Legal_Raw13) isIdentity_Legal_Value() {}

func (*Identity_Legal_Raw14) isIdentity_Legal_Value() {}

func (*Identity_Legal_Raw15) isIdentity_Legal_Value() {}

func (*Identity_Legal_Raw16) isIdentity_Legal_Value() {}

func (*Identity_Legal_Raw17) isIdentity_Legal_Value() {}

func (*Identity_Legal_Raw18) isIdentity_Legal_Value() {}

func (*Identity_Legal_Raw19) isIdentity_Legal_Value() {}

func (*Identity_Legal_Raw20) isIdentity_Legal_Value() {}

func (*Identity_Legal_Raw21) isIdentity_Legal_Value() {}

func (*Identity_Legal_Raw22) isIdentity_Legal_Value() {}

func (*Identity_Legal_Raw23) isIdentity_Legal_Value() {}

func (*Identity_Legal_Raw24) isIdentity_Legal_Value() {}

func (*Identity_Legal_Raw25) isIdentity_Legal_Value() {}

func (*Identity_Legal_Raw26) isIdentity_Legal_Value() {}

func (*Identity_Legal_Raw27) isIdentity_Legal_Value() {}

func (*Identity_Legal_Raw28) isIdentity_Legal_Value() {}

func (*Identity_Legal_Raw29) isIdentity_Legal_Value() {}

func (*Identity_Legal_Raw30) isIdentity_Legal_Value() {}

func (*Identity_Legal_Raw31) isIdentity_Legal_Value() {}

func (*Identity_Legal_Raw32) isIdentity_Legal_Value() {}

func (*Identity_Legal_BlakeTwo256) isIdentity_Legal_Value() {}

func (*Identity_Legal_Sha256) isIdentity_Legal_Value() {}

func (*Identity_Legal_Keccak256) isIdentity_Legal_Value() {}

func (*Identity_Legal_ShaThree256) isIdentity_Legal_Value() {}

type ConvictionVoting_DelegateCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Class      uint32                       `protobuf:"varint,1,opt,name=class,proto3" json:"class,omitempty"`
	To         *ConvictionVoting_To         `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	Conviction *ConvictionVoting_Conviction `protobuf:"bytes,3,opt,name=conviction,proto3" json:"conviction,omitempty"`
	Balance    string                       `protobuf:"bytes,4,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *ConvictionVoting_DelegateCall) Reset() {
	*x = ConvictionVoting_DelegateCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[408]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConvictionVoting_DelegateCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvictionVoting_DelegateCall) ProtoMessage() {}

func (x *ConvictionVoting_DelegateCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[408]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvictionVoting_DelegateCall.ProtoReflect.Descriptor instead.
func (*ConvictionVoting_DelegateCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{408}
}

func (x *ConvictionVoting_DelegateCall) GetClass() uint32 {
	if x != nil {
		return x.Class
	}
	return 0
}

func (x *ConvictionVoting_DelegateCall) GetTo() *ConvictionVoting_To {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *ConvictionVoting_DelegateCall) GetConviction() *ConvictionVoting_Conviction {
	if x != nil {
		return x.Conviction
	}
	return nil
}

func (x *ConvictionVoting_DelegateCall) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

type FellowshipReferenda_ProposalOrigin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*FellowshipReferenda_ProposalOrigin_System
	//	*FellowshipReferenda_ProposalOrigin_Origins
	//	*FellowshipReferenda_ProposalOrigin_Void
	Value isFellowshipReferenda_ProposalOrigin_Value `protobuf_oneof:"value"`
}

func (x *FellowshipReferenda_ProposalOrigin) Reset() {
	*x = FellowshipReferenda_ProposalOrigin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[409]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FellowshipReferenda_ProposalOrigin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FellowshipReferenda_ProposalOrigin) ProtoMessage() {}

func (x *FellowshipReferenda_ProposalOrigin) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[409]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FellowshipReferenda_ProposalOrigin.ProtoReflect.Descriptor instead.
func (*FellowshipReferenda_ProposalOrigin) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{409}
}

func (m *FellowshipReferenda_ProposalOrigin) GetValue() isFellowshipReferenda_ProposalOrigin_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *FellowshipReferenda_ProposalOrigin) GetSystem() *FellowshipReferenda_System {
	if x, ok := x.GetValue().(*FellowshipReferenda_ProposalOrigin_System); ok {
		return x.System
	}
	return nil
}

func (x *FellowshipReferenda_ProposalOrigin) GetOrigins() *FellowshipReferenda_Origins {
	if x, ok := x.GetValue().(*FellowshipReferenda_ProposalOrigin_Origins); ok {
		return x.Origins
	}
	return nil
}

func (x *FellowshipReferenda_ProposalOrigin) GetVoid() *FellowshipReferenda_Void {
	if x, ok := x.GetValue().(*FellowshipReferenda_ProposalOrigin_Void); ok {
		return x.Void
	}
	return nil
}

type isFellowshipReferenda_ProposalOrigin_Value interface {
	isFellowshipReferenda_ProposalOrigin_Value()
}

type FellowshipReferenda_ProposalOrigin_System struct {
	System *FellowshipReferenda_System `protobuf:"bytes,1,opt,name=system,proto3,oneof"`
}

type FellowshipReferenda_ProposalOrigin_Origins struct {
	Origins *FellowshipReferenda_Origins `protobuf:"bytes,2,opt,name=origins,proto3,oneof"`
}

type FellowshipReferenda_ProposalOrigin_Void struct {
	Void *FellowshipReferenda_Void `protobuf:"bytes,3,opt,name=void,proto3,oneof"`
}

func (*FellowshipReferenda_ProposalOrigin_System) isFellowshipReferenda_ProposalOrigin_Value() {}

func (*FellowshipReferenda_ProposalOrigin_Origins) isFellowshipReferenda_ProposalOrigin_Value() {}

func (*FellowshipReferenda_ProposalOrigin_Void) isFellowshipReferenda_ProposalOrigin_Value() {}

type ChildBounties_Address32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *ChildBounties_Address32) Reset() {
	*x = ChildBounties_Address32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[410]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChildBounties_Address32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChildBounties_Address32) ProtoMessage() {}

func (x *ChildBounties_Address32) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[410]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChildBounties_Address32.ProtoReflect.Descriptor instead.
func (*ChildBounties_Address32) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{410}
}

func (x *ChildBounties_Address32) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Staking_SetMinCommissionCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	New *SpArithmeticPerThingsPerbill `protobuf:"bytes,1,opt,name=new,proto3" json:"new,omitempty"`
}

func (x *Staking_SetMinCommissionCall) Reset() {
	*x = Staking_SetMinCommissionCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[411]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staking_SetMinCommissionCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staking_SetMinCommissionCall) ProtoMessage() {}

func (x *Staking_SetMinCommissionCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[411]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staking_SetMinCommissionCall.ProtoReflect.Descriptor instead.
func (*Staking_SetMinCommissionCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{411}
}

func (x *Staking_SetMinCommissionCall) GetNew() *SpArithmeticPerThingsPerbill {
	if x != nil {
		return x.New
	}
	return nil
}

type GearBankPallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GearBankPallet) Reset() {
	*x = GearBankPallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[412]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GearBankPallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GearBankPallet) ProtoMessage() {}

func (x *GearBankPallet) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[412]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GearBankPallet.ProtoReflect.Descriptor instead.
func (*GearBankPallet) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{412}
}

type SystemPallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Call:
	//
	//	*SystemPallet_RemarkCall
	//	*SystemPallet_SetHeapPagesCall
	//	*SystemPallet_SetCodeCall
	//	*SystemPallet_SetCodeWithoutChecksCall
	//	*SystemPallet_SetStorageCall
	//	*SystemPallet_KillStorageCall
	//	*SystemPallet_KillPrefixCall
	//	*SystemPallet_RemarkWithEventCall
	Call isSystemPallet_Call `protobuf_oneof:"call"`
}

func (x *SystemPallet) Reset() {
	*x = SystemPallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[413]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemPallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemPallet) ProtoMessage() {}

func (x *SystemPallet) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[413]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemPallet.ProtoReflect.Descriptor instead.
func (*SystemPallet) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{413}
}

func (m *SystemPallet) GetCall() isSystemPallet_Call {
	if m != nil {
		return m.Call
	}
	return nil
}

func (x *SystemPallet) GetRemarkCall() *System_RemarkCall {
	if x, ok := x.GetCall().(*SystemPallet_RemarkCall); ok {
		return x.RemarkCall
	}
	return nil
}

func (x *SystemPallet) GetSetHeapPagesCall() *System_SetHeapPagesCall {
	if x, ok := x.GetCall().(*SystemPallet_SetHeapPagesCall); ok {
		return x.SetHeapPagesCall
	}
	return nil
}

func (x *SystemPallet) GetSetCodeCall() *System_SetCodeCall {
	if x, ok := x.GetCall().(*SystemPallet_SetCodeCall); ok {
		return x.SetCodeCall
	}
	return nil
}

func (x *SystemPallet) GetSetCodeWithoutChecksCall() *System_SetCodeWithoutChecksCall {
	if x, ok := x.GetCall().(*SystemPallet_SetCodeWithoutChecksCall); ok {
		return x.SetCodeWithoutChecksCall
	}
	return nil
}

func (x *SystemPallet) GetSetStorageCall() *System_SetStorageCall {
	if x, ok := x.GetCall().(*SystemPallet_SetStorageCall); ok {
		return x.SetStorageCall
	}
	return nil
}

func (x *SystemPallet) GetKillStorageCall() *System_KillStorageCall {
	if x, ok := x.GetCall().(*SystemPallet_KillStorageCall); ok {
		return x.KillStorageCall
	}
	return nil
}

func (x *SystemPallet) GetKillPrefixCall() *System_KillPrefixCall {
	if x, ok := x.GetCall().(*SystemPallet_KillPrefixCall); ok {
		return x.KillPrefixCall
	}
	return nil
}

func (x *SystemPallet) GetRemarkWithEventCall() *System_RemarkWithEventCall {
	if x, ok := x.GetCall().(*SystemPallet_RemarkWithEventCall); ok {
		return x.RemarkWithEventCall
	}
	return nil
}

type isSystemPallet_Call interface {
	isSystemPallet_Call()
}

type SystemPallet_RemarkCall struct {
	RemarkCall *System_RemarkCall `protobuf:"bytes,1,opt,name=remark_call,json=remarkCall,proto3,oneof"`
}

type SystemPallet_SetHeapPagesCall struct {
	SetHeapPagesCall *System_SetHeapPagesCall `protobuf:"bytes,2,opt,name=set_heap_pages_call,json=setHeapPagesCall,proto3,oneof"`
}

type SystemPallet_SetCodeCall struct {
	SetCodeCall *System_SetCodeCall `protobuf:"bytes,3,opt,name=set_code_call,json=setCodeCall,proto3,oneof"`
}

type SystemPallet_SetCodeWithoutChecksCall struct {
	SetCodeWithoutChecksCall *System_SetCodeWithoutChecksCall `protobuf:"bytes,4,opt,name=set_code_without_checks_call,json=setCodeWithoutChecksCall,proto3,oneof"`
}

type SystemPallet_SetStorageCall struct {
	SetStorageCall *System_SetStorageCall `protobuf:"bytes,5,opt,name=set_storage_call,json=setStorageCall,proto3,oneof"`
}

type SystemPallet_KillStorageCall struct {
	KillStorageCall *System_KillStorageCall `protobuf:"bytes,6,opt,name=kill_storage_call,json=killStorageCall,proto3,oneof"`
}

type SystemPallet_KillPrefixCall struct {
	KillPrefixCall *System_KillPrefixCall `protobuf:"bytes,7,opt,name=kill_prefix_call,json=killPrefixCall,proto3,oneof"`
}

type SystemPallet_RemarkWithEventCall struct {
	RemarkWithEventCall *System_RemarkWithEventCall `protobuf:"bytes,8,opt,name=remark_with_event_call,json=remarkWithEventCall,proto3,oneof"`
}

func (*SystemPallet_RemarkCall) isSystemPallet_Call() {}

func (*SystemPallet_SetHeapPagesCall) isSystemPallet_Call() {}

func (*SystemPallet_SetCodeCall) isSystemPallet_Call() {}

func (*SystemPallet_SetCodeWithoutChecksCall) isSystemPallet_Call() {}

func (*SystemPallet_SetStorageCall) isSystemPallet_Call() {}

func (*SystemPallet_KillStorageCall) isSystemPallet_Call() {}

func (*SystemPallet_KillPrefixCall) isSystemPallet_Call() {}

func (*SystemPallet_RemarkWithEventCall) isSystemPallet_Call() {}

type BagsList_Address32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *BagsList_Address32) Reset() {
	*x = BagsList_Address32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[414]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BagsList_Address32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BagsList_Address32) ProtoMessage() {}

func (x *BagsList_Address32) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[414]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BagsList_Address32.ProtoReflect.Descriptor instead.
func (*BagsList_Address32) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{414}
}

func (x *BagsList_Address32) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Identity_Raw10 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Identity_Raw10) Reset() {
	*x = Identity_Raw10{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[415]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_Raw10) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_Raw10) ProtoMessage() {}

func (x *Identity_Raw10) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[415]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_Raw10.ProtoReflect.Descriptor instead.
func (*Identity_Raw10) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{415}
}

func (x *Identity_Raw10) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type System_SetStorageCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*System_TupleSystemItemsListSystemItemsList `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *System_SetStorageCall) Reset() {
	*x = System_SetStorageCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[416]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_SetStorageCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_SetStorageCall) ProtoMessage() {}

func (x *System_SetStorageCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[416]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_SetStorageCall.ProtoReflect.Descriptor instead.
func (*System_SetStorageCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{416}
}

func (x *System_SetStorageCall) GetItems() []*System_TupleSystemItemsListSystemItemsList {
	if x != nil {
		return x.Items
	}
	return nil
}

type VaraRuntimeNposSolution16 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Votes1  []*ElectionProviderMultiPhase_TupleUint32Uint32                                       `protobuf:"bytes,1,rep,name=votes1,proto3" json:"votes1,omitempty"`
	Votes2  []*ElectionProviderMultiPhase_TupleUint32TupleUint32SpArithmeticPerThingsPerU16Uint32 `protobuf:"bytes,2,rep,name=votes2,proto3" json:"votes2,omitempty"`
	Votes3  []*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes3Listuint32   `protobuf:"bytes,3,rep,name=votes3,proto3" json:"votes3,omitempty"`
	Votes4  []*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes4Listuint32   `protobuf:"bytes,4,rep,name=votes4,proto3" json:"votes4,omitempty"`
	Votes5  []*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes5Listuint32   `protobuf:"bytes,5,rep,name=votes5,proto3" json:"votes5,omitempty"`
	Votes6  []*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes6Listuint32   `protobuf:"bytes,6,rep,name=votes6,proto3" json:"votes6,omitempty"`
	Votes7  []*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes7Listuint32   `protobuf:"bytes,7,rep,name=votes7,proto3" json:"votes7,omitempty"`
	Votes8  []*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes8Listuint32   `protobuf:"bytes,8,rep,name=votes8,proto3" json:"votes8,omitempty"`
	Votes9  []*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes9Listuint32   `protobuf:"bytes,9,rep,name=votes9,proto3" json:"votes9,omitempty"`
	Votes10 []*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes10Listuint32  `protobuf:"bytes,10,rep,name=votes10,proto3" json:"votes10,omitempty"`
	Votes11 []*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes11Listuint32  `protobuf:"bytes,11,rep,name=votes11,proto3" json:"votes11,omitempty"`
	Votes12 []*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes12Listuint32  `protobuf:"bytes,12,rep,name=votes12,proto3" json:"votes12,omitempty"`
	Votes13 []*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes13Listuint32  `protobuf:"bytes,13,rep,name=votes13,proto3" json:"votes13,omitempty"`
	Votes14 []*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes14Listuint32  `protobuf:"bytes,14,rep,name=votes14,proto3" json:"votes14,omitempty"`
	Votes15 []*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes15Listuint32  `protobuf:"bytes,15,rep,name=votes15,proto3" json:"votes15,omitempty"`
	Votes16 []*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes16Listuint32  `protobuf:"bytes,16,rep,name=votes16,proto3" json:"votes16,omitempty"`
}

func (x *VaraRuntimeNposSolution16) Reset() {
	*x = VaraRuntimeNposSolution16{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[417]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VaraRuntimeNposSolution16) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VaraRuntimeNposSolution16) ProtoMessage() {}

func (x *VaraRuntimeNposSolution16) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[417]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VaraRuntimeNposSolution16.ProtoReflect.Descriptor instead.
func (*VaraRuntimeNposSolution16) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{417}
}

func (x *VaraRuntimeNposSolution16) GetVotes1() []*ElectionProviderMultiPhase_TupleUint32Uint32 {
	if x != nil {
		return x.Votes1
	}
	return nil
}

func (x *VaraRuntimeNposSolution16) GetVotes2() []*ElectionProviderMultiPhase_TupleUint32TupleUint32SpArithmeticPerThingsPerU16Uint32 {
	if x != nil {
		return x.Votes2
	}
	return nil
}

func (x *VaraRuntimeNposSolution16) GetVotes3() []*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes3Listuint32 {
	if x != nil {
		return x.Votes3
	}
	return nil
}

func (x *VaraRuntimeNposSolution16) GetVotes4() []*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes4Listuint32 {
	if x != nil {
		return x.Votes4
	}
	return nil
}

func (x *VaraRuntimeNposSolution16) GetVotes5() []*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes5Listuint32 {
	if x != nil {
		return x.Votes5
	}
	return nil
}

func (x *VaraRuntimeNposSolution16) GetVotes6() []*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes6Listuint32 {
	if x != nil {
		return x.Votes6
	}
	return nil
}

func (x *VaraRuntimeNposSolution16) GetVotes7() []*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes7Listuint32 {
	if x != nil {
		return x.Votes7
	}
	return nil
}

func (x *VaraRuntimeNposSolution16) GetVotes8() []*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes8Listuint32 {
	if x != nil {
		return x.Votes8
	}
	return nil
}

func (x *VaraRuntimeNposSolution16) GetVotes9() []*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes9Listuint32 {
	if x != nil {
		return x.Votes9
	}
	return nil
}

func (x *VaraRuntimeNposSolution16) GetVotes10() []*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes10Listuint32 {
	if x != nil {
		return x.Votes10
	}
	return nil
}

func (x *VaraRuntimeNposSolution16) GetVotes11() []*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes11Listuint32 {
	if x != nil {
		return x.Votes11
	}
	return nil
}

func (x *VaraRuntimeNposSolution16) GetVotes12() []*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes12Listuint32 {
	if x != nil {
		return x.Votes12
	}
	return nil
}

func (x *VaraRuntimeNposSolution16) GetVotes13() []*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes13Listuint32 {
	if x != nil {
		return x.Votes13
	}
	return nil
}

func (x *VaraRuntimeNposSolution16) GetVotes14() []*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes14Listuint32 {
	if x != nil {
		return x.Votes14
	}
	return nil
}

func (x *VaraRuntimeNposSolution16) GetVotes15() []*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes15Listuint32 {
	if x != nil {
		return x.Votes15
	}
	return nil
}

func (x *VaraRuntimeNposSolution16) GetVotes16() []*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes16Listuint32 {
	if x != nil {
		return x.Votes16
	}
	return nil
}

type Bounties_AwardBountyCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BountyId    uint32                `protobuf:"varint,1,opt,name=bounty_id,json=bountyId,proto3" json:"bounty_id,omitempty"`
	Beneficiary *Bounties_Beneficiary `protobuf:"bytes,2,opt,name=beneficiary,proto3" json:"beneficiary,omitempty"`
}

func (x *Bounties_AwardBountyCall) Reset() {
	*x = Bounties_AwardBountyCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[418]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bounties_AwardBountyCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bounties_AwardBountyCall) ProtoMessage() {}

func (x *Bounties_AwardBountyCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[418]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bounties_AwardBountyCall.ProtoReflect.Descriptor instead.
func (*Bounties_AwardBountyCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{418}
}

func (x *Bounties_AwardBountyCall) GetBountyId() uint32 {
	if x != nil {
		return x.BountyId
	}
	return 0
}

func (x *Bounties_AwardBountyCall) GetBeneficiary() *Bounties_Beneficiary {
	if x != nil {
		return x.Beneficiary
	}
	return nil
}

type NominationPools_Rewards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NominationPools_Rewards) Reset() {
	*x = NominationPools_Rewards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[419]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NominationPools_Rewards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NominationPools_Rewards) ProtoMessage() {}

func (x *NominationPools_Rewards) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[419]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NominationPools_Rewards.ProtoReflect.Descriptor instead.
func (*NominationPools_Rewards) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{419}
}

type Identity_Web struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*Identity_Web_None
	//	*Identity_Web_Raw0
	//	*Identity_Web_Raw1
	//	*Identity_Web_Raw2
	//	*Identity_Web_Raw3
	//	*Identity_Web_Raw4
	//	*Identity_Web_Raw5
	//	*Identity_Web_Raw6
	//	*Identity_Web_Raw7
	//	*Identity_Web_Raw8
	//	*Identity_Web_Raw9
	//	*Identity_Web_Raw10
	//	*Identity_Web_Raw11
	//	*Identity_Web_Raw12
	//	*Identity_Web_Raw13
	//	*Identity_Web_Raw14
	//	*Identity_Web_Raw15
	//	*Identity_Web_Raw16
	//	*Identity_Web_Raw17
	//	*Identity_Web_Raw18
	//	*Identity_Web_Raw19
	//	*Identity_Web_Raw20
	//	*Identity_Web_Raw21
	//	*Identity_Web_Raw22
	//	*Identity_Web_Raw23
	//	*Identity_Web_Raw24
	//	*Identity_Web_Raw25
	//	*Identity_Web_Raw26
	//	*Identity_Web_Raw27
	//	*Identity_Web_Raw28
	//	*Identity_Web_Raw29
	//	*Identity_Web_Raw30
	//	*Identity_Web_Raw31
	//	*Identity_Web_Raw32
	//	*Identity_Web_BlakeTwo256
	//	*Identity_Web_Sha256
	//	*Identity_Web_Keccak256
	//	*Identity_Web_ShaThree256
	Value isIdentity_Web_Value `protobuf_oneof:"value"`
}

func (x *Identity_Web) Reset() {
	*x = Identity_Web{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[420]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_Web) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_Web) ProtoMessage() {}

func (x *Identity_Web) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[420]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_Web.ProtoReflect.Descriptor instead.
func (*Identity_Web) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{420}
}

func (m *Identity_Web) GetValue() isIdentity_Web_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Identity_Web) GetNone() *Identity_None {
	if x, ok := x.GetValue().(*Identity_Web_None); ok {
		return x.None
	}
	return nil
}

func (x *Identity_Web) GetRaw0() *Identity_Raw0 {
	if x, ok := x.GetValue().(*Identity_Web_Raw0); ok {
		return x.Raw0
	}
	return nil
}

func (x *Identity_Web) GetRaw1() *Identity_Raw1 {
	if x, ok := x.GetValue().(*Identity_Web_Raw1); ok {
		return x.Raw1
	}
	return nil
}

func (x *Identity_Web) GetRaw2() *Identity_Raw2 {
	if x, ok := x.GetValue().(*Identity_Web_Raw2); ok {
		return x.Raw2
	}
	return nil
}

func (x *Identity_Web) GetRaw3() *Identity_Raw3 {
	if x, ok := x.GetValue().(*Identity_Web_Raw3); ok {
		return x.Raw3
	}
	return nil
}

func (x *Identity_Web) GetRaw4() *Identity_Raw4 {
	if x, ok := x.GetValue().(*Identity_Web_Raw4); ok {
		return x.Raw4
	}
	return nil
}

func (x *Identity_Web) GetRaw5() *Identity_Raw5 {
	if x, ok := x.GetValue().(*Identity_Web_Raw5); ok {
		return x.Raw5
	}
	return nil
}

func (x *Identity_Web) GetRaw6() *Identity_Raw6 {
	if x, ok := x.GetValue().(*Identity_Web_Raw6); ok {
		return x.Raw6
	}
	return nil
}

func (x *Identity_Web) GetRaw7() *Identity_Raw7 {
	if x, ok := x.GetValue().(*Identity_Web_Raw7); ok {
		return x.Raw7
	}
	return nil
}

func (x *Identity_Web) GetRaw8() *Identity_Raw8 {
	if x, ok := x.GetValue().(*Identity_Web_Raw8); ok {
		return x.Raw8
	}
	return nil
}

func (x *Identity_Web) GetRaw9() *Identity_Raw9 {
	if x, ok := x.GetValue().(*Identity_Web_Raw9); ok {
		return x.Raw9
	}
	return nil
}

func (x *Identity_Web) GetRaw10() *Identity_Raw10 {
	if x, ok := x.GetValue().(*Identity_Web_Raw10); ok {
		return x.Raw10
	}
	return nil
}

func (x *Identity_Web) GetRaw11() *Identity_Raw11 {
	if x, ok := x.GetValue().(*Identity_Web_Raw11); ok {
		return x.Raw11
	}
	return nil
}

func (x *Identity_Web) GetRaw12() *Identity_Raw12 {
	if x, ok := x.GetValue().(*Identity_Web_Raw12); ok {
		return x.Raw12
	}
	return nil
}

func (x *Identity_Web) GetRaw13() *Identity_Raw13 {
	if x, ok := x.GetValue().(*Identity_Web_Raw13); ok {
		return x.Raw13
	}
	return nil
}

func (x *Identity_Web) GetRaw14() *Identity_Raw14 {
	if x, ok := x.GetValue().(*Identity_Web_Raw14); ok {
		return x.Raw14
	}
	return nil
}

func (x *Identity_Web) GetRaw15() *Identity_Raw15 {
	if x, ok := x.GetValue().(*Identity_Web_Raw15); ok {
		return x.Raw15
	}
	return nil
}

func (x *Identity_Web) GetRaw16() *Identity_Raw16 {
	if x, ok := x.GetValue().(*Identity_Web_Raw16); ok {
		return x.Raw16
	}
	return nil
}

func (x *Identity_Web) GetRaw17() *Identity_Raw17 {
	if x, ok := x.GetValue().(*Identity_Web_Raw17); ok {
		return x.Raw17
	}
	return nil
}

func (x *Identity_Web) GetRaw18() *Identity_Raw18 {
	if x, ok := x.GetValue().(*Identity_Web_Raw18); ok {
		return x.Raw18
	}
	return nil
}

func (x *Identity_Web) GetRaw19() *Identity_Raw19 {
	if x, ok := x.GetValue().(*Identity_Web_Raw19); ok {
		return x.Raw19
	}
	return nil
}

func (x *Identity_Web) GetRaw20() *Identity_Raw20 {
	if x, ok := x.GetValue().(*Identity_Web_Raw20); ok {
		return x.Raw20
	}
	return nil
}

func (x *Identity_Web) GetRaw21() *Identity_Raw21 {
	if x, ok := x.GetValue().(*Identity_Web_Raw21); ok {
		return x.Raw21
	}
	return nil
}

func (x *Identity_Web) GetRaw22() *Identity_Raw22 {
	if x, ok := x.GetValue().(*Identity_Web_Raw22); ok {
		return x.Raw22
	}
	return nil
}

func (x *Identity_Web) GetRaw23() *Identity_Raw23 {
	if x, ok := x.GetValue().(*Identity_Web_Raw23); ok {
		return x.Raw23
	}
	return nil
}

func (x *Identity_Web) GetRaw24() *Identity_Raw24 {
	if x, ok := x.GetValue().(*Identity_Web_Raw24); ok {
		return x.Raw24
	}
	return nil
}

func (x *Identity_Web) GetRaw25() *Identity_Raw25 {
	if x, ok := x.GetValue().(*Identity_Web_Raw25); ok {
		return x.Raw25
	}
	return nil
}

func (x *Identity_Web) GetRaw26() *Identity_Raw26 {
	if x, ok := x.GetValue().(*Identity_Web_Raw26); ok {
		return x.Raw26
	}
	return nil
}

func (x *Identity_Web) GetRaw27() *Identity_Raw27 {
	if x, ok := x.GetValue().(*Identity_Web_Raw27); ok {
		return x.Raw27
	}
	return nil
}

func (x *Identity_Web) GetRaw28() *Identity_Raw28 {
	if x, ok := x.GetValue().(*Identity_Web_Raw28); ok {
		return x.Raw28
	}
	return nil
}

func (x *Identity_Web) GetRaw29() *Identity_Raw29 {
	if x, ok := x.GetValue().(*Identity_Web_Raw29); ok {
		return x.Raw29
	}
	return nil
}

func (x *Identity_Web) GetRaw30() *Identity_Raw30 {
	if x, ok := x.GetValue().(*Identity_Web_Raw30); ok {
		return x.Raw30
	}
	return nil
}

func (x *Identity_Web) GetRaw31() *Identity_Raw31 {
	if x, ok := x.GetValue().(*Identity_Web_Raw31); ok {
		return x.Raw31
	}
	return nil
}

func (x *Identity_Web) GetRaw32() *Identity_Raw32 {
	if x, ok := x.GetValue().(*Identity_Web_Raw32); ok {
		return x.Raw32
	}
	return nil
}

func (x *Identity_Web) GetBlakeTwo256() *Identity_BlakeTwo256 {
	if x, ok := x.GetValue().(*Identity_Web_BlakeTwo256); ok {
		return x.BlakeTwo256
	}
	return nil
}

func (x *Identity_Web) GetSha256() *Identity_Sha256 {
	if x, ok := x.GetValue().(*Identity_Web_Sha256); ok {
		return x.Sha256
	}
	return nil
}

func (x *Identity_Web) GetKeccak256() *Identity_Keccak256 {
	if x, ok := x.GetValue().(*Identity_Web_Keccak256); ok {
		return x.Keccak256
	}
	return nil
}

func (x *Identity_Web) GetShaThree256() *Identity_ShaThree256 {
	if x, ok := x.GetValue().(*Identity_Web_ShaThree256); ok {
		return x.ShaThree256
	}
	return nil
}

type isIdentity_Web_Value interface {
	isIdentity_Web_Value()
}

type Identity_Web_None struct {
	None *Identity_None `protobuf:"bytes,1,opt,name=none,proto3,oneof"`
}

type Identity_Web_Raw0 struct {
	Raw0 *Identity_Raw0 `protobuf:"bytes,2,opt,name=raw0,proto3,oneof"`
}

type Identity_Web_Raw1 struct {
	Raw1 *Identity_Raw1 `protobuf:"bytes,3,opt,name=raw1,proto3,oneof"`
}

type Identity_Web_Raw2 struct {
	Raw2 *Identity_Raw2 `protobuf:"bytes,4,opt,name=raw2,proto3,oneof"`
}

type Identity_Web_Raw3 struct {
	Raw3 *Identity_Raw3 `protobuf:"bytes,5,opt,name=raw3,proto3,oneof"`
}

type Identity_Web_Raw4 struct {
	Raw4 *Identity_Raw4 `protobuf:"bytes,6,opt,name=raw4,proto3,oneof"`
}

type Identity_Web_Raw5 struct {
	Raw5 *Identity_Raw5 `protobuf:"bytes,7,opt,name=raw5,proto3,oneof"`
}

type Identity_Web_Raw6 struct {
	Raw6 *Identity_Raw6 `protobuf:"bytes,8,opt,name=raw6,proto3,oneof"`
}

type Identity_Web_Raw7 struct {
	Raw7 *Identity_Raw7 `protobuf:"bytes,9,opt,name=raw7,proto3,oneof"`
}

type Identity_Web_Raw8 struct {
	Raw8 *Identity_Raw8 `protobuf:"bytes,10,opt,name=raw8,proto3,oneof"`
}

type Identity_Web_Raw9 struct {
	Raw9 *Identity_Raw9 `protobuf:"bytes,11,opt,name=raw9,proto3,oneof"`
}

type Identity_Web_Raw10 struct {
	Raw10 *Identity_Raw10 `protobuf:"bytes,12,opt,name=raw10,proto3,oneof"`
}

type Identity_Web_Raw11 struct {
	Raw11 *Identity_Raw11 `protobuf:"bytes,13,opt,name=raw11,proto3,oneof"`
}

type Identity_Web_Raw12 struct {
	Raw12 *Identity_Raw12 `protobuf:"bytes,14,opt,name=raw12,proto3,oneof"`
}

type Identity_Web_Raw13 struct {
	Raw13 *Identity_Raw13 `protobuf:"bytes,15,opt,name=raw13,proto3,oneof"`
}

type Identity_Web_Raw14 struct {
	Raw14 *Identity_Raw14 `protobuf:"bytes,16,opt,name=raw14,proto3,oneof"`
}

type Identity_Web_Raw15 struct {
	Raw15 *Identity_Raw15 `protobuf:"bytes,17,opt,name=raw15,proto3,oneof"`
}

type Identity_Web_Raw16 struct {
	Raw16 *Identity_Raw16 `protobuf:"bytes,18,opt,name=raw16,proto3,oneof"`
}

type Identity_Web_Raw17 struct {
	Raw17 *Identity_Raw17 `protobuf:"bytes,19,opt,name=raw17,proto3,oneof"`
}

type Identity_Web_Raw18 struct {
	Raw18 *Identity_Raw18 `protobuf:"bytes,20,opt,name=raw18,proto3,oneof"`
}

type Identity_Web_Raw19 struct {
	Raw19 *Identity_Raw19 `protobuf:"bytes,21,opt,name=raw19,proto3,oneof"`
}

type Identity_Web_Raw20 struct {
	Raw20 *Identity_Raw20 `protobuf:"bytes,22,opt,name=raw20,proto3,oneof"`
}

type Identity_Web_Raw21 struct {
	Raw21 *Identity_Raw21 `protobuf:"bytes,23,opt,name=raw21,proto3,oneof"`
}

type Identity_Web_Raw22 struct {
	Raw22 *Identity_Raw22 `protobuf:"bytes,24,opt,name=raw22,proto3,oneof"`
}

type Identity_Web_Raw23 struct {
	Raw23 *Identity_Raw23 `protobuf:"bytes,25,opt,name=raw23,proto3,oneof"`
}

type Identity_Web_Raw24 struct {
	Raw24 *Identity_Raw24 `protobuf:"bytes,26,opt,name=raw24,proto3,oneof"`
}

type Identity_Web_Raw25 struct {
	Raw25 *Identity_Raw25 `protobuf:"bytes,27,opt,name=raw25,proto3,oneof"`
}

type Identity_Web_Raw26 struct {
	Raw26 *Identity_Raw26 `protobuf:"bytes,28,opt,name=raw26,proto3,oneof"`
}

type Identity_Web_Raw27 struct {
	Raw27 *Identity_Raw27 `protobuf:"bytes,29,opt,name=raw27,proto3,oneof"`
}

type Identity_Web_Raw28 struct {
	Raw28 *Identity_Raw28 `protobuf:"bytes,30,opt,name=raw28,proto3,oneof"`
}

type Identity_Web_Raw29 struct {
	Raw29 *Identity_Raw29 `protobuf:"bytes,31,opt,name=raw29,proto3,oneof"`
}

type Identity_Web_Raw30 struct {
	Raw30 *Identity_Raw30 `protobuf:"bytes,32,opt,name=raw30,proto3,oneof"`
}

type Identity_Web_Raw31 struct {
	Raw31 *Identity_Raw31 `protobuf:"bytes,33,opt,name=raw31,proto3,oneof"`
}

type Identity_Web_Raw32 struct {
	Raw32 *Identity_Raw32 `protobuf:"bytes,34,opt,name=raw32,proto3,oneof"`
}

type Identity_Web_BlakeTwo256 struct {
	BlakeTwo256 *Identity_BlakeTwo256 `protobuf:"bytes,35,opt,name=blake_two256,json=blakeTwo256,proto3,oneof"`
}

type Identity_Web_Sha256 struct {
	Sha256 *Identity_Sha256 `protobuf:"bytes,36,opt,name=sha256,proto3,oneof"`
}

type Identity_Web_Keccak256 struct {
	Keccak256 *Identity_Keccak256 `protobuf:"bytes,37,opt,name=keccak256,proto3,oneof"`
}

type Identity_Web_ShaThree256 struct {
	ShaThree256 *Identity_ShaThree256 `protobuf:"bytes,38,opt,name=sha_three256,json=shaThree256,proto3,oneof"`
}

func (*Identity_Web_None) isIdentity_Web_Value() {}

func (*Identity_Web_Raw0) isIdentity_Web_Value() {}

func (*Identity_Web_Raw1) isIdentity_Web_Value() {}

func (*Identity_Web_Raw2) isIdentity_Web_Value() {}

func (*Identity_Web_Raw3) isIdentity_Web_Value() {}

func (*Identity_Web_Raw4) isIdentity_Web_Value() {}

func (*Identity_Web_Raw5) isIdentity_Web_Value() {}

func (*Identity_Web_Raw6) isIdentity_Web_Value() {}

func (*Identity_Web_Raw7) isIdentity_Web_Value() {}

func (*Identity_Web_Raw8) isIdentity_Web_Value() {}

func (*Identity_Web_Raw9) isIdentity_Web_Value() {}

func (*Identity_Web_Raw10) isIdentity_Web_Value() {}

func (*Identity_Web_Raw11) isIdentity_Web_Value() {}

func (*Identity_Web_Raw12) isIdentity_Web_Value() {}

func (*Identity_Web_Raw13) isIdentity_Web_Value() {}

func (*Identity_Web_Raw14) isIdentity_Web_Value() {}

func (*Identity_Web_Raw15) isIdentity_Web_Value() {}

func (*Identity_Web_Raw16) isIdentity_Web_Value() {}

func (*Identity_Web_Raw17) isIdentity_Web_Value() {}

func (*Identity_Web_Raw18) isIdentity_Web_Value() {}

func (*Identity_Web_Raw19) isIdentity_Web_Value() {}

func (*Identity_Web_Raw20) isIdentity_Web_Value() {}

func (*Identity_Web_Raw21) isIdentity_Web_Value() {}

func (*Identity_Web_Raw22) isIdentity_Web_Value() {}

func (*Identity_Web_Raw23) isIdentity_Web_Value() {}

func (*Identity_Web_Raw24) isIdentity_Web_Value() {}

func (*Identity_Web_Raw25) isIdentity_Web_Value() {}

func (*Identity_Web_Raw26) isIdentity_Web_Value() {}

func (*Identity_Web_Raw27) isIdentity_Web_Value() {}

func (*Identity_Web_Raw28) isIdentity_Web_Value() {}

func (*Identity_Web_Raw29) isIdentity_Web_Value() {}

func (*Identity_Web_Raw30) isIdentity_Web_Value() {}

func (*Identity_Web_Raw31) isIdentity_Web_Value() {}

func (*Identity_Web_Raw32) isIdentity_Web_Value() {}

func (*Identity_Web_BlakeTwo256) isIdentity_Web_Value() {}

func (*Identity_Web_Sha256) isIdentity_Web_Value() {}

func (*Identity_Web_Keccak256) isIdentity_Web_Value() {}

func (*Identity_Web_ShaThree256) isIdentity_Web_Value() {}

type GearMessengerPallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GearMessengerPallet) Reset() {
	*x = GearMessengerPallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[421]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GearMessengerPallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GearMessengerPallet) ProtoMessage() {}

func (x *GearMessengerPallet) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[421]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GearMessengerPallet.ProtoReflect.Descriptor instead.
func (*GearMessengerPallet) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{421}
}

type Babe_RuntimeEnvironmentUpdated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Babe_RuntimeEnvironmentUpdated) Reset() {
	*x = Babe_RuntimeEnvironmentUpdated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[422]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Babe_RuntimeEnvironmentUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Babe_RuntimeEnvironmentUpdated) ProtoMessage() {}

func (x *Babe_RuntimeEnvironmentUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[422]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Babe_RuntimeEnvironmentUpdated.ProtoReflect.Descriptor instead.
func (*Babe_RuntimeEnvironmentUpdated) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{422}
}

type Staking_CancelDeferredSlashCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Era          uint32   `protobuf:"varint,1,opt,name=era,proto3" json:"era,omitempty"`
	SlashIndices []uint32 `protobuf:"varint,2,rep,packed,name=slash_indices,json=slashIndices,proto3" json:"slash_indices,omitempty"`
}

func (x *Staking_CancelDeferredSlashCall) Reset() {
	*x = Staking_CancelDeferredSlashCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[423]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staking_CancelDeferredSlashCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staking_CancelDeferredSlashCall) ProtoMessage() {}

func (x *Staking_CancelDeferredSlashCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[423]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staking_CancelDeferredSlashCall.ProtoReflect.Descriptor instead.
func (*Staking_CancelDeferredSlashCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{423}
}

func (x *Staking_CancelDeferredSlashCall) GetEra() uint32 {
	if x != nil {
		return x.Era
	}
	return 0
}

func (x *Staking_CancelDeferredSlashCall) GetSlashIndices() []uint32 {
	if x != nil {
		return x.SlashIndices
	}
	return nil
}

type Staking_ChillThreshold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*Staking_ChillThreshold_Noop
	//	*Staking_ChillThreshold_Set
	//	*Staking_ChillThreshold_Remove
	Value isStaking_ChillThreshold_Value `protobuf_oneof:"value"`
}

func (x *Staking_ChillThreshold) Reset() {
	*x = Staking_ChillThreshold{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[424]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staking_ChillThreshold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staking_ChillThreshold) ProtoMessage() {}

func (x *Staking_ChillThreshold) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[424]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staking_ChillThreshold.ProtoReflect.Descriptor instead.
func (*Staking_ChillThreshold) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{424}
}

func (m *Staking_ChillThreshold) GetValue() isStaking_ChillThreshold_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Staking_ChillThreshold) GetNoop() *Staking_Noop {
	if x, ok := x.GetValue().(*Staking_ChillThreshold_Noop); ok {
		return x.Noop
	}
	return nil
}

func (x *Staking_ChillThreshold) GetSet() *Staking_Set {
	if x, ok := x.GetValue().(*Staking_ChillThreshold_Set); ok {
		return x.Set
	}
	return nil
}

func (x *Staking_ChillThreshold) GetRemove() *Staking_Remove {
	if x, ok := x.GetValue().(*Staking_ChillThreshold_Remove); ok {
		return x.Remove
	}
	return nil
}

type isStaking_ChillThreshold_Value interface {
	isStaking_ChillThreshold_Value()
}

type Staking_ChillThreshold_Noop struct {
	Noop *Staking_Noop `protobuf:"bytes,1,opt,name=noop,proto3,oneof"`
}

type Staking_ChillThreshold_Set struct {
	Set *Staking_Set `protobuf:"bytes,2,opt,name=set,proto3,oneof"`
}

type Staking_ChillThreshold_Remove struct {
	Remove *Staking_Remove `protobuf:"bytes,3,opt,name=remove,proto3,oneof"`
}

func (*Staking_ChillThreshold_Noop) isStaking_ChillThreshold_Value() {}

func (*Staking_ChillThreshold_Set) isStaking_ChillThreshold_Value() {}

func (*Staking_ChillThreshold_Remove) isStaking_ChillThreshold_Value() {}

type ElectionProviderMultiPhase_SubmitCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RawSolution *ElectionProviderMultiPhase_PalletElectionProviderMultiPhaseRawSolution `protobuf:"bytes,1,opt,name=raw_solution,json=rawSolution,proto3" json:"raw_solution,omitempty"`
}

func (x *ElectionProviderMultiPhase_SubmitCall) Reset() {
	*x = ElectionProviderMultiPhase_SubmitCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[425]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectionProviderMultiPhase_SubmitCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectionProviderMultiPhase_SubmitCall) ProtoMessage() {}

func (x *ElectionProviderMultiPhase_SubmitCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[425]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectionProviderMultiPhase_SubmitCall.ProtoReflect.Descriptor instead.
func (*ElectionProviderMultiPhase_SubmitCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{425}
}

func (x *ElectionProviderMultiPhase_SubmitCall) GetRawSolution() *ElectionProviderMultiPhase_PalletElectionProviderMultiPhaseRawSolution {
	if x != nil {
		return x.RawSolution
	}
	return nil
}

type GearVoucher_SendReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplyToId *GprimitivesMessageId `protobuf:"bytes,1,opt,name=reply_to_id,json=replyToId,proto3" json:"reply_to_id,omitempty"`
	Payload   []byte                `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	GasLimit  uint64                `protobuf:"varint,3,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	Value     string                `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	KeepAlive bool                  `protobuf:"varint,5,opt,name=keep_alive,json=keepAlive,proto3" json:"keep_alive,omitempty"`
}

func (x *GearVoucher_SendReply) Reset() {
	*x = GearVoucher_SendReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[426]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GearVoucher_SendReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GearVoucher_SendReply) ProtoMessage() {}

func (x *GearVoucher_SendReply) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[426]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GearVoucher_SendReply.ProtoReflect.Descriptor instead.
func (*GearVoucher_SendReply) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{426}
}

func (x *GearVoucher_SendReply) GetReplyToId() *GprimitivesMessageId {
	if x != nil {
		return x.ReplyToId
	}
	return nil
}

func (x *GearVoucher_SendReply) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *GearVoucher_SendReply) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *GearVoucher_SendReply) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *GearVoucher_SendReply) GetKeepAlive() bool {
	if x != nil {
		return x.KeepAlive
	}
	return false
}

type Grandpa_ReportEquivocationUnsignedCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EquivocationProof *SpConsensusGrandpaEquivocationProof `protobuf:"bytes,1,opt,name=equivocation_proof,json=equivocationProof,proto3" json:"equivocation_proof,omitempty"`
	KeyOwnerProof     *SpSessionMembershipProof            `protobuf:"bytes,2,opt,name=key_owner_proof,json=keyOwnerProof,proto3" json:"key_owner_proof,omitempty"`
}

func (x *Grandpa_ReportEquivocationUnsignedCall) Reset() {
	*x = Grandpa_ReportEquivocationUnsignedCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[427]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Grandpa_ReportEquivocationUnsignedCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Grandpa_ReportEquivocationUnsignedCall) ProtoMessage() {}

func (x *Grandpa_ReportEquivocationUnsignedCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[427]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Grandpa_ReportEquivocationUnsignedCall.ProtoReflect.Descriptor instead.
func (*Grandpa_ReportEquivocationUnsignedCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{427}
}

func (x *Grandpa_ReportEquivocationUnsignedCall) GetEquivocationProof() *SpConsensusGrandpaEquivocationProof {
	if x != nil {
		return x.EquivocationProof
	}
	return nil
}

func (x *Grandpa_ReportEquivocationUnsignedCall) GetKeyOwnerProof() *SpSessionMembershipProof {
	if x != nil {
		return x.KeyOwnerProof
	}
	return nil
}

type Treasury_Beneficiary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*Treasury_Beneficiary_Id
	//	*Treasury_Beneficiary_Index
	//	*Treasury_Beneficiary_Raw
	//	*Treasury_Beneficiary_Address32
	//	*Treasury_Beneficiary_Address20
	Value isTreasury_Beneficiary_Value `protobuf_oneof:"value"`
}

func (x *Treasury_Beneficiary) Reset() {
	*x = Treasury_Beneficiary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[428]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Treasury_Beneficiary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Treasury_Beneficiary) ProtoMessage() {}

func (x *Treasury_Beneficiary) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[428]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Treasury_Beneficiary.ProtoReflect.Descriptor instead.
func (*Treasury_Beneficiary) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{428}
}

func (m *Treasury_Beneficiary) GetValue() isTreasury_Beneficiary_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Treasury_Beneficiary) GetId() *Treasury_Id {
	if x, ok := x.GetValue().(*Treasury_Beneficiary_Id); ok {
		return x.Id
	}
	return nil
}

func (x *Treasury_Beneficiary) GetIndex() *Treasury_Index {
	if x, ok := x.GetValue().(*Treasury_Beneficiary_Index); ok {
		return x.Index
	}
	return nil
}

func (x *Treasury_Beneficiary) GetRaw() *Treasury_Raw {
	if x, ok := x.GetValue().(*Treasury_Beneficiary_Raw); ok {
		return x.Raw
	}
	return nil
}

func (x *Treasury_Beneficiary) GetAddress32() *Treasury_Address32 {
	if x, ok := x.GetValue().(*Treasury_Beneficiary_Address32); ok {
		return x.Address32
	}
	return nil
}

func (x *Treasury_Beneficiary) GetAddress20() *Treasury_Address20 {
	if x, ok := x.GetValue().(*Treasury_Beneficiary_Address20); ok {
		return x.Address20
	}
	return nil
}

type isTreasury_Beneficiary_Value interface {
	isTreasury_Beneficiary_Value()
}

type Treasury_Beneficiary_Id struct {
	Id *Treasury_Id `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type Treasury_Beneficiary_Index struct {
	Index *Treasury_Index `protobuf:"bytes,2,opt,name=index,proto3,oneof"`
}

type Treasury_Beneficiary_Raw struct {
	Raw *Treasury_Raw `protobuf:"bytes,3,opt,name=raw,proto3,oneof"`
}

type Treasury_Beneficiary_Address32 struct {
	Address32 *Treasury_Address32 `protobuf:"bytes,4,opt,name=address32,proto3,oneof"`
}

type Treasury_Beneficiary_Address20 struct {
	Address20 *Treasury_Address20 `protobuf:"bytes,5,opt,name=address20,proto3,oneof"`
}

func (*Treasury_Beneficiary_Id) isTreasury_Beneficiary_Value() {}

func (*Treasury_Beneficiary_Index) isTreasury_Beneficiary_Value() {}

func (*Treasury_Beneficiary_Raw) isTreasury_Beneficiary_Value() {}

func (*Treasury_Beneficiary_Address32) isTreasury_Beneficiary_Value() {}

func (*Treasury_Beneficiary_Address20) isTreasury_Beneficiary_Value() {}

type ConvictionVoting_Conviction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*ConvictionVoting_Conviction_None
	//	*ConvictionVoting_Conviction_Locked1X
	//	*ConvictionVoting_Conviction_Locked2X
	//	*ConvictionVoting_Conviction_Locked3X
	//	*ConvictionVoting_Conviction_Locked4X
	//	*ConvictionVoting_Conviction_Locked5X
	//	*ConvictionVoting_Conviction_Locked6X
	Value isConvictionVoting_Conviction_Value `protobuf_oneof:"value"`
}

func (x *ConvictionVoting_Conviction) Reset() {
	*x = ConvictionVoting_Conviction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[429]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConvictionVoting_Conviction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvictionVoting_Conviction) ProtoMessage() {}

func (x *ConvictionVoting_Conviction) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[429]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvictionVoting_Conviction.ProtoReflect.Descriptor instead.
func (*ConvictionVoting_Conviction) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{429}
}

func (m *ConvictionVoting_Conviction) GetValue() isConvictionVoting_Conviction_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *ConvictionVoting_Conviction) GetNone() *ConvictionVoting_None {
	if x, ok := x.GetValue().(*ConvictionVoting_Conviction_None); ok {
		return x.None
	}
	return nil
}

func (x *ConvictionVoting_Conviction) GetLocked1X() *ConvictionVoting_Locked1X {
	if x, ok := x.GetValue().(*ConvictionVoting_Conviction_Locked1X); ok {
		return x.Locked1X
	}
	return nil
}

func (x *ConvictionVoting_Conviction) GetLocked2X() *ConvictionVoting_Locked2X {
	if x, ok := x.GetValue().(*ConvictionVoting_Conviction_Locked2X); ok {
		return x.Locked2X
	}
	return nil
}

func (x *ConvictionVoting_Conviction) GetLocked3X() *ConvictionVoting_Locked3X {
	if x, ok := x.GetValue().(*ConvictionVoting_Conviction_Locked3X); ok {
		return x.Locked3X
	}
	return nil
}

func (x *ConvictionVoting_Conviction) GetLocked4X() *ConvictionVoting_Locked4X {
	if x, ok := x.GetValue().(*ConvictionVoting_Conviction_Locked4X); ok {
		return x.Locked4X
	}
	return nil
}

func (x *ConvictionVoting_Conviction) GetLocked5X() *ConvictionVoting_Locked5X {
	if x, ok := x.GetValue().(*ConvictionVoting_Conviction_Locked5X); ok {
		return x.Locked5X
	}
	return nil
}

func (x *ConvictionVoting_Conviction) GetLocked6X() *ConvictionVoting_Locked6X {
	if x, ok := x.GetValue().(*ConvictionVoting_Conviction_Locked6X); ok {
		return x.Locked6X
	}
	return nil
}

type isConvictionVoting_Conviction_Value interface {
	isConvictionVoting_Conviction_Value()
}

type ConvictionVoting_Conviction_None struct {
	None *ConvictionVoting_None `protobuf:"bytes,1,opt,name=none,proto3,oneof"`
}

type ConvictionVoting_Conviction_Locked1X struct {
	Locked1X *ConvictionVoting_Locked1X `protobuf:"bytes,2,opt,name=locked1x,proto3,oneof"`
}

type ConvictionVoting_Conviction_Locked2X struct {
	Locked2X *ConvictionVoting_Locked2X `protobuf:"bytes,3,opt,name=locked2x,proto3,oneof"`
}

type ConvictionVoting_Conviction_Locked3X struct {
	Locked3X *ConvictionVoting_Locked3X `protobuf:"bytes,4,opt,name=locked3x,proto3,oneof"`
}

type ConvictionVoting_Conviction_Locked4X struct {
	Locked4X *ConvictionVoting_Locked4X `protobuf:"bytes,5,opt,name=locked4x,proto3,oneof"`
}

type ConvictionVoting_Conviction_Locked5X struct {
	Locked5X *ConvictionVoting_Locked5X `protobuf:"bytes,6,opt,name=locked5x,proto3,oneof"`
}

type ConvictionVoting_Conviction_Locked6X struct {
	Locked6X *ConvictionVoting_Locked6X `protobuf:"bytes,7,opt,name=locked6x,proto3,oneof"`
}

func (*ConvictionVoting_Conviction_None) isConvictionVoting_Conviction_Value() {}

func (*ConvictionVoting_Conviction_Locked1X) isConvictionVoting_Conviction_Value() {}

func (*ConvictionVoting_Conviction_Locked2X) isConvictionVoting_Conviction_Value() {}

func (*ConvictionVoting_Conviction_Locked3X) isConvictionVoting_Conviction_Value() {}

func (*ConvictionVoting_Conviction_Locked4X) isConvictionVoting_Conviction_Value() {}

func (*ConvictionVoting_Conviction_Locked5X) isConvictionVoting_Conviction_Value() {}

func (*ConvictionVoting_Conviction_Locked6X) isConvictionVoting_Conviction_Value() {}

type FellowshipReferenda_Proposal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*FellowshipReferenda_Proposal_Legacy
	//	*FellowshipReferenda_Proposal_Inline
	//	*FellowshipReferenda_Proposal_Lookup
	Value isFellowshipReferenda_Proposal_Value `protobuf_oneof:"value"`
}

func (x *FellowshipReferenda_Proposal) Reset() {
	*x = FellowshipReferenda_Proposal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[430]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FellowshipReferenda_Proposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FellowshipReferenda_Proposal) ProtoMessage() {}

func (x *FellowshipReferenda_Proposal) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[430]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FellowshipReferenda_Proposal.ProtoReflect.Descriptor instead.
func (*FellowshipReferenda_Proposal) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{430}
}

func (m *FellowshipReferenda_Proposal) GetValue() isFellowshipReferenda_Proposal_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *FellowshipReferenda_Proposal) GetLegacy() *FellowshipReferenda_Legacy {
	if x, ok := x.GetValue().(*FellowshipReferenda_Proposal_Legacy); ok {
		return x.Legacy
	}
	return nil
}

func (x *FellowshipReferenda_Proposal) GetInline() *FellowshipReferenda_Inline {
	if x, ok := x.GetValue().(*FellowshipReferenda_Proposal_Inline); ok {
		return x.Inline
	}
	return nil
}

func (x *FellowshipReferenda_Proposal) GetLookup() *FellowshipReferenda_Lookup {
	if x, ok := x.GetValue().(*FellowshipReferenda_Proposal_Lookup); ok {
		return x.Lookup
	}
	return nil
}

type isFellowshipReferenda_Proposal_Value interface {
	isFellowshipReferenda_Proposal_Value()
}

type FellowshipReferenda_Proposal_Legacy struct {
	Legacy *FellowshipReferenda_Legacy `protobuf:"bytes,1,opt,name=legacy,proto3,oneof"`
}

type FellowshipReferenda_Proposal_Inline struct {
	Inline *FellowshipReferenda_Inline `protobuf:"bytes,2,opt,name=inline,proto3,oneof"`
}

type FellowshipReferenda_Proposal_Lookup struct {
	Lookup *FellowshipReferenda_Lookup `protobuf:"bytes,3,opt,name=lookup,proto3,oneof"`
}

func (*FellowshipReferenda_Proposal_Legacy) isFellowshipReferenda_Proposal_Value() {}

func (*FellowshipReferenda_Proposal_Inline) isFellowshipReferenda_Proposal_Value() {}

func (*FellowshipReferenda_Proposal_Lookup) isFellowshipReferenda_Proposal_Value() {}

type ElectionProviderMultiPhase_SetEmergencyElectionResultCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Supports []*ElectionProviderMultiPhase_TupleSpCoreCryptoAccountId32SpNposElectionsSupport `protobuf:"bytes,1,rep,name=supports,proto3" json:"supports,omitempty"`
}

func (x *ElectionProviderMultiPhase_SetEmergencyElectionResultCall) Reset() {
	*x = ElectionProviderMultiPhase_SetEmergencyElectionResultCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[431]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectionProviderMultiPhase_SetEmergencyElectionResultCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectionProviderMultiPhase_SetEmergencyElectionResultCall) ProtoMessage() {}

func (x *ElectionProviderMultiPhase_SetEmergencyElectionResultCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[431]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectionProviderMultiPhase_SetEmergencyElectionResultCall.ProtoReflect.Descriptor instead.
func (*ElectionProviderMultiPhase_SetEmergencyElectionResultCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{431}
}

func (x *ElectionProviderMultiPhase_SetEmergencyElectionResultCall) GetSupports() []*ElectionProviderMultiPhase_TupleSpCoreCryptoAccountId32SpNposElectionsSupport {
	if x != nil {
		return x.Supports
	}
	return nil
}

type Grandpa_Precommit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 *FinalityGrandpaEquivocation `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Grandpa_Precommit) Reset() {
	*x = Grandpa_Precommit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[432]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Grandpa_Precommit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Grandpa_Precommit) ProtoMessage() {}

func (x *Grandpa_Precommit) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[432]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Grandpa_Precommit.ProtoReflect.Descriptor instead.
func (*Grandpa_Precommit) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{432}
}

func (x *Grandpa_Precommit) GetValue0() *FinalityGrandpaEquivocation {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Identity_Raw1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Identity_Raw1) Reset() {
	*x = Identity_Raw1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[433]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_Raw1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_Raw1) ProtoMessage() {}

func (x *Identity_Raw1) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[433]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_Raw1.ProtoReflect.Descriptor instead.
func (*Identity_Raw1) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{433}
}

func (x *Identity_Raw1) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type ProxyPallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Call:
	//
	//	*ProxyPallet_ProxyCall
	//	*ProxyPallet_AddProxyCall
	//	*ProxyPallet_RemoveProxyCall
	//	*ProxyPallet_RemoveProxiesCall
	//	*ProxyPallet_CreatePureCall
	//	*ProxyPallet_KillPureCall
	//	*ProxyPallet_AnnounceCall
	//	*ProxyPallet_RemoveAnnouncementCall
	//	*ProxyPallet_RejectAnnouncementCall
	//	*ProxyPallet_ProxyAnnouncedCall
	Call isProxyPallet_Call `protobuf_oneof:"call"`
}

func (x *ProxyPallet) Reset() {
	*x = ProxyPallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[434]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxyPallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyPallet) ProtoMessage() {}

func (x *ProxyPallet) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[434]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyPallet.ProtoReflect.Descriptor instead.
func (*ProxyPallet) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{434}
}

func (m *ProxyPallet) GetCall() isProxyPallet_Call {
	if m != nil {
		return m.Call
	}
	return nil
}

func (x *ProxyPallet) GetProxyCall() *Proxy_ProxyCall {
	if x, ok := x.GetCall().(*ProxyPallet_ProxyCall); ok {
		return x.ProxyCall
	}
	return nil
}

func (x *ProxyPallet) GetAddProxyCall() *Proxy_AddProxyCall {
	if x, ok := x.GetCall().(*ProxyPallet_AddProxyCall); ok {
		return x.AddProxyCall
	}
	return nil
}

func (x *ProxyPallet) GetRemoveProxyCall() *Proxy_RemoveProxyCall {
	if x, ok := x.GetCall().(*ProxyPallet_RemoveProxyCall); ok {
		return x.RemoveProxyCall
	}
	return nil
}

func (x *ProxyPallet) GetRemoveProxiesCall() *Proxy_RemoveProxiesCall {
	if x, ok := x.GetCall().(*ProxyPallet_RemoveProxiesCall); ok {
		return x.RemoveProxiesCall
	}
	return nil
}

func (x *ProxyPallet) GetCreatePureCall() *Proxy_CreatePureCall {
	if x, ok := x.GetCall().(*ProxyPallet_CreatePureCall); ok {
		return x.CreatePureCall
	}
	return nil
}

func (x *ProxyPallet) GetKillPureCall() *Proxy_KillPureCall {
	if x, ok := x.GetCall().(*ProxyPallet_KillPureCall); ok {
		return x.KillPureCall
	}
	return nil
}

func (x *ProxyPallet) GetAnnounceCall() *Proxy_AnnounceCall {
	if x, ok := x.GetCall().(*ProxyPallet_AnnounceCall); ok {
		return x.AnnounceCall
	}
	return nil
}

func (x *ProxyPallet) GetRemoveAnnouncementCall() *Proxy_RemoveAnnouncementCall {
	if x, ok := x.GetCall().(*ProxyPallet_RemoveAnnouncementCall); ok {
		return x.RemoveAnnouncementCall
	}
	return nil
}

func (x *ProxyPallet) GetRejectAnnouncementCall() *Proxy_RejectAnnouncementCall {
	if x, ok := x.GetCall().(*ProxyPallet_RejectAnnouncementCall); ok {
		return x.RejectAnnouncementCall
	}
	return nil
}

func (x *ProxyPallet) GetProxyAnnouncedCall() *Proxy_ProxyAnnouncedCall {
	if x, ok := x.GetCall().(*ProxyPallet_ProxyAnnouncedCall); ok {
		return x.ProxyAnnouncedCall
	}
	return nil
}

type isProxyPallet_Call interface {
	isProxyPallet_Call()
}

type ProxyPallet_ProxyCall struct {
	ProxyCall *Proxy_ProxyCall `protobuf:"bytes,1,opt,name=proxy_call,json=proxyCall,proto3,oneof"`
}

type ProxyPallet_AddProxyCall struct {
	AddProxyCall *Proxy_AddProxyCall `protobuf:"bytes,2,opt,name=add_proxy_call,json=addProxyCall,proto3,oneof"`
}

type ProxyPallet_RemoveProxyCall struct {
	RemoveProxyCall *Proxy_RemoveProxyCall `protobuf:"bytes,3,opt,name=remove_proxy_call,json=removeProxyCall,proto3,oneof"`
}

type ProxyPallet_RemoveProxiesCall struct {
	RemoveProxiesCall *Proxy_RemoveProxiesCall `protobuf:"bytes,4,opt,name=remove_proxies_call,json=removeProxiesCall,proto3,oneof"`
}

type ProxyPallet_CreatePureCall struct {
	CreatePureCall *Proxy_CreatePureCall `protobuf:"bytes,5,opt,name=create_pure_call,json=createPureCall,proto3,oneof"`
}

type ProxyPallet_KillPureCall struct {
	KillPureCall *Proxy_KillPureCall `protobuf:"bytes,6,opt,name=kill_pure_call,json=killPureCall,proto3,oneof"`
}

type ProxyPallet_AnnounceCall struct {
	AnnounceCall *Proxy_AnnounceCall `protobuf:"bytes,7,opt,name=announce_call,json=announceCall,proto3,oneof"`
}

type ProxyPallet_RemoveAnnouncementCall struct {
	RemoveAnnouncementCall *Proxy_RemoveAnnouncementCall `protobuf:"bytes,8,opt,name=remove_announcement_call,json=removeAnnouncementCall,proto3,oneof"`
}

type ProxyPallet_RejectAnnouncementCall struct {
	RejectAnnouncementCall *Proxy_RejectAnnouncementCall `protobuf:"bytes,9,opt,name=reject_announcement_call,json=rejectAnnouncementCall,proto3,oneof"`
}

type ProxyPallet_ProxyAnnouncedCall struct {
	ProxyAnnouncedCall *Proxy_ProxyAnnouncedCall `protobuf:"bytes,10,opt,name=proxy_announced_call,json=proxyAnnouncedCall,proto3,oneof"`
}

func (*ProxyPallet_ProxyCall) isProxyPallet_Call() {}

func (*ProxyPallet_AddProxyCall) isProxyPallet_Call() {}

func (*ProxyPallet_RemoveProxyCall) isProxyPallet_Call() {}

func (*ProxyPallet_RemoveProxiesCall) isProxyPallet_Call() {}

func (*ProxyPallet_CreatePureCall) isProxyPallet_Call() {}

func (*ProxyPallet_KillPureCall) isProxyPallet_Call() {}

func (*ProxyPallet_AnnounceCall) isProxyPallet_Call() {}

func (*ProxyPallet_RemoveAnnouncementCall) isProxyPallet_Call() {}

func (*ProxyPallet_RejectAnnouncementCall) isProxyPallet_Call() {}

func (*ProxyPallet_ProxyAnnouncedCall) isProxyPallet_Call() {}

type NominationPools_PalletNominationPoolsCommissionChangeRate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxIncrease *SpArithmeticPerThingsPerbill `protobuf:"bytes,1,opt,name=max_increase,json=maxIncrease,proto3" json:"max_increase,omitempty"`
	MinDelay    uint32                        `protobuf:"varint,2,opt,name=min_delay,json=minDelay,proto3" json:"min_delay,omitempty"`
}

func (x *NominationPools_PalletNominationPoolsCommissionChangeRate) Reset() {
	*x = NominationPools_PalletNominationPoolsCommissionChangeRate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[435]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NominationPools_PalletNominationPoolsCommissionChangeRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NominationPools_PalletNominationPoolsCommissionChangeRate) ProtoMessage() {}

func (x *NominationPools_PalletNominationPoolsCommissionChangeRate) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[435]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NominationPools_PalletNominationPoolsCommissionChangeRate.ProtoReflect.Descriptor instead.
func (*NominationPools_PalletNominationPoolsCommissionChangeRate) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{435}
}

func (x *NominationPools_PalletNominationPoolsCommissionChangeRate) GetMaxIncrease() *SpArithmeticPerThingsPerbill {
	if x != nil {
		return x.MaxIncrease
	}
	return nil
}

func (x *NominationPools_PalletNominationPoolsCommissionChangeRate) GetMinDelay() uint32 {
	if x != nil {
		return x.MinDelay
	}
	return 0
}

type VestingPallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Call:
	//
	//	*VestingPallet_VestCall
	//	*VestingPallet_VestOtherCall
	//	*VestingPallet_VestedTransferCall
	//	*VestingPallet_ForceVestedTransferCall
	//	*VestingPallet_MergeSchedulesCall
	Call isVestingPallet_Call `protobuf_oneof:"call"`
}

func (x *VestingPallet) Reset() {
	*x = VestingPallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[436]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VestingPallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VestingPallet) ProtoMessage() {}

func (x *VestingPallet) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[436]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VestingPallet.ProtoReflect.Descriptor instead.
func (*VestingPallet) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{436}
}

func (m *VestingPallet) GetCall() isVestingPallet_Call {
	if m != nil {
		return m.Call
	}
	return nil
}

func (x *VestingPallet) GetVestCall() *Vesting_VestCall {
	if x, ok := x.GetCall().(*VestingPallet_VestCall); ok {
		return x.VestCall
	}
	return nil
}

func (x *VestingPallet) GetVestOtherCall() *Vesting_VestOtherCall {
	if x, ok := x.GetCall().(*VestingPallet_VestOtherCall); ok {
		return x.VestOtherCall
	}
	return nil
}

func (x *VestingPallet) GetVestedTransferCall() *Vesting_VestedTransferCall {
	if x, ok := x.GetCall().(*VestingPallet_VestedTransferCall); ok {
		return x.VestedTransferCall
	}
	return nil
}

func (x *VestingPallet) GetForceVestedTransferCall() *Vesting_ForceVestedTransferCall {
	if x, ok := x.GetCall().(*VestingPallet_ForceVestedTransferCall); ok {
		return x.ForceVestedTransferCall
	}
	return nil
}

func (x *VestingPallet) GetMergeSchedulesCall() *Vesting_MergeSchedulesCall {
	if x, ok := x.GetCall().(*VestingPallet_MergeSchedulesCall); ok {
		return x.MergeSchedulesCall
	}
	return nil
}

type isVestingPallet_Call interface {
	isVestingPallet_Call()
}

type VestingPallet_VestCall struct {
	VestCall *Vesting_VestCall `protobuf:"bytes,1,opt,name=vest_call,json=vestCall,proto3,oneof"`
}

type VestingPallet_VestOtherCall struct {
	VestOtherCall *Vesting_VestOtherCall `protobuf:"bytes,2,opt,name=vest_other_call,json=vestOtherCall,proto3,oneof"`
}

type VestingPallet_VestedTransferCall struct {
	VestedTransferCall *Vesting_VestedTransferCall `protobuf:"bytes,3,opt,name=vested_transfer_call,json=vestedTransferCall,proto3,oneof"`
}

type VestingPallet_ForceVestedTransferCall struct {
	ForceVestedTransferCall *Vesting_ForceVestedTransferCall `protobuf:"bytes,4,opt,name=force_vested_transfer_call,json=forceVestedTransferCall,proto3,oneof"`
}

type VestingPallet_MergeSchedulesCall struct {
	MergeSchedulesCall *Vesting_MergeSchedulesCall `protobuf:"bytes,5,opt,name=merge_schedules_call,json=mergeSchedulesCall,proto3,oneof"`
}

func (*VestingPallet_VestCall) isVestingPallet_Call() {}

func (*VestingPallet_VestOtherCall) isVestingPallet_Call() {}

func (*VestingPallet_VestedTransferCall) isVestingPallet_Call() {}

func (*VestingPallet_ForceVestedTransferCall) isVestingPallet_Call() {}

func (*VestingPallet_MergeSchedulesCall) isVestingPallet_Call() {}

type Referenda_Legacy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash *PrimitiveTypesH256 `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *Referenda_Legacy) Reset() {
	*x = Referenda_Legacy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[437]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Referenda_Legacy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Referenda_Legacy) ProtoMessage() {}

func (x *Referenda_Legacy) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[437]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Referenda_Legacy.ProtoReflect.Descriptor instead.
func (*Referenda_Legacy) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{437}
}

func (x *Referenda_Legacy) GetHash() *PrimitiveTypesH256 {
	if x != nil {
		return x.Hash
	}
	return nil
}

type Referenda_PlaceDecisionDepositCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *Referenda_PlaceDecisionDepositCall) Reset() {
	*x = Referenda_PlaceDecisionDepositCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[438]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Referenda_PlaceDecisionDepositCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Referenda_PlaceDecisionDepositCall) ProtoMessage() {}

func (x *Referenda_PlaceDecisionDepositCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[438]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Referenda_PlaceDecisionDepositCall.ProtoReflect.Descriptor instead.
func (*Referenda_PlaceDecisionDepositCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{438}
}

func (x *Referenda_PlaceDecisionDepositCall) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type ChildBounties_UnassignCuratorCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentBountyId uint32 `protobuf:"varint,1,opt,name=parent_bounty_id,json=parentBountyId,proto3" json:"parent_bounty_id,omitempty"`
	ChildBountyId  uint32 `protobuf:"varint,2,opt,name=child_bounty_id,json=childBountyId,proto3" json:"child_bounty_id,omitempty"`
}

func (x *ChildBounties_UnassignCuratorCall) Reset() {
	*x = ChildBounties_UnassignCuratorCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[439]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChildBounties_UnassignCuratorCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChildBounties_UnassignCuratorCall) ProtoMessage() {}

func (x *ChildBounties_UnassignCuratorCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[439]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChildBounties_UnassignCuratorCall.ProtoReflect.Descriptor instead.
func (*ChildBounties_UnassignCuratorCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{439}
}

func (x *ChildBounties_UnassignCuratorCall) GetParentBountyId() uint32 {
	if x != nil {
		return x.ParentBountyId
	}
	return 0
}

func (x *ChildBounties_UnassignCuratorCall) GetChildBountyId() uint32 {
	if x != nil {
		return x.ChildBountyId
	}
	return 0
}

type NominationPools_PermissionlessAll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NominationPools_PermissionlessAll) Reset() {
	*x = NominationPools_PermissionlessAll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[440]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NominationPools_PermissionlessAll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NominationPools_PermissionlessAll) ProtoMessage() {}

func (x *NominationPools_PermissionlessAll) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[440]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NominationPools_PermissionlessAll.ProtoReflect.Descriptor instead.
func (*NominationPools_PermissionlessAll) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{440}
}

type Utility_System struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 *Value0 `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Utility_System) Reset() {
	*x = Utility_System{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[441]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Utility_System) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Utility_System) ProtoMessage() {}

func (x *Utility_System) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[441]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Utility_System.ProtoReflect.Descriptor instead.
func (*Utility_System) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{441}
}

func (x *Utility_System) GetValue0() *Value0 {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Utility_ForceBatchCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Calls []*VaraRuntimeRuntimeCall `protobuf:"bytes,1,rep,name=calls,proto3" json:"calls,omitempty"`
}

func (x *Utility_ForceBatchCall) Reset() {
	*x = Utility_ForceBatchCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[442]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Utility_ForceBatchCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Utility_ForceBatchCall) ProtoMessage() {}

func (x *Utility_ForceBatchCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[442]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Utility_ForceBatchCall.ProtoReflect.Descriptor instead.
func (*Utility_ForceBatchCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{442}
}

func (x *Utility_ForceBatchCall) GetCalls() []*VaraRuntimeRuntimeCall {
	if x != nil {
		return x.Calls
	}
	return nil
}

type ConvictionVoting_Locked4X struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConvictionVoting_Locked4X) Reset() {
	*x = ConvictionVoting_Locked4X{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[443]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConvictionVoting_Locked4X) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvictionVoting_Locked4X) ProtoMessage() {}

func (x *ConvictionVoting_Locked4X) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[443]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvictionVoting_Locked4X.ProtoReflect.Descriptor instead.
func (*ConvictionVoting_Locked4X) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{443}
}

type FellowshipCollective_AddMemberCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Who *FellowshipCollective_Who `protobuf:"bytes,1,opt,name=who,proto3" json:"who,omitempty"`
}

func (x *FellowshipCollective_AddMemberCall) Reset() {
	*x = FellowshipCollective_AddMemberCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[444]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FellowshipCollective_AddMemberCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FellowshipCollective_AddMemberCall) ProtoMessage() {}

func (x *FellowshipCollective_AddMemberCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[444]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FellowshipCollective_AddMemberCall.ProtoReflect.Descriptor instead.
func (*FellowshipCollective_AddMemberCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{444}
}

func (x *FellowshipCollective_AddMemberCall) GetWho() *FellowshipCollective_Who {
	if x != nil {
		return x.Who
	}
	return nil
}

type NominationPools_Member struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*NominationPools_Member_Id
	//	*NominationPools_Member_Index
	//	*NominationPools_Member_Raw
	//	*NominationPools_Member_Address32
	//	*NominationPools_Member_Address20
	Value isNominationPools_Member_Value `protobuf_oneof:"value"`
}

func (x *NominationPools_Member) Reset() {
	*x = NominationPools_Member{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[445]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NominationPools_Member) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NominationPools_Member) ProtoMessage() {}

func (x *NominationPools_Member) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[445]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NominationPools_Member.ProtoReflect.Descriptor instead.
func (*NominationPools_Member) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{445}
}

func (m *NominationPools_Member) GetValue() isNominationPools_Member_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *NominationPools_Member) GetId() *NominationPools_Id {
	if x, ok := x.GetValue().(*NominationPools_Member_Id); ok {
		return x.Id
	}
	return nil
}

func (x *NominationPools_Member) GetIndex() *NominationPools_Index {
	if x, ok := x.GetValue().(*NominationPools_Member_Index); ok {
		return x.Index
	}
	return nil
}

func (x *NominationPools_Member) GetRaw() *NominationPools_Raw {
	if x, ok := x.GetValue().(*NominationPools_Member_Raw); ok {
		return x.Raw
	}
	return nil
}

func (x *NominationPools_Member) GetAddress32() *NominationPools_Address32 {
	if x, ok := x.GetValue().(*NominationPools_Member_Address32); ok {
		return x.Address32
	}
	return nil
}

func (x *NominationPools_Member) GetAddress20() *NominationPools_Address20 {
	if x, ok := x.GetValue().(*NominationPools_Member_Address20); ok {
		return x.Address20
	}
	return nil
}

type isNominationPools_Member_Value interface {
	isNominationPools_Member_Value()
}

type NominationPools_Member_Id struct {
	Id *NominationPools_Id `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type NominationPools_Member_Index struct {
	Index *NominationPools_Index `protobuf:"bytes,2,opt,name=index,proto3,oneof"`
}

type NominationPools_Member_Raw struct {
	Raw *NominationPools_Raw `protobuf:"bytes,3,opt,name=raw,proto3,oneof"`
}

type NominationPools_Member_Address32 struct {
	Address32 *NominationPools_Address32 `protobuf:"bytes,4,opt,name=address32,proto3,oneof"`
}

type NominationPools_Member_Address20 struct {
	Address20 *NominationPools_Address20 `protobuf:"bytes,5,opt,name=address20,proto3,oneof"`
}

func (*NominationPools_Member_Id) isNominationPools_Member_Value() {}

func (*NominationPools_Member_Index) isNominationPools_Member_Value() {}

func (*NominationPools_Member_Raw) isNominationPools_Member_Value() {}

func (*NominationPools_Member_Address32) isNominationPools_Member_Value() {}

func (*NominationPools_Member_Address20) isNominationPools_Member_Value() {}

type Utility_BatchCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Calls []*VaraRuntimeRuntimeCall `protobuf:"bytes,1,rep,name=calls,proto3" json:"calls,omitempty"`
}

func (x *Utility_BatchCall) Reset() {
	*x = Utility_BatchCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[446]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Utility_BatchCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Utility_BatchCall) ProtoMessage() {}

func (x *Utility_BatchCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[446]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Utility_BatchCall.ProtoReflect.Descriptor instead.
func (*Utility_BatchCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{446}
}

func (x *Utility_BatchCall) GetCalls() []*VaraRuntimeRuntimeCall {
	if x != nil {
		return x.Calls
	}
	return nil
}

type Proxy_Spawner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*Proxy_Spawner_Id
	//	*Proxy_Spawner_Index
	//	*Proxy_Spawner_Raw
	//	*Proxy_Spawner_Address32
	//	*Proxy_Spawner_Address20
	Value isProxy_Spawner_Value `protobuf_oneof:"value"`
}

func (x *Proxy_Spawner) Reset() {
	*x = Proxy_Spawner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[447]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proxy_Spawner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proxy_Spawner) ProtoMessage() {}

func (x *Proxy_Spawner) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[447]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proxy_Spawner.ProtoReflect.Descriptor instead.
func (*Proxy_Spawner) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{447}
}

func (m *Proxy_Spawner) GetValue() isProxy_Spawner_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Proxy_Spawner) GetId() *Proxy_Id {
	if x, ok := x.GetValue().(*Proxy_Spawner_Id); ok {
		return x.Id
	}
	return nil
}

func (x *Proxy_Spawner) GetIndex() *Proxy_Index {
	if x, ok := x.GetValue().(*Proxy_Spawner_Index); ok {
		return x.Index
	}
	return nil
}

func (x *Proxy_Spawner) GetRaw() *Proxy_Raw {
	if x, ok := x.GetValue().(*Proxy_Spawner_Raw); ok {
		return x.Raw
	}
	return nil
}

func (x *Proxy_Spawner) GetAddress32() *Proxy_Address32 {
	if x, ok := x.GetValue().(*Proxy_Spawner_Address32); ok {
		return x.Address32
	}
	return nil
}

func (x *Proxy_Spawner) GetAddress20() *Proxy_Address20 {
	if x, ok := x.GetValue().(*Proxy_Spawner_Address20); ok {
		return x.Address20
	}
	return nil
}

type isProxy_Spawner_Value interface {
	isProxy_Spawner_Value()
}

type Proxy_Spawner_Id struct {
	Id *Proxy_Id `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type Proxy_Spawner_Index struct {
	Index *Proxy_Index `protobuf:"bytes,2,opt,name=index,proto3,oneof"`
}

type Proxy_Spawner_Raw struct {
	Raw *Proxy_Raw `protobuf:"bytes,3,opt,name=raw,proto3,oneof"`
}

type Proxy_Spawner_Address32 struct {
	Address32 *Proxy_Address32 `protobuf:"bytes,4,opt,name=address32,proto3,oneof"`
}

type Proxy_Spawner_Address20 struct {
	Address20 *Proxy_Address20 `protobuf:"bytes,5,opt,name=address20,proto3,oneof"`
}

func (*Proxy_Spawner_Id) isProxy_Spawner_Value() {}

func (*Proxy_Spawner_Index) isProxy_Spawner_Value() {}

func (*Proxy_Spawner_Raw) isProxy_Spawner_Value() {}

func (*Proxy_Spawner_Address32) isProxy_Spawner_Value() {}

func (*Proxy_Spawner_Address20) isProxy_Spawner_Value() {}

type NominationPoolsPallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Call:
	//
	//	*NominationPoolsPallet_JoinCall
	//	*NominationPoolsPallet_BondExtraCall
	//	*NominationPoolsPallet_ClaimPayoutCall
	//	*NominationPoolsPallet_UnbondCall
	//	*NominationPoolsPallet_PoolWithdrawUnbondedCall
	//	*NominationPoolsPallet_WithdrawUnbondedCall
	//	*NominationPoolsPallet_CreateCall
	//	*NominationPoolsPallet_CreateWithPoolIdCall
	//	*NominationPoolsPallet_NominateCall
	//	*NominationPoolsPallet_SetStateCall
	//	*NominationPoolsPallet_SetMetadataCall
	//	*NominationPoolsPallet_SetConfigsCall
	//	*NominationPoolsPallet_UpdateRolesCall
	//	*NominationPoolsPallet_ChillCall
	//	*NominationPoolsPallet_BondExtraOtherCall
	//	*NominationPoolsPallet_SetClaimPermissionCall
	//	*NominationPoolsPallet_ClaimPayoutOtherCall
	//	*NominationPoolsPallet_SetCommissionCall
	//	*NominationPoolsPallet_SetCommissionMaxCall
	//	*NominationPoolsPallet_SetCommissionChangeRateCall
	//	*NominationPoolsPallet_ClaimCommissionCall
	//	*NominationPoolsPallet_AdjustPoolDepositCall
	Call isNominationPoolsPallet_Call `protobuf_oneof:"call"`
}

func (x *NominationPoolsPallet) Reset() {
	*x = NominationPoolsPallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[448]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NominationPoolsPallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NominationPoolsPallet) ProtoMessage() {}

func (x *NominationPoolsPallet) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[448]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NominationPoolsPallet.ProtoReflect.Descriptor instead.
func (*NominationPoolsPallet) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{448}
}

func (m *NominationPoolsPallet) GetCall() isNominationPoolsPallet_Call {
	if m != nil {
		return m.Call
	}
	return nil
}

func (x *NominationPoolsPallet) GetJoinCall() *NominationPools_JoinCall {
	if x, ok := x.GetCall().(*NominationPoolsPallet_JoinCall); ok {
		return x.JoinCall
	}
	return nil
}

func (x *NominationPoolsPallet) GetBondExtraCall() *NominationPools_BondExtraCall {
	if x, ok := x.GetCall().(*NominationPoolsPallet_BondExtraCall); ok {
		return x.BondExtraCall
	}
	return nil
}

func (x *NominationPoolsPallet) GetClaimPayoutCall() *NominationPools_ClaimPayoutCall {
	if x, ok := x.GetCall().(*NominationPoolsPallet_ClaimPayoutCall); ok {
		return x.ClaimPayoutCall
	}
	return nil
}

func (x *NominationPoolsPallet) GetUnbondCall() *NominationPools_UnbondCall {
	if x, ok := x.GetCall().(*NominationPoolsPallet_UnbondCall); ok {
		return x.UnbondCall
	}
	return nil
}

func (x *NominationPoolsPallet) GetPoolWithdrawUnbondedCall() *NominationPools_PoolWithdrawUnbondedCall {
	if x, ok := x.GetCall().(*NominationPoolsPallet_PoolWithdrawUnbondedCall); ok {
		return x.PoolWithdrawUnbondedCall
	}
	return nil
}

func (x *NominationPoolsPallet) GetWithdrawUnbondedCall() *NominationPools_WithdrawUnbondedCall {
	if x, ok := x.GetCall().(*NominationPoolsPallet_WithdrawUnbondedCall); ok {
		return x.WithdrawUnbondedCall
	}
	return nil
}

func (x *NominationPoolsPallet) GetCreateCall() *NominationPools_CreateCall {
	if x, ok := x.GetCall().(*NominationPoolsPallet_CreateCall); ok {
		return x.CreateCall
	}
	return nil
}

func (x *NominationPoolsPallet) GetCreateWithPoolIdCall() *NominationPools_CreateWithPoolIdCall {
	if x, ok := x.GetCall().(*NominationPoolsPallet_CreateWithPoolIdCall); ok {
		return x.CreateWithPoolIdCall
	}
	return nil
}

func (x *NominationPoolsPallet) GetNominateCall() *NominationPools_NominateCall {
	if x, ok := x.GetCall().(*NominationPoolsPallet_NominateCall); ok {
		return x.NominateCall
	}
	return nil
}

func (x *NominationPoolsPallet) GetSetStateCall() *NominationPools_SetStateCall {
	if x, ok := x.GetCall().(*NominationPoolsPallet_SetStateCall); ok {
		return x.SetStateCall
	}
	return nil
}

func (x *NominationPoolsPallet) GetSetMetadataCall() *NominationPools_SetMetadataCall {
	if x, ok := x.GetCall().(*NominationPoolsPallet_SetMetadataCall); ok {
		return x.SetMetadataCall
	}
	return nil
}

func (x *NominationPoolsPallet) GetSetConfigsCall() *NominationPools_SetConfigsCall {
	if x, ok := x.GetCall().(*NominationPoolsPallet_SetConfigsCall); ok {
		return x.SetConfigsCall
	}
	return nil
}

func (x *NominationPoolsPallet) GetUpdateRolesCall() *NominationPools_UpdateRolesCall {
	if x, ok := x.GetCall().(*NominationPoolsPallet_UpdateRolesCall); ok {
		return x.UpdateRolesCall
	}
	return nil
}

func (x *NominationPoolsPallet) GetChillCall() *NominationPools_ChillCall {
	if x, ok := x.GetCall().(*NominationPoolsPallet_ChillCall); ok {
		return x.ChillCall
	}
	return nil
}

func (x *NominationPoolsPallet) GetBondExtraOtherCall() *NominationPools_BondExtraOtherCall {
	if x, ok := x.GetCall().(*NominationPoolsPallet_BondExtraOtherCall); ok {
		return x.BondExtraOtherCall
	}
	return nil
}

func (x *NominationPoolsPallet) GetSetClaimPermissionCall() *NominationPools_SetClaimPermissionCall {
	if x, ok := x.GetCall().(*NominationPoolsPallet_SetClaimPermissionCall); ok {
		return x.SetClaimPermissionCall
	}
	return nil
}

func (x *NominationPoolsPallet) GetClaimPayoutOtherCall() *NominationPools_ClaimPayoutOtherCall {
	if x, ok := x.GetCall().(*NominationPoolsPallet_ClaimPayoutOtherCall); ok {
		return x.ClaimPayoutOtherCall
	}
	return nil
}

func (x *NominationPoolsPallet) GetSetCommissionCall() *NominationPools_SetCommissionCall {
	if x, ok := x.GetCall().(*NominationPoolsPallet_SetCommissionCall); ok {
		return x.SetCommissionCall
	}
	return nil
}

func (x *NominationPoolsPallet) GetSetCommissionMaxCall() *NominationPools_SetCommissionMaxCall {
	if x, ok := x.GetCall().(*NominationPoolsPallet_SetCommissionMaxCall); ok {
		return x.SetCommissionMaxCall
	}
	return nil
}

func (x *NominationPoolsPallet) GetSetCommissionChangeRateCall() *NominationPools_SetCommissionChangeRateCall {
	if x, ok := x.GetCall().(*NominationPoolsPallet_SetCommissionChangeRateCall); ok {
		return x.SetCommissionChangeRateCall
	}
	return nil
}

func (x *NominationPoolsPallet) GetClaimCommissionCall() *NominationPools_ClaimCommissionCall {
	if x, ok := x.GetCall().(*NominationPoolsPallet_ClaimCommissionCall); ok {
		return x.ClaimCommissionCall
	}
	return nil
}

func (x *NominationPoolsPallet) GetAdjustPoolDepositCall() *NominationPools_AdjustPoolDepositCall {
	if x, ok := x.GetCall().(*NominationPoolsPallet_AdjustPoolDepositCall); ok {
		return x.AdjustPoolDepositCall
	}
	return nil
}

type isNominationPoolsPallet_Call interface {
	isNominationPoolsPallet_Call()
}

type NominationPoolsPallet_JoinCall struct {
	JoinCall *NominationPools_JoinCall `protobuf:"bytes,1,opt,name=join_call,json=joinCall,proto3,oneof"`
}

type NominationPoolsPallet_BondExtraCall struct {
	BondExtraCall *NominationPools_BondExtraCall `protobuf:"bytes,2,opt,name=bond_extra_call,json=bondExtraCall,proto3,oneof"`
}

type NominationPoolsPallet_ClaimPayoutCall struct {
	ClaimPayoutCall *NominationPools_ClaimPayoutCall `protobuf:"bytes,3,opt,name=claim_payout_call,json=claimPayoutCall,proto3,oneof"`
}

type NominationPoolsPallet_UnbondCall struct {
	UnbondCall *NominationPools_UnbondCall `protobuf:"bytes,4,opt,name=unbond_call,json=unbondCall,proto3,oneof"`
}

type NominationPoolsPallet_PoolWithdrawUnbondedCall struct {
	PoolWithdrawUnbondedCall *NominationPools_PoolWithdrawUnbondedCall `protobuf:"bytes,5,opt,name=pool_withdraw_unbonded_call,json=poolWithdrawUnbondedCall,proto3,oneof"`
}

type NominationPoolsPallet_WithdrawUnbondedCall struct {
	WithdrawUnbondedCall *NominationPools_WithdrawUnbondedCall `protobuf:"bytes,6,opt,name=withdraw_unbonded_call,json=withdrawUnbondedCall,proto3,oneof"`
}

type NominationPoolsPallet_CreateCall struct {
	CreateCall *NominationPools_CreateCall `protobuf:"bytes,7,opt,name=create_call,json=createCall,proto3,oneof"`
}

type NominationPoolsPallet_CreateWithPoolIdCall struct {
	CreateWithPoolIdCall *NominationPools_CreateWithPoolIdCall `protobuf:"bytes,8,opt,name=create_with_pool_id_call,json=createWithPoolIdCall,proto3,oneof"`
}

type NominationPoolsPallet_NominateCall struct {
	NominateCall *NominationPools_NominateCall `protobuf:"bytes,9,opt,name=nominate_call,json=nominateCall,proto3,oneof"`
}

type NominationPoolsPallet_SetStateCall struct {
	SetStateCall *NominationPools_SetStateCall `protobuf:"bytes,10,opt,name=set_state_call,json=setStateCall,proto3,oneof"`
}

type NominationPoolsPallet_SetMetadataCall struct {
	SetMetadataCall *NominationPools_SetMetadataCall `protobuf:"bytes,11,opt,name=set_metadata_call,json=setMetadataCall,proto3,oneof"`
}

type NominationPoolsPallet_SetConfigsCall struct {
	SetConfigsCall *NominationPools_SetConfigsCall `protobuf:"bytes,12,opt,name=set_configs_call,json=setConfigsCall,proto3,oneof"`
}

type NominationPoolsPallet_UpdateRolesCall struct {
	UpdateRolesCall *NominationPools_UpdateRolesCall `protobuf:"bytes,13,opt,name=update_roles_call,json=updateRolesCall,proto3,oneof"`
}

type NominationPoolsPallet_ChillCall struct {
	ChillCall *NominationPools_ChillCall `protobuf:"bytes,14,opt,name=chill_call,json=chillCall,proto3,oneof"`
}

type NominationPoolsPallet_BondExtraOtherCall struct {
	BondExtraOtherCall *NominationPools_BondExtraOtherCall `protobuf:"bytes,15,opt,name=bond_extra_other_call,json=bondExtraOtherCall,proto3,oneof"`
}

type NominationPoolsPallet_SetClaimPermissionCall struct {
	SetClaimPermissionCall *NominationPools_SetClaimPermissionCall `protobuf:"bytes,16,opt,name=set_claim_permission_call,json=setClaimPermissionCall,proto3,oneof"`
}

type NominationPoolsPallet_ClaimPayoutOtherCall struct {
	ClaimPayoutOtherCall *NominationPools_ClaimPayoutOtherCall `protobuf:"bytes,17,opt,name=claim_payout_other_call,json=claimPayoutOtherCall,proto3,oneof"`
}

type NominationPoolsPallet_SetCommissionCall struct {
	SetCommissionCall *NominationPools_SetCommissionCall `protobuf:"bytes,18,opt,name=set_commission_call,json=setCommissionCall,proto3,oneof"`
}

type NominationPoolsPallet_SetCommissionMaxCall struct {
	SetCommissionMaxCall *NominationPools_SetCommissionMaxCall `protobuf:"bytes,19,opt,name=set_commission_max_call,json=setCommissionMaxCall,proto3,oneof"`
}

type NominationPoolsPallet_SetCommissionChangeRateCall struct {
	SetCommissionChangeRateCall *NominationPools_SetCommissionChangeRateCall `protobuf:"bytes,20,opt,name=set_commission_change_rate_call,json=setCommissionChangeRateCall,proto3,oneof"`
}

type NominationPoolsPallet_ClaimCommissionCall struct {
	ClaimCommissionCall *NominationPools_ClaimCommissionCall `protobuf:"bytes,21,opt,name=claim_commission_call,json=claimCommissionCall,proto3,oneof"`
}

type NominationPoolsPallet_AdjustPoolDepositCall struct {
	AdjustPoolDepositCall *NominationPools_AdjustPoolDepositCall `protobuf:"bytes,22,opt,name=adjust_pool_deposit_call,json=adjustPoolDepositCall,proto3,oneof"`
}

func (*NominationPoolsPallet_JoinCall) isNominationPoolsPallet_Call() {}

func (*NominationPoolsPallet_BondExtraCall) isNominationPoolsPallet_Call() {}

func (*NominationPoolsPallet_ClaimPayoutCall) isNominationPoolsPallet_Call() {}

func (*NominationPoolsPallet_UnbondCall) isNominationPoolsPallet_Call() {}

func (*NominationPoolsPallet_PoolWithdrawUnbondedCall) isNominationPoolsPallet_Call() {}

func (*NominationPoolsPallet_WithdrawUnbondedCall) isNominationPoolsPallet_Call() {}

func (*NominationPoolsPallet_CreateCall) isNominationPoolsPallet_Call() {}

func (*NominationPoolsPallet_CreateWithPoolIdCall) isNominationPoolsPallet_Call() {}

func (*NominationPoolsPallet_NominateCall) isNominationPoolsPallet_Call() {}

func (*NominationPoolsPallet_SetStateCall) isNominationPoolsPallet_Call() {}

func (*NominationPoolsPallet_SetMetadataCall) isNominationPoolsPallet_Call() {}

func (*NominationPoolsPallet_SetConfigsCall) isNominationPoolsPallet_Call() {}

func (*NominationPoolsPallet_UpdateRolesCall) isNominationPoolsPallet_Call() {}

func (*NominationPoolsPallet_ChillCall) isNominationPoolsPallet_Call() {}

func (*NominationPoolsPallet_BondExtraOtherCall) isNominationPoolsPallet_Call() {}

func (*NominationPoolsPallet_SetClaimPermissionCall) isNominationPoolsPallet_Call() {}

func (*NominationPoolsPallet_ClaimPayoutOtherCall) isNominationPoolsPallet_Call() {}

func (*NominationPoolsPallet_SetCommissionCall) isNominationPoolsPallet_Call() {}

func (*NominationPoolsPallet_SetCommissionMaxCall) isNominationPoolsPallet_Call() {}

func (*NominationPoolsPallet_SetCommissionChangeRateCall) isNominationPoolsPallet_Call() {}

func (*NominationPoolsPallet_ClaimCommissionCall) isNominationPoolsPallet_Call() {}

func (*NominationPoolsPallet_AdjustPoolDepositCall) isNominationPoolsPallet_Call() {}

type Balances_Id struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 *SpCoreCryptoAccountId32 `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Balances_Id) Reset() {
	*x = Balances_Id{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[449]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Balances_Id) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Balances_Id) ProtoMessage() {}

func (x *Balances_Id) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[449]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Balances_Id.ProtoReflect.Descriptor instead.
func (*Balances_Id) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{449}
}

func (x *Balances_Id) GetValue0() *SpCoreCryptoAccountId32 {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Staking_None struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Staking_None) Reset() {
	*x = Staking_None{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[450]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staking_None) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staking_None) ProtoMessage() {}

func (x *Staking_None) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[450]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staking_None.ProtoReflect.Descriptor instead.
func (*Staking_None) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{450}
}

type FellowshipReferenda_SubmitCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProposalOrigin  *FellowshipReferenda_ProposalOrigin  `protobuf:"bytes,1,opt,name=proposal_origin,json=proposalOrigin,proto3" json:"proposal_origin,omitempty"`
	Proposal        *FellowshipReferenda_Proposal        `protobuf:"bytes,2,opt,name=proposal,proto3" json:"proposal,omitempty"`
	EnactmentMoment *FellowshipReferenda_EnactmentMoment `protobuf:"bytes,3,opt,name=enactment_moment,json=enactmentMoment,proto3" json:"enactment_moment,omitempty"`
}

func (x *FellowshipReferenda_SubmitCall) Reset() {
	*x = FellowshipReferenda_SubmitCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[451]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FellowshipReferenda_SubmitCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FellowshipReferenda_SubmitCall) ProtoMessage() {}

func (x *FellowshipReferenda_SubmitCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[451]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FellowshipReferenda_SubmitCall.ProtoReflect.Descriptor instead.
func (*FellowshipReferenda_SubmitCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{451}
}

func (x *FellowshipReferenda_SubmitCall) GetProposalOrigin() *FellowshipReferenda_ProposalOrigin {
	if x != nil {
		return x.ProposalOrigin
	}
	return nil
}

func (x *FellowshipReferenda_SubmitCall) GetProposal() *FellowshipReferenda_Proposal {
	if x != nil {
		return x.Proposal
	}
	return nil
}

func (x *FellowshipReferenda_SubmitCall) GetEnactmentMoment() *FellowshipReferenda_EnactmentMoment {
	if x != nil {
		return x.EnactmentMoment
	}
	return nil
}

type Whitelist_DispatchWhitelistedCallWithPreimageCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Call:
	//
	//	*Whitelist_DispatchWhitelistedCallWithPreimageCall_System
	//	*Whitelist_DispatchWhitelistedCallWithPreimageCall_Timestamp
	//	*Whitelist_DispatchWhitelistedCallWithPreimageCall_Babe
	//	*Whitelist_DispatchWhitelistedCallWithPreimageCall_Grandpa
	//	*Whitelist_DispatchWhitelistedCallWithPreimageCall_Balances
	//	*Whitelist_DispatchWhitelistedCallWithPreimageCall_Vesting
	//	*Whitelist_DispatchWhitelistedCallWithPreimageCall_BagsList
	//	*Whitelist_DispatchWhitelistedCallWithPreimageCall_ImOnline
	//	*Whitelist_DispatchWhitelistedCallWithPreimageCall_Staking
	//	*Whitelist_DispatchWhitelistedCallWithPreimageCall_Session
	//	*Whitelist_DispatchWhitelistedCallWithPreimageCall_Treasury
	//	*Whitelist_DispatchWhitelistedCallWithPreimageCall_Utility
	//	*Whitelist_DispatchWhitelistedCallWithPreimageCall_ConvictionVoting
	//	*Whitelist_DispatchWhitelistedCallWithPreimageCall_Referenda
	//	*Whitelist_DispatchWhitelistedCallWithPreimageCall_FellowshipCollective
	//	*Whitelist_DispatchWhitelistedCallWithPreimageCall_FellowshipReferenda
	//	*Whitelist_DispatchWhitelistedCallWithPreimageCall_Whitelist
	//	*Whitelist_DispatchWhitelistedCallWithPreimageCall_Scheduler
	//	*Whitelist_DispatchWhitelistedCallWithPreimageCall_Preimage
	//	*Whitelist_DispatchWhitelistedCallWithPreimageCall_Identity
	//	*Whitelist_DispatchWhitelistedCallWithPreimageCall_Proxy
	//	*Whitelist_DispatchWhitelistedCallWithPreimageCall_Multisig
	//	*Whitelist_DispatchWhitelistedCallWithPreimageCall_ElectionProviderMultiPhase
	//	*Whitelist_DispatchWhitelistedCallWithPreimageCall_Bounties
	//	*Whitelist_DispatchWhitelistedCallWithPreimageCall_ChildBounties
	//	*Whitelist_DispatchWhitelistedCallWithPreimageCall_NominationPools
	//	*Whitelist_DispatchWhitelistedCallWithPreimageCall_Gear
	//	*Whitelist_DispatchWhitelistedCallWithPreimageCall_StakingRewards
	//	*Whitelist_DispatchWhitelistedCallWithPreimageCall_GearVoucher
	Call isWhitelist_DispatchWhitelistedCallWithPreimageCall_Call `protobuf_oneof:"call"`
}

func (x *Whitelist_DispatchWhitelistedCallWithPreimageCall) Reset() {
	*x = Whitelist_DispatchWhitelistedCallWithPreimageCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[452]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Whitelist_DispatchWhitelistedCallWithPreimageCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Whitelist_DispatchWhitelistedCallWithPreimageCall) ProtoMessage() {}

func (x *Whitelist_DispatchWhitelistedCallWithPreimageCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[452]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Whitelist_DispatchWhitelistedCallWithPreimageCall.ProtoReflect.Descriptor instead.
func (*Whitelist_DispatchWhitelistedCallWithPreimageCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{452}
}

func (m *Whitelist_DispatchWhitelistedCallWithPreimageCall) GetCall() isWhitelist_DispatchWhitelistedCallWithPreimageCall_Call {
	if m != nil {
		return m.Call
	}
	return nil
}

func (x *Whitelist_DispatchWhitelistedCallWithPreimageCall) GetSystem() *SystemPallet {
	if x, ok := x.GetCall().(*Whitelist_DispatchWhitelistedCallWithPreimageCall_System); ok {
		return x.System
	}
	return nil
}

func (x *Whitelist_DispatchWhitelistedCallWithPreimageCall) GetTimestamp() *TimestampPallet {
	if x, ok := x.GetCall().(*Whitelist_DispatchWhitelistedCallWithPreimageCall_Timestamp); ok {
		return x.Timestamp
	}
	return nil
}

func (x *Whitelist_DispatchWhitelistedCallWithPreimageCall) GetBabe() *BabePallet {
	if x, ok := x.GetCall().(*Whitelist_DispatchWhitelistedCallWithPreimageCall_Babe); ok {
		return x.Babe
	}
	return nil
}

func (x *Whitelist_DispatchWhitelistedCallWithPreimageCall) GetGrandpa() *GrandpaPallet {
	if x, ok := x.GetCall().(*Whitelist_DispatchWhitelistedCallWithPreimageCall_Grandpa); ok {
		return x.Grandpa
	}
	return nil
}

func (x *Whitelist_DispatchWhitelistedCallWithPreimageCall) GetBalances() *BalancesPallet {
	if x, ok := x.GetCall().(*Whitelist_DispatchWhitelistedCallWithPreimageCall_Balances); ok {
		return x.Balances
	}
	return nil
}

func (x *Whitelist_DispatchWhitelistedCallWithPreimageCall) GetVesting() *VestingPallet {
	if x, ok := x.GetCall().(*Whitelist_DispatchWhitelistedCallWithPreimageCall_Vesting); ok {
		return x.Vesting
	}
	return nil
}

func (x *Whitelist_DispatchWhitelistedCallWithPreimageCall) GetBagsList() *BagsListPallet {
	if x, ok := x.GetCall().(*Whitelist_DispatchWhitelistedCallWithPreimageCall_BagsList); ok {
		return x.BagsList
	}
	return nil
}

func (x *Whitelist_DispatchWhitelistedCallWithPreimageCall) GetImOnline() *ImOnlinePallet {
	if x, ok := x.GetCall().(*Whitelist_DispatchWhitelistedCallWithPreimageCall_ImOnline); ok {
		return x.ImOnline
	}
	return nil
}

func (x *Whitelist_DispatchWhitelistedCallWithPreimageCall) GetStaking() *StakingPallet {
	if x, ok := x.GetCall().(*Whitelist_DispatchWhitelistedCallWithPreimageCall_Staking); ok {
		return x.Staking
	}
	return nil
}

func (x *Whitelist_DispatchWhitelistedCallWithPreimageCall) GetSession() *SessionPallet {
	if x, ok := x.GetCall().(*Whitelist_DispatchWhitelistedCallWithPreimageCall_Session); ok {
		return x.Session
	}
	return nil
}

func (x *Whitelist_DispatchWhitelistedCallWithPreimageCall) GetTreasury() *TreasuryPallet {
	if x, ok := x.GetCall().(*Whitelist_DispatchWhitelistedCallWithPreimageCall_Treasury); ok {
		return x.Treasury
	}
	return nil
}

func (x *Whitelist_DispatchWhitelistedCallWithPreimageCall) GetUtility() *UtilityPallet {
	if x, ok := x.GetCall().(*Whitelist_DispatchWhitelistedCallWithPreimageCall_Utility); ok {
		return x.Utility
	}
	return nil
}

func (x *Whitelist_DispatchWhitelistedCallWithPreimageCall) GetConvictionVoting() *ConvictionVotingPallet {
	if x, ok := x.GetCall().(*Whitelist_DispatchWhitelistedCallWithPreimageCall_ConvictionVoting); ok {
		return x.ConvictionVoting
	}
	return nil
}

func (x *Whitelist_DispatchWhitelistedCallWithPreimageCall) GetReferenda() *ReferendaPallet {
	if x, ok := x.GetCall().(*Whitelist_DispatchWhitelistedCallWithPreimageCall_Referenda); ok {
		return x.Referenda
	}
	return nil
}

func (x *Whitelist_DispatchWhitelistedCallWithPreimageCall) GetFellowshipCollective() *FellowshipCollectivePallet {
	if x, ok := x.GetCall().(*Whitelist_DispatchWhitelistedCallWithPreimageCall_FellowshipCollective); ok {
		return x.FellowshipCollective
	}
	return nil
}

func (x *Whitelist_DispatchWhitelistedCallWithPreimageCall) GetFellowshipReferenda() *FellowshipReferendaPallet {
	if x, ok := x.GetCall().(*Whitelist_DispatchWhitelistedCallWithPreimageCall_FellowshipReferenda); ok {
		return x.FellowshipReferenda
	}
	return nil
}

func (x *Whitelist_DispatchWhitelistedCallWithPreimageCall) GetWhitelist() *WhitelistPallet {
	if x, ok := x.GetCall().(*Whitelist_DispatchWhitelistedCallWithPreimageCall_Whitelist); ok {
		return x.Whitelist
	}
	return nil
}

func (x *Whitelist_DispatchWhitelistedCallWithPreimageCall) GetScheduler() *SchedulerPallet {
	if x, ok := x.GetCall().(*Whitelist_DispatchWhitelistedCallWithPreimageCall_Scheduler); ok {
		return x.Scheduler
	}
	return nil
}

func (x *Whitelist_DispatchWhitelistedCallWithPreimageCall) GetPreimage() *PreimagePallet {
	if x, ok := x.GetCall().(*Whitelist_DispatchWhitelistedCallWithPreimageCall_Preimage); ok {
		return x.Preimage
	}
	return nil
}

func (x *Whitelist_DispatchWhitelistedCallWithPreimageCall) GetIdentity() *IdentityPallet {
	if x, ok := x.GetCall().(*Whitelist_DispatchWhitelistedCallWithPreimageCall_Identity); ok {
		return x.Identity
	}
	return nil
}

func (x *Whitelist_DispatchWhitelistedCallWithPreimageCall) GetProxy() *ProxyPallet {
	if x, ok := x.GetCall().(*Whitelist_DispatchWhitelistedCallWithPreimageCall_Proxy); ok {
		return x.Proxy
	}
	return nil
}

func (x *Whitelist_DispatchWhitelistedCallWithPreimageCall) GetMultisig() *MultisigPallet {
	if x, ok := x.GetCall().(*Whitelist_DispatchWhitelistedCallWithPreimageCall_Multisig); ok {
		return x.Multisig
	}
	return nil
}

func (x *Whitelist_DispatchWhitelistedCallWithPreimageCall) GetElectionProviderMultiPhase() *ElectionProviderMultiPhasePallet {
	if x, ok := x.GetCall().(*Whitelist_DispatchWhitelistedCallWithPreimageCall_ElectionProviderMultiPhase); ok {
		return x.ElectionProviderMultiPhase
	}
	return nil
}

func (x *Whitelist_DispatchWhitelistedCallWithPreimageCall) GetBounties() *BountiesPallet {
	if x, ok := x.GetCall().(*Whitelist_DispatchWhitelistedCallWithPreimageCall_Bounties); ok {
		return x.Bounties
	}
	return nil
}

func (x *Whitelist_DispatchWhitelistedCallWithPreimageCall) GetChildBounties() *ChildBountiesPallet {
	if x, ok := x.GetCall().(*Whitelist_DispatchWhitelistedCallWithPreimageCall_ChildBounties); ok {
		return x.ChildBounties
	}
	return nil
}

func (x *Whitelist_DispatchWhitelistedCallWithPreimageCall) GetNominationPools() *NominationPoolsPallet {
	if x, ok := x.GetCall().(*Whitelist_DispatchWhitelistedCallWithPreimageCall_NominationPools); ok {
		return x.NominationPools
	}
	return nil
}

func (x *Whitelist_DispatchWhitelistedCallWithPreimageCall) GetGear() *GearPallet {
	if x, ok := x.GetCall().(*Whitelist_DispatchWhitelistedCallWithPreimageCall_Gear); ok {
		return x.Gear
	}
	return nil
}

func (x *Whitelist_DispatchWhitelistedCallWithPreimageCall) GetStakingRewards() *StakingRewardsPallet {
	if x, ok := x.GetCall().(*Whitelist_DispatchWhitelistedCallWithPreimageCall_StakingRewards); ok {
		return x.StakingRewards
	}
	return nil
}

func (x *Whitelist_DispatchWhitelistedCallWithPreimageCall) GetGearVoucher() *GearVoucherPallet {
	if x, ok := x.GetCall().(*Whitelist_DispatchWhitelistedCallWithPreimageCall_GearVoucher); ok {
		return x.GearVoucher
	}
	return nil
}

type isWhitelist_DispatchWhitelistedCallWithPreimageCall_Call interface {
	isWhitelist_DispatchWhitelistedCallWithPreimageCall_Call()
}

type Whitelist_DispatchWhitelistedCallWithPreimageCall_System struct {
	System *SystemPallet `protobuf:"bytes,1,opt,name=system,proto3,oneof"`
}

type Whitelist_DispatchWhitelistedCallWithPreimageCall_Timestamp struct {
	Timestamp *TimestampPallet `protobuf:"bytes,2,opt,name=timestamp,proto3,oneof"`
}

type Whitelist_DispatchWhitelistedCallWithPreimageCall_Babe struct {
	Babe *BabePallet `protobuf:"bytes,3,opt,name=babe,proto3,oneof"`
}

type Whitelist_DispatchWhitelistedCallWithPreimageCall_Grandpa struct {
	Grandpa *GrandpaPallet `protobuf:"bytes,4,opt,name=grandpa,proto3,oneof"`
}

type Whitelist_DispatchWhitelistedCallWithPreimageCall_Balances struct {
	Balances *BalancesPallet `protobuf:"bytes,5,opt,name=balances,proto3,oneof"`
}

type Whitelist_DispatchWhitelistedCallWithPreimageCall_Vesting struct {
	Vesting *VestingPallet `protobuf:"bytes,6,opt,name=vesting,proto3,oneof"`
}

type Whitelist_DispatchWhitelistedCallWithPreimageCall_BagsList struct {
	BagsList *BagsListPallet `protobuf:"bytes,7,opt,name=bags_list,json=bagsList,proto3,oneof"`
}

type Whitelist_DispatchWhitelistedCallWithPreimageCall_ImOnline struct {
	ImOnline *ImOnlinePallet `protobuf:"bytes,8,opt,name=im_online,json=imOnline,proto3,oneof"`
}

type Whitelist_DispatchWhitelistedCallWithPreimageCall_Staking struct {
	Staking *StakingPallet `protobuf:"bytes,9,opt,name=staking,proto3,oneof"`
}

type Whitelist_DispatchWhitelistedCallWithPreimageCall_Session struct {
	Session *SessionPallet `protobuf:"bytes,10,opt,name=session,proto3,oneof"`
}

type Whitelist_DispatchWhitelistedCallWithPreimageCall_Treasury struct {
	Treasury *TreasuryPallet `protobuf:"bytes,11,opt,name=treasury,proto3,oneof"`
}

type Whitelist_DispatchWhitelistedCallWithPreimageCall_Utility struct {
	Utility *UtilityPallet `protobuf:"bytes,12,opt,name=utility,proto3,oneof"`
}

type Whitelist_DispatchWhitelistedCallWithPreimageCall_ConvictionVoting struct {
	ConvictionVoting *ConvictionVotingPallet `protobuf:"bytes,13,opt,name=conviction_voting,json=convictionVoting,proto3,oneof"`
}

type Whitelist_DispatchWhitelistedCallWithPreimageCall_Referenda struct {
	Referenda *ReferendaPallet `protobuf:"bytes,14,opt,name=referenda,proto3,oneof"`
}

type Whitelist_DispatchWhitelistedCallWithPreimageCall_FellowshipCollective struct {
	FellowshipCollective *FellowshipCollectivePallet `protobuf:"bytes,15,opt,name=fellowship_collective,json=fellowshipCollective,proto3,oneof"`
}

type Whitelist_DispatchWhitelistedCallWithPreimageCall_FellowshipReferenda struct {
	FellowshipReferenda *FellowshipReferendaPallet `protobuf:"bytes,16,opt,name=fellowship_referenda,json=fellowshipReferenda,proto3,oneof"`
}

type Whitelist_DispatchWhitelistedCallWithPreimageCall_Whitelist struct {
	Whitelist *WhitelistPallet `protobuf:"bytes,17,opt,name=whitelist,proto3,oneof"`
}

type Whitelist_DispatchWhitelistedCallWithPreimageCall_Scheduler struct {
	Scheduler *SchedulerPallet `protobuf:"bytes,18,opt,name=scheduler,proto3,oneof"`
}

type Whitelist_DispatchWhitelistedCallWithPreimageCall_Preimage struct {
	Preimage *PreimagePallet `protobuf:"bytes,19,opt,name=preimage,proto3,oneof"`
}

type Whitelist_DispatchWhitelistedCallWithPreimageCall_Identity struct {
	Identity *IdentityPallet `protobuf:"bytes,20,opt,name=identity,proto3,oneof"`
}

type Whitelist_DispatchWhitelistedCallWithPreimageCall_Proxy struct {
	Proxy *ProxyPallet `protobuf:"bytes,21,opt,name=proxy,proto3,oneof"`
}

type Whitelist_DispatchWhitelistedCallWithPreimageCall_Multisig struct {
	Multisig *MultisigPallet `protobuf:"bytes,22,opt,name=multisig,proto3,oneof"`
}

type Whitelist_DispatchWhitelistedCallWithPreimageCall_ElectionProviderMultiPhase struct {
	ElectionProviderMultiPhase *ElectionProviderMultiPhasePallet `protobuf:"bytes,23,opt,name=election_provider_multi_phase,json=electionProviderMultiPhase,proto3,oneof"`
}

type Whitelist_DispatchWhitelistedCallWithPreimageCall_Bounties struct {
	Bounties *BountiesPallet `protobuf:"bytes,24,opt,name=bounties,proto3,oneof"`
}

type Whitelist_DispatchWhitelistedCallWithPreimageCall_ChildBounties struct {
	ChildBounties *ChildBountiesPallet `protobuf:"bytes,25,opt,name=child_bounties,json=childBounties,proto3,oneof"`
}

type Whitelist_DispatchWhitelistedCallWithPreimageCall_NominationPools struct {
	NominationPools *NominationPoolsPallet `protobuf:"bytes,26,opt,name=nomination_pools,json=nominationPools,proto3,oneof"`
}

type Whitelist_DispatchWhitelistedCallWithPreimageCall_Gear struct {
	Gear *GearPallet `protobuf:"bytes,27,opt,name=gear,proto3,oneof"`
}

type Whitelist_DispatchWhitelistedCallWithPreimageCall_StakingRewards struct {
	StakingRewards *StakingRewardsPallet `protobuf:"bytes,28,opt,name=staking_rewards,json=stakingRewards,proto3,oneof"`
}

type Whitelist_DispatchWhitelistedCallWithPreimageCall_GearVoucher struct {
	GearVoucher *GearVoucherPallet `protobuf:"bytes,29,opt,name=gear_voucher,json=gearVoucher,proto3,oneof"`
}

func (*Whitelist_DispatchWhitelistedCallWithPreimageCall_System) isWhitelist_DispatchWhitelistedCallWithPreimageCall_Call() {
}

func (*Whitelist_DispatchWhitelistedCallWithPreimageCall_Timestamp) isWhitelist_DispatchWhitelistedCallWithPreimageCall_Call() {
}

func (*Whitelist_DispatchWhitelistedCallWithPreimageCall_Babe) isWhitelist_DispatchWhitelistedCallWithPreimageCall_Call() {
}

func (*Whitelist_DispatchWhitelistedCallWithPreimageCall_Grandpa) isWhitelist_DispatchWhitelistedCallWithPreimageCall_Call() {
}

func (*Whitelist_DispatchWhitelistedCallWithPreimageCall_Balances) isWhitelist_DispatchWhitelistedCallWithPreimageCall_Call() {
}

func (*Whitelist_DispatchWhitelistedCallWithPreimageCall_Vesting) isWhitelist_DispatchWhitelistedCallWithPreimageCall_Call() {
}

func (*Whitelist_DispatchWhitelistedCallWithPreimageCall_BagsList) isWhitelist_DispatchWhitelistedCallWithPreimageCall_Call() {
}

func (*Whitelist_DispatchWhitelistedCallWithPreimageCall_ImOnline) isWhitelist_DispatchWhitelistedCallWithPreimageCall_Call() {
}

func (*Whitelist_DispatchWhitelistedCallWithPreimageCall_Staking) isWhitelist_DispatchWhitelistedCallWithPreimageCall_Call() {
}

func (*Whitelist_DispatchWhitelistedCallWithPreimageCall_Session) isWhitelist_DispatchWhitelistedCallWithPreimageCall_Call() {
}

func (*Whitelist_DispatchWhitelistedCallWithPreimageCall_Treasury) isWhitelist_DispatchWhitelistedCallWithPreimageCall_Call() {
}

func (*Whitelist_DispatchWhitelistedCallWithPreimageCall_Utility) isWhitelist_DispatchWhitelistedCallWithPreimageCall_Call() {
}

func (*Whitelist_DispatchWhitelistedCallWithPreimageCall_ConvictionVoting) isWhitelist_DispatchWhitelistedCallWithPreimageCall_Call() {
}

func (*Whitelist_DispatchWhitelistedCallWithPreimageCall_Referenda) isWhitelist_DispatchWhitelistedCallWithPreimageCall_Call() {
}

func (*Whitelist_DispatchWhitelistedCallWithPreimageCall_FellowshipCollective) isWhitelist_DispatchWhitelistedCallWithPreimageCall_Call() {
}

func (*Whitelist_DispatchWhitelistedCallWithPreimageCall_FellowshipReferenda) isWhitelist_DispatchWhitelistedCallWithPreimageCall_Call() {
}

func (*Whitelist_DispatchWhitelistedCallWithPreimageCall_Whitelist) isWhitelist_DispatchWhitelistedCallWithPreimageCall_Call() {
}

func (*Whitelist_DispatchWhitelistedCallWithPreimageCall_Scheduler) isWhitelist_DispatchWhitelistedCallWithPreimageCall_Call() {
}

func (*Whitelist_DispatchWhitelistedCallWithPreimageCall_Preimage) isWhitelist_DispatchWhitelistedCallWithPreimageCall_Call() {
}

func (*Whitelist_DispatchWhitelistedCallWithPreimageCall_Identity) isWhitelist_DispatchWhitelistedCallWithPreimageCall_Call() {
}

func (*Whitelist_DispatchWhitelistedCallWithPreimageCall_Proxy) isWhitelist_DispatchWhitelistedCallWithPreimageCall_Call() {
}

func (*Whitelist_DispatchWhitelistedCallWithPreimageCall_Multisig) isWhitelist_DispatchWhitelistedCallWithPreimageCall_Call() {
}

func (*Whitelist_DispatchWhitelistedCallWithPreimageCall_ElectionProviderMultiPhase) isWhitelist_DispatchWhitelistedCallWithPreimageCall_Call() {
}

func (*Whitelist_DispatchWhitelistedCallWithPreimageCall_Bounties) isWhitelist_DispatchWhitelistedCallWithPreimageCall_Call() {
}

func (*Whitelist_DispatchWhitelistedCallWithPreimageCall_ChildBounties) isWhitelist_DispatchWhitelistedCallWithPreimageCall_Call() {
}

func (*Whitelist_DispatchWhitelistedCallWithPreimageCall_NominationPools) isWhitelist_DispatchWhitelistedCallWithPreimageCall_Call() {
}

func (*Whitelist_DispatchWhitelistedCallWithPreimageCall_Gear) isWhitelist_DispatchWhitelistedCallWithPreimageCall_Call() {
}

func (*Whitelist_DispatchWhitelistedCallWithPreimageCall_StakingRewards) isWhitelist_DispatchWhitelistedCallWithPreimageCall_Call() {
}

func (*Whitelist_DispatchWhitelistedCallWithPreimageCall_GearVoucher) isWhitelist_DispatchWhitelistedCallWithPreimageCall_Call() {
}

type Proxy_Staking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Proxy_Staking) Reset() {
	*x = Proxy_Staking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[453]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proxy_Staking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proxy_Staking) ProtoMessage() {}

func (x *Proxy_Staking) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[453]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proxy_Staking.ProtoReflect.Descriptor instead.
func (*Proxy_Staking) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{453}
}

type Staking_Account struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 *SpCoreCryptoAccountId32 `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Staking_Account) Reset() {
	*x = Staking_Account{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[454]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staking_Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staking_Account) ProtoMessage() {}

func (x *Staking_Account) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[454]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staking_Account.ProtoReflect.Descriptor instead.
func (*Staking_Account) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{454}
}

func (x *Staking_Account) GetValue0() *SpCoreCryptoAccountId32 {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Staking_BondCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string         `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Payee *Staking_Payee `protobuf:"bytes,2,opt,name=payee,proto3" json:"payee,omitempty"`
}

func (x *Staking_BondCall) Reset() {
	*x = Staking_BondCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[455]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staking_BondCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staking_BondCall) ProtoMessage() {}

func (x *Staking_BondCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[455]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staking_BondCall.ProtoReflect.Descriptor instead.
func (*Staking_BondCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{455}
}

func (x *Staking_BondCall) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Staking_BondCall) GetPayee() *Staking_Payee {
	if x != nil {
		return x.Payee
	}
	return nil
}

type BagsList_Id struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 *SpCoreCryptoAccountId32 `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *BagsList_Id) Reset() {
	*x = BagsList_Id{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[456]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BagsList_Id) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BagsList_Id) ProtoMessage() {}

func (x *BagsList_Id) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[456]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BagsList_Id.ProtoReflect.Descriptor instead.
func (*BagsList_Id) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{456}
}

func (x *BagsList_Id) GetValue0() *SpCoreCryptoAccountId32 {
	if x != nil {
		return x.Value0
	}
	return nil
}

type FellowshipReferenda_After struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 uint32 `protobuf:"varint,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *FellowshipReferenda_After) Reset() {
	*x = FellowshipReferenda_After{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[457]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FellowshipReferenda_After) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FellowshipReferenda_After) ProtoMessage() {}

func (x *FellowshipReferenda_After) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[457]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FellowshipReferenda_After.ProtoReflect.Descriptor instead.
func (*FellowshipReferenda_After) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{457}
}

func (x *FellowshipReferenda_After) GetValue0() uint32 {
	if x != nil {
		return x.Value0
	}
	return 0
}

type SpArithmeticPerThingsPerU16 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 uint32 `protobuf:"varint,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *SpArithmeticPerThingsPerU16) Reset() {
	*x = SpArithmeticPerThingsPerU16{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[458]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpArithmeticPerThingsPerU16) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpArithmeticPerThingsPerU16) ProtoMessage() {}

func (x *SpArithmeticPerThingsPerU16) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[458]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpArithmeticPerThingsPerU16.ProtoReflect.Descriptor instead.
func (*SpArithmeticPerThingsPerU16) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{458}
}

func (x *SpArithmeticPerThingsPerU16) GetValue0() uint32 {
	if x != nil {
		return x.Value0
	}
	return 0
}

type GearVoucher_DeclineVoucher struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GearVoucher_DeclineVoucher) Reset() {
	*x = GearVoucher_DeclineVoucher{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[459]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GearVoucher_DeclineVoucher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GearVoucher_DeclineVoucher) ProtoMessage() {}

func (x *GearVoucher_DeclineVoucher) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[459]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GearVoucher_DeclineVoucher.ProtoReflect.Descriptor instead.
func (*GearVoucher_DeclineVoucher) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{459}
}

type FinalityGrandpaPrecommit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetHash   *PrimitiveTypesH256 `protobuf:"bytes,1,opt,name=target_hash,json=targetHash,proto3" json:"target_hash,omitempty"`
	TargetNumber uint32              `protobuf:"varint,2,opt,name=target_number,json=targetNumber,proto3" json:"target_number,omitempty"`
}

func (x *FinalityGrandpaPrecommit) Reset() {
	*x = FinalityGrandpaPrecommit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[460]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinalityGrandpaPrecommit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalityGrandpaPrecommit) ProtoMessage() {}

func (x *FinalityGrandpaPrecommit) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[460]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalityGrandpaPrecommit.ProtoReflect.Descriptor instead.
func (*FinalityGrandpaPrecommit) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{460}
}

func (x *FinalityGrandpaPrecommit) GetTargetHash() *PrimitiveTypesH256 {
	if x != nil {
		return x.TargetHash
	}
	return nil
}

func (x *FinalityGrandpaPrecommit) GetTargetNumber() uint32 {
	if x != nil {
		return x.TargetNumber
	}
	return 0
}

type Proxy_RejectAnnouncementCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Delegate *Proxy_Delegate     `protobuf:"bytes,1,opt,name=delegate,proto3" json:"delegate,omitempty"`
	CallHash *PrimitiveTypesH256 `protobuf:"bytes,2,opt,name=call_hash,json=callHash,proto3" json:"call_hash,omitempty"`
}

func (x *Proxy_RejectAnnouncementCall) Reset() {
	*x = Proxy_RejectAnnouncementCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[461]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proxy_RejectAnnouncementCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proxy_RejectAnnouncementCall) ProtoMessage() {}

func (x *Proxy_RejectAnnouncementCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[461]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proxy_RejectAnnouncementCall.ProtoReflect.Descriptor instead.
func (*Proxy_RejectAnnouncementCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{461}
}

func (x *Proxy_RejectAnnouncementCall) GetDelegate() *Proxy_Delegate {
	if x != nil {
		return x.Delegate
	}
	return nil
}

func (x *Proxy_RejectAnnouncementCall) GetCallHash() *PrimitiveTypesH256 {
	if x != nil {
		return x.CallHash
	}
	return nil
}

type Gear_ClaimValueCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageId *GprimitivesMessageId `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (x *Gear_ClaimValueCall) Reset() {
	*x = Gear_ClaimValueCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[462]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Gear_ClaimValueCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gear_ClaimValueCall) ProtoMessage() {}

func (x *Gear_ClaimValueCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[462]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gear_ClaimValueCall.ProtoReflect.Descriptor instead.
func (*Gear_ClaimValueCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{462}
}

func (x *Gear_ClaimValueCall) GetMessageId() *GprimitivesMessageId {
	if x != nil {
		return x.MessageId
	}
	return nil
}

type Identity_Riot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*Identity_Riot_None
	//	*Identity_Riot_Raw0
	//	*Identity_Riot_Raw1
	//	*Identity_Riot_Raw2
	//	*Identity_Riot_Raw3
	//	*Identity_Riot_Raw4
	//	*Identity_Riot_Raw5
	//	*Identity_Riot_Raw6
	//	*Identity_Riot_Raw7
	//	*Identity_Riot_Raw8
	//	*Identity_Riot_Raw9
	//	*Identity_Riot_Raw10
	//	*Identity_Riot_Raw11
	//	*Identity_Riot_Raw12
	//	*Identity_Riot_Raw13
	//	*Identity_Riot_Raw14
	//	*Identity_Riot_Raw15
	//	*Identity_Riot_Raw16
	//	*Identity_Riot_Raw17
	//	*Identity_Riot_Raw18
	//	*Identity_Riot_Raw19
	//	*Identity_Riot_Raw20
	//	*Identity_Riot_Raw21
	//	*Identity_Riot_Raw22
	//	*Identity_Riot_Raw23
	//	*Identity_Riot_Raw24
	//	*Identity_Riot_Raw25
	//	*Identity_Riot_Raw26
	//	*Identity_Riot_Raw27
	//	*Identity_Riot_Raw28
	//	*Identity_Riot_Raw29
	//	*Identity_Riot_Raw30
	//	*Identity_Riot_Raw31
	//	*Identity_Riot_Raw32
	//	*Identity_Riot_BlakeTwo256
	//	*Identity_Riot_Sha256
	//	*Identity_Riot_Keccak256
	//	*Identity_Riot_ShaThree256
	Value isIdentity_Riot_Value `protobuf_oneof:"value"`
}

func (x *Identity_Riot) Reset() {
	*x = Identity_Riot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[463]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_Riot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_Riot) ProtoMessage() {}

func (x *Identity_Riot) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[463]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_Riot.ProtoReflect.Descriptor instead.
func (*Identity_Riot) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{463}
}

func (m *Identity_Riot) GetValue() isIdentity_Riot_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Identity_Riot) GetNone() *Identity_None {
	if x, ok := x.GetValue().(*Identity_Riot_None); ok {
		return x.None
	}
	return nil
}

func (x *Identity_Riot) GetRaw0() *Identity_Raw0 {
	if x, ok := x.GetValue().(*Identity_Riot_Raw0); ok {
		return x.Raw0
	}
	return nil
}

func (x *Identity_Riot) GetRaw1() *Identity_Raw1 {
	if x, ok := x.GetValue().(*Identity_Riot_Raw1); ok {
		return x.Raw1
	}
	return nil
}

func (x *Identity_Riot) GetRaw2() *Identity_Raw2 {
	if x, ok := x.GetValue().(*Identity_Riot_Raw2); ok {
		return x.Raw2
	}
	return nil
}

func (x *Identity_Riot) GetRaw3() *Identity_Raw3 {
	if x, ok := x.GetValue().(*Identity_Riot_Raw3); ok {
		return x.Raw3
	}
	return nil
}

func (x *Identity_Riot) GetRaw4() *Identity_Raw4 {
	if x, ok := x.GetValue().(*Identity_Riot_Raw4); ok {
		return x.Raw4
	}
	return nil
}

func (x *Identity_Riot) GetRaw5() *Identity_Raw5 {
	if x, ok := x.GetValue().(*Identity_Riot_Raw5); ok {
		return x.Raw5
	}
	return nil
}

func (x *Identity_Riot) GetRaw6() *Identity_Raw6 {
	if x, ok := x.GetValue().(*Identity_Riot_Raw6); ok {
		return x.Raw6
	}
	return nil
}

func (x *Identity_Riot) GetRaw7() *Identity_Raw7 {
	if x, ok := x.GetValue().(*Identity_Riot_Raw7); ok {
		return x.Raw7
	}
	return nil
}

func (x *Identity_Riot) GetRaw8() *Identity_Raw8 {
	if x, ok := x.GetValue().(*Identity_Riot_Raw8); ok {
		return x.Raw8
	}
	return nil
}

func (x *Identity_Riot) GetRaw9() *Identity_Raw9 {
	if x, ok := x.GetValue().(*Identity_Riot_Raw9); ok {
		return x.Raw9
	}
	return nil
}

func (x *Identity_Riot) GetRaw10() *Identity_Raw10 {
	if x, ok := x.GetValue().(*Identity_Riot_Raw10); ok {
		return x.Raw10
	}
	return nil
}

func (x *Identity_Riot) GetRaw11() *Identity_Raw11 {
	if x, ok := x.GetValue().(*Identity_Riot_Raw11); ok {
		return x.Raw11
	}
	return nil
}

func (x *Identity_Riot) GetRaw12() *Identity_Raw12 {
	if x, ok := x.GetValue().(*Identity_Riot_Raw12); ok {
		return x.Raw12
	}
	return nil
}

func (x *Identity_Riot) GetRaw13() *Identity_Raw13 {
	if x, ok := x.GetValue().(*Identity_Riot_Raw13); ok {
		return x.Raw13
	}
	return nil
}

func (x *Identity_Riot) GetRaw14() *Identity_Raw14 {
	if x, ok := x.GetValue().(*Identity_Riot_Raw14); ok {
		return x.Raw14
	}
	return nil
}

func (x *Identity_Riot) GetRaw15() *Identity_Raw15 {
	if x, ok := x.GetValue().(*Identity_Riot_Raw15); ok {
		return x.Raw15
	}
	return nil
}

func (x *Identity_Riot) GetRaw16() *Identity_Raw16 {
	if x, ok := x.GetValue().(*Identity_Riot_Raw16); ok {
		return x.Raw16
	}
	return nil
}

func (x *Identity_Riot) GetRaw17() *Identity_Raw17 {
	if x, ok := x.GetValue().(*Identity_Riot_Raw17); ok {
		return x.Raw17
	}
	return nil
}

func (x *Identity_Riot) GetRaw18() *Identity_Raw18 {
	if x, ok := x.GetValue().(*Identity_Riot_Raw18); ok {
		return x.Raw18
	}
	return nil
}

func (x *Identity_Riot) GetRaw19() *Identity_Raw19 {
	if x, ok := x.GetValue().(*Identity_Riot_Raw19); ok {
		return x.Raw19
	}
	return nil
}

func (x *Identity_Riot) GetRaw20() *Identity_Raw20 {
	if x, ok := x.GetValue().(*Identity_Riot_Raw20); ok {
		return x.Raw20
	}
	return nil
}

func (x *Identity_Riot) GetRaw21() *Identity_Raw21 {
	if x, ok := x.GetValue().(*Identity_Riot_Raw21); ok {
		return x.Raw21
	}
	return nil
}

func (x *Identity_Riot) GetRaw22() *Identity_Raw22 {
	if x, ok := x.GetValue().(*Identity_Riot_Raw22); ok {
		return x.Raw22
	}
	return nil
}

func (x *Identity_Riot) GetRaw23() *Identity_Raw23 {
	if x, ok := x.GetValue().(*Identity_Riot_Raw23); ok {
		return x.Raw23
	}
	return nil
}

func (x *Identity_Riot) GetRaw24() *Identity_Raw24 {
	if x, ok := x.GetValue().(*Identity_Riot_Raw24); ok {
		return x.Raw24
	}
	return nil
}

func (x *Identity_Riot) GetRaw25() *Identity_Raw25 {
	if x, ok := x.GetValue().(*Identity_Riot_Raw25); ok {
		return x.Raw25
	}
	return nil
}

func (x *Identity_Riot) GetRaw26() *Identity_Raw26 {
	if x, ok := x.GetValue().(*Identity_Riot_Raw26); ok {
		return x.Raw26
	}
	return nil
}

func (x *Identity_Riot) GetRaw27() *Identity_Raw27 {
	if x, ok := x.GetValue().(*Identity_Riot_Raw27); ok {
		return x.Raw27
	}
	return nil
}

func (x *Identity_Riot) GetRaw28() *Identity_Raw28 {
	if x, ok := x.GetValue().(*Identity_Riot_Raw28); ok {
		return x.Raw28
	}
	return nil
}

func (x *Identity_Riot) GetRaw29() *Identity_Raw29 {
	if x, ok := x.GetValue().(*Identity_Riot_Raw29); ok {
		return x.Raw29
	}
	return nil
}

func (x *Identity_Riot) GetRaw30() *Identity_Raw30 {
	if x, ok := x.GetValue().(*Identity_Riot_Raw30); ok {
		return x.Raw30
	}
	return nil
}

func (x *Identity_Riot) GetRaw31() *Identity_Raw31 {
	if x, ok := x.GetValue().(*Identity_Riot_Raw31); ok {
		return x.Raw31
	}
	return nil
}

func (x *Identity_Riot) GetRaw32() *Identity_Raw32 {
	if x, ok := x.GetValue().(*Identity_Riot_Raw32); ok {
		return x.Raw32
	}
	return nil
}

func (x *Identity_Riot) GetBlakeTwo256() *Identity_BlakeTwo256 {
	if x, ok := x.GetValue().(*Identity_Riot_BlakeTwo256); ok {
		return x.BlakeTwo256
	}
	return nil
}

func (x *Identity_Riot) GetSha256() *Identity_Sha256 {
	if x, ok := x.GetValue().(*Identity_Riot_Sha256); ok {
		return x.Sha256
	}
	return nil
}

func (x *Identity_Riot) GetKeccak256() *Identity_Keccak256 {
	if x, ok := x.GetValue().(*Identity_Riot_Keccak256); ok {
		return x.Keccak256
	}
	return nil
}

func (x *Identity_Riot) GetShaThree256() *Identity_ShaThree256 {
	if x, ok := x.GetValue().(*Identity_Riot_ShaThree256); ok {
		return x.ShaThree256
	}
	return nil
}

type isIdentity_Riot_Value interface {
	isIdentity_Riot_Value()
}

type Identity_Riot_None struct {
	None *Identity_None `protobuf:"bytes,1,opt,name=none,proto3,oneof"`
}

type Identity_Riot_Raw0 struct {
	Raw0 *Identity_Raw0 `protobuf:"bytes,2,opt,name=raw0,proto3,oneof"`
}

type Identity_Riot_Raw1 struct {
	Raw1 *Identity_Raw1 `protobuf:"bytes,3,opt,name=raw1,proto3,oneof"`
}

type Identity_Riot_Raw2 struct {
	Raw2 *Identity_Raw2 `protobuf:"bytes,4,opt,name=raw2,proto3,oneof"`
}

type Identity_Riot_Raw3 struct {
	Raw3 *Identity_Raw3 `protobuf:"bytes,5,opt,name=raw3,proto3,oneof"`
}

type Identity_Riot_Raw4 struct {
	Raw4 *Identity_Raw4 `protobuf:"bytes,6,opt,name=raw4,proto3,oneof"`
}

type Identity_Riot_Raw5 struct {
	Raw5 *Identity_Raw5 `protobuf:"bytes,7,opt,name=raw5,proto3,oneof"`
}

type Identity_Riot_Raw6 struct {
	Raw6 *Identity_Raw6 `protobuf:"bytes,8,opt,name=raw6,proto3,oneof"`
}

type Identity_Riot_Raw7 struct {
	Raw7 *Identity_Raw7 `protobuf:"bytes,9,opt,name=raw7,proto3,oneof"`
}

type Identity_Riot_Raw8 struct {
	Raw8 *Identity_Raw8 `protobuf:"bytes,10,opt,name=raw8,proto3,oneof"`
}

type Identity_Riot_Raw9 struct {
	Raw9 *Identity_Raw9 `protobuf:"bytes,11,opt,name=raw9,proto3,oneof"`
}

type Identity_Riot_Raw10 struct {
	Raw10 *Identity_Raw10 `protobuf:"bytes,12,opt,name=raw10,proto3,oneof"`
}

type Identity_Riot_Raw11 struct {
	Raw11 *Identity_Raw11 `protobuf:"bytes,13,opt,name=raw11,proto3,oneof"`
}

type Identity_Riot_Raw12 struct {
	Raw12 *Identity_Raw12 `protobuf:"bytes,14,opt,name=raw12,proto3,oneof"`
}

type Identity_Riot_Raw13 struct {
	Raw13 *Identity_Raw13 `protobuf:"bytes,15,opt,name=raw13,proto3,oneof"`
}

type Identity_Riot_Raw14 struct {
	Raw14 *Identity_Raw14 `protobuf:"bytes,16,opt,name=raw14,proto3,oneof"`
}

type Identity_Riot_Raw15 struct {
	Raw15 *Identity_Raw15 `protobuf:"bytes,17,opt,name=raw15,proto3,oneof"`
}

type Identity_Riot_Raw16 struct {
	Raw16 *Identity_Raw16 `protobuf:"bytes,18,opt,name=raw16,proto3,oneof"`
}

type Identity_Riot_Raw17 struct {
	Raw17 *Identity_Raw17 `protobuf:"bytes,19,opt,name=raw17,proto3,oneof"`
}

type Identity_Riot_Raw18 struct {
	Raw18 *Identity_Raw18 `protobuf:"bytes,20,opt,name=raw18,proto3,oneof"`
}

type Identity_Riot_Raw19 struct {
	Raw19 *Identity_Raw19 `protobuf:"bytes,21,opt,name=raw19,proto3,oneof"`
}

type Identity_Riot_Raw20 struct {
	Raw20 *Identity_Raw20 `protobuf:"bytes,22,opt,name=raw20,proto3,oneof"`
}

type Identity_Riot_Raw21 struct {
	Raw21 *Identity_Raw21 `protobuf:"bytes,23,opt,name=raw21,proto3,oneof"`
}

type Identity_Riot_Raw22 struct {
	Raw22 *Identity_Raw22 `protobuf:"bytes,24,opt,name=raw22,proto3,oneof"`
}

type Identity_Riot_Raw23 struct {
	Raw23 *Identity_Raw23 `protobuf:"bytes,25,opt,name=raw23,proto3,oneof"`
}

type Identity_Riot_Raw24 struct {
	Raw24 *Identity_Raw24 `protobuf:"bytes,26,opt,name=raw24,proto3,oneof"`
}

type Identity_Riot_Raw25 struct {
	Raw25 *Identity_Raw25 `protobuf:"bytes,27,opt,name=raw25,proto3,oneof"`
}

type Identity_Riot_Raw26 struct {
	Raw26 *Identity_Raw26 `protobuf:"bytes,28,opt,name=raw26,proto3,oneof"`
}

type Identity_Riot_Raw27 struct {
	Raw27 *Identity_Raw27 `protobuf:"bytes,29,opt,name=raw27,proto3,oneof"`
}

type Identity_Riot_Raw28 struct {
	Raw28 *Identity_Raw28 `protobuf:"bytes,30,opt,name=raw28,proto3,oneof"`
}

type Identity_Riot_Raw29 struct {
	Raw29 *Identity_Raw29 `protobuf:"bytes,31,opt,name=raw29,proto3,oneof"`
}

type Identity_Riot_Raw30 struct {
	Raw30 *Identity_Raw30 `protobuf:"bytes,32,opt,name=raw30,proto3,oneof"`
}

type Identity_Riot_Raw31 struct {
	Raw31 *Identity_Raw31 `protobuf:"bytes,33,opt,name=raw31,proto3,oneof"`
}

type Identity_Riot_Raw32 struct {
	Raw32 *Identity_Raw32 `protobuf:"bytes,34,opt,name=raw32,proto3,oneof"`
}

type Identity_Riot_BlakeTwo256 struct {
	BlakeTwo256 *Identity_BlakeTwo256 `protobuf:"bytes,35,opt,name=blake_two256,json=blakeTwo256,proto3,oneof"`
}

type Identity_Riot_Sha256 struct {
	Sha256 *Identity_Sha256 `protobuf:"bytes,36,opt,name=sha256,proto3,oneof"`
}

type Identity_Riot_Keccak256 struct {
	Keccak256 *Identity_Keccak256 `protobuf:"bytes,37,opt,name=keccak256,proto3,oneof"`
}

type Identity_Riot_ShaThree256 struct {
	ShaThree256 *Identity_ShaThree256 `protobuf:"bytes,38,opt,name=sha_three256,json=shaThree256,proto3,oneof"`
}

func (*Identity_Riot_None) isIdentity_Riot_Value() {}

func (*Identity_Riot_Raw0) isIdentity_Riot_Value() {}

func (*Identity_Riot_Raw1) isIdentity_Riot_Value() {}

func (*Identity_Riot_Raw2) isIdentity_Riot_Value() {}

func (*Identity_Riot_Raw3) isIdentity_Riot_Value() {}

func (*Identity_Riot_Raw4) isIdentity_Riot_Value() {}

func (*Identity_Riot_Raw5) isIdentity_Riot_Value() {}

func (*Identity_Riot_Raw6) isIdentity_Riot_Value() {}

func (*Identity_Riot_Raw7) isIdentity_Riot_Value() {}

func (*Identity_Riot_Raw8) isIdentity_Riot_Value() {}

func (*Identity_Riot_Raw9) isIdentity_Riot_Value() {}

func (*Identity_Riot_Raw10) isIdentity_Riot_Value() {}

func (*Identity_Riot_Raw11) isIdentity_Riot_Value() {}

func (*Identity_Riot_Raw12) isIdentity_Riot_Value() {}

func (*Identity_Riot_Raw13) isIdentity_Riot_Value() {}

func (*Identity_Riot_Raw14) isIdentity_Riot_Value() {}

func (*Identity_Riot_Raw15) isIdentity_Riot_Value() {}

func (*Identity_Riot_Raw16) isIdentity_Riot_Value() {}

func (*Identity_Riot_Raw17) isIdentity_Riot_Value() {}

func (*Identity_Riot_Raw18) isIdentity_Riot_Value() {}

func (*Identity_Riot_Raw19) isIdentity_Riot_Value() {}

func (*Identity_Riot_Raw20) isIdentity_Riot_Value() {}

func (*Identity_Riot_Raw21) isIdentity_Riot_Value() {}

func (*Identity_Riot_Raw22) isIdentity_Riot_Value() {}

func (*Identity_Riot_Raw23) isIdentity_Riot_Value() {}

func (*Identity_Riot_Raw24) isIdentity_Riot_Value() {}

func (*Identity_Riot_Raw25) isIdentity_Riot_Value() {}

func (*Identity_Riot_Raw26) isIdentity_Riot_Value() {}

func (*Identity_Riot_Raw27) isIdentity_Riot_Value() {}

func (*Identity_Riot_Raw28) isIdentity_Riot_Value() {}

func (*Identity_Riot_Raw29) isIdentity_Riot_Value() {}

func (*Identity_Riot_Raw30) isIdentity_Riot_Value() {}

func (*Identity_Riot_Raw31) isIdentity_Riot_Value() {}

func (*Identity_Riot_Raw32) isIdentity_Riot_Value() {}

func (*Identity_Riot_BlakeTwo256) isIdentity_Riot_Value() {}

func (*Identity_Riot_Sha256) isIdentity_Riot_Value() {}

func (*Identity_Riot_Keccak256) isIdentity_Riot_Value() {}

func (*Identity_Riot_ShaThree256) isIdentity_Riot_Value() {}

type Proxy_TupleNull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *TupleNull `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Proxy_TupleNull) Reset() {
	*x = Proxy_TupleNull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[464]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proxy_TupleNull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proxy_TupleNull) ProtoMessage() {}

func (x *Proxy_TupleNull) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[464]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proxy_TupleNull.ProtoReflect.Descriptor instead.
func (*Proxy_TupleNull) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{464}
}

func (x *Proxy_TupleNull) GetValue() *TupleNull {
	if x != nil {
		return x.Value
	}
	return nil
}

type ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes10Listuint32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 uint32                                                               `protobuf:"varint,1,opt,name=value0,proto3" json:"value0,omitempty"`
	Value1 []*ElectionProviderMultiPhase_TupleUint32SpArithmeticPerThingsPerU16 `protobuf:"bytes,2,rep,name=value1,proto3" json:"value1,omitempty"`
	Value2 uint32                                                               `protobuf:"varint,3,opt,name=value2,proto3" json:"value2,omitempty"`
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes10Listuint32) Reset() {
	*x = ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes10Listuint32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[465]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes10Listuint32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes10Listuint32) ProtoMessage() {
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes10Listuint32) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[465]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes10Listuint32.ProtoReflect.Descriptor instead.
func (*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes10Listuint32) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{465}
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes10Listuint32) GetValue0() uint32 {
	if x != nil {
		return x.Value0
	}
	return 0
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes10Listuint32) GetValue1() []*ElectionProviderMultiPhase_TupleUint32SpArithmeticPerThingsPerU16 {
	if x != nil {
		return x.Value1
	}
	return nil
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes10Listuint32) GetValue2() uint32 {
	if x != nil {
		return x.Value2
	}
	return 0
}

type Balances_TupleNull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *TupleNull `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Balances_TupleNull) Reset() {
	*x = Balances_TupleNull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[466]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Balances_TupleNull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Balances_TupleNull) ProtoMessage() {}

func (x *Balances_TupleNull) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[466]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Balances_TupleNull.ProtoReflect.Descriptor instead.
func (*Balances_TupleNull) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{466}
}

func (x *Balances_TupleNull) GetValue() *TupleNull {
	if x != nil {
		return x.Value
	}
	return nil
}

type Staking_ValidateCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefs *Staking_PalletStakingValidatorPrefs `protobuf:"bytes,1,opt,name=prefs,proto3" json:"prefs,omitempty"`
}

func (x *Staking_ValidateCall) Reset() {
	*x = Staking_ValidateCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[467]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staking_ValidateCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staking_ValidateCall) ProtoMessage() {}

func (x *Staking_ValidateCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[467]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staking_ValidateCall.ProtoReflect.Descriptor instead.
func (*Staking_ValidateCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{467}
}

func (x *Staking_ValidateCall) GetPrefs() *Staking_PalletStakingValidatorPrefs {
	if x != nil {
		return x.Prefs
	}
	return nil
}

type Staking_Set struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 string `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Staking_Set) Reset() {
	*x = Staking_Set{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[468]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staking_Set) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staking_Set) ProtoMessage() {}

func (x *Staking_Set) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[468]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staking_Set.ProtoReflect.Descriptor instead.
func (*Staking_Set) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{468}
}

func (x *Staking_Set) GetValue0() string {
	if x != nil {
		return x.Value0
	}
	return ""
}

type Staking_MinNominatorBond struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*Staking_MinNominatorBond_Noop
	//	*Staking_MinNominatorBond_Set
	//	*Staking_MinNominatorBond_Remove
	Value isStaking_MinNominatorBond_Value `protobuf_oneof:"value"`
}

func (x *Staking_MinNominatorBond) Reset() {
	*x = Staking_MinNominatorBond{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[469]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staking_MinNominatorBond) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staking_MinNominatorBond) ProtoMessage() {}

func (x *Staking_MinNominatorBond) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[469]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staking_MinNominatorBond.ProtoReflect.Descriptor instead.
func (*Staking_MinNominatorBond) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{469}
}

func (m *Staking_MinNominatorBond) GetValue() isStaking_MinNominatorBond_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Staking_MinNominatorBond) GetNoop() *Staking_Noop {
	if x, ok := x.GetValue().(*Staking_MinNominatorBond_Noop); ok {
		return x.Noop
	}
	return nil
}

func (x *Staking_MinNominatorBond) GetSet() *Staking_Set {
	if x, ok := x.GetValue().(*Staking_MinNominatorBond_Set); ok {
		return x.Set
	}
	return nil
}

func (x *Staking_MinNominatorBond) GetRemove() *Staking_Remove {
	if x, ok := x.GetValue().(*Staking_MinNominatorBond_Remove); ok {
		return x.Remove
	}
	return nil
}

type isStaking_MinNominatorBond_Value interface {
	isStaking_MinNominatorBond_Value()
}

type Staking_MinNominatorBond_Noop struct {
	Noop *Staking_Noop `protobuf:"bytes,1,opt,name=noop,proto3,oneof"`
}

type Staking_MinNominatorBond_Set struct {
	Set *Staking_Set `protobuf:"bytes,2,opt,name=set,proto3,oneof"`
}

type Staking_MinNominatorBond_Remove struct {
	Remove *Staking_Remove `protobuf:"bytes,3,opt,name=remove,proto3,oneof"`
}

func (*Staking_MinNominatorBond_Noop) isStaking_MinNominatorBond_Value() {}

func (*Staking_MinNominatorBond_Set) isStaking_MinNominatorBond_Value() {}

func (*Staking_MinNominatorBond_Remove) isStaking_MinNominatorBond_Value() {}

type FellowshipCollective_DemoteMemberCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Who *FellowshipCollective_Who `protobuf:"bytes,1,opt,name=who,proto3" json:"who,omitempty"`
}

func (x *FellowshipCollective_DemoteMemberCall) Reset() {
	*x = FellowshipCollective_DemoteMemberCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[470]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FellowshipCollective_DemoteMemberCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FellowshipCollective_DemoteMemberCall) ProtoMessage() {}

func (x *FellowshipCollective_DemoteMemberCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[470]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FellowshipCollective_DemoteMemberCall.ProtoReflect.Descriptor instead.
func (*FellowshipCollective_DemoteMemberCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{470}
}

func (x *FellowshipCollective_DemoteMemberCall) GetWho() *FellowshipCollective_Who {
	if x != nil {
		return x.Who
	}
	return nil
}

type Gear_SendMessageCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Destination *GprimitivesActorId `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination,omitempty"`
	Payload     []byte              `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	GasLimit    uint64              `protobuf:"varint,3,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	Value       string              `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	KeepAlive   bool                `protobuf:"varint,5,opt,name=keep_alive,json=keepAlive,proto3" json:"keep_alive,omitempty"`
}

func (x *Gear_SendMessageCall) Reset() {
	*x = Gear_SendMessageCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[471]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Gear_SendMessageCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gear_SendMessageCall) ProtoMessage() {}

func (x *Gear_SendMessageCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[471]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gear_SendMessageCall.ProtoReflect.Descriptor instead.
func (*Gear_SendMessageCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{471}
}

func (x *Gear_SendMessageCall) GetDestination() *GprimitivesActorId {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *Gear_SendMessageCall) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *Gear_SendMessageCall) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *Gear_SendMessageCall) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Gear_SendMessageCall) GetKeepAlive() bool {
	if x != nil {
		return x.KeepAlive
	}
	return false
}

type StakingRewards_Address32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *StakingRewards_Address32) Reset() {
	*x = StakingRewards_Address32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[472]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakingRewards_Address32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakingRewards_Address32) ProtoMessage() {}

func (x *StakingRewards_Address32) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[472]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakingRewards_Address32.ProtoReflect.Descriptor instead.
func (*StakingRewards_Address32) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{472}
}

func (x *StakingRewards_Address32) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type ElectionProviderMultiPhase_PalletElectionProviderMultiPhaseRawSolution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Solution *VaraRuntimeNposSolution16    `protobuf:"bytes,1,opt,name=solution,proto3" json:"solution,omitempty"`
	Score    *SpNposElectionsElectionScore `protobuf:"bytes,2,opt,name=score,proto3" json:"score,omitempty"`
	Round    uint32                        `protobuf:"varint,3,opt,name=round,proto3" json:"round,omitempty"`
}

func (x *ElectionProviderMultiPhase_PalletElectionProviderMultiPhaseRawSolution) Reset() {
	*x = ElectionProviderMultiPhase_PalletElectionProviderMultiPhaseRawSolution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[473]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectionProviderMultiPhase_PalletElectionProviderMultiPhaseRawSolution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectionProviderMultiPhase_PalletElectionProviderMultiPhaseRawSolution) ProtoMessage() {}

func (x *ElectionProviderMultiPhase_PalletElectionProviderMultiPhaseRawSolution) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[473]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectionProviderMultiPhase_PalletElectionProviderMultiPhaseRawSolution.ProtoReflect.Descriptor instead.
func (*ElectionProviderMultiPhase_PalletElectionProviderMultiPhaseRawSolution) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{473}
}

func (x *ElectionProviderMultiPhase_PalletElectionProviderMultiPhaseRawSolution) GetSolution() *VaraRuntimeNposSolution16 {
	if x != nil {
		return x.Solution
	}
	return nil
}

func (x *ElectionProviderMultiPhase_PalletElectionProviderMultiPhaseRawSolution) GetScore() *SpNposElectionsElectionScore {
	if x != nil {
		return x.Score
	}
	return nil
}

func (x *ElectionProviderMultiPhase_PalletElectionProviderMultiPhaseRawSolution) GetRound() uint32 {
	if x != nil {
		return x.Round
	}
	return 0
}

type SpArithmeticPerThingsPercent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 uint32 `protobuf:"varint,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *SpArithmeticPerThingsPercent) Reset() {
	*x = SpArithmeticPerThingsPercent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[474]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpArithmeticPerThingsPercent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpArithmeticPerThingsPercent) ProtoMessage() {}

func (x *SpArithmeticPerThingsPercent) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[474]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpArithmeticPerThingsPercent.ProtoReflect.Descriptor instead.
func (*SpArithmeticPerThingsPercent) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{474}
}

func (x *SpArithmeticPerThingsPercent) GetValue0() uint32 {
	if x != nil {
		return x.Value0
	}
	return 0
}

type Treasury_SpendLocalCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount      string                `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Beneficiary *Treasury_Beneficiary `protobuf:"bytes,2,opt,name=beneficiary,proto3" json:"beneficiary,omitempty"`
}

func (x *Treasury_SpendLocalCall) Reset() {
	*x = Treasury_SpendLocalCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[475]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Treasury_SpendLocalCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Treasury_SpendLocalCall) ProtoMessage() {}

func (x *Treasury_SpendLocalCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[475]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Treasury_SpendLocalCall.ProtoReflect.Descriptor instead.
func (*Treasury_SpendLocalCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{475}
}

func (x *Treasury_SpendLocalCall) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *Treasury_SpendLocalCall) GetBeneficiary() *Treasury_Beneficiary {
	if x != nil {
		return x.Beneficiary
	}
	return nil
}

type Utility_Void struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 *Value0 `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Utility_Void) Reset() {
	*x = Utility_Void{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[476]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Utility_Void) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Utility_Void) ProtoMessage() {}

func (x *Utility_Void) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[476]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Utility_Void.ProtoReflect.Descriptor instead.
func (*Utility_Void) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{476}
}

func (x *Utility_Void) GetValue0() *Value0 {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Identity_Raw18 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Identity_Raw18) Reset() {
	*x = Identity_Raw18{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[477]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_Raw18) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_Raw18) ProtoMessage() {}

func (x *Identity_Raw18) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[477]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_Raw18.ProtoReflect.Descriptor instead.
func (*Identity_Raw18) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{477}
}

func (x *Identity_Raw18) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Multisig_AsMultiThreshold1Call struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OtherSignatories []*SpCoreCryptoAccountId32 `protobuf:"bytes,1,rep,name=other_signatories,json=otherSignatories,proto3" json:"other_signatories,omitempty"`
	// Types that are assignable to Call:
	//
	//	*Multisig_AsMultiThreshold1Call_System
	//	*Multisig_AsMultiThreshold1Call_Timestamp
	//	*Multisig_AsMultiThreshold1Call_Babe
	//	*Multisig_AsMultiThreshold1Call_Grandpa
	//	*Multisig_AsMultiThreshold1Call_Balances
	//	*Multisig_AsMultiThreshold1Call_Vesting
	//	*Multisig_AsMultiThreshold1Call_BagsList
	//	*Multisig_AsMultiThreshold1Call_ImOnline
	//	*Multisig_AsMultiThreshold1Call_Staking
	//	*Multisig_AsMultiThreshold1Call_Session
	//	*Multisig_AsMultiThreshold1Call_Treasury
	//	*Multisig_AsMultiThreshold1Call_Utility
	//	*Multisig_AsMultiThreshold1Call_ConvictionVoting
	//	*Multisig_AsMultiThreshold1Call_Referenda
	//	*Multisig_AsMultiThreshold1Call_FellowshipCollective
	//	*Multisig_AsMultiThreshold1Call_FellowshipReferenda
	//	*Multisig_AsMultiThreshold1Call_Whitelist
	//	*Multisig_AsMultiThreshold1Call_Scheduler
	//	*Multisig_AsMultiThreshold1Call_Preimage
	//	*Multisig_AsMultiThreshold1Call_Identity
	//	*Multisig_AsMultiThreshold1Call_Proxy
	//	*Multisig_AsMultiThreshold1Call_Multisig
	//	*Multisig_AsMultiThreshold1Call_ElectionProviderMultiPhase
	//	*Multisig_AsMultiThreshold1Call_Bounties
	//	*Multisig_AsMultiThreshold1Call_ChildBounties
	//	*Multisig_AsMultiThreshold1Call_NominationPools
	//	*Multisig_AsMultiThreshold1Call_Gear
	//	*Multisig_AsMultiThreshold1Call_StakingRewards
	//	*Multisig_AsMultiThreshold1Call_GearVoucher
	Call isMultisig_AsMultiThreshold1Call_Call `protobuf_oneof:"call"`
}

func (x *Multisig_AsMultiThreshold1Call) Reset() {
	*x = Multisig_AsMultiThreshold1Call{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[478]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Multisig_AsMultiThreshold1Call) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Multisig_AsMultiThreshold1Call) ProtoMessage() {}

func (x *Multisig_AsMultiThreshold1Call) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[478]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Multisig_AsMultiThreshold1Call.ProtoReflect.Descriptor instead.
func (*Multisig_AsMultiThreshold1Call) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{478}
}

func (x *Multisig_AsMultiThreshold1Call) GetOtherSignatories() []*SpCoreCryptoAccountId32 {
	if x != nil {
		return x.OtherSignatories
	}
	return nil
}

func (m *Multisig_AsMultiThreshold1Call) GetCall() isMultisig_AsMultiThreshold1Call_Call {
	if m != nil {
		return m.Call
	}
	return nil
}

func (x *Multisig_AsMultiThreshold1Call) GetSystem() *SystemPallet {
	if x, ok := x.GetCall().(*Multisig_AsMultiThreshold1Call_System); ok {
		return x.System
	}
	return nil
}

func (x *Multisig_AsMultiThreshold1Call) GetTimestamp() *TimestampPallet {
	if x, ok := x.GetCall().(*Multisig_AsMultiThreshold1Call_Timestamp); ok {
		return x.Timestamp
	}
	return nil
}

func (x *Multisig_AsMultiThreshold1Call) GetBabe() *BabePallet {
	if x, ok := x.GetCall().(*Multisig_AsMultiThreshold1Call_Babe); ok {
		return x.Babe
	}
	return nil
}

func (x *Multisig_AsMultiThreshold1Call) GetGrandpa() *GrandpaPallet {
	if x, ok := x.GetCall().(*Multisig_AsMultiThreshold1Call_Grandpa); ok {
		return x.Grandpa
	}
	return nil
}

func (x *Multisig_AsMultiThreshold1Call) GetBalances() *BalancesPallet {
	if x, ok := x.GetCall().(*Multisig_AsMultiThreshold1Call_Balances); ok {
		return x.Balances
	}
	return nil
}

func (x *Multisig_AsMultiThreshold1Call) GetVesting() *VestingPallet {
	if x, ok := x.GetCall().(*Multisig_AsMultiThreshold1Call_Vesting); ok {
		return x.Vesting
	}
	return nil
}

func (x *Multisig_AsMultiThreshold1Call) GetBagsList() *BagsListPallet {
	if x, ok := x.GetCall().(*Multisig_AsMultiThreshold1Call_BagsList); ok {
		return x.BagsList
	}
	return nil
}

func (x *Multisig_AsMultiThreshold1Call) GetImOnline() *ImOnlinePallet {
	if x, ok := x.GetCall().(*Multisig_AsMultiThreshold1Call_ImOnline); ok {
		return x.ImOnline
	}
	return nil
}

func (x *Multisig_AsMultiThreshold1Call) GetStaking() *StakingPallet {
	if x, ok := x.GetCall().(*Multisig_AsMultiThreshold1Call_Staking); ok {
		return x.Staking
	}
	return nil
}

func (x *Multisig_AsMultiThreshold1Call) GetSession() *SessionPallet {
	if x, ok := x.GetCall().(*Multisig_AsMultiThreshold1Call_Session); ok {
		return x.Session
	}
	return nil
}

func (x *Multisig_AsMultiThreshold1Call) GetTreasury() *TreasuryPallet {
	if x, ok := x.GetCall().(*Multisig_AsMultiThreshold1Call_Treasury); ok {
		return x.Treasury
	}
	return nil
}

func (x *Multisig_AsMultiThreshold1Call) GetUtility() *UtilityPallet {
	if x, ok := x.GetCall().(*Multisig_AsMultiThreshold1Call_Utility); ok {
		return x.Utility
	}
	return nil
}

func (x *Multisig_AsMultiThreshold1Call) GetConvictionVoting() *ConvictionVotingPallet {
	if x, ok := x.GetCall().(*Multisig_AsMultiThreshold1Call_ConvictionVoting); ok {
		return x.ConvictionVoting
	}
	return nil
}

func (x *Multisig_AsMultiThreshold1Call) GetReferenda() *ReferendaPallet {
	if x, ok := x.GetCall().(*Multisig_AsMultiThreshold1Call_Referenda); ok {
		return x.Referenda
	}
	return nil
}

func (x *Multisig_AsMultiThreshold1Call) GetFellowshipCollective() *FellowshipCollectivePallet {
	if x, ok := x.GetCall().(*Multisig_AsMultiThreshold1Call_FellowshipCollective); ok {
		return x.FellowshipCollective
	}
	return nil
}

func (x *Multisig_AsMultiThreshold1Call) GetFellowshipReferenda() *FellowshipReferendaPallet {
	if x, ok := x.GetCall().(*Multisig_AsMultiThreshold1Call_FellowshipReferenda); ok {
		return x.FellowshipReferenda
	}
	return nil
}

func (x *Multisig_AsMultiThreshold1Call) GetWhitelist() *WhitelistPallet {
	if x, ok := x.GetCall().(*Multisig_AsMultiThreshold1Call_Whitelist); ok {
		return x.Whitelist
	}
	return nil
}

func (x *Multisig_AsMultiThreshold1Call) GetScheduler() *SchedulerPallet {
	if x, ok := x.GetCall().(*Multisig_AsMultiThreshold1Call_Scheduler); ok {
		return x.Scheduler
	}
	return nil
}

func (x *Multisig_AsMultiThreshold1Call) GetPreimage() *PreimagePallet {
	if x, ok := x.GetCall().(*Multisig_AsMultiThreshold1Call_Preimage); ok {
		return x.Preimage
	}
	return nil
}

func (x *Multisig_AsMultiThreshold1Call) GetIdentity() *IdentityPallet {
	if x, ok := x.GetCall().(*Multisig_AsMultiThreshold1Call_Identity); ok {
		return x.Identity
	}
	return nil
}

func (x *Multisig_AsMultiThreshold1Call) GetProxy() *ProxyPallet {
	if x, ok := x.GetCall().(*Multisig_AsMultiThreshold1Call_Proxy); ok {
		return x.Proxy
	}
	return nil
}

func (x *Multisig_AsMultiThreshold1Call) GetMultisig() *MultisigPallet {
	if x, ok := x.GetCall().(*Multisig_AsMultiThreshold1Call_Multisig); ok {
		return x.Multisig
	}
	return nil
}

func (x *Multisig_AsMultiThreshold1Call) GetElectionProviderMultiPhase() *ElectionProviderMultiPhasePallet {
	if x, ok := x.GetCall().(*Multisig_AsMultiThreshold1Call_ElectionProviderMultiPhase); ok {
		return x.ElectionProviderMultiPhase
	}
	return nil
}

func (x *Multisig_AsMultiThreshold1Call) GetBounties() *BountiesPallet {
	if x, ok := x.GetCall().(*Multisig_AsMultiThreshold1Call_Bounties); ok {
		return x.Bounties
	}
	return nil
}

func (x *Multisig_AsMultiThreshold1Call) GetChildBounties() *ChildBountiesPallet {
	if x, ok := x.GetCall().(*Multisig_AsMultiThreshold1Call_ChildBounties); ok {
		return x.ChildBounties
	}
	return nil
}

func (x *Multisig_AsMultiThreshold1Call) GetNominationPools() *NominationPoolsPallet {
	if x, ok := x.GetCall().(*Multisig_AsMultiThreshold1Call_NominationPools); ok {
		return x.NominationPools
	}
	return nil
}

func (x *Multisig_AsMultiThreshold1Call) GetGear() *GearPallet {
	if x, ok := x.GetCall().(*Multisig_AsMultiThreshold1Call_Gear); ok {
		return x.Gear
	}
	return nil
}

func (x *Multisig_AsMultiThreshold1Call) GetStakingRewards() *StakingRewardsPallet {
	if x, ok := x.GetCall().(*Multisig_AsMultiThreshold1Call_StakingRewards); ok {
		return x.StakingRewards
	}
	return nil
}

func (x *Multisig_AsMultiThreshold1Call) GetGearVoucher() *GearVoucherPallet {
	if x, ok := x.GetCall().(*Multisig_AsMultiThreshold1Call_GearVoucher); ok {
		return x.GearVoucher
	}
	return nil
}

type isMultisig_AsMultiThreshold1Call_Call interface {
	isMultisig_AsMultiThreshold1Call_Call()
}

type Multisig_AsMultiThreshold1Call_System struct {
	System *SystemPallet `protobuf:"bytes,2,opt,name=system,proto3,oneof"`
}

type Multisig_AsMultiThreshold1Call_Timestamp struct {
	Timestamp *TimestampPallet `protobuf:"bytes,3,opt,name=timestamp,proto3,oneof"`
}

type Multisig_AsMultiThreshold1Call_Babe struct {
	Babe *BabePallet `protobuf:"bytes,4,opt,name=babe,proto3,oneof"`
}

type Multisig_AsMultiThreshold1Call_Grandpa struct {
	Grandpa *GrandpaPallet `protobuf:"bytes,5,opt,name=grandpa,proto3,oneof"`
}

type Multisig_AsMultiThreshold1Call_Balances struct {
	Balances *BalancesPallet `protobuf:"bytes,6,opt,name=balances,proto3,oneof"`
}

type Multisig_AsMultiThreshold1Call_Vesting struct {
	Vesting *VestingPallet `protobuf:"bytes,7,opt,name=vesting,proto3,oneof"`
}

type Multisig_AsMultiThreshold1Call_BagsList struct {
	BagsList *BagsListPallet `protobuf:"bytes,8,opt,name=bags_list,json=bagsList,proto3,oneof"`
}

type Multisig_AsMultiThreshold1Call_ImOnline struct {
	ImOnline *ImOnlinePallet `protobuf:"bytes,9,opt,name=im_online,json=imOnline,proto3,oneof"`
}

type Multisig_AsMultiThreshold1Call_Staking struct {
	Staking *StakingPallet `protobuf:"bytes,10,opt,name=staking,proto3,oneof"`
}

type Multisig_AsMultiThreshold1Call_Session struct {
	Session *SessionPallet `protobuf:"bytes,11,opt,name=session,proto3,oneof"`
}

type Multisig_AsMultiThreshold1Call_Treasury struct {
	Treasury *TreasuryPallet `protobuf:"bytes,12,opt,name=treasury,proto3,oneof"`
}

type Multisig_AsMultiThreshold1Call_Utility struct {
	Utility *UtilityPallet `protobuf:"bytes,13,opt,name=utility,proto3,oneof"`
}

type Multisig_AsMultiThreshold1Call_ConvictionVoting struct {
	ConvictionVoting *ConvictionVotingPallet `protobuf:"bytes,14,opt,name=conviction_voting,json=convictionVoting,proto3,oneof"`
}

type Multisig_AsMultiThreshold1Call_Referenda struct {
	Referenda *ReferendaPallet `protobuf:"bytes,15,opt,name=referenda,proto3,oneof"`
}

type Multisig_AsMultiThreshold1Call_FellowshipCollective struct {
	FellowshipCollective *FellowshipCollectivePallet `protobuf:"bytes,16,opt,name=fellowship_collective,json=fellowshipCollective,proto3,oneof"`
}

type Multisig_AsMultiThreshold1Call_FellowshipReferenda struct {
	FellowshipReferenda *FellowshipReferendaPallet `protobuf:"bytes,17,opt,name=fellowship_referenda,json=fellowshipReferenda,proto3,oneof"`
}

type Multisig_AsMultiThreshold1Call_Whitelist struct {
	Whitelist *WhitelistPallet `protobuf:"bytes,18,opt,name=whitelist,proto3,oneof"`
}

type Multisig_AsMultiThreshold1Call_Scheduler struct {
	Scheduler *SchedulerPallet `protobuf:"bytes,19,opt,name=scheduler,proto3,oneof"`
}

type Multisig_AsMultiThreshold1Call_Preimage struct {
	Preimage *PreimagePallet `protobuf:"bytes,20,opt,name=preimage,proto3,oneof"`
}

type Multisig_AsMultiThreshold1Call_Identity struct {
	Identity *IdentityPallet `protobuf:"bytes,21,opt,name=identity,proto3,oneof"`
}

type Multisig_AsMultiThreshold1Call_Proxy struct {
	Proxy *ProxyPallet `protobuf:"bytes,22,opt,name=proxy,proto3,oneof"`
}

type Multisig_AsMultiThreshold1Call_Multisig struct {
	Multisig *MultisigPallet `protobuf:"bytes,23,opt,name=multisig,proto3,oneof"`
}

type Multisig_AsMultiThreshold1Call_ElectionProviderMultiPhase struct {
	ElectionProviderMultiPhase *ElectionProviderMultiPhasePallet `protobuf:"bytes,24,opt,name=election_provider_multi_phase,json=electionProviderMultiPhase,proto3,oneof"`
}

type Multisig_AsMultiThreshold1Call_Bounties struct {
	Bounties *BountiesPallet `protobuf:"bytes,25,opt,name=bounties,proto3,oneof"`
}

type Multisig_AsMultiThreshold1Call_ChildBounties struct {
	ChildBounties *ChildBountiesPallet `protobuf:"bytes,26,opt,name=child_bounties,json=childBounties,proto3,oneof"`
}

type Multisig_AsMultiThreshold1Call_NominationPools struct {
	NominationPools *NominationPoolsPallet `protobuf:"bytes,27,opt,name=nomination_pools,json=nominationPools,proto3,oneof"`
}

type Multisig_AsMultiThreshold1Call_Gear struct {
	Gear *GearPallet `protobuf:"bytes,28,opt,name=gear,proto3,oneof"`
}

type Multisig_AsMultiThreshold1Call_StakingRewards struct {
	StakingRewards *StakingRewardsPallet `protobuf:"bytes,29,opt,name=staking_rewards,json=stakingRewards,proto3,oneof"`
}

type Multisig_AsMultiThreshold1Call_GearVoucher struct {
	GearVoucher *GearVoucherPallet `protobuf:"bytes,30,opt,name=gear_voucher,json=gearVoucher,proto3,oneof"`
}

func (*Multisig_AsMultiThreshold1Call_System) isMultisig_AsMultiThreshold1Call_Call() {}

func (*Multisig_AsMultiThreshold1Call_Timestamp) isMultisig_AsMultiThreshold1Call_Call() {}

func (*Multisig_AsMultiThreshold1Call_Babe) isMultisig_AsMultiThreshold1Call_Call() {}

func (*Multisig_AsMultiThreshold1Call_Grandpa) isMultisig_AsMultiThreshold1Call_Call() {}

func (*Multisig_AsMultiThreshold1Call_Balances) isMultisig_AsMultiThreshold1Call_Call() {}

func (*Multisig_AsMultiThreshold1Call_Vesting) isMultisig_AsMultiThreshold1Call_Call() {}

func (*Multisig_AsMultiThreshold1Call_BagsList) isMultisig_AsMultiThreshold1Call_Call() {}

func (*Multisig_AsMultiThreshold1Call_ImOnline) isMultisig_AsMultiThreshold1Call_Call() {}

func (*Multisig_AsMultiThreshold1Call_Staking) isMultisig_AsMultiThreshold1Call_Call() {}

func (*Multisig_AsMultiThreshold1Call_Session) isMultisig_AsMultiThreshold1Call_Call() {}

func (*Multisig_AsMultiThreshold1Call_Treasury) isMultisig_AsMultiThreshold1Call_Call() {}

func (*Multisig_AsMultiThreshold1Call_Utility) isMultisig_AsMultiThreshold1Call_Call() {}

func (*Multisig_AsMultiThreshold1Call_ConvictionVoting) isMultisig_AsMultiThreshold1Call_Call() {}

func (*Multisig_AsMultiThreshold1Call_Referenda) isMultisig_AsMultiThreshold1Call_Call() {}

func (*Multisig_AsMultiThreshold1Call_FellowshipCollective) isMultisig_AsMultiThreshold1Call_Call() {}

func (*Multisig_AsMultiThreshold1Call_FellowshipReferenda) isMultisig_AsMultiThreshold1Call_Call() {}

func (*Multisig_AsMultiThreshold1Call_Whitelist) isMultisig_AsMultiThreshold1Call_Call() {}

func (*Multisig_AsMultiThreshold1Call_Scheduler) isMultisig_AsMultiThreshold1Call_Call() {}

func (*Multisig_AsMultiThreshold1Call_Preimage) isMultisig_AsMultiThreshold1Call_Call() {}

func (*Multisig_AsMultiThreshold1Call_Identity) isMultisig_AsMultiThreshold1Call_Call() {}

func (*Multisig_AsMultiThreshold1Call_Proxy) isMultisig_AsMultiThreshold1Call_Call() {}

func (*Multisig_AsMultiThreshold1Call_Multisig) isMultisig_AsMultiThreshold1Call_Call() {}

func (*Multisig_AsMultiThreshold1Call_ElectionProviderMultiPhase) isMultisig_AsMultiThreshold1Call_Call() {
}

func (*Multisig_AsMultiThreshold1Call_Bounties) isMultisig_AsMultiThreshold1Call_Call() {}

func (*Multisig_AsMultiThreshold1Call_ChildBounties) isMultisig_AsMultiThreshold1Call_Call() {}

func (*Multisig_AsMultiThreshold1Call_NominationPools) isMultisig_AsMultiThreshold1Call_Call() {}

func (*Multisig_AsMultiThreshold1Call_Gear) isMultisig_AsMultiThreshold1Call_Call() {}

func (*Multisig_AsMultiThreshold1Call_StakingRewards) isMultisig_AsMultiThreshold1Call_Call() {}

func (*Multisig_AsMultiThreshold1Call_GearVoucher) isMultisig_AsMultiThreshold1Call_Call() {}

type Balances_ForceSetBalanceCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Who     *Balances_Who `protobuf:"bytes,1,opt,name=who,proto3" json:"who,omitempty"`
	NewFree string        `protobuf:"bytes,2,opt,name=new_free,json=newFree,proto3" json:"new_free,omitempty"`
}

func (x *Balances_ForceSetBalanceCall) Reset() {
	*x = Balances_ForceSetBalanceCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[479]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Balances_ForceSetBalanceCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Balances_ForceSetBalanceCall) ProtoMessage() {}

func (x *Balances_ForceSetBalanceCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[479]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Balances_ForceSetBalanceCall.ProtoReflect.Descriptor instead.
func (*Balances_ForceSetBalanceCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{479}
}

func (x *Balances_ForceSetBalanceCall) GetWho() *Balances_Who {
	if x != nil {
		return x.Who
	}
	return nil
}

func (x *Balances_ForceSetBalanceCall) GetNewFree() string {
	if x != nil {
		return x.NewFree
	}
	return ""
}

type Identity_SetFieldsCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index  uint32                                `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Fields *Identity_PalletIdentityTypesBitFlags `protobuf:"bytes,2,opt,name=fields,proto3" json:"fields,omitempty"`
}

func (x *Identity_SetFieldsCall) Reset() {
	*x = Identity_SetFieldsCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[480]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_SetFieldsCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_SetFieldsCall) ProtoMessage() {}

func (x *Identity_SetFieldsCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[480]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_SetFieldsCall.ProtoReflect.Descriptor instead.
func (*Identity_SetFieldsCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{480}
}

func (x *Identity_SetFieldsCall) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Identity_SetFieldsCall) GetFields() *Identity_PalletIdentityTypesBitFlags {
	if x != nil {
		return x.Fields
	}
	return nil
}

type GearVoucher_CallCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VoucherId *GearVoucher_PalletGearVoucherInternalVoucherId `protobuf:"bytes,1,opt,name=voucher_id,json=voucherId,proto3" json:"voucher_id,omitempty"`
	Call      *GearVoucher_Call                               `protobuf:"bytes,2,opt,name=call,proto3" json:"call,omitempty"`
}

func (x *GearVoucher_CallCall) Reset() {
	*x = GearVoucher_CallCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[481]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GearVoucher_CallCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GearVoucher_CallCall) ProtoMessage() {}

func (x *GearVoucher_CallCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[481]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GearVoucher_CallCall.ProtoReflect.Descriptor instead.
func (*GearVoucher_CallCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{481}
}

func (x *GearVoucher_CallCall) GetVoucherId() *GearVoucher_PalletGearVoucherInternalVoucherId {
	if x != nil {
		return x.VoucherId
	}
	return nil
}

func (x *GearVoucher_CallCall) GetCall() *GearVoucher_Call {
	if x != nil {
		return x.Call
	}
	return nil
}

type TupleFinalityGrandpaPrevotespConsensusGrandpaAppSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 *FinalityGrandpaPrevote         `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
	Value1 *SpConsensusGrandpaAppSignature `protobuf:"bytes,2,opt,name=value1,proto3" json:"value1,omitempty"`
}

func (x *TupleFinalityGrandpaPrevotespConsensusGrandpaAppSignature) Reset() {
	*x = TupleFinalityGrandpaPrevotespConsensusGrandpaAppSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[482]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TupleFinalityGrandpaPrevotespConsensusGrandpaAppSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TupleFinalityGrandpaPrevotespConsensusGrandpaAppSignature) ProtoMessage() {}

func (x *TupleFinalityGrandpaPrevotespConsensusGrandpaAppSignature) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[482]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TupleFinalityGrandpaPrevotespConsensusGrandpaAppSignature.ProtoReflect.Descriptor instead.
func (*TupleFinalityGrandpaPrevotespConsensusGrandpaAppSignature) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{482}
}

func (x *TupleFinalityGrandpaPrevotespConsensusGrandpaAppSignature) GetValue0() *FinalityGrandpaPrevote {
	if x != nil {
		return x.Value0
	}
	return nil
}

func (x *TupleFinalityGrandpaPrevotespConsensusGrandpaAppSignature) GetValue1() *SpConsensusGrandpaAppSignature {
	if x != nil {
		return x.Value1
	}
	return nil
}

type FellowshipReferenda_OneFewerDecidingCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Track uint32 `protobuf:"varint,1,opt,name=track,proto3" json:"track,omitempty"`
}

func (x *FellowshipReferenda_OneFewerDecidingCall) Reset() {
	*x = FellowshipReferenda_OneFewerDecidingCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[483]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FellowshipReferenda_OneFewerDecidingCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FellowshipReferenda_OneFewerDecidingCall) ProtoMessage() {}

func (x *FellowshipReferenda_OneFewerDecidingCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[483]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FellowshipReferenda_OneFewerDecidingCall.ProtoReflect.Descriptor instead.
func (*FellowshipReferenda_OneFewerDecidingCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{483}
}

func (x *FellowshipReferenda_OneFewerDecidingCall) GetTrack() uint32 {
	if x != nil {
		return x.Track
	}
	return 0
}

type Proxy_ProxyType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*Proxy_ProxyType_Any
	//	*Proxy_ProxyType_NonTransfer
	//	*Proxy_ProxyType_Governance
	//	*Proxy_ProxyType_Staking
	//	*Proxy_ProxyType_IdentityJudgement
	//	*Proxy_ProxyType_CancelProxy
	Value isProxy_ProxyType_Value `protobuf_oneof:"value"`
}

func (x *Proxy_ProxyType) Reset() {
	*x = Proxy_ProxyType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[484]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proxy_ProxyType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proxy_ProxyType) ProtoMessage() {}

func (x *Proxy_ProxyType) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[484]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proxy_ProxyType.ProtoReflect.Descriptor instead.
func (*Proxy_ProxyType) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{484}
}

func (m *Proxy_ProxyType) GetValue() isProxy_ProxyType_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Proxy_ProxyType) GetAny() *Proxy_Any {
	if x, ok := x.GetValue().(*Proxy_ProxyType_Any); ok {
		return x.Any
	}
	return nil
}

func (x *Proxy_ProxyType) GetNonTransfer() *Proxy_NonTransfer {
	if x, ok := x.GetValue().(*Proxy_ProxyType_NonTransfer); ok {
		return x.NonTransfer
	}
	return nil
}

func (x *Proxy_ProxyType) GetGovernance() *Proxy_Governance {
	if x, ok := x.GetValue().(*Proxy_ProxyType_Governance); ok {
		return x.Governance
	}
	return nil
}

func (x *Proxy_ProxyType) GetStaking() *Proxy_Staking {
	if x, ok := x.GetValue().(*Proxy_ProxyType_Staking); ok {
		return x.Staking
	}
	return nil
}

func (x *Proxy_ProxyType) GetIdentityJudgement() *Proxy_IdentityJudgement {
	if x, ok := x.GetValue().(*Proxy_ProxyType_IdentityJudgement); ok {
		return x.IdentityJudgement
	}
	return nil
}

func (x *Proxy_ProxyType) GetCancelProxy() *Proxy_CancelProxy {
	if x, ok := x.GetValue().(*Proxy_ProxyType_CancelProxy); ok {
		return x.CancelProxy
	}
	return nil
}

type isProxy_ProxyType_Value interface {
	isProxy_ProxyType_Value()
}

type Proxy_ProxyType_Any struct {
	Any *Proxy_Any `protobuf:"bytes,1,opt,name=any,proto3,oneof"`
}

type Proxy_ProxyType_NonTransfer struct {
	NonTransfer *Proxy_NonTransfer `protobuf:"bytes,2,opt,name=non_transfer,json=nonTransfer,proto3,oneof"`
}

type Proxy_ProxyType_Governance struct {
	Governance *Proxy_Governance `protobuf:"bytes,3,opt,name=governance,proto3,oneof"`
}

type Proxy_ProxyType_Staking struct {
	Staking *Proxy_Staking `protobuf:"bytes,4,opt,name=staking,proto3,oneof"`
}

type Proxy_ProxyType_IdentityJudgement struct {
	IdentityJudgement *Proxy_IdentityJudgement `protobuf:"bytes,5,opt,name=identity_judgement,json=identityJudgement,proto3,oneof"`
}

type Proxy_ProxyType_CancelProxy struct {
	CancelProxy *Proxy_CancelProxy `protobuf:"bytes,6,opt,name=cancel_proxy,json=cancelProxy,proto3,oneof"`
}

func (*Proxy_ProxyType_Any) isProxy_ProxyType_Value() {}

func (*Proxy_ProxyType_NonTransfer) isProxy_ProxyType_Value() {}

func (*Proxy_ProxyType_Governance) isProxy_ProxyType_Value() {}

func (*Proxy_ProxyType_Staking) isProxy_ProxyType_Value() {}

func (*Proxy_ProxyType_IdentityJudgement) isProxy_ProxyType_Value() {}

func (*Proxy_ProxyType_CancelProxy) isProxy_ProxyType_Value() {}

type NominationPools_ChillCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoolId uint32 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
}

func (x *NominationPools_ChillCall) Reset() {
	*x = NominationPools_ChillCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[485]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NominationPools_ChillCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NominationPools_ChillCall) ProtoMessage() {}

func (x *NominationPools_ChillCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[485]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NominationPools_ChillCall.ProtoReflect.Descriptor instead.
func (*NominationPools_ChillCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{485}
}

func (x *NominationPools_ChillCall) GetPoolId() uint32 {
	if x != nil {
		return x.PoolId
	}
	return 0
}

type ChildBounties_AwardChildBountyCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentBountyId uint32                     `protobuf:"varint,1,opt,name=parent_bounty_id,json=parentBountyId,proto3" json:"parent_bounty_id,omitempty"`
	ChildBountyId  uint32                     `protobuf:"varint,2,opt,name=child_bounty_id,json=childBountyId,proto3" json:"child_bounty_id,omitempty"`
	Beneficiary    *ChildBounties_Beneficiary `protobuf:"bytes,3,opt,name=beneficiary,proto3" json:"beneficiary,omitempty"`
}

func (x *ChildBounties_AwardChildBountyCall) Reset() {
	*x = ChildBounties_AwardChildBountyCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[486]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChildBounties_AwardChildBountyCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChildBounties_AwardChildBountyCall) ProtoMessage() {}

func (x *ChildBounties_AwardChildBountyCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[486]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChildBounties_AwardChildBountyCall.ProtoReflect.Descriptor instead.
func (*ChildBounties_AwardChildBountyCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{486}
}

func (x *ChildBounties_AwardChildBountyCall) GetParentBountyId() uint32 {
	if x != nil {
		return x.ParentBountyId
	}
	return 0
}

func (x *ChildBounties_AwardChildBountyCall) GetChildBountyId() uint32 {
	if x != nil {
		return x.ChildBountyId
	}
	return 0
}

func (x *ChildBounties_AwardChildBountyCall) GetBeneficiary() *ChildBounties_Beneficiary {
	if x != nil {
		return x.Beneficiary
	}
	return nil
}

type SpArithmeticPerThingsPerbill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 uint32 `protobuf:"varint,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *SpArithmeticPerThingsPerbill) Reset() {
	*x = SpArithmeticPerThingsPerbill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[487]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpArithmeticPerThingsPerbill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpArithmeticPerThingsPerbill) ProtoMessage() {}

func (x *SpArithmeticPerThingsPerbill) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[487]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpArithmeticPerThingsPerbill.ProtoReflect.Descriptor instead.
func (*SpArithmeticPerThingsPerbill) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{487}
}

func (x *SpArithmeticPerThingsPerbill) GetValue0() uint32 {
	if x != nil {
		return x.Value0
	}
	return 0
}

type BoundedCollectionsBoundedVecBoundedVec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *BoundedCollectionsBoundedVecBoundedVec) Reset() {
	*x = BoundedCollectionsBoundedVecBoundedVec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[488]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoundedCollectionsBoundedVecBoundedVec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoundedCollectionsBoundedVecBoundedVec) ProtoMessage() {}

func (x *BoundedCollectionsBoundedVecBoundedVec) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[488]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoundedCollectionsBoundedVecBoundedVec.ProtoReflect.Descriptor instead.
func (*BoundedCollectionsBoundedVecBoundedVec) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{488}
}

func (x *BoundedCollectionsBoundedVecBoundedVec) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Referenda_Proposal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*Referenda_Proposal_Legacy
	//	*Referenda_Proposal_Inline
	//	*Referenda_Proposal_Lookup
	Value isReferenda_Proposal_Value `protobuf_oneof:"value"`
}

func (x *Referenda_Proposal) Reset() {
	*x = Referenda_Proposal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[489]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Referenda_Proposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Referenda_Proposal) ProtoMessage() {}

func (x *Referenda_Proposal) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[489]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Referenda_Proposal.ProtoReflect.Descriptor instead.
func (*Referenda_Proposal) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{489}
}

func (m *Referenda_Proposal) GetValue() isReferenda_Proposal_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Referenda_Proposal) GetLegacy() *Referenda_Legacy {
	if x, ok := x.GetValue().(*Referenda_Proposal_Legacy); ok {
		return x.Legacy
	}
	return nil
}

func (x *Referenda_Proposal) GetInline() *Referenda_Inline {
	if x, ok := x.GetValue().(*Referenda_Proposal_Inline); ok {
		return x.Inline
	}
	return nil
}

func (x *Referenda_Proposal) GetLookup() *Referenda_Lookup {
	if x, ok := x.GetValue().(*Referenda_Proposal_Lookup); ok {
		return x.Lookup
	}
	return nil
}

type isReferenda_Proposal_Value interface {
	isReferenda_Proposal_Value()
}

type Referenda_Proposal_Legacy struct {
	Legacy *Referenda_Legacy `protobuf:"bytes,1,opt,name=legacy,proto3,oneof"`
}

type Referenda_Proposal_Inline struct {
	Inline *Referenda_Inline `protobuf:"bytes,2,opt,name=inline,proto3,oneof"`
}

type Referenda_Proposal_Lookup struct {
	Lookup *Referenda_Lookup `protobuf:"bytes,3,opt,name=lookup,proto3,oneof"`
}

func (*Referenda_Proposal_Legacy) isReferenda_Proposal_Value() {}

func (*Referenda_Proposal_Inline) isReferenda_Proposal_Value() {}

func (*Referenda_Proposal_Lookup) isReferenda_Proposal_Value() {}

type FellowshipCollective_TupleNull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *TupleNull `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *FellowshipCollective_TupleNull) Reset() {
	*x = FellowshipCollective_TupleNull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[490]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FellowshipCollective_TupleNull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FellowshipCollective_TupleNull) ProtoMessage() {}

func (x *FellowshipCollective_TupleNull) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[490]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FellowshipCollective_TupleNull.ProtoReflect.Descriptor instead.
func (*FellowshipCollective_TupleNull) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{490}
}

func (x *FellowshipCollective_TupleNull) GetValue() *TupleNull {
	if x != nil {
		return x.Value
	}
	return nil
}

type Identity_TupleNull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *TupleNull `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Identity_TupleNull) Reset() {
	*x = Identity_TupleNull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[491]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_TupleNull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_TupleNull) ProtoMessage() {}

func (x *Identity_TupleNull) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[491]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_TupleNull.ProtoReflect.Descriptor instead.
func (*Identity_TupleNull) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{491}
}

func (x *Identity_TupleNull) GetValue() *TupleNull {
	if x != nil {
		return x.Value
	}
	return nil
}

type BagsList_Raw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *BagsList_Raw) Reset() {
	*x = BagsList_Raw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[492]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BagsList_Raw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BagsList_Raw) ProtoMessage() {}

func (x *BagsList_Raw) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[492]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BagsList_Raw.ProtoReflect.Descriptor instead.
func (*BagsList_Raw) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{492}
}

func (x *BagsList_Raw) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type ImOnline_PalletImOnlineHeartbeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockNumber    uint32 `protobuf:"varint,1,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	SessionIndex   uint32 `protobuf:"varint,2,opt,name=session_index,json=sessionIndex,proto3" json:"session_index,omitempty"`
	AuthorityIndex uint32 `protobuf:"varint,3,opt,name=authority_index,json=authorityIndex,proto3" json:"authority_index,omitempty"`
	ValidatorsLen  uint32 `protobuf:"varint,4,opt,name=validators_len,json=validatorsLen,proto3" json:"validators_len,omitempty"`
}

func (x *ImOnline_PalletImOnlineHeartbeat) Reset() {
	*x = ImOnline_PalletImOnlineHeartbeat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[493]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImOnline_PalletImOnlineHeartbeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImOnline_PalletImOnlineHeartbeat) ProtoMessage() {}

func (x *ImOnline_PalletImOnlineHeartbeat) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[493]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImOnline_PalletImOnlineHeartbeat.ProtoReflect.Descriptor instead.
func (*ImOnline_PalletImOnlineHeartbeat) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{493}
}

func (x *ImOnline_PalletImOnlineHeartbeat) GetBlockNumber() uint32 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *ImOnline_PalletImOnlineHeartbeat) GetSessionIndex() uint32 {
	if x != nil {
		return x.SessionIndex
	}
	return 0
}

func (x *ImOnline_PalletImOnlineHeartbeat) GetAuthorityIndex() uint32 {
	if x != nil {
		return x.AuthorityIndex
	}
	return 0
}

func (x *ImOnline_PalletImOnlineHeartbeat) GetValidatorsLen() uint32 {
	if x != nil {
		return x.ValidatorsLen
	}
	return 0
}

type Proxy_RemoveProxyCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Delegate  *Proxy_Delegate  `protobuf:"bytes,1,opt,name=delegate,proto3" json:"delegate,omitempty"`
	ProxyType *Proxy_ProxyType `protobuf:"bytes,2,opt,name=proxy_type,json=proxyType,proto3" json:"proxy_type,omitempty"`
	Delay     uint32           `protobuf:"varint,3,opt,name=delay,proto3" json:"delay,omitempty"`
}

func (x *Proxy_RemoveProxyCall) Reset() {
	*x = Proxy_RemoveProxyCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[494]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proxy_RemoveProxyCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proxy_RemoveProxyCall) ProtoMessage() {}

func (x *Proxy_RemoveProxyCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[494]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proxy_RemoveProxyCall.ProtoReflect.Descriptor instead.
func (*Proxy_RemoveProxyCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{494}
}

func (x *Proxy_RemoveProxyCall) GetDelegate() *Proxy_Delegate {
	if x != nil {
		return x.Delegate
	}
	return nil
}

func (x *Proxy_RemoveProxyCall) GetProxyType() *Proxy_ProxyType {
	if x != nil {
		return x.ProxyType
	}
	return nil
}

func (x *Proxy_RemoveProxyCall) GetDelay() uint32 {
	if x != nil {
		return x.Delay
	}
	return 0
}

type ChildBounties_AddChildBountyCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentBountyId uint32 `protobuf:"varint,1,opt,name=parent_bounty_id,json=parentBountyId,proto3" json:"parent_bounty_id,omitempty"`
	Value          string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Description    []byte `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *ChildBounties_AddChildBountyCall) Reset() {
	*x = ChildBounties_AddChildBountyCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[495]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChildBounties_AddChildBountyCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChildBounties_AddChildBountyCall) ProtoMessage() {}

func (x *ChildBounties_AddChildBountyCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[495]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChildBounties_AddChildBountyCall.ProtoReflect.Descriptor instead.
func (*ChildBounties_AddChildBountyCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{495}
}

func (x *ChildBounties_AddChildBountyCall) GetParentBountyId() uint32 {
	if x != nil {
		return x.ParentBountyId
	}
	return 0
}

func (x *ChildBounties_AddChildBountyCall) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ChildBounties_AddChildBountyCall) GetDescription() []byte {
	if x != nil {
		return x.Description
	}
	return nil
}

type GprimitivesMessageId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *GprimitivesMessageId) Reset() {
	*x = GprimitivesMessageId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[496]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GprimitivesMessageId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GprimitivesMessageId) ProtoMessage() {}

func (x *GprimitivesMessageId) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[496]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GprimitivesMessageId.ProtoReflect.Descriptor instead.
func (*GprimitivesMessageId) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{496}
}

func (x *GprimitivesMessageId) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type ConvictionVoting_RemoveVoteCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Class *uint32 `protobuf:"varint,1,opt,name=class,proto3,oneof" json:"class,omitempty"`
	Index uint32  `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *ConvictionVoting_RemoveVoteCall) Reset() {
	*x = ConvictionVoting_RemoveVoteCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[497]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConvictionVoting_RemoveVoteCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvictionVoting_RemoveVoteCall) ProtoMessage() {}

func (x *ConvictionVoting_RemoveVoteCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[497]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvictionVoting_RemoveVoteCall.ProtoReflect.Descriptor instead.
func (*ConvictionVoting_RemoveVoteCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{497}
}

func (x *ConvictionVoting_RemoveVoteCall) GetClass() uint32 {
	if x != nil && x.Class != nil {
		return *x.Class
	}
	return 0
}

func (x *ConvictionVoting_RemoveVoteCall) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type Proxy_IdentityJudgement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Proxy_IdentityJudgement) Reset() {
	*x = Proxy_IdentityJudgement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[498]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proxy_IdentityJudgement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proxy_IdentityJudgement) ProtoMessage() {}

func (x *Proxy_IdentityJudgement) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[498]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proxy_IdentityJudgement.ProtoReflect.Descriptor instead.
func (*Proxy_IdentityJudgement) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{498}
}

type NominationPools_UnbondCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberAccount   *NominationPools_MemberAccount `protobuf:"bytes,1,opt,name=member_account,json=memberAccount,proto3" json:"member_account,omitempty"`
	UnbondingPoints string                         `protobuf:"bytes,2,opt,name=unbonding_points,json=unbondingPoints,proto3" json:"unbonding_points,omitempty"`
}

func (x *NominationPools_UnbondCall) Reset() {
	*x = NominationPools_UnbondCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[499]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NominationPools_UnbondCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NominationPools_UnbondCall) ProtoMessage() {}

func (x *NominationPools_UnbondCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[499]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NominationPools_UnbondCall.ProtoReflect.Descriptor instead.
func (*NominationPools_UnbondCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{499}
}

func (x *NominationPools_UnbondCall) GetMemberAccount() *NominationPools_MemberAccount {
	if x != nil {
		return x.MemberAccount
	}
	return nil
}

func (x *NominationPools_UnbondCall) GetUnbondingPoints() string {
	if x != nil {
		return x.UnbondingPoints
	}
	return ""
}

type NominationPools_Blocked struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NominationPools_Blocked) Reset() {
	*x = NominationPools_Blocked{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[500]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NominationPools_Blocked) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NominationPools_Blocked) ProtoMessage() {}

func (x *NominationPools_Blocked) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[500]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NominationPools_Blocked.ProtoReflect.Descriptor instead.
func (*NominationPools_Blocked) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{500}
}

type NominationPools_TupleSpArithmeticPerThingsPerbillspCoreCryptoAccountId32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 *SpArithmeticPerThingsPerbill `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
	Value1 *SpCoreCryptoAccountId32      `protobuf:"bytes,2,opt,name=value1,proto3" json:"value1,omitempty"`
}

func (x *NominationPools_TupleSpArithmeticPerThingsPerbillspCoreCryptoAccountId32) Reset() {
	*x = NominationPools_TupleSpArithmeticPerThingsPerbillspCoreCryptoAccountId32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[501]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NominationPools_TupleSpArithmeticPerThingsPerbillspCoreCryptoAccountId32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NominationPools_TupleSpArithmeticPerThingsPerbillspCoreCryptoAccountId32) ProtoMessage() {}

func (x *NominationPools_TupleSpArithmeticPerThingsPerbillspCoreCryptoAccountId32) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[501]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NominationPools_TupleSpArithmeticPerThingsPerbillspCoreCryptoAccountId32.ProtoReflect.Descriptor instead.
func (*NominationPools_TupleSpArithmeticPerThingsPerbillspCoreCryptoAccountId32) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{501}
}

func (x *NominationPools_TupleSpArithmeticPerThingsPerbillspCoreCryptoAccountId32) GetValue0() *SpArithmeticPerThingsPerbill {
	if x != nil {
		return x.Value0
	}
	return nil
}

func (x *NominationPools_TupleSpArithmeticPerThingsPerbillspCoreCryptoAccountId32) GetValue1() *SpCoreCryptoAccountId32 {
	if x != nil {
		return x.Value1
	}
	return nil
}

type NominationPools_NewRoot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*NominationPools_NewRoot_Noop
	//	*NominationPools_NewRoot_Set
	//	*NominationPools_NewRoot_Remove
	Value isNominationPools_NewRoot_Value `protobuf_oneof:"value"`
}

func (x *NominationPools_NewRoot) Reset() {
	*x = NominationPools_NewRoot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[502]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NominationPools_NewRoot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NominationPools_NewRoot) ProtoMessage() {}

func (x *NominationPools_NewRoot) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[502]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NominationPools_NewRoot.ProtoReflect.Descriptor instead.
func (*NominationPools_NewRoot) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{502}
}

func (m *NominationPools_NewRoot) GetValue() isNominationPools_NewRoot_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *NominationPools_NewRoot) GetNoop() *NominationPools_Noop {
	if x, ok := x.GetValue().(*NominationPools_NewRoot_Noop); ok {
		return x.Noop
	}
	return nil
}

func (x *NominationPools_NewRoot) GetSet() *NominationPools_Set {
	if x, ok := x.GetValue().(*NominationPools_NewRoot_Set); ok {
		return x.Set
	}
	return nil
}

func (x *NominationPools_NewRoot) GetRemove() *NominationPools_Remove {
	if x, ok := x.GetValue().(*NominationPools_NewRoot_Remove); ok {
		return x.Remove
	}
	return nil
}

type isNominationPools_NewRoot_Value interface {
	isNominationPools_NewRoot_Value()
}

type NominationPools_NewRoot_Noop struct {
	Noop *NominationPools_Noop `protobuf:"bytes,1,opt,name=noop,proto3,oneof"`
}

type NominationPools_NewRoot_Set struct {
	Set *NominationPools_Set `protobuf:"bytes,2,opt,name=set,proto3,oneof"`
}

type NominationPools_NewRoot_Remove struct {
	Remove *NominationPools_Remove `protobuf:"bytes,3,opt,name=remove,proto3,oneof"`
}

func (*NominationPools_NewRoot_Noop) isNominationPools_NewRoot_Value() {}

func (*NominationPools_NewRoot_Set) isNominationPools_NewRoot_Value() {}

func (*NominationPools_NewRoot_Remove) isNominationPools_NewRoot_Value() {}

type GearVoucher_DeclineCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VoucherId *GearVoucher_PalletGearVoucherInternalVoucherId `protobuf:"bytes,1,opt,name=voucher_id,json=voucherId,proto3" json:"voucher_id,omitempty"`
}

func (x *GearVoucher_DeclineCall) Reset() {
	*x = GearVoucher_DeclineCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[503]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GearVoucher_DeclineCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GearVoucher_DeclineCall) ProtoMessage() {}

func (x *GearVoucher_DeclineCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[503]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GearVoucher_DeclineCall.ProtoReflect.Descriptor instead.
func (*GearVoucher_DeclineCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{503}
}

func (x *GearVoucher_DeclineCall) GetVoucherId() *GearVoucher_PalletGearVoucherInternalVoucherId {
	if x != nil {
		return x.VoucherId
	}
	return nil
}

type System_KillPrefixCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix  []byte `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Subkeys uint32 `protobuf:"varint,2,opt,name=subkeys,proto3" json:"subkeys,omitempty"`
}

func (x *System_KillPrefixCall) Reset() {
	*x = System_KillPrefixCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[504]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System_KillPrefixCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System_KillPrefixCall) ProtoMessage() {}

func (x *System_KillPrefixCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[504]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System_KillPrefixCall.ProtoReflect.Descriptor instead.
func (*System_KillPrefixCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{504}
}

func (x *System_KillPrefixCall) GetPrefix() []byte {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *System_KillPrefixCall) GetSubkeys() uint32 {
	if x != nil {
		return x.Subkeys
	}
	return 0
}

type Utility_Origins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 *Value0 `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Utility_Origins) Reset() {
	*x = Utility_Origins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[505]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Utility_Origins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Utility_Origins) ProtoMessage() {}

func (x *Utility_Origins) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[505]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Utility_Origins.ProtoReflect.Descriptor instead.
func (*Utility_Origins) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{505}
}

func (x *Utility_Origins) GetValue0() *Value0 {
	if x != nil {
		return x.Value0
	}
	return nil
}

type FellowshipCollective_PromoteMemberCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Who *FellowshipCollective_Who `protobuf:"bytes,1,opt,name=who,proto3" json:"who,omitempty"`
}

func (x *FellowshipCollective_PromoteMemberCall) Reset() {
	*x = FellowshipCollective_PromoteMemberCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[506]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FellowshipCollective_PromoteMemberCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FellowshipCollective_PromoteMemberCall) ProtoMessage() {}

func (x *FellowshipCollective_PromoteMemberCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[506]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FellowshipCollective_PromoteMemberCall.ProtoReflect.Descriptor instead.
func (*FellowshipCollective_PromoteMemberCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{506}
}

func (x *FellowshipCollective_PromoteMemberCall) GetWho() *FellowshipCollective_Who {
	if x != nil {
		return x.Who
	}
	return nil
}

type FellowshipReferenda_Legacy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash *PrimitiveTypesH256 `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *FellowshipReferenda_Legacy) Reset() {
	*x = FellowshipReferenda_Legacy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[507]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FellowshipReferenda_Legacy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FellowshipReferenda_Legacy) ProtoMessage() {}

func (x *FellowshipReferenda_Legacy) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[507]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FellowshipReferenda_Legacy.ProtoReflect.Descriptor instead.
func (*FellowshipReferenda_Legacy) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{507}
}

func (x *FellowshipReferenda_Legacy) GetHash() *PrimitiveTypesH256 {
	if x != nil {
		return x.Hash
	}
	return nil
}

type NominationPools_Destroying struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NominationPools_Destroying) Reset() {
	*x = NominationPools_Destroying{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[508]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NominationPools_Destroying) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NominationPools_Destroying) ProtoMessage() {}

func (x *NominationPools_Destroying) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[508]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NominationPools_Destroying.ProtoReflect.Descriptor instead.
func (*NominationPools_Destroying) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{508}
}

type Multisig_PalletMultisigTimepoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height uint32 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Index  uint32 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *Multisig_PalletMultisigTimepoint) Reset() {
	*x = Multisig_PalletMultisigTimepoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[509]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Multisig_PalletMultisigTimepoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Multisig_PalletMultisigTimepoint) ProtoMessage() {}

func (x *Multisig_PalletMultisigTimepoint) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[509]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Multisig_PalletMultisigTimepoint.ProtoReflect.Descriptor instead.
func (*Multisig_PalletMultisigTimepoint) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{509}
}

func (x *Multisig_PalletMultisigTimepoint) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Multisig_PalletMultisigTimepoint) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type OffencesPallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OffencesPallet) Reset() {
	*x = OffencesPallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[510]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OffencesPallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OffencesPallet) ProtoMessage() {}

func (x *OffencesPallet) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[510]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OffencesPallet.ProtoReflect.Descriptor instead.
func (*OffencesPallet) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{510}
}

type ChildBounties_Raw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *ChildBounties_Raw) Reset() {
	*x = ChildBounties_Raw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[511]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChildBounties_Raw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChildBounties_Raw) ProtoMessage() {}

func (x *ChildBounties_Raw) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[511]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChildBounties_Raw.ProtoReflect.Descriptor instead.
func (*ChildBounties_Raw) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{511}
}

func (x *ChildBounties_Raw) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type AuthorityDiscoveryPallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AuthorityDiscoveryPallet) Reset() {
	*x = AuthorityDiscoveryPallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[512]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorityDiscoveryPallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorityDiscoveryPallet) ProtoMessage() {}

func (x *AuthorityDiscoveryPallet) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[512]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorityDiscoveryPallet.ProtoReflect.Descriptor instead.
func (*AuthorityDiscoveryPallet) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{512}
}

type SpCoreCryptoAccountId32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *SpCoreCryptoAccountId32) Reset() {
	*x = SpCoreCryptoAccountId32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[513]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpCoreCryptoAccountId32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpCoreCryptoAccountId32) ProtoMessage() {}

func (x *SpCoreCryptoAccountId32) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[513]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpCoreCryptoAccountId32.ProtoReflect.Descriptor instead.
func (*SpCoreCryptoAccountId32) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{513}
}

func (x *SpCoreCryptoAccountId32) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type ConvictionVoting_VoteCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PollIndex uint32                 `protobuf:"varint,1,opt,name=poll_index,json=pollIndex,proto3" json:"poll_index,omitempty"`
	Vote      *ConvictionVoting_Vote `protobuf:"bytes,2,opt,name=vote,proto3" json:"vote,omitempty"`
}

func (x *ConvictionVoting_VoteCall) Reset() {
	*x = ConvictionVoting_VoteCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[514]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConvictionVoting_VoteCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvictionVoting_VoteCall) ProtoMessage() {}

func (x *ConvictionVoting_VoteCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[514]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvictionVoting_VoteCall.ProtoReflect.Descriptor instead.
func (*ConvictionVoting_VoteCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{514}
}

func (x *ConvictionVoting_VoteCall) GetPollIndex() uint32 {
	if x != nil {
		return x.PollIndex
	}
	return 0
}

func (x *ConvictionVoting_VoteCall) GetVote() *ConvictionVoting_Vote {
	if x != nil {
		return x.Vote
	}
	return nil
}

type FellowshipCollective_Address32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *FellowshipCollective_Address32) Reset() {
	*x = FellowshipCollective_Address32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[515]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FellowshipCollective_Address32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FellowshipCollective_Address32) ProtoMessage() {}

func (x *FellowshipCollective_Address32) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[515]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FellowshipCollective_Address32.ProtoReflect.Descriptor instead.
func (*FellowshipCollective_Address32) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{515}
}

func (x *FellowshipCollective_Address32) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Identity_FeePaid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 string `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Identity_FeePaid) Reset() {
	*x = Identity_FeePaid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[516]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_FeePaid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_FeePaid) ProtoMessage() {}

func (x *Identity_FeePaid) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[516]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_FeePaid.ProtoReflect.Descriptor instead.
func (*Identity_FeePaid) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{516}
}

func (x *Identity_FeePaid) GetValue0() string {
	if x != nil {
		return x.Value0
	}
	return ""
}

type SpNposElectionsElectionScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinimalStake    string `protobuf:"bytes,1,opt,name=minimal_stake,json=minimalStake,proto3" json:"minimal_stake,omitempty"`
	SumStake        string `protobuf:"bytes,2,opt,name=sum_stake,json=sumStake,proto3" json:"sum_stake,omitempty"`
	SumStakeSquared string `protobuf:"bytes,3,opt,name=sum_stake_squared,json=sumStakeSquared,proto3" json:"sum_stake_squared,omitempty"`
}

func (x *SpNposElectionsElectionScore) Reset() {
	*x = SpNposElectionsElectionScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[517]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpNposElectionsElectionScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpNposElectionsElectionScore) ProtoMessage() {}

func (x *SpNposElectionsElectionScore) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[517]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpNposElectionsElectionScore.ProtoReflect.Descriptor instead.
func (*SpNposElectionsElectionScore) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{517}
}

func (x *SpNposElectionsElectionScore) GetMinimalStake() string {
	if x != nil {
		return x.MinimalStake
	}
	return ""
}

func (x *SpNposElectionsElectionScore) GetSumStake() string {
	if x != nil {
		return x.SumStake
	}
	return ""
}

func (x *SpNposElectionsElectionScore) GetSumStakeSquared() string {
	if x != nil {
		return x.SumStakeSquared
	}
	return ""
}

type NominationPools_BondExtraCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Extra *NominationPools_Extra `protobuf:"bytes,1,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *NominationPools_BondExtraCall) Reset() {
	*x = NominationPools_BondExtraCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[518]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NominationPools_BondExtraCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NominationPools_BondExtraCall) ProtoMessage() {}

func (x *NominationPools_BondExtraCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[518]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NominationPools_BondExtraCall.ProtoReflect.Descriptor instead.
func (*NominationPools_BondExtraCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{518}
}

func (x *NominationPools_BondExtraCall) GetExtra() *NominationPools_Extra {
	if x != nil {
		return x.Extra
	}
	return nil
}

type GearPaymentPallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GearPaymentPallet) Reset() {
	*x = GearPaymentPallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[519]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GearPaymentPallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GearPaymentPallet) ProtoMessage() {}

func (x *GearPaymentPallet) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[519]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GearPaymentPallet.ProtoReflect.Descriptor instead.
func (*GearPaymentPallet) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{519}
}

type Staking_Id struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 *SpCoreCryptoAccountId32 `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Staking_Id) Reset() {
	*x = Staking_Id{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[520]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staking_Id) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staking_Id) ProtoMessage() {}

func (x *Staking_Id) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[520]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staking_Id.ProtoReflect.Descriptor instead.
func (*Staking_Id) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{520}
}

func (x *Staking_Id) GetValue0() *SpCoreCryptoAccountId32 {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Scheduler_TupleUint32Uint32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 uint32 `protobuf:"varint,1,opt,name=value0,proto3" json:"value0,omitempty"`
	Value1 uint32 `protobuf:"varint,2,opt,name=value1,proto3" json:"value1,omitempty"`
}

func (x *Scheduler_TupleUint32Uint32) Reset() {
	*x = Scheduler_TupleUint32Uint32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[521]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scheduler_TupleUint32Uint32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scheduler_TupleUint32Uint32) ProtoMessage() {}

func (x *Scheduler_TupleUint32Uint32) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[521]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scheduler_TupleUint32Uint32.ProtoReflect.Descriptor instead.
func (*Scheduler_TupleUint32Uint32) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{521}
}

func (x *Scheduler_TupleUint32Uint32) GetValue0() uint32 {
	if x != nil {
		return x.Value0
	}
	return 0
}

func (x *Scheduler_TupleUint32Uint32) GetValue1() uint32 {
	if x != nil {
		return x.Value1
	}
	return 0
}

type Preimage_UnnotePreimageCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash *PrimitiveTypesH256 `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *Preimage_UnnotePreimageCall) Reset() {
	*x = Preimage_UnnotePreimageCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[522]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Preimage_UnnotePreimageCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Preimage_UnnotePreimageCall) ProtoMessage() {}

func (x *Preimage_UnnotePreimageCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[522]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Preimage_UnnotePreimageCall.ProtoReflect.Descriptor instead.
func (*Preimage_UnnotePreimageCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{522}
}

func (x *Preimage_UnnotePreimageCall) GetHash() *PrimitiveTypesH256 {
	if x != nil {
		return x.Hash
	}
	return nil
}

type Proxy_Governance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Proxy_Governance) Reset() {
	*x = Proxy_Governance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[523]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proxy_Governance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proxy_Governance) ProtoMessage() {}

func (x *Proxy_Governance) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[523]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proxy_Governance.ProtoReflect.Descriptor instead.
func (*Proxy_Governance) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{523}
}

type ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes9Listuint32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 uint32                                                               `protobuf:"varint,1,opt,name=value0,proto3" json:"value0,omitempty"`
	Value1 []*ElectionProviderMultiPhase_TupleUint32SpArithmeticPerThingsPerU16 `protobuf:"bytes,2,rep,name=value1,proto3" json:"value1,omitempty"`
	Value2 uint32                                                               `protobuf:"varint,3,opt,name=value2,proto3" json:"value2,omitempty"`
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes9Listuint32) Reset() {
	*x = ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes9Listuint32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[524]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes9Listuint32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes9Listuint32) ProtoMessage() {
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes9Listuint32) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[524]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes9Listuint32.ProtoReflect.Descriptor instead.
func (*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes9Listuint32) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{524}
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes9Listuint32) GetValue0() uint32 {
	if x != nil {
		return x.Value0
	}
	return 0
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes9Listuint32) GetValue1() []*ElectionProviderMultiPhase_TupleUint32SpArithmeticPerThingsPerU16 {
	if x != nil {
		return x.Value1
	}
	return nil
}

func (x *ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes9Listuint32) GetValue2() uint32 {
	if x != nil {
		return x.Value2
	}
	return 0
}

type VaraRuntimeSessionKeys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Babe               *SpConsensusBabeAppPublic                       `protobuf:"bytes,1,opt,name=babe,proto3" json:"babe,omitempty"`
	Grandpa            *SpConsensusGrandpaAppPublic                    `protobuf:"bytes,2,opt,name=grandpa,proto3" json:"grandpa,omitempty"`
	ImOnline           *ImOnline_PalletImOnlineSr25519AppSr25519Public `protobuf:"bytes,3,opt,name=im_online,json=imOnline,proto3" json:"im_online,omitempty"`
	AuthorityDiscovery *SpAuthorityDiscoveryAppPublic                  `protobuf:"bytes,4,opt,name=authority_discovery,json=authorityDiscovery,proto3" json:"authority_discovery,omitempty"`
}

func (x *VaraRuntimeSessionKeys) Reset() {
	*x = VaraRuntimeSessionKeys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[525]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VaraRuntimeSessionKeys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VaraRuntimeSessionKeys) ProtoMessage() {}

func (x *VaraRuntimeSessionKeys) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[525]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VaraRuntimeSessionKeys.ProtoReflect.Descriptor instead.
func (*VaraRuntimeSessionKeys) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{525}
}

func (x *VaraRuntimeSessionKeys) GetBabe() *SpConsensusBabeAppPublic {
	if x != nil {
		return x.Babe
	}
	return nil
}

func (x *VaraRuntimeSessionKeys) GetGrandpa() *SpConsensusGrandpaAppPublic {
	if x != nil {
		return x.Grandpa
	}
	return nil
}

func (x *VaraRuntimeSessionKeys) GetImOnline() *ImOnline_PalletImOnlineSr25519AppSr25519Public {
	if x != nil {
		return x.ImOnline
	}
	return nil
}

func (x *VaraRuntimeSessionKeys) GetAuthorityDiscovery() *SpAuthorityDiscoveryAppPublic {
	if x != nil {
		return x.AuthorityDiscovery
	}
	return nil
}

type Utility_AsOrigin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*Utility_AsOrigin_System
	//	*Utility_AsOrigin_Origins
	//	*Utility_AsOrigin_Void
	Value isUtility_AsOrigin_Value `protobuf_oneof:"value"`
}

func (x *Utility_AsOrigin) Reset() {
	*x = Utility_AsOrigin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[526]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Utility_AsOrigin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Utility_AsOrigin) ProtoMessage() {}

func (x *Utility_AsOrigin) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[526]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Utility_AsOrigin.ProtoReflect.Descriptor instead.
func (*Utility_AsOrigin) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{526}
}

func (m *Utility_AsOrigin) GetValue() isUtility_AsOrigin_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Utility_AsOrigin) GetSystem() *Utility_System {
	if x, ok := x.GetValue().(*Utility_AsOrigin_System); ok {
		return x.System
	}
	return nil
}

func (x *Utility_AsOrigin) GetOrigins() *Utility_Origins {
	if x, ok := x.GetValue().(*Utility_AsOrigin_Origins); ok {
		return x.Origins
	}
	return nil
}

func (x *Utility_AsOrigin) GetVoid() *Utility_Void {
	if x, ok := x.GetValue().(*Utility_AsOrigin_Void); ok {
		return x.Void
	}
	return nil
}

type isUtility_AsOrigin_Value interface {
	isUtility_AsOrigin_Value()
}

type Utility_AsOrigin_System struct {
	System *Utility_System `protobuf:"bytes,1,opt,name=system,proto3,oneof"`
}

type Utility_AsOrigin_Origins struct {
	Origins *Utility_Origins `protobuf:"bytes,2,opt,name=origins,proto3,oneof"`
}

type Utility_AsOrigin_Void struct {
	Void *Utility_Void `protobuf:"bytes,3,opt,name=void,proto3,oneof"`
}

func (*Utility_AsOrigin_System) isUtility_AsOrigin_Value() {}

func (*Utility_AsOrigin_Origins) isUtility_AsOrigin_Value() {}

func (*Utility_AsOrigin_Void) isUtility_AsOrigin_Value() {}

type FellowshipReferenda_At struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 uint32 `protobuf:"varint,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *FellowshipReferenda_At) Reset() {
	*x = FellowshipReferenda_At{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[527]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FellowshipReferenda_At) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FellowshipReferenda_At) ProtoMessage() {}

func (x *FellowshipReferenda_At) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[527]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FellowshipReferenda_At.ProtoReflect.Descriptor instead.
func (*FellowshipReferenda_At) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{527}
}

func (x *FellowshipReferenda_At) GetValue0() uint32 {
	if x != nil {
		return x.Value0
	}
	return 0
}

type Timestamp_SetCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Now uint64 `protobuf:"varint,1,opt,name=now,proto3" json:"now,omitempty"`
}

func (x *Timestamp_SetCall) Reset() {
	*x = Timestamp_SetCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[528]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timestamp_SetCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timestamp_SetCall) ProtoMessage() {}

func (x *Timestamp_SetCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[528]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timestamp_SetCall.ProtoReflect.Descriptor instead.
func (*Timestamp_SetCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{528}
}

func (x *Timestamp_SetCall) GetNow() uint64 {
	if x != nil {
		return x.Now
	}
	return 0
}

type AuthorshipPallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AuthorshipPallet) Reset() {
	*x = AuthorshipPallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[529]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorshipPallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorshipPallet) ProtoMessage() {}

func (x *AuthorshipPallet) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[529]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorshipPallet.ProtoReflect.Descriptor instead.
func (*AuthorshipPallet) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{529}
}

type BabePallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Call:
	//
	//	*BabePallet_ReportEquivocationCall
	//	*BabePallet_ReportEquivocationUnsignedCall
	//	*BabePallet_PlanConfigChangeCall
	Call isBabePallet_Call `protobuf_oneof:"call"`
}

func (x *BabePallet) Reset() {
	*x = BabePallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[530]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BabePallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BabePallet) ProtoMessage() {}

func (x *BabePallet) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[530]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BabePallet.ProtoReflect.Descriptor instead.
func (*BabePallet) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{530}
}

func (m *BabePallet) GetCall() isBabePallet_Call {
	if m != nil {
		return m.Call
	}
	return nil
}

func (x *BabePallet) GetReportEquivocationCall() *Babe_ReportEquivocationCall {
	if x, ok := x.GetCall().(*BabePallet_ReportEquivocationCall); ok {
		return x.ReportEquivocationCall
	}
	return nil
}

func (x *BabePallet) GetReportEquivocationUnsignedCall() *Babe_ReportEquivocationUnsignedCall {
	if x, ok := x.GetCall().(*BabePallet_ReportEquivocationUnsignedCall); ok {
		return x.ReportEquivocationUnsignedCall
	}
	return nil
}

func (x *BabePallet) GetPlanConfigChangeCall() *Babe_PlanConfigChangeCall {
	if x, ok := x.GetCall().(*BabePallet_PlanConfigChangeCall); ok {
		return x.PlanConfigChangeCall
	}
	return nil
}

type isBabePallet_Call interface {
	isBabePallet_Call()
}

type BabePallet_ReportEquivocationCall struct {
	ReportEquivocationCall *Babe_ReportEquivocationCall `protobuf:"bytes,1,opt,name=report_equivocation_call,json=reportEquivocationCall,proto3,oneof"`
}

type BabePallet_ReportEquivocationUnsignedCall struct {
	ReportEquivocationUnsignedCall *Babe_ReportEquivocationUnsignedCall `protobuf:"bytes,2,opt,name=report_equivocation_unsigned_call,json=reportEquivocationUnsignedCall,proto3,oneof"`
}

type BabePallet_PlanConfigChangeCall struct {
	PlanConfigChangeCall *Babe_PlanConfigChangeCall `protobuf:"bytes,3,opt,name=plan_config_change_call,json=planConfigChangeCall,proto3,oneof"`
}

func (*BabePallet_ReportEquivocationCall) isBabePallet_Call() {}

func (*BabePallet_ReportEquivocationUnsignedCall) isBabePallet_Call() {}

func (*BabePallet_PlanConfigChangeCall) isBabePallet_Call() {}

type ImOnlinePallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Call:
	//
	//	*ImOnlinePallet_HeartbeatCall
	Call isImOnlinePallet_Call `protobuf_oneof:"call"`
}

func (x *ImOnlinePallet) Reset() {
	*x = ImOnlinePallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[531]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImOnlinePallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImOnlinePallet) ProtoMessage() {}

func (x *ImOnlinePallet) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[531]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImOnlinePallet.ProtoReflect.Descriptor instead.
func (*ImOnlinePallet) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{531}
}

func (m *ImOnlinePallet) GetCall() isImOnlinePallet_Call {
	if m != nil {
		return m.Call
	}
	return nil
}

func (x *ImOnlinePallet) GetHeartbeatCall() *ImOnline_HeartbeatCall {
	if x, ok := x.GetCall().(*ImOnlinePallet_HeartbeatCall); ok {
		return x.HeartbeatCall
	}
	return nil
}

type isImOnlinePallet_Call interface {
	isImOnlinePallet_Call()
}

type ImOnlinePallet_HeartbeatCall struct {
	HeartbeatCall *ImOnline_HeartbeatCall `protobuf:"bytes,1,opt,name=heartbeat_call,json=heartbeatCall,proto3,oneof"`
}

func (*ImOnlinePallet_HeartbeatCall) isImOnlinePallet_Call() {}

type Staking_ChillOtherCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Controller *SpCoreCryptoAccountId32 `protobuf:"bytes,1,opt,name=controller,proto3" json:"controller,omitempty"`
}

func (x *Staking_ChillOtherCall) Reset() {
	*x = Staking_ChillOtherCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[532]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staking_ChillOtherCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staking_ChillOtherCall) ProtoMessage() {}

func (x *Staking_ChillOtherCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[532]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staking_ChillOtherCall.ProtoReflect.Descriptor instead.
func (*Staking_ChillOtherCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{532}
}

func (x *Staking_ChillOtherCall) GetController() *SpCoreCryptoAccountId32 {
	if x != nil {
		return x.Controller
	}
	return nil
}

type StakingRewards_Index struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 *StakingRewards_TupleNull `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *StakingRewards_Index) Reset() {
	*x = StakingRewards_Index{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[533]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakingRewards_Index) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakingRewards_Index) ProtoMessage() {}

func (x *StakingRewards_Index) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[533]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakingRewards_Index.ProtoReflect.Descriptor instead.
func (*StakingRewards_Index) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{533}
}

func (x *StakingRewards_Index) GetValue0() *StakingRewards_TupleNull {
	if x != nil {
		return x.Value0
	}
	return nil
}

type FellowshipReferenda_KillCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *FellowshipReferenda_KillCall) Reset() {
	*x = FellowshipReferenda_KillCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[534]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FellowshipReferenda_KillCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FellowshipReferenda_KillCall) ProtoMessage() {}

func (x *FellowshipReferenda_KillCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[534]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FellowshipReferenda_KillCall.ProtoReflect.Descriptor instead.
func (*FellowshipReferenda_KillCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{534}
}

func (x *FellowshipReferenda_KillCall) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type Scheduler_ScheduleAfterCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	After         uint32                       `protobuf:"varint,1,opt,name=after,proto3" json:"after,omitempty"`
	MaybePeriodic *Scheduler_TupleUint32Uint32 `protobuf:"bytes,2,opt,name=maybe_periodic,json=maybePeriodic,proto3,oneof" json:"maybe_periodic,omitempty"`
	Priority      uint32                       `protobuf:"varint,3,opt,name=priority,proto3" json:"priority,omitempty"`
	// Types that are assignable to Call:
	//
	//	*Scheduler_ScheduleAfterCall_System
	//	*Scheduler_ScheduleAfterCall_Timestamp
	//	*Scheduler_ScheduleAfterCall_Babe
	//	*Scheduler_ScheduleAfterCall_Grandpa
	//	*Scheduler_ScheduleAfterCall_Balances
	//	*Scheduler_ScheduleAfterCall_Vesting
	//	*Scheduler_ScheduleAfterCall_BagsList
	//	*Scheduler_ScheduleAfterCall_ImOnline
	//	*Scheduler_ScheduleAfterCall_Staking
	//	*Scheduler_ScheduleAfterCall_Session
	//	*Scheduler_ScheduleAfterCall_Treasury
	//	*Scheduler_ScheduleAfterCall_Utility
	//	*Scheduler_ScheduleAfterCall_ConvictionVoting
	//	*Scheduler_ScheduleAfterCall_Referenda
	//	*Scheduler_ScheduleAfterCall_FellowshipCollective
	//	*Scheduler_ScheduleAfterCall_FellowshipReferenda
	//	*Scheduler_ScheduleAfterCall_Whitelist
	//	*Scheduler_ScheduleAfterCall_Scheduler
	//	*Scheduler_ScheduleAfterCall_Preimage
	//	*Scheduler_ScheduleAfterCall_Identity
	//	*Scheduler_ScheduleAfterCall_Proxy
	//	*Scheduler_ScheduleAfterCall_Multisig
	//	*Scheduler_ScheduleAfterCall_ElectionProviderMultiPhase
	//	*Scheduler_ScheduleAfterCall_Bounties
	//	*Scheduler_ScheduleAfterCall_ChildBounties
	//	*Scheduler_ScheduleAfterCall_NominationPools
	//	*Scheduler_ScheduleAfterCall_Gear
	//	*Scheduler_ScheduleAfterCall_StakingRewards
	//	*Scheduler_ScheduleAfterCall_GearVoucher
	Call isScheduler_ScheduleAfterCall_Call `protobuf_oneof:"call"`
}

func (x *Scheduler_ScheduleAfterCall) Reset() {
	*x = Scheduler_ScheduleAfterCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[535]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scheduler_ScheduleAfterCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scheduler_ScheduleAfterCall) ProtoMessage() {}

func (x *Scheduler_ScheduleAfterCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[535]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scheduler_ScheduleAfterCall.ProtoReflect.Descriptor instead.
func (*Scheduler_ScheduleAfterCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{535}
}

func (x *Scheduler_ScheduleAfterCall) GetAfter() uint32 {
	if x != nil {
		return x.After
	}
	return 0
}

func (x *Scheduler_ScheduleAfterCall) GetMaybePeriodic() *Scheduler_TupleUint32Uint32 {
	if x != nil {
		return x.MaybePeriodic
	}
	return nil
}

func (x *Scheduler_ScheduleAfterCall) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (m *Scheduler_ScheduleAfterCall) GetCall() isScheduler_ScheduleAfterCall_Call {
	if m != nil {
		return m.Call
	}
	return nil
}

func (x *Scheduler_ScheduleAfterCall) GetSystem() *SystemPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleAfterCall_System); ok {
		return x.System
	}
	return nil
}

func (x *Scheduler_ScheduleAfterCall) GetTimestamp() *TimestampPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleAfterCall_Timestamp); ok {
		return x.Timestamp
	}
	return nil
}

func (x *Scheduler_ScheduleAfterCall) GetBabe() *BabePallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleAfterCall_Babe); ok {
		return x.Babe
	}
	return nil
}

func (x *Scheduler_ScheduleAfterCall) GetGrandpa() *GrandpaPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleAfterCall_Grandpa); ok {
		return x.Grandpa
	}
	return nil
}

func (x *Scheduler_ScheduleAfterCall) GetBalances() *BalancesPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleAfterCall_Balances); ok {
		return x.Balances
	}
	return nil
}

func (x *Scheduler_ScheduleAfterCall) GetVesting() *VestingPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleAfterCall_Vesting); ok {
		return x.Vesting
	}
	return nil
}

func (x *Scheduler_ScheduleAfterCall) GetBagsList() *BagsListPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleAfterCall_BagsList); ok {
		return x.BagsList
	}
	return nil
}

func (x *Scheduler_ScheduleAfterCall) GetImOnline() *ImOnlinePallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleAfterCall_ImOnline); ok {
		return x.ImOnline
	}
	return nil
}

func (x *Scheduler_ScheduleAfterCall) GetStaking() *StakingPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleAfterCall_Staking); ok {
		return x.Staking
	}
	return nil
}

func (x *Scheduler_ScheduleAfterCall) GetSession() *SessionPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleAfterCall_Session); ok {
		return x.Session
	}
	return nil
}

func (x *Scheduler_ScheduleAfterCall) GetTreasury() *TreasuryPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleAfterCall_Treasury); ok {
		return x.Treasury
	}
	return nil
}

func (x *Scheduler_ScheduleAfterCall) GetUtility() *UtilityPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleAfterCall_Utility); ok {
		return x.Utility
	}
	return nil
}

func (x *Scheduler_ScheduleAfterCall) GetConvictionVoting() *ConvictionVotingPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleAfterCall_ConvictionVoting); ok {
		return x.ConvictionVoting
	}
	return nil
}

func (x *Scheduler_ScheduleAfterCall) GetReferenda() *ReferendaPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleAfterCall_Referenda); ok {
		return x.Referenda
	}
	return nil
}

func (x *Scheduler_ScheduleAfterCall) GetFellowshipCollective() *FellowshipCollectivePallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleAfterCall_FellowshipCollective); ok {
		return x.FellowshipCollective
	}
	return nil
}

func (x *Scheduler_ScheduleAfterCall) GetFellowshipReferenda() *FellowshipReferendaPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleAfterCall_FellowshipReferenda); ok {
		return x.FellowshipReferenda
	}
	return nil
}

func (x *Scheduler_ScheduleAfterCall) GetWhitelist() *WhitelistPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleAfterCall_Whitelist); ok {
		return x.Whitelist
	}
	return nil
}

func (x *Scheduler_ScheduleAfterCall) GetScheduler() *SchedulerPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleAfterCall_Scheduler); ok {
		return x.Scheduler
	}
	return nil
}

func (x *Scheduler_ScheduleAfterCall) GetPreimage() *PreimagePallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleAfterCall_Preimage); ok {
		return x.Preimage
	}
	return nil
}

func (x *Scheduler_ScheduleAfterCall) GetIdentity() *IdentityPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleAfterCall_Identity); ok {
		return x.Identity
	}
	return nil
}

func (x *Scheduler_ScheduleAfterCall) GetProxy() *ProxyPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleAfterCall_Proxy); ok {
		return x.Proxy
	}
	return nil
}

func (x *Scheduler_ScheduleAfterCall) GetMultisig() *MultisigPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleAfterCall_Multisig); ok {
		return x.Multisig
	}
	return nil
}

func (x *Scheduler_ScheduleAfterCall) GetElectionProviderMultiPhase() *ElectionProviderMultiPhasePallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleAfterCall_ElectionProviderMultiPhase); ok {
		return x.ElectionProviderMultiPhase
	}
	return nil
}

func (x *Scheduler_ScheduleAfterCall) GetBounties() *BountiesPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleAfterCall_Bounties); ok {
		return x.Bounties
	}
	return nil
}

func (x *Scheduler_ScheduleAfterCall) GetChildBounties() *ChildBountiesPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleAfterCall_ChildBounties); ok {
		return x.ChildBounties
	}
	return nil
}

func (x *Scheduler_ScheduleAfterCall) GetNominationPools() *NominationPoolsPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleAfterCall_NominationPools); ok {
		return x.NominationPools
	}
	return nil
}

func (x *Scheduler_ScheduleAfterCall) GetGear() *GearPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleAfterCall_Gear); ok {
		return x.Gear
	}
	return nil
}

func (x *Scheduler_ScheduleAfterCall) GetStakingRewards() *StakingRewardsPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleAfterCall_StakingRewards); ok {
		return x.StakingRewards
	}
	return nil
}

func (x *Scheduler_ScheduleAfterCall) GetGearVoucher() *GearVoucherPallet {
	if x, ok := x.GetCall().(*Scheduler_ScheduleAfterCall_GearVoucher); ok {
		return x.GearVoucher
	}
	return nil
}

type isScheduler_ScheduleAfterCall_Call interface {
	isScheduler_ScheduleAfterCall_Call()
}

type Scheduler_ScheduleAfterCall_System struct {
	System *SystemPallet `protobuf:"bytes,4,opt,name=system,proto3,oneof"`
}

type Scheduler_ScheduleAfterCall_Timestamp struct {
	Timestamp *TimestampPallet `protobuf:"bytes,5,opt,name=timestamp,proto3,oneof"`
}

type Scheduler_ScheduleAfterCall_Babe struct {
	Babe *BabePallet `protobuf:"bytes,6,opt,name=babe,proto3,oneof"`
}

type Scheduler_ScheduleAfterCall_Grandpa struct {
	Grandpa *GrandpaPallet `protobuf:"bytes,7,opt,name=grandpa,proto3,oneof"`
}

type Scheduler_ScheduleAfterCall_Balances struct {
	Balances *BalancesPallet `protobuf:"bytes,8,opt,name=balances,proto3,oneof"`
}

type Scheduler_ScheduleAfterCall_Vesting struct {
	Vesting *VestingPallet `protobuf:"bytes,9,opt,name=vesting,proto3,oneof"`
}

type Scheduler_ScheduleAfterCall_BagsList struct {
	BagsList *BagsListPallet `protobuf:"bytes,10,opt,name=bags_list,json=bagsList,proto3,oneof"`
}

type Scheduler_ScheduleAfterCall_ImOnline struct {
	ImOnline *ImOnlinePallet `protobuf:"bytes,11,opt,name=im_online,json=imOnline,proto3,oneof"`
}

type Scheduler_ScheduleAfterCall_Staking struct {
	Staking *StakingPallet `protobuf:"bytes,12,opt,name=staking,proto3,oneof"`
}

type Scheduler_ScheduleAfterCall_Session struct {
	Session *SessionPallet `protobuf:"bytes,13,opt,name=session,proto3,oneof"`
}

type Scheduler_ScheduleAfterCall_Treasury struct {
	Treasury *TreasuryPallet `protobuf:"bytes,14,opt,name=treasury,proto3,oneof"`
}

type Scheduler_ScheduleAfterCall_Utility struct {
	Utility *UtilityPallet `protobuf:"bytes,15,opt,name=utility,proto3,oneof"`
}

type Scheduler_ScheduleAfterCall_ConvictionVoting struct {
	ConvictionVoting *ConvictionVotingPallet `protobuf:"bytes,16,opt,name=conviction_voting,json=convictionVoting,proto3,oneof"`
}

type Scheduler_ScheduleAfterCall_Referenda struct {
	Referenda *ReferendaPallet `protobuf:"bytes,17,opt,name=referenda,proto3,oneof"`
}

type Scheduler_ScheduleAfterCall_FellowshipCollective struct {
	FellowshipCollective *FellowshipCollectivePallet `protobuf:"bytes,18,opt,name=fellowship_collective,json=fellowshipCollective,proto3,oneof"`
}

type Scheduler_ScheduleAfterCall_FellowshipReferenda struct {
	FellowshipReferenda *FellowshipReferendaPallet `protobuf:"bytes,19,opt,name=fellowship_referenda,json=fellowshipReferenda,proto3,oneof"`
}

type Scheduler_ScheduleAfterCall_Whitelist struct {
	Whitelist *WhitelistPallet `protobuf:"bytes,20,opt,name=whitelist,proto3,oneof"`
}

type Scheduler_ScheduleAfterCall_Scheduler struct {
	Scheduler *SchedulerPallet `protobuf:"bytes,21,opt,name=scheduler,proto3,oneof"`
}

type Scheduler_ScheduleAfterCall_Preimage struct {
	Preimage *PreimagePallet `protobuf:"bytes,22,opt,name=preimage,proto3,oneof"`
}

type Scheduler_ScheduleAfterCall_Identity struct {
	Identity *IdentityPallet `protobuf:"bytes,23,opt,name=identity,proto3,oneof"`
}

type Scheduler_ScheduleAfterCall_Proxy struct {
	Proxy *ProxyPallet `protobuf:"bytes,24,opt,name=proxy,proto3,oneof"`
}

type Scheduler_ScheduleAfterCall_Multisig struct {
	Multisig *MultisigPallet `protobuf:"bytes,25,opt,name=multisig,proto3,oneof"`
}

type Scheduler_ScheduleAfterCall_ElectionProviderMultiPhase struct {
	ElectionProviderMultiPhase *ElectionProviderMultiPhasePallet `protobuf:"bytes,26,opt,name=election_provider_multi_phase,json=electionProviderMultiPhase,proto3,oneof"`
}

type Scheduler_ScheduleAfterCall_Bounties struct {
	Bounties *BountiesPallet `protobuf:"bytes,27,opt,name=bounties,proto3,oneof"`
}

type Scheduler_ScheduleAfterCall_ChildBounties struct {
	ChildBounties *ChildBountiesPallet `protobuf:"bytes,28,opt,name=child_bounties,json=childBounties,proto3,oneof"`
}

type Scheduler_ScheduleAfterCall_NominationPools struct {
	NominationPools *NominationPoolsPallet `protobuf:"bytes,29,opt,name=nomination_pools,json=nominationPools,proto3,oneof"`
}

type Scheduler_ScheduleAfterCall_Gear struct {
	Gear *GearPallet `protobuf:"bytes,30,opt,name=gear,proto3,oneof"`
}

type Scheduler_ScheduleAfterCall_StakingRewards struct {
	StakingRewards *StakingRewardsPallet `protobuf:"bytes,31,opt,name=staking_rewards,json=stakingRewards,proto3,oneof"`
}

type Scheduler_ScheduleAfterCall_GearVoucher struct {
	GearVoucher *GearVoucherPallet `protobuf:"bytes,32,opt,name=gear_voucher,json=gearVoucher,proto3,oneof"`
}

func (*Scheduler_ScheduleAfterCall_System) isScheduler_ScheduleAfterCall_Call() {}

func (*Scheduler_ScheduleAfterCall_Timestamp) isScheduler_ScheduleAfterCall_Call() {}

func (*Scheduler_ScheduleAfterCall_Babe) isScheduler_ScheduleAfterCall_Call() {}

func (*Scheduler_ScheduleAfterCall_Grandpa) isScheduler_ScheduleAfterCall_Call() {}

func (*Scheduler_ScheduleAfterCall_Balances) isScheduler_ScheduleAfterCall_Call() {}

func (*Scheduler_ScheduleAfterCall_Vesting) isScheduler_ScheduleAfterCall_Call() {}

func (*Scheduler_ScheduleAfterCall_BagsList) isScheduler_ScheduleAfterCall_Call() {}

func (*Scheduler_ScheduleAfterCall_ImOnline) isScheduler_ScheduleAfterCall_Call() {}

func (*Scheduler_ScheduleAfterCall_Staking) isScheduler_ScheduleAfterCall_Call() {}

func (*Scheduler_ScheduleAfterCall_Session) isScheduler_ScheduleAfterCall_Call() {}

func (*Scheduler_ScheduleAfterCall_Treasury) isScheduler_ScheduleAfterCall_Call() {}

func (*Scheduler_ScheduleAfterCall_Utility) isScheduler_ScheduleAfterCall_Call() {}

func (*Scheduler_ScheduleAfterCall_ConvictionVoting) isScheduler_ScheduleAfterCall_Call() {}

func (*Scheduler_ScheduleAfterCall_Referenda) isScheduler_ScheduleAfterCall_Call() {}

func (*Scheduler_ScheduleAfterCall_FellowshipCollective) isScheduler_ScheduleAfterCall_Call() {}

func (*Scheduler_ScheduleAfterCall_FellowshipReferenda) isScheduler_ScheduleAfterCall_Call() {}

func (*Scheduler_ScheduleAfterCall_Whitelist) isScheduler_ScheduleAfterCall_Call() {}

func (*Scheduler_ScheduleAfterCall_Scheduler) isScheduler_ScheduleAfterCall_Call() {}

func (*Scheduler_ScheduleAfterCall_Preimage) isScheduler_ScheduleAfterCall_Call() {}

func (*Scheduler_ScheduleAfterCall_Identity) isScheduler_ScheduleAfterCall_Call() {}

func (*Scheduler_ScheduleAfterCall_Proxy) isScheduler_ScheduleAfterCall_Call() {}

func (*Scheduler_ScheduleAfterCall_Multisig) isScheduler_ScheduleAfterCall_Call() {}

func (*Scheduler_ScheduleAfterCall_ElectionProviderMultiPhase) isScheduler_ScheduleAfterCall_Call() {}

func (*Scheduler_ScheduleAfterCall_Bounties) isScheduler_ScheduleAfterCall_Call() {}

func (*Scheduler_ScheduleAfterCall_ChildBounties) isScheduler_ScheduleAfterCall_Call() {}

func (*Scheduler_ScheduleAfterCall_NominationPools) isScheduler_ScheduleAfterCall_Call() {}

func (*Scheduler_ScheduleAfterCall_Gear) isScheduler_ScheduleAfterCall_Call() {}

func (*Scheduler_ScheduleAfterCall_StakingRewards) isScheduler_ScheduleAfterCall_Call() {}

func (*Scheduler_ScheduleAfterCall_GearVoucher) isScheduler_ScheduleAfterCall_Call() {}

type Identity_PalletIdentitySimpleIdentityInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Additional     *BoundedCollectionsBoundedVecBoundedVec `protobuf:"bytes,1,opt,name=additional,proto3" json:"additional,omitempty"`
	Display        *Identity_Display                       `protobuf:"bytes,2,opt,name=display,proto3" json:"display,omitempty"`
	Legal          *Identity_Legal                         `protobuf:"bytes,3,opt,name=legal,proto3" json:"legal,omitempty"`
	Web            *Identity_Web                           `protobuf:"bytes,4,opt,name=web,proto3" json:"web,omitempty"`
	Riot           *Identity_Riot                          `protobuf:"bytes,5,opt,name=riot,proto3" json:"riot,omitempty"`
	Email          *Identity_Email                         `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`
	PgpFingerprint []byte                                  `protobuf:"bytes,7,opt,name=pgp_fingerprint,json=pgpFingerprint,proto3" json:"pgp_fingerprint,omitempty"`
	Image          *Identity_Image                         `protobuf:"bytes,8,opt,name=image,proto3" json:"image,omitempty"`
	Twitter        *Identity_Twitter                       `protobuf:"bytes,9,opt,name=twitter,proto3" json:"twitter,omitempty"`
}

func (x *Identity_PalletIdentitySimpleIdentityInfo) Reset() {
	*x = Identity_PalletIdentitySimpleIdentityInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[536]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_PalletIdentitySimpleIdentityInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_PalletIdentitySimpleIdentityInfo) ProtoMessage() {}

func (x *Identity_PalletIdentitySimpleIdentityInfo) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[536]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_PalletIdentitySimpleIdentityInfo.ProtoReflect.Descriptor instead.
func (*Identity_PalletIdentitySimpleIdentityInfo) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{536}
}

func (x *Identity_PalletIdentitySimpleIdentityInfo) GetAdditional() *BoundedCollectionsBoundedVecBoundedVec {
	if x != nil {
		return x.Additional
	}
	return nil
}

func (x *Identity_PalletIdentitySimpleIdentityInfo) GetDisplay() *Identity_Display {
	if x != nil {
		return x.Display
	}
	return nil
}

func (x *Identity_PalletIdentitySimpleIdentityInfo) GetLegal() *Identity_Legal {
	if x != nil {
		return x.Legal
	}
	return nil
}

func (x *Identity_PalletIdentitySimpleIdentityInfo) GetWeb() *Identity_Web {
	if x != nil {
		return x.Web
	}
	return nil
}

func (x *Identity_PalletIdentitySimpleIdentityInfo) GetRiot() *Identity_Riot {
	if x != nil {
		return x.Riot
	}
	return nil
}

func (x *Identity_PalletIdentitySimpleIdentityInfo) GetEmail() *Identity_Email {
	if x != nil {
		return x.Email
	}
	return nil
}

func (x *Identity_PalletIdentitySimpleIdentityInfo) GetPgpFingerprint() []byte {
	if x != nil {
		return x.PgpFingerprint
	}
	return nil
}

func (x *Identity_PalletIdentitySimpleIdentityInfo) GetImage() *Identity_Image {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *Identity_PalletIdentitySimpleIdentityInfo) GetTwitter() *Identity_Twitter {
	if x != nil {
		return x.Twitter
	}
	return nil
}

type Identity_RequestJudgementCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegIndex uint32 `protobuf:"varint,1,opt,name=reg_index,json=regIndex,proto3" json:"reg_index,omitempty"`
	MaxFee   string `protobuf:"bytes,2,opt,name=max_fee,json=maxFee,proto3" json:"max_fee,omitempty"`
}

func (x *Identity_RequestJudgementCall) Reset() {
	*x = Identity_RequestJudgementCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[537]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_RequestJudgementCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_RequestJudgementCall) ProtoMessage() {}

func (x *Identity_RequestJudgementCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[537]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_RequestJudgementCall.ProtoReflect.Descriptor instead.
func (*Identity_RequestJudgementCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{537}
}

func (x *Identity_RequestJudgementCall) GetRegIndex() uint32 {
	if x != nil {
		return x.RegIndex
	}
	return 0
}

func (x *Identity_RequestJudgementCall) GetMaxFee() string {
	if x != nil {
		return x.MaxFee
	}
	return ""
}

type NominationPools_TupleNull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *TupleNull `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *NominationPools_TupleNull) Reset() {
	*x = NominationPools_TupleNull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[538]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NominationPools_TupleNull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NominationPools_TupleNull) ProtoMessage() {}

func (x *NominationPools_TupleNull) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[538]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NominationPools_TupleNull.ProtoReflect.Descriptor instead.
func (*NominationPools_TupleNull) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{538}
}

func (x *NominationPools_TupleNull) GetValue() *TupleNull {
	if x != nil {
		return x.Value
	}
	return nil
}

type Identity_Unknown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Identity_Unknown) Reset() {
	*x = Identity_Unknown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[539]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_Unknown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_Unknown) ProtoMessage() {}

func (x *Identity_Unknown) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[539]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_Unknown.ProtoReflect.Descriptor instead.
func (*Identity_Unknown) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{539}
}

type Proxy_CreatePureCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProxyType *Proxy_ProxyType `protobuf:"bytes,1,opt,name=proxy_type,json=proxyType,proto3" json:"proxy_type,omitempty"`
	Delay     uint32           `protobuf:"varint,2,opt,name=delay,proto3" json:"delay,omitempty"`
	Index     uint32           `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *Proxy_CreatePureCall) Reset() {
	*x = Proxy_CreatePureCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[540]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proxy_CreatePureCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proxy_CreatePureCall) ProtoMessage() {}

func (x *Proxy_CreatePureCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[540]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proxy_CreatePureCall.ProtoReflect.Descriptor instead.
func (*Proxy_CreatePureCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{540}
}

func (x *Proxy_CreatePureCall) GetProxyType() *Proxy_ProxyType {
	if x != nil {
		return x.ProxyType
	}
	return nil
}

func (x *Proxy_CreatePureCall) GetDelay() uint32 {
	if x != nil {
		return x.Delay
	}
	return 0
}

func (x *Proxy_CreatePureCall) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type GearProgramPallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GearProgramPallet) Reset() {
	*x = GearProgramPallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[541]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GearProgramPallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GearProgramPallet) ProtoMessage() {}

func (x *GearProgramPallet) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[541]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GearProgramPallet.ProtoReflect.Descriptor instead.
func (*GearProgramPallet) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{541}
}

type Identity_Raw25 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Identity_Raw25) Reset() {
	*x = Identity_Raw25{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[542]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_Raw25) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_Raw25) ProtoMessage() {}

func (x *Identity_Raw25) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[542]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_Raw25.ProtoReflect.Descriptor instead.
func (*Identity_Raw25) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{542}
}

func (x *Identity_Raw25) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type NominationPools_SetCommissionCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoolId        uint32                                                                    `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	NewCommission *NominationPools_TupleSpArithmeticPerThingsPerbillspCoreCryptoAccountId32 `protobuf:"bytes,2,opt,name=new_commission,json=newCommission,proto3,oneof" json:"new_commission,omitempty"`
}

func (x *NominationPools_SetCommissionCall) Reset() {
	*x = NominationPools_SetCommissionCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[543]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NominationPools_SetCommissionCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NominationPools_SetCommissionCall) ProtoMessage() {}

func (x *NominationPools_SetCommissionCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[543]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NominationPools_SetCommissionCall.ProtoReflect.Descriptor instead.
func (*NominationPools_SetCommissionCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{543}
}

func (x *NominationPools_SetCommissionCall) GetPoolId() uint32 {
	if x != nil {
		return x.PoolId
	}
	return 0
}

func (x *NominationPools_SetCommissionCall) GetNewCommission() *NominationPools_TupleSpArithmeticPerThingsPerbillspCoreCryptoAccountId32 {
	if x != nil {
		return x.NewCommission
	}
	return nil
}

type StakingRewards_From struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*StakingRewards_From_Id
	//	*StakingRewards_From_Index
	//	*StakingRewards_From_Raw
	//	*StakingRewards_From_Address32
	//	*StakingRewards_From_Address20
	Value isStakingRewards_From_Value `protobuf_oneof:"value"`
}

func (x *StakingRewards_From) Reset() {
	*x = StakingRewards_From{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[544]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakingRewards_From) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakingRewards_From) ProtoMessage() {}

func (x *StakingRewards_From) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[544]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakingRewards_From.ProtoReflect.Descriptor instead.
func (*StakingRewards_From) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{544}
}

func (m *StakingRewards_From) GetValue() isStakingRewards_From_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *StakingRewards_From) GetId() *StakingRewards_Id {
	if x, ok := x.GetValue().(*StakingRewards_From_Id); ok {
		return x.Id
	}
	return nil
}

func (x *StakingRewards_From) GetIndex() *StakingRewards_Index {
	if x, ok := x.GetValue().(*StakingRewards_From_Index); ok {
		return x.Index
	}
	return nil
}

func (x *StakingRewards_From) GetRaw() *StakingRewards_Raw {
	if x, ok := x.GetValue().(*StakingRewards_From_Raw); ok {
		return x.Raw
	}
	return nil
}

func (x *StakingRewards_From) GetAddress32() *StakingRewards_Address32 {
	if x, ok := x.GetValue().(*StakingRewards_From_Address32); ok {
		return x.Address32
	}
	return nil
}

func (x *StakingRewards_From) GetAddress20() *StakingRewards_Address20 {
	if x, ok := x.GetValue().(*StakingRewards_From_Address20); ok {
		return x.Address20
	}
	return nil
}

type isStakingRewards_From_Value interface {
	isStakingRewards_From_Value()
}

type StakingRewards_From_Id struct {
	Id *StakingRewards_Id `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type StakingRewards_From_Index struct {
	Index *StakingRewards_Index `protobuf:"bytes,2,opt,name=index,proto3,oneof"`
}

type StakingRewards_From_Raw struct {
	Raw *StakingRewards_Raw `protobuf:"bytes,3,opt,name=raw,proto3,oneof"`
}

type StakingRewards_From_Address32 struct {
	Address32 *StakingRewards_Address32 `protobuf:"bytes,4,opt,name=address32,proto3,oneof"`
}

type StakingRewards_From_Address20 struct {
	Address20 *StakingRewards_Address20 `protobuf:"bytes,5,opt,name=address20,proto3,oneof"`
}

func (*StakingRewards_From_Id) isStakingRewards_From_Value() {}

func (*StakingRewards_From_Index) isStakingRewards_From_Value() {}

func (*StakingRewards_From_Raw) isStakingRewards_From_Value() {}

func (*StakingRewards_From_Address32) isStakingRewards_From_Value() {}

func (*StakingRewards_From_Address20) isStakingRewards_From_Value() {}

type Staking_BondExtraCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxAdditional string `protobuf:"bytes,1,opt,name=max_additional,json=maxAdditional,proto3" json:"max_additional,omitempty"`
}

func (x *Staking_BondExtraCall) Reset() {
	*x = Staking_BondExtraCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[545]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staking_BondExtraCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staking_BondExtraCall) ProtoMessage() {}

func (x *Staking_BondExtraCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[545]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staking_BondExtraCall.ProtoReflect.Descriptor instead.
func (*Staking_BondExtraCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{545}
}

func (x *Staking_BondExtraCall) GetMaxAdditional() string {
	if x != nil {
		return x.MaxAdditional
	}
	return ""
}

type Staking_PayoutStakersCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValidatorStash *SpCoreCryptoAccountId32 `protobuf:"bytes,1,opt,name=validator_stash,json=validatorStash,proto3" json:"validator_stash,omitempty"`
	Era            uint32                   `protobuf:"varint,2,opt,name=era,proto3" json:"era,omitempty"`
}

func (x *Staking_PayoutStakersCall) Reset() {
	*x = Staking_PayoutStakersCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[546]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staking_PayoutStakersCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staking_PayoutStakersCall) ProtoMessage() {}

func (x *Staking_PayoutStakersCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[546]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staking_PayoutStakersCall.ProtoReflect.Descriptor instead.
func (*Staking_PayoutStakersCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{546}
}

func (x *Staking_PayoutStakersCall) GetValidatorStash() *SpCoreCryptoAccountId32 {
	if x != nil {
		return x.ValidatorStash
	}
	return nil
}

func (x *Staking_PayoutStakersCall) GetEra() uint32 {
	if x != nil {
		return x.Era
	}
	return 0
}

type Referenda_SetMetadataCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index     uint32              `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	MaybeHash *PrimitiveTypesH256 `protobuf:"bytes,2,opt,name=maybe_hash,json=maybeHash,proto3,oneof" json:"maybe_hash,omitempty"`
}

func (x *Referenda_SetMetadataCall) Reset() {
	*x = Referenda_SetMetadataCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[547]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Referenda_SetMetadataCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Referenda_SetMetadataCall) ProtoMessage() {}

func (x *Referenda_SetMetadataCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[547]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Referenda_SetMetadataCall.ProtoReflect.Descriptor instead.
func (*Referenda_SetMetadataCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{547}
}

func (x *Referenda_SetMetadataCall) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Referenda_SetMetadataCall) GetMaybeHash() *PrimitiveTypesH256 {
	if x != nil {
		return x.MaybeHash
	}
	return nil
}

type Identity_Raw0 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Identity_Raw0) Reset() {
	*x = Identity_Raw0{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[548]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_Raw0) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_Raw0) ProtoMessage() {}

func (x *Identity_Raw0) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[548]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_Raw0.ProtoReflect.Descriptor instead.
func (*Identity_Raw0) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{548}
}

func (x *Identity_Raw0) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Identity_Raw11 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Identity_Raw11) Reset() {
	*x = Identity_Raw11{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[549]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_Raw11) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_Raw11) ProtoMessage() {}

func (x *Identity_Raw11) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[549]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_Raw11.ProtoReflect.Descriptor instead.
func (*Identity_Raw11) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{549}
}

func (x *Identity_Raw11) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type NominationPools_BondExtraOtherCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Member *NominationPools_Member `protobuf:"bytes,1,opt,name=member,proto3" json:"member,omitempty"`
	Extra  *NominationPools_Extra  `protobuf:"bytes,2,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *NominationPools_BondExtraOtherCall) Reset() {
	*x = NominationPools_BondExtraOtherCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[550]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NominationPools_BondExtraOtherCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NominationPools_BondExtraOtherCall) ProtoMessage() {}

func (x *NominationPools_BondExtraOtherCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[550]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NominationPools_BondExtraOtherCall.ProtoReflect.Descriptor instead.
func (*NominationPools_BondExtraOtherCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{550}
}

func (x *NominationPools_BondExtraOtherCall) GetMember() *NominationPools_Member {
	if x != nil {
		return x.Member
	}
	return nil
}

func (x *NominationPools_BondExtraOtherCall) GetExtra() *NominationPools_Extra {
	if x != nil {
		return x.Extra
	}
	return nil
}

type NominationPools_SetCommissionChangeRateCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoolId     uint32                                                     `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	ChangeRate *NominationPools_PalletNominationPoolsCommissionChangeRate `protobuf:"bytes,2,opt,name=change_rate,json=changeRate,proto3" json:"change_rate,omitempty"`
}

func (x *NominationPools_SetCommissionChangeRateCall) Reset() {
	*x = NominationPools_SetCommissionChangeRateCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[551]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NominationPools_SetCommissionChangeRateCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NominationPools_SetCommissionChangeRateCall) ProtoMessage() {}

func (x *NominationPools_SetCommissionChangeRateCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[551]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NominationPools_SetCommissionChangeRateCall.ProtoReflect.Descriptor instead.
func (*NominationPools_SetCommissionChangeRateCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{551}
}

func (x *NominationPools_SetCommissionChangeRateCall) GetPoolId() uint32 {
	if x != nil {
		return x.PoolId
	}
	return 0
}

func (x *NominationPools_SetCommissionChangeRateCall) GetChangeRate() *NominationPools_PalletNominationPoolsCommissionChangeRate {
	if x != nil {
		return x.ChangeRate
	}
	return nil
}

type SpConsensusSlotsEquivocationProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offender     *SpConsensusBabeAppPublic     `protobuf:"bytes,1,opt,name=offender,proto3" json:"offender,omitempty"`
	Slot         *SpConsensusSlotsSlot         `protobuf:"bytes,2,opt,name=slot,proto3" json:"slot,omitempty"`
	FirstHeader  *SpRuntimeGenericHeaderHeader `protobuf:"bytes,3,opt,name=first_header,json=firstHeader,proto3" json:"first_header,omitempty"`
	SecondHeader *SpRuntimeGenericHeaderHeader `protobuf:"bytes,4,opt,name=second_header,json=secondHeader,proto3" json:"second_header,omitempty"`
}

func (x *SpConsensusSlotsEquivocationProof) Reset() {
	*x = SpConsensusSlotsEquivocationProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[552]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpConsensusSlotsEquivocationProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpConsensusSlotsEquivocationProof) ProtoMessage() {}

func (x *SpConsensusSlotsEquivocationProof) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[552]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpConsensusSlotsEquivocationProof.ProtoReflect.Descriptor instead.
func (*SpConsensusSlotsEquivocationProof) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{552}
}

func (x *SpConsensusSlotsEquivocationProof) GetOffender() *SpConsensusBabeAppPublic {
	if x != nil {
		return x.Offender
	}
	return nil
}

func (x *SpConsensusSlotsEquivocationProof) GetSlot() *SpConsensusSlotsSlot {
	if x != nil {
		return x.Slot
	}
	return nil
}

func (x *SpConsensusSlotsEquivocationProof) GetFirstHeader() *SpRuntimeGenericHeaderHeader {
	if x != nil {
		return x.FirstHeader
	}
	return nil
}

func (x *SpConsensusSlotsEquivocationProof) GetSecondHeader() *SpRuntimeGenericHeaderHeader {
	if x != nil {
		return x.SecondHeader
	}
	return nil
}

type Vesting_PalletVestingVestingInfoVestingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Locked        string `protobuf:"bytes,1,opt,name=locked,proto3" json:"locked,omitempty"`
	PerBlock      string `protobuf:"bytes,2,opt,name=per_block,json=perBlock,proto3" json:"per_block,omitempty"`
	StartingBlock uint32 `protobuf:"varint,3,opt,name=starting_block,json=startingBlock,proto3" json:"starting_block,omitempty"`
}

func (x *Vesting_PalletVestingVestingInfoVestingInfo) Reset() {
	*x = Vesting_PalletVestingVestingInfoVestingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[553]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vesting_PalletVestingVestingInfoVestingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vesting_PalletVestingVestingInfoVestingInfo) ProtoMessage() {}

func (x *Vesting_PalletVestingVestingInfoVestingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[553]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vesting_PalletVestingVestingInfoVestingInfo.ProtoReflect.Descriptor instead.
func (*Vesting_PalletVestingVestingInfoVestingInfo) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{553}
}

func (x *Vesting_PalletVestingVestingInfoVestingInfo) GetLocked() string {
	if x != nil {
		return x.Locked
	}
	return ""
}

func (x *Vesting_PalletVestingVestingInfoVestingInfo) GetPerBlock() string {
	if x != nil {
		return x.PerBlock
	}
	return ""
}

func (x *Vesting_PalletVestingVestingInfoVestingInfo) GetStartingBlock() uint32 {
	if x != nil {
		return x.StartingBlock
	}
	return 0
}

type Staking_ForceNoErasCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Staking_ForceNoErasCall) Reset() {
	*x = Staking_ForceNoErasCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[554]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staking_ForceNoErasCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staking_ForceNoErasCall) ProtoMessage() {}

func (x *Staking_ForceNoErasCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[554]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staking_ForceNoErasCall.ProtoReflect.Descriptor instead.
func (*Staking_ForceNoErasCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{554}
}

type Identity_Raw7 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Identity_Raw7) Reset() {
	*x = Identity_Raw7{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[555]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_Raw7) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_Raw7) ProtoMessage() {}

func (x *Identity_Raw7) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[555]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_Raw7.ProtoReflect.Descriptor instead.
func (*Identity_Raw7) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{555}
}

func (x *Identity_Raw7) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type NominationPools_Index struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 *NominationPools_TupleNull `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *NominationPools_Index) Reset() {
	*x = NominationPools_Index{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[556]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NominationPools_Index) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NominationPools_Index) ProtoMessage() {}

func (x *NominationPools_Index) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[556]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NominationPools_Index.ProtoReflect.Descriptor instead.
func (*NominationPools_Index) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{556}
}

func (x *NominationPools_Index) GetValue0() *NominationPools_TupleNull {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Balances_Index struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 *Balances_TupleNull `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Balances_Index) Reset() {
	*x = Balances_Index{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[557]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Balances_Index) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Balances_Index) ProtoMessage() {}

func (x *Balances_Index) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[557]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Balances_Index.ProtoReflect.Descriptor instead.
func (*Balances_Index) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{557}
}

func (x *Balances_Index) GetValue0() *Balances_TupleNull {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Staking_SetControllerCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Staking_SetControllerCall) Reset() {
	*x = Staking_SetControllerCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[558]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staking_SetControllerCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staking_SetControllerCall) ProtoMessage() {}

func (x *Staking_SetControllerCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[558]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staking_SetControllerCall.ProtoReflect.Descriptor instead.
func (*Staking_SetControllerCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{558}
}

type Bounties_Beneficiary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*Bounties_Beneficiary_Id
	//	*Bounties_Beneficiary_Index
	//	*Bounties_Beneficiary_Raw
	//	*Bounties_Beneficiary_Address32
	//	*Bounties_Beneficiary_Address20
	Value isBounties_Beneficiary_Value `protobuf_oneof:"value"`
}

func (x *Bounties_Beneficiary) Reset() {
	*x = Bounties_Beneficiary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[559]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bounties_Beneficiary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bounties_Beneficiary) ProtoMessage() {}

func (x *Bounties_Beneficiary) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[559]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bounties_Beneficiary.ProtoReflect.Descriptor instead.
func (*Bounties_Beneficiary) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{559}
}

func (m *Bounties_Beneficiary) GetValue() isBounties_Beneficiary_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Bounties_Beneficiary) GetId() *Bounties_Id {
	if x, ok := x.GetValue().(*Bounties_Beneficiary_Id); ok {
		return x.Id
	}
	return nil
}

func (x *Bounties_Beneficiary) GetIndex() *Bounties_Index {
	if x, ok := x.GetValue().(*Bounties_Beneficiary_Index); ok {
		return x.Index
	}
	return nil
}

func (x *Bounties_Beneficiary) GetRaw() *Bounties_Raw {
	if x, ok := x.GetValue().(*Bounties_Beneficiary_Raw); ok {
		return x.Raw
	}
	return nil
}

func (x *Bounties_Beneficiary) GetAddress32() *Bounties_Address32 {
	if x, ok := x.GetValue().(*Bounties_Beneficiary_Address32); ok {
		return x.Address32
	}
	return nil
}

func (x *Bounties_Beneficiary) GetAddress20() *Bounties_Address20 {
	if x, ok := x.GetValue().(*Bounties_Beneficiary_Address20); ok {
		return x.Address20
	}
	return nil
}

type isBounties_Beneficiary_Value interface {
	isBounties_Beneficiary_Value()
}

type Bounties_Beneficiary_Id struct {
	Id *Bounties_Id `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type Bounties_Beneficiary_Index struct {
	Index *Bounties_Index `protobuf:"bytes,2,opt,name=index,proto3,oneof"`
}

type Bounties_Beneficiary_Raw struct {
	Raw *Bounties_Raw `protobuf:"bytes,3,opt,name=raw,proto3,oneof"`
}

type Bounties_Beneficiary_Address32 struct {
	Address32 *Bounties_Address32 `protobuf:"bytes,4,opt,name=address32,proto3,oneof"`
}

type Bounties_Beneficiary_Address20 struct {
	Address20 *Bounties_Address20 `protobuf:"bytes,5,opt,name=address20,proto3,oneof"`
}

func (*Bounties_Beneficiary_Id) isBounties_Beneficiary_Value() {}

func (*Bounties_Beneficiary_Index) isBounties_Beneficiary_Value() {}

func (*Bounties_Beneficiary_Raw) isBounties_Beneficiary_Value() {}

func (*Bounties_Beneficiary_Address32) isBounties_Beneficiary_Value() {}

func (*Bounties_Beneficiary_Address20) isBounties_Beneficiary_Value() {}

type NominationPools_Permission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*NominationPools_Permission_Permissioned
	//	*NominationPools_Permission_PermissionlessCompound
	//	*NominationPools_Permission_PermissionlessWithdraw
	//	*NominationPools_Permission_PermissionlessAll
	Value isNominationPools_Permission_Value `protobuf_oneof:"value"`
}

func (x *NominationPools_Permission) Reset() {
	*x = NominationPools_Permission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[560]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NominationPools_Permission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NominationPools_Permission) ProtoMessage() {}

func (x *NominationPools_Permission) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[560]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NominationPools_Permission.ProtoReflect.Descriptor instead.
func (*NominationPools_Permission) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{560}
}

func (m *NominationPools_Permission) GetValue() isNominationPools_Permission_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *NominationPools_Permission) GetPermissioned() *NominationPools_Permissioned {
	if x, ok := x.GetValue().(*NominationPools_Permission_Permissioned); ok {
		return x.Permissioned
	}
	return nil
}

func (x *NominationPools_Permission) GetPermissionlessCompound() *NominationPools_PermissionlessCompound {
	if x, ok := x.GetValue().(*NominationPools_Permission_PermissionlessCompound); ok {
		return x.PermissionlessCompound
	}
	return nil
}

func (x *NominationPools_Permission) GetPermissionlessWithdraw() *NominationPools_PermissionlessWithdraw {
	if x, ok := x.GetValue().(*NominationPools_Permission_PermissionlessWithdraw); ok {
		return x.PermissionlessWithdraw
	}
	return nil
}

func (x *NominationPools_Permission) GetPermissionlessAll() *NominationPools_PermissionlessAll {
	if x, ok := x.GetValue().(*NominationPools_Permission_PermissionlessAll); ok {
		return x.PermissionlessAll
	}
	return nil
}

type isNominationPools_Permission_Value interface {
	isNominationPools_Permission_Value()
}

type NominationPools_Permission_Permissioned struct {
	Permissioned *NominationPools_Permissioned `protobuf:"bytes,1,opt,name=permissioned,proto3,oneof"`
}

type NominationPools_Permission_PermissionlessCompound struct {
	PermissionlessCompound *NominationPools_PermissionlessCompound `protobuf:"bytes,2,opt,name=permissionless_compound,json=permissionlessCompound,proto3,oneof"`
}

type NominationPools_Permission_PermissionlessWithdraw struct {
	PermissionlessWithdraw *NominationPools_PermissionlessWithdraw `protobuf:"bytes,3,opt,name=permissionless_withdraw,json=permissionlessWithdraw,proto3,oneof"`
}

type NominationPools_Permission_PermissionlessAll struct {
	PermissionlessAll *NominationPools_PermissionlessAll `protobuf:"bytes,4,opt,name=permissionless_all,json=permissionlessAll,proto3,oneof"`
}

func (*NominationPools_Permission_Permissioned) isNominationPools_Permission_Value() {}

func (*NominationPools_Permission_PermissionlessCompound) isNominationPools_Permission_Value() {}

func (*NominationPools_Permission_PermissionlessWithdraw) isNominationPools_Permission_Value() {}

func (*NominationPools_Permission_PermissionlessAll) isNominationPools_Permission_Value() {}

type Identity_Raw15 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Identity_Raw15) Reset() {
	*x = Identity_Raw15{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[561]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_Raw15) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_Raw15) ProtoMessage() {}

func (x *Identity_Raw15) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[561]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_Raw15.ProtoReflect.Descriptor instead.
func (*Identity_Raw15) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{561}
}

func (x *Identity_Raw15) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type ChildBounties_Beneficiary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*ChildBounties_Beneficiary_Id
	//	*ChildBounties_Beneficiary_Index
	//	*ChildBounties_Beneficiary_Raw
	//	*ChildBounties_Beneficiary_Address32
	//	*ChildBounties_Beneficiary_Address20
	Value isChildBounties_Beneficiary_Value `protobuf_oneof:"value"`
}

func (x *ChildBounties_Beneficiary) Reset() {
	*x = ChildBounties_Beneficiary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[562]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChildBounties_Beneficiary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChildBounties_Beneficiary) ProtoMessage() {}

func (x *ChildBounties_Beneficiary) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[562]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChildBounties_Beneficiary.ProtoReflect.Descriptor instead.
func (*ChildBounties_Beneficiary) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{562}
}

func (m *ChildBounties_Beneficiary) GetValue() isChildBounties_Beneficiary_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *ChildBounties_Beneficiary) GetId() *ChildBounties_Id {
	if x, ok := x.GetValue().(*ChildBounties_Beneficiary_Id); ok {
		return x.Id
	}
	return nil
}

func (x *ChildBounties_Beneficiary) GetIndex() *ChildBounties_Index {
	if x, ok := x.GetValue().(*ChildBounties_Beneficiary_Index); ok {
		return x.Index
	}
	return nil
}

func (x *ChildBounties_Beneficiary) GetRaw() *ChildBounties_Raw {
	if x, ok := x.GetValue().(*ChildBounties_Beneficiary_Raw); ok {
		return x.Raw
	}
	return nil
}

func (x *ChildBounties_Beneficiary) GetAddress32() *ChildBounties_Address32 {
	if x, ok := x.GetValue().(*ChildBounties_Beneficiary_Address32); ok {
		return x.Address32
	}
	return nil
}

func (x *ChildBounties_Beneficiary) GetAddress20() *ChildBounties_Address20 {
	if x, ok := x.GetValue().(*ChildBounties_Beneficiary_Address20); ok {
		return x.Address20
	}
	return nil
}

type isChildBounties_Beneficiary_Value interface {
	isChildBounties_Beneficiary_Value()
}

type ChildBounties_Beneficiary_Id struct {
	Id *ChildBounties_Id `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type ChildBounties_Beneficiary_Index struct {
	Index *ChildBounties_Index `protobuf:"bytes,2,opt,name=index,proto3,oneof"`
}

type ChildBounties_Beneficiary_Raw struct {
	Raw *ChildBounties_Raw `protobuf:"bytes,3,opt,name=raw,proto3,oneof"`
}

type ChildBounties_Beneficiary_Address32 struct {
	Address32 *ChildBounties_Address32 `protobuf:"bytes,4,opt,name=address32,proto3,oneof"`
}

type ChildBounties_Beneficiary_Address20 struct {
	Address20 *ChildBounties_Address20 `protobuf:"bytes,5,opt,name=address20,proto3,oneof"`
}

func (*ChildBounties_Beneficiary_Id) isChildBounties_Beneficiary_Value() {}

func (*ChildBounties_Beneficiary_Index) isChildBounties_Beneficiary_Value() {}

func (*ChildBounties_Beneficiary_Raw) isChildBounties_Beneficiary_Value() {}

func (*ChildBounties_Beneficiary_Address32) isChildBounties_Beneficiary_Value() {}

func (*ChildBounties_Beneficiary_Address20) isChildBounties_Beneficiary_Value() {}

type TimestampPallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Call:
	//
	//	*TimestampPallet_SetCall
	Call isTimestampPallet_Call `protobuf_oneof:"call"`
}

func (x *TimestampPallet) Reset() {
	*x = TimestampPallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[563]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimestampPallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimestampPallet) ProtoMessage() {}

func (x *TimestampPallet) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[563]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimestampPallet.ProtoReflect.Descriptor instead.
func (*TimestampPallet) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{563}
}

func (m *TimestampPallet) GetCall() isTimestampPallet_Call {
	if m != nil {
		return m.Call
	}
	return nil
}

func (x *TimestampPallet) GetSetCall() *Timestamp_SetCall {
	if x, ok := x.GetCall().(*TimestampPallet_SetCall); ok {
		return x.SetCall
	}
	return nil
}

type isTimestampPallet_Call interface {
	isTimestampPallet_Call()
}

type TimestampPallet_SetCall struct {
	SetCall *Timestamp_SetCall `protobuf:"bytes,1,opt,name=set_call,json=setCall,proto3,oneof"`
}

func (*TimestampPallet_SetCall) isTimestampPallet_Call() {}

type NominationPools_Bouncer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*NominationPools_Bouncer_Id
	//	*NominationPools_Bouncer_Index
	//	*NominationPools_Bouncer_Raw
	//	*NominationPools_Bouncer_Address32
	//	*NominationPools_Bouncer_Address20
	Value isNominationPools_Bouncer_Value `protobuf_oneof:"value"`
}

func (x *NominationPools_Bouncer) Reset() {
	*x = NominationPools_Bouncer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[564]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NominationPools_Bouncer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NominationPools_Bouncer) ProtoMessage() {}

func (x *NominationPools_Bouncer) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[564]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NominationPools_Bouncer.ProtoReflect.Descriptor instead.
func (*NominationPools_Bouncer) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{564}
}

func (m *NominationPools_Bouncer) GetValue() isNominationPools_Bouncer_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *NominationPools_Bouncer) GetId() *NominationPools_Id {
	if x, ok := x.GetValue().(*NominationPools_Bouncer_Id); ok {
		return x.Id
	}
	return nil
}

func (x *NominationPools_Bouncer) GetIndex() *NominationPools_Index {
	if x, ok := x.GetValue().(*NominationPools_Bouncer_Index); ok {
		return x.Index
	}
	return nil
}

func (x *NominationPools_Bouncer) GetRaw() *NominationPools_Raw {
	if x, ok := x.GetValue().(*NominationPools_Bouncer_Raw); ok {
		return x.Raw
	}
	return nil
}

func (x *NominationPools_Bouncer) GetAddress32() *NominationPools_Address32 {
	if x, ok := x.GetValue().(*NominationPools_Bouncer_Address32); ok {
		return x.Address32
	}
	return nil
}

func (x *NominationPools_Bouncer) GetAddress20() *NominationPools_Address20 {
	if x, ok := x.GetValue().(*NominationPools_Bouncer_Address20); ok {
		return x.Address20
	}
	return nil
}

type isNominationPools_Bouncer_Value interface {
	isNominationPools_Bouncer_Value()
}

type NominationPools_Bouncer_Id struct {
	Id *NominationPools_Id `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type NominationPools_Bouncer_Index struct {
	Index *NominationPools_Index `protobuf:"bytes,2,opt,name=index,proto3,oneof"`
}

type NominationPools_Bouncer_Raw struct {
	Raw *NominationPools_Raw `protobuf:"bytes,3,opt,name=raw,proto3,oneof"`
}

type NominationPools_Bouncer_Address32 struct {
	Address32 *NominationPools_Address32 `protobuf:"bytes,4,opt,name=address32,proto3,oneof"`
}

type NominationPools_Bouncer_Address20 struct {
	Address20 *NominationPools_Address20 `protobuf:"bytes,5,opt,name=address20,proto3,oneof"`
}

func (*NominationPools_Bouncer_Id) isNominationPools_Bouncer_Value() {}

func (*NominationPools_Bouncer_Index) isNominationPools_Bouncer_Value() {}

func (*NominationPools_Bouncer_Raw) isNominationPools_Bouncer_Value() {}

func (*NominationPools_Bouncer_Address32) isNominationPools_Bouncer_Value() {}

func (*NominationPools_Bouncer_Address20) isNominationPools_Bouncer_Value() {}

type NominationPools_CreateCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount    string                     `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Root      *NominationPools_Root      `protobuf:"bytes,2,opt,name=root,proto3" json:"root,omitempty"`
	Nominator *NominationPools_Nominator `protobuf:"bytes,3,opt,name=nominator,proto3" json:"nominator,omitempty"`
	Bouncer   *NominationPools_Bouncer   `protobuf:"bytes,4,opt,name=bouncer,proto3" json:"bouncer,omitempty"`
}

func (x *NominationPools_CreateCall) Reset() {
	*x = NominationPools_CreateCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[565]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NominationPools_CreateCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NominationPools_CreateCall) ProtoMessage() {}

func (x *NominationPools_CreateCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[565]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NominationPools_CreateCall.ProtoReflect.Descriptor instead.
func (*NominationPools_CreateCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{565}
}

func (x *NominationPools_CreateCall) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *NominationPools_CreateCall) GetRoot() *NominationPools_Root {
	if x != nil {
		return x.Root
	}
	return nil
}

func (x *NominationPools_CreateCall) GetNominator() *NominationPools_Nominator {
	if x != nil {
		return x.Nominator
	}
	return nil
}

func (x *NominationPools_CreateCall) GetBouncer() *NominationPools_Bouncer {
	if x != nil {
		return x.Bouncer
	}
	return nil
}

type NominationPools_Id struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 *SpCoreCryptoAccountId32 `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *NominationPools_Id) Reset() {
	*x = NominationPools_Id{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[566]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NominationPools_Id) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NominationPools_Id) ProtoMessage() {}

func (x *NominationPools_Id) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[566]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NominationPools_Id.ProtoReflect.Descriptor instead.
func (*NominationPools_Id) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{566}
}

func (x *NominationPools_Id) GetValue0() *SpCoreCryptoAccountId32 {
	if x != nil {
		return x.Value0
	}
	return nil
}

type SpSessionMembershipProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session        uint32                    `protobuf:"varint,1,opt,name=session,proto3" json:"session,omitempty"`
	TrieNodes      []*Babe_BabeTrieNodesList `protobuf:"bytes,2,rep,name=trie_nodes,json=trieNodes,proto3" json:"trie_nodes,omitempty"`
	ValidatorCount uint32                    `protobuf:"varint,3,opt,name=validator_count,json=validatorCount,proto3" json:"validator_count,omitempty"`
}

func (x *SpSessionMembershipProof) Reset() {
	*x = SpSessionMembershipProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[567]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpSessionMembershipProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpSessionMembershipProof) ProtoMessage() {}

func (x *SpSessionMembershipProof) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[567]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpSessionMembershipProof.ProtoReflect.Descriptor instead.
func (*SpSessionMembershipProof) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{567}
}

func (x *SpSessionMembershipProof) GetSession() uint32 {
	if x != nil {
		return x.Session
	}
	return 0
}

func (x *SpSessionMembershipProof) GetTrieNodes() []*Babe_BabeTrieNodesList {
	if x != nil {
		return x.TrieNodes
	}
	return nil
}

func (x *SpSessionMembershipProof) GetValidatorCount() uint32 {
	if x != nil {
		return x.ValidatorCount
	}
	return 0
}

type Staking_ForceNewEraAlwaysCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Staking_ForceNewEraAlwaysCall) Reset() {
	*x = Staking_ForceNewEraAlwaysCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[568]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staking_ForceNewEraAlwaysCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staking_ForceNewEraAlwaysCall) ProtoMessage() {}

func (x *Staking_ForceNewEraAlwaysCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[568]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staking_ForceNewEraAlwaysCall.ProtoReflect.Descriptor instead.
func (*Staking_ForceNewEraAlwaysCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{568}
}

type VaraRuntimeRuntimeCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Calls:
	//
	//	*VaraRuntimeRuntimeCall_System
	//	*VaraRuntimeRuntimeCall_Timestamp
	//	*VaraRuntimeRuntimeCall_Babe
	//	*VaraRuntimeRuntimeCall_Grandpa
	//	*VaraRuntimeRuntimeCall_Balances
	//	*VaraRuntimeRuntimeCall_Vesting
	//	*VaraRuntimeRuntimeCall_BagsList
	//	*VaraRuntimeRuntimeCall_ImOnline
	//	*VaraRuntimeRuntimeCall_Staking
	//	*VaraRuntimeRuntimeCall_Session
	//	*VaraRuntimeRuntimeCall_Treasury
	//	*VaraRuntimeRuntimeCall_Utility
	//	*VaraRuntimeRuntimeCall_ConvictionVoting
	//	*VaraRuntimeRuntimeCall_Referenda
	//	*VaraRuntimeRuntimeCall_FellowshipCollective
	//	*VaraRuntimeRuntimeCall_FellowshipReferenda
	//	*VaraRuntimeRuntimeCall_Whitelist
	//	*VaraRuntimeRuntimeCall_Scheduler
	//	*VaraRuntimeRuntimeCall_Preimage
	//	*VaraRuntimeRuntimeCall_Identity
	//	*VaraRuntimeRuntimeCall_Proxy
	//	*VaraRuntimeRuntimeCall_Multisig
	//	*VaraRuntimeRuntimeCall_ElectionProviderMultiPhase
	//	*VaraRuntimeRuntimeCall_Bounties
	//	*VaraRuntimeRuntimeCall_ChildBounties
	//	*VaraRuntimeRuntimeCall_NominationPools
	//	*VaraRuntimeRuntimeCall_Gear
	//	*VaraRuntimeRuntimeCall_StakingRewards
	//	*VaraRuntimeRuntimeCall_GearVoucher
	Calls isVaraRuntimeRuntimeCall_Calls `protobuf_oneof:"calls"`
}

func (x *VaraRuntimeRuntimeCall) Reset() {
	*x = VaraRuntimeRuntimeCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[569]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VaraRuntimeRuntimeCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VaraRuntimeRuntimeCall) ProtoMessage() {}

func (x *VaraRuntimeRuntimeCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[569]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VaraRuntimeRuntimeCall.ProtoReflect.Descriptor instead.
func (*VaraRuntimeRuntimeCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{569}
}

func (m *VaraRuntimeRuntimeCall) GetCalls() isVaraRuntimeRuntimeCall_Calls {
	if m != nil {
		return m.Calls
	}
	return nil
}

func (x *VaraRuntimeRuntimeCall) GetSystem() *SystemPallet {
	if x, ok := x.GetCalls().(*VaraRuntimeRuntimeCall_System); ok {
		return x.System
	}
	return nil
}

func (x *VaraRuntimeRuntimeCall) GetTimestamp() *TimestampPallet {
	if x, ok := x.GetCalls().(*VaraRuntimeRuntimeCall_Timestamp); ok {
		return x.Timestamp
	}
	return nil
}

func (x *VaraRuntimeRuntimeCall) GetBabe() *BabePallet {
	if x, ok := x.GetCalls().(*VaraRuntimeRuntimeCall_Babe); ok {
		return x.Babe
	}
	return nil
}

func (x *VaraRuntimeRuntimeCall) GetGrandpa() *GrandpaPallet {
	if x, ok := x.GetCalls().(*VaraRuntimeRuntimeCall_Grandpa); ok {
		return x.Grandpa
	}
	return nil
}

func (x *VaraRuntimeRuntimeCall) GetBalances() *BalancesPallet {
	if x, ok := x.GetCalls().(*VaraRuntimeRuntimeCall_Balances); ok {
		return x.Balances
	}
	return nil
}

func (x *VaraRuntimeRuntimeCall) GetVesting() *VestingPallet {
	if x, ok := x.GetCalls().(*VaraRuntimeRuntimeCall_Vesting); ok {
		return x.Vesting
	}
	return nil
}

func (x *VaraRuntimeRuntimeCall) GetBagsList() *BagsListPallet {
	if x, ok := x.GetCalls().(*VaraRuntimeRuntimeCall_BagsList); ok {
		return x.BagsList
	}
	return nil
}

func (x *VaraRuntimeRuntimeCall) GetImOnline() *ImOnlinePallet {
	if x, ok := x.GetCalls().(*VaraRuntimeRuntimeCall_ImOnline); ok {
		return x.ImOnline
	}
	return nil
}

func (x *VaraRuntimeRuntimeCall) GetStaking() *StakingPallet {
	if x, ok := x.GetCalls().(*VaraRuntimeRuntimeCall_Staking); ok {
		return x.Staking
	}
	return nil
}

func (x *VaraRuntimeRuntimeCall) GetSession() *SessionPallet {
	if x, ok := x.GetCalls().(*VaraRuntimeRuntimeCall_Session); ok {
		return x.Session
	}
	return nil
}

func (x *VaraRuntimeRuntimeCall) GetTreasury() *TreasuryPallet {
	if x, ok := x.GetCalls().(*VaraRuntimeRuntimeCall_Treasury); ok {
		return x.Treasury
	}
	return nil
}

func (x *VaraRuntimeRuntimeCall) GetUtility() *UtilityPallet {
	if x, ok := x.GetCalls().(*VaraRuntimeRuntimeCall_Utility); ok {
		return x.Utility
	}
	return nil
}

func (x *VaraRuntimeRuntimeCall) GetConvictionVoting() *ConvictionVotingPallet {
	if x, ok := x.GetCalls().(*VaraRuntimeRuntimeCall_ConvictionVoting); ok {
		return x.ConvictionVoting
	}
	return nil
}

func (x *VaraRuntimeRuntimeCall) GetReferenda() *ReferendaPallet {
	if x, ok := x.GetCalls().(*VaraRuntimeRuntimeCall_Referenda); ok {
		return x.Referenda
	}
	return nil
}

func (x *VaraRuntimeRuntimeCall) GetFellowshipCollective() *FellowshipCollectivePallet {
	if x, ok := x.GetCalls().(*VaraRuntimeRuntimeCall_FellowshipCollective); ok {
		return x.FellowshipCollective
	}
	return nil
}

func (x *VaraRuntimeRuntimeCall) GetFellowshipReferenda() *FellowshipReferendaPallet {
	if x, ok := x.GetCalls().(*VaraRuntimeRuntimeCall_FellowshipReferenda); ok {
		return x.FellowshipReferenda
	}
	return nil
}

func (x *VaraRuntimeRuntimeCall) GetWhitelist() *WhitelistPallet {
	if x, ok := x.GetCalls().(*VaraRuntimeRuntimeCall_Whitelist); ok {
		return x.Whitelist
	}
	return nil
}

func (x *VaraRuntimeRuntimeCall) GetScheduler() *SchedulerPallet {
	if x, ok := x.GetCalls().(*VaraRuntimeRuntimeCall_Scheduler); ok {
		return x.Scheduler
	}
	return nil
}

func (x *VaraRuntimeRuntimeCall) GetPreimage() *PreimagePallet {
	if x, ok := x.GetCalls().(*VaraRuntimeRuntimeCall_Preimage); ok {
		return x.Preimage
	}
	return nil
}

func (x *VaraRuntimeRuntimeCall) GetIdentity() *IdentityPallet {
	if x, ok := x.GetCalls().(*VaraRuntimeRuntimeCall_Identity); ok {
		return x.Identity
	}
	return nil
}

func (x *VaraRuntimeRuntimeCall) GetProxy() *ProxyPallet {
	if x, ok := x.GetCalls().(*VaraRuntimeRuntimeCall_Proxy); ok {
		return x.Proxy
	}
	return nil
}

func (x *VaraRuntimeRuntimeCall) GetMultisig() *MultisigPallet {
	if x, ok := x.GetCalls().(*VaraRuntimeRuntimeCall_Multisig); ok {
		return x.Multisig
	}
	return nil
}

func (x *VaraRuntimeRuntimeCall) GetElectionProviderMultiPhase() *ElectionProviderMultiPhasePallet {
	if x, ok := x.GetCalls().(*VaraRuntimeRuntimeCall_ElectionProviderMultiPhase); ok {
		return x.ElectionProviderMultiPhase
	}
	return nil
}

func (x *VaraRuntimeRuntimeCall) GetBounties() *BountiesPallet {
	if x, ok := x.GetCalls().(*VaraRuntimeRuntimeCall_Bounties); ok {
		return x.Bounties
	}
	return nil
}

func (x *VaraRuntimeRuntimeCall) GetChildBounties() *ChildBountiesPallet {
	if x, ok := x.GetCalls().(*VaraRuntimeRuntimeCall_ChildBounties); ok {
		return x.ChildBounties
	}
	return nil
}

func (x *VaraRuntimeRuntimeCall) GetNominationPools() *NominationPoolsPallet {
	if x, ok := x.GetCalls().(*VaraRuntimeRuntimeCall_NominationPools); ok {
		return x.NominationPools
	}
	return nil
}

func (x *VaraRuntimeRuntimeCall) GetGear() *GearPallet {
	if x, ok := x.GetCalls().(*VaraRuntimeRuntimeCall_Gear); ok {
		return x.Gear
	}
	return nil
}

func (x *VaraRuntimeRuntimeCall) GetStakingRewards() *StakingRewardsPallet {
	if x, ok := x.GetCalls().(*VaraRuntimeRuntimeCall_StakingRewards); ok {
		return x.StakingRewards
	}
	return nil
}

func (x *VaraRuntimeRuntimeCall) GetGearVoucher() *GearVoucherPallet {
	if x, ok := x.GetCalls().(*VaraRuntimeRuntimeCall_GearVoucher); ok {
		return x.GearVoucher
	}
	return nil
}

type isVaraRuntimeRuntimeCall_Calls interface {
	isVaraRuntimeRuntimeCall_Calls()
}

type VaraRuntimeRuntimeCall_System struct {
	System *SystemPallet `protobuf:"bytes,1,opt,name=system,proto3,oneof"`
}

type VaraRuntimeRuntimeCall_Timestamp struct {
	Timestamp *TimestampPallet `protobuf:"bytes,2,opt,name=timestamp,proto3,oneof"`
}

type VaraRuntimeRuntimeCall_Babe struct {
	Babe *BabePallet `protobuf:"bytes,3,opt,name=babe,proto3,oneof"`
}

type VaraRuntimeRuntimeCall_Grandpa struct {
	Grandpa *GrandpaPallet `protobuf:"bytes,4,opt,name=grandpa,proto3,oneof"`
}

type VaraRuntimeRuntimeCall_Balances struct {
	Balances *BalancesPallet `protobuf:"bytes,5,opt,name=balances,proto3,oneof"`
}

type VaraRuntimeRuntimeCall_Vesting struct {
	Vesting *VestingPallet `protobuf:"bytes,6,opt,name=vesting,proto3,oneof"`
}

type VaraRuntimeRuntimeCall_BagsList struct {
	BagsList *BagsListPallet `protobuf:"bytes,7,opt,name=bags_list,json=bagsList,proto3,oneof"`
}

type VaraRuntimeRuntimeCall_ImOnline struct {
	ImOnline *ImOnlinePallet `protobuf:"bytes,8,opt,name=im_online,json=imOnline,proto3,oneof"`
}

type VaraRuntimeRuntimeCall_Staking struct {
	Staking *StakingPallet `protobuf:"bytes,9,opt,name=staking,proto3,oneof"`
}

type VaraRuntimeRuntimeCall_Session struct {
	Session *SessionPallet `protobuf:"bytes,10,opt,name=session,proto3,oneof"`
}

type VaraRuntimeRuntimeCall_Treasury struct {
	Treasury *TreasuryPallet `protobuf:"bytes,11,opt,name=treasury,proto3,oneof"`
}

type VaraRuntimeRuntimeCall_Utility struct {
	Utility *UtilityPallet `protobuf:"bytes,12,opt,name=utility,proto3,oneof"`
}

type VaraRuntimeRuntimeCall_ConvictionVoting struct {
	ConvictionVoting *ConvictionVotingPallet `protobuf:"bytes,13,opt,name=conviction_voting,json=convictionVoting,proto3,oneof"`
}

type VaraRuntimeRuntimeCall_Referenda struct {
	Referenda *ReferendaPallet `protobuf:"bytes,14,opt,name=referenda,proto3,oneof"`
}

type VaraRuntimeRuntimeCall_FellowshipCollective struct {
	FellowshipCollective *FellowshipCollectivePallet `protobuf:"bytes,15,opt,name=fellowship_collective,json=fellowshipCollective,proto3,oneof"`
}

type VaraRuntimeRuntimeCall_FellowshipReferenda struct {
	FellowshipReferenda *FellowshipReferendaPallet `protobuf:"bytes,16,opt,name=fellowship_referenda,json=fellowshipReferenda,proto3,oneof"`
}

type VaraRuntimeRuntimeCall_Whitelist struct {
	Whitelist *WhitelistPallet `protobuf:"bytes,17,opt,name=whitelist,proto3,oneof"`
}

type VaraRuntimeRuntimeCall_Scheduler struct {
	Scheduler *SchedulerPallet `protobuf:"bytes,18,opt,name=scheduler,proto3,oneof"`
}

type VaraRuntimeRuntimeCall_Preimage struct {
	Preimage *PreimagePallet `protobuf:"bytes,19,opt,name=preimage,proto3,oneof"`
}

type VaraRuntimeRuntimeCall_Identity struct {
	Identity *IdentityPallet `protobuf:"bytes,20,opt,name=identity,proto3,oneof"`
}

type VaraRuntimeRuntimeCall_Proxy struct {
	Proxy *ProxyPallet `protobuf:"bytes,21,opt,name=proxy,proto3,oneof"`
}

type VaraRuntimeRuntimeCall_Multisig struct {
	Multisig *MultisigPallet `protobuf:"bytes,22,opt,name=multisig,proto3,oneof"`
}

type VaraRuntimeRuntimeCall_ElectionProviderMultiPhase struct {
	ElectionProviderMultiPhase *ElectionProviderMultiPhasePallet `protobuf:"bytes,23,opt,name=election_provider_multi_phase,json=electionProviderMultiPhase,proto3,oneof"`
}

type VaraRuntimeRuntimeCall_Bounties struct {
	Bounties *BountiesPallet `protobuf:"bytes,24,opt,name=bounties,proto3,oneof"`
}

type VaraRuntimeRuntimeCall_ChildBounties struct {
	ChildBounties *ChildBountiesPallet `protobuf:"bytes,25,opt,name=child_bounties,json=childBounties,proto3,oneof"`
}

type VaraRuntimeRuntimeCall_NominationPools struct {
	NominationPools *NominationPoolsPallet `protobuf:"bytes,26,opt,name=nomination_pools,json=nominationPools,proto3,oneof"`
}

type VaraRuntimeRuntimeCall_Gear struct {
	Gear *GearPallet `protobuf:"bytes,27,opt,name=gear,proto3,oneof"`
}

type VaraRuntimeRuntimeCall_StakingRewards struct {
	StakingRewards *StakingRewardsPallet `protobuf:"bytes,28,opt,name=staking_rewards,json=stakingRewards,proto3,oneof"`
}

type VaraRuntimeRuntimeCall_GearVoucher struct {
	GearVoucher *GearVoucherPallet `protobuf:"bytes,29,opt,name=gear_voucher,json=gearVoucher,proto3,oneof"`
}

func (*VaraRuntimeRuntimeCall_System) isVaraRuntimeRuntimeCall_Calls() {}

func (*VaraRuntimeRuntimeCall_Timestamp) isVaraRuntimeRuntimeCall_Calls() {}

func (*VaraRuntimeRuntimeCall_Babe) isVaraRuntimeRuntimeCall_Calls() {}

func (*VaraRuntimeRuntimeCall_Grandpa) isVaraRuntimeRuntimeCall_Calls() {}

func (*VaraRuntimeRuntimeCall_Balances) isVaraRuntimeRuntimeCall_Calls() {}

func (*VaraRuntimeRuntimeCall_Vesting) isVaraRuntimeRuntimeCall_Calls() {}

func (*VaraRuntimeRuntimeCall_BagsList) isVaraRuntimeRuntimeCall_Calls() {}

func (*VaraRuntimeRuntimeCall_ImOnline) isVaraRuntimeRuntimeCall_Calls() {}

func (*VaraRuntimeRuntimeCall_Staking) isVaraRuntimeRuntimeCall_Calls() {}

func (*VaraRuntimeRuntimeCall_Session) isVaraRuntimeRuntimeCall_Calls() {}

func (*VaraRuntimeRuntimeCall_Treasury) isVaraRuntimeRuntimeCall_Calls() {}

func (*VaraRuntimeRuntimeCall_Utility) isVaraRuntimeRuntimeCall_Calls() {}

func (*VaraRuntimeRuntimeCall_ConvictionVoting) isVaraRuntimeRuntimeCall_Calls() {}

func (*VaraRuntimeRuntimeCall_Referenda) isVaraRuntimeRuntimeCall_Calls() {}

func (*VaraRuntimeRuntimeCall_FellowshipCollective) isVaraRuntimeRuntimeCall_Calls() {}

func (*VaraRuntimeRuntimeCall_FellowshipReferenda) isVaraRuntimeRuntimeCall_Calls() {}

func (*VaraRuntimeRuntimeCall_Whitelist) isVaraRuntimeRuntimeCall_Calls() {}

func (*VaraRuntimeRuntimeCall_Scheduler) isVaraRuntimeRuntimeCall_Calls() {}

func (*VaraRuntimeRuntimeCall_Preimage) isVaraRuntimeRuntimeCall_Calls() {}

func (*VaraRuntimeRuntimeCall_Identity) isVaraRuntimeRuntimeCall_Calls() {}

func (*VaraRuntimeRuntimeCall_Proxy) isVaraRuntimeRuntimeCall_Calls() {}

func (*VaraRuntimeRuntimeCall_Multisig) isVaraRuntimeRuntimeCall_Calls() {}

func (*VaraRuntimeRuntimeCall_ElectionProviderMultiPhase) isVaraRuntimeRuntimeCall_Calls() {}

func (*VaraRuntimeRuntimeCall_Bounties) isVaraRuntimeRuntimeCall_Calls() {}

func (*VaraRuntimeRuntimeCall_ChildBounties) isVaraRuntimeRuntimeCall_Calls() {}

func (*VaraRuntimeRuntimeCall_NominationPools) isVaraRuntimeRuntimeCall_Calls() {}

func (*VaraRuntimeRuntimeCall_Gear) isVaraRuntimeRuntimeCall_Calls() {}

func (*VaraRuntimeRuntimeCall_StakingRewards) isVaraRuntimeRuntimeCall_Calls() {}

func (*VaraRuntimeRuntimeCall_GearVoucher) isVaraRuntimeRuntimeCall_Calls() {}

type Referenda_OneFewerDecidingCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Track uint32 `protobuf:"varint,1,opt,name=track,proto3" json:"track,omitempty"`
}

func (x *Referenda_OneFewerDecidingCall) Reset() {
	*x = Referenda_OneFewerDecidingCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[570]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Referenda_OneFewerDecidingCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Referenda_OneFewerDecidingCall) ProtoMessage() {}

func (x *Referenda_OneFewerDecidingCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[570]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Referenda_OneFewerDecidingCall.ProtoReflect.Descriptor instead.
func (*Referenda_OneFewerDecidingCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{570}
}

func (x *Referenda_OneFewerDecidingCall) GetTrack() uint32 {
	if x != nil {
		return x.Track
	}
	return 0
}

type BountiesPallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Call:
	//
	//	*BountiesPallet_ProposeBountyCall
	//	*BountiesPallet_ApproveBountyCall
	//	*BountiesPallet_ProposeCuratorCall
	//	*BountiesPallet_UnassignCuratorCall
	//	*BountiesPallet_AcceptCuratorCall
	//	*BountiesPallet_AwardBountyCall
	//	*BountiesPallet_ClaimBountyCall
	//	*BountiesPallet_CloseBountyCall
	//	*BountiesPallet_ExtendBountyExpiryCall
	Call isBountiesPallet_Call `protobuf_oneof:"call"`
}

func (x *BountiesPallet) Reset() {
	*x = BountiesPallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[571]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BountiesPallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BountiesPallet) ProtoMessage() {}

func (x *BountiesPallet) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[571]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BountiesPallet.ProtoReflect.Descriptor instead.
func (*BountiesPallet) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{571}
}

func (m *BountiesPallet) GetCall() isBountiesPallet_Call {
	if m != nil {
		return m.Call
	}
	return nil
}

func (x *BountiesPallet) GetProposeBountyCall() *Bounties_ProposeBountyCall {
	if x, ok := x.GetCall().(*BountiesPallet_ProposeBountyCall); ok {
		return x.ProposeBountyCall
	}
	return nil
}

func (x *BountiesPallet) GetApproveBountyCall() *Bounties_ApproveBountyCall {
	if x, ok := x.GetCall().(*BountiesPallet_ApproveBountyCall); ok {
		return x.ApproveBountyCall
	}
	return nil
}

func (x *BountiesPallet) GetProposeCuratorCall() *Bounties_ProposeCuratorCall {
	if x, ok := x.GetCall().(*BountiesPallet_ProposeCuratorCall); ok {
		return x.ProposeCuratorCall
	}
	return nil
}

func (x *BountiesPallet) GetUnassignCuratorCall() *Bounties_UnassignCuratorCall {
	if x, ok := x.GetCall().(*BountiesPallet_UnassignCuratorCall); ok {
		return x.UnassignCuratorCall
	}
	return nil
}

func (x *BountiesPallet) GetAcceptCuratorCall() *Bounties_AcceptCuratorCall {
	if x, ok := x.GetCall().(*BountiesPallet_AcceptCuratorCall); ok {
		return x.AcceptCuratorCall
	}
	return nil
}

func (x *BountiesPallet) GetAwardBountyCall() *Bounties_AwardBountyCall {
	if x, ok := x.GetCall().(*BountiesPallet_AwardBountyCall); ok {
		return x.AwardBountyCall
	}
	return nil
}

func (x *BountiesPallet) GetClaimBountyCall() *Bounties_ClaimBountyCall {
	if x, ok := x.GetCall().(*BountiesPallet_ClaimBountyCall); ok {
		return x.ClaimBountyCall
	}
	return nil
}

func (x *BountiesPallet) GetCloseBountyCall() *Bounties_CloseBountyCall {
	if x, ok := x.GetCall().(*BountiesPallet_CloseBountyCall); ok {
		return x.CloseBountyCall
	}
	return nil
}

func (x *BountiesPallet) GetExtendBountyExpiryCall() *Bounties_ExtendBountyExpiryCall {
	if x, ok := x.GetCall().(*BountiesPallet_ExtendBountyExpiryCall); ok {
		return x.ExtendBountyExpiryCall
	}
	return nil
}

type isBountiesPallet_Call interface {
	isBountiesPallet_Call()
}

type BountiesPallet_ProposeBountyCall struct {
	ProposeBountyCall *Bounties_ProposeBountyCall `protobuf:"bytes,1,opt,name=propose_bounty_call,json=proposeBountyCall,proto3,oneof"`
}

type BountiesPallet_ApproveBountyCall struct {
	ApproveBountyCall *Bounties_ApproveBountyCall `protobuf:"bytes,2,opt,name=approve_bounty_call,json=approveBountyCall,proto3,oneof"`
}

type BountiesPallet_ProposeCuratorCall struct {
	ProposeCuratorCall *Bounties_ProposeCuratorCall `protobuf:"bytes,3,opt,name=propose_curator_call,json=proposeCuratorCall,proto3,oneof"`
}

type BountiesPallet_UnassignCuratorCall struct {
	UnassignCuratorCall *Bounties_UnassignCuratorCall `protobuf:"bytes,4,opt,name=unassign_curator_call,json=unassignCuratorCall,proto3,oneof"`
}

type BountiesPallet_AcceptCuratorCall struct {
	AcceptCuratorCall *Bounties_AcceptCuratorCall `protobuf:"bytes,5,opt,name=accept_curator_call,json=acceptCuratorCall,proto3,oneof"`
}

type BountiesPallet_AwardBountyCall struct {
	AwardBountyCall *Bounties_AwardBountyCall `protobuf:"bytes,6,opt,name=award_bounty_call,json=awardBountyCall,proto3,oneof"`
}

type BountiesPallet_ClaimBountyCall struct {
	ClaimBountyCall *Bounties_ClaimBountyCall `protobuf:"bytes,7,opt,name=claim_bounty_call,json=claimBountyCall,proto3,oneof"`
}

type BountiesPallet_CloseBountyCall struct {
	CloseBountyCall *Bounties_CloseBountyCall `protobuf:"bytes,8,opt,name=close_bounty_call,json=closeBountyCall,proto3,oneof"`
}

type BountiesPallet_ExtendBountyExpiryCall struct {
	ExtendBountyExpiryCall *Bounties_ExtendBountyExpiryCall `protobuf:"bytes,9,opt,name=extend_bounty_expiry_call,json=extendBountyExpiryCall,proto3,oneof"`
}

func (*BountiesPallet_ProposeBountyCall) isBountiesPallet_Call() {}

func (*BountiesPallet_ApproveBountyCall) isBountiesPallet_Call() {}

func (*BountiesPallet_ProposeCuratorCall) isBountiesPallet_Call() {}

func (*BountiesPallet_UnassignCuratorCall) isBountiesPallet_Call() {}

func (*BountiesPallet_AcceptCuratorCall) isBountiesPallet_Call() {}

func (*BountiesPallet_AwardBountyCall) isBountiesPallet_Call() {}

func (*BountiesPallet_ClaimBountyCall) isBountiesPallet_Call() {}

func (*BountiesPallet_CloseBountyCall) isBountiesPallet_Call() {}

func (*BountiesPallet_ExtendBountyExpiryCall) isBountiesPallet_Call() {}

type Staking_Who struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*Staking_Who_Id
	//	*Staking_Who_Index
	//	*Staking_Who_Raw
	//	*Staking_Who_Address32
	//	*Staking_Who_Address20
	Value isStaking_Who_Value `protobuf_oneof:"value"`
}

func (x *Staking_Who) Reset() {
	*x = Staking_Who{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[572]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staking_Who) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staking_Who) ProtoMessage() {}

func (x *Staking_Who) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[572]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staking_Who.ProtoReflect.Descriptor instead.
func (*Staking_Who) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{572}
}

func (m *Staking_Who) GetValue() isStaking_Who_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Staking_Who) GetId() *Staking_Id {
	if x, ok := x.GetValue().(*Staking_Who_Id); ok {
		return x.Id
	}
	return nil
}

func (x *Staking_Who) GetIndex() *Staking_Index {
	if x, ok := x.GetValue().(*Staking_Who_Index); ok {
		return x.Index
	}
	return nil
}

func (x *Staking_Who) GetRaw() *Staking_Raw {
	if x, ok := x.GetValue().(*Staking_Who_Raw); ok {
		return x.Raw
	}
	return nil
}

func (x *Staking_Who) GetAddress32() *Staking_Address32 {
	if x, ok := x.GetValue().(*Staking_Who_Address32); ok {
		return x.Address32
	}
	return nil
}

func (x *Staking_Who) GetAddress20() *Staking_Address20 {
	if x, ok := x.GetValue().(*Staking_Who_Address20); ok {
		return x.Address20
	}
	return nil
}

type isStaking_Who_Value interface {
	isStaking_Who_Value()
}

type Staking_Who_Id struct {
	Id *Staking_Id `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type Staking_Who_Index struct {
	Index *Staking_Index `protobuf:"bytes,2,opt,name=index,proto3,oneof"`
}

type Staking_Who_Raw struct {
	Raw *Staking_Raw `protobuf:"bytes,3,opt,name=raw,proto3,oneof"`
}

type Staking_Who_Address32 struct {
	Address32 *Staking_Address32 `protobuf:"bytes,4,opt,name=address32,proto3,oneof"`
}

type Staking_Who_Address20 struct {
	Address20 *Staking_Address20 `protobuf:"bytes,5,opt,name=address20,proto3,oneof"`
}

func (*Staking_Who_Id) isStaking_Who_Value() {}

func (*Staking_Who_Index) isStaking_Who_Value() {}

func (*Staking_Who_Raw) isStaking_Who_Value() {}

func (*Staking_Who_Address32) isStaking_Who_Value() {}

func (*Staking_Who_Address20) isStaking_Who_Value() {}

type Whitelist_DispatchWhitelistedCallCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallHash          *PrimitiveTypesH256      `protobuf:"bytes,1,opt,name=call_hash,json=callHash,proto3" json:"call_hash,omitempty"`
	CallEncodedLen    uint32                   `protobuf:"varint,2,opt,name=call_encoded_len,json=callEncodedLen,proto3" json:"call_encoded_len,omitempty"`
	CallWeightWitness *SpWeightsWeightV2Weight `protobuf:"bytes,3,opt,name=call_weight_witness,json=callWeightWitness,proto3" json:"call_weight_witness,omitempty"`
}

func (x *Whitelist_DispatchWhitelistedCallCall) Reset() {
	*x = Whitelist_DispatchWhitelistedCallCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[573]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Whitelist_DispatchWhitelistedCallCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Whitelist_DispatchWhitelistedCallCall) ProtoMessage() {}

func (x *Whitelist_DispatchWhitelistedCallCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[573]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Whitelist_DispatchWhitelistedCallCall.ProtoReflect.Descriptor instead.
func (*Whitelist_DispatchWhitelistedCallCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{573}
}

func (x *Whitelist_DispatchWhitelistedCallCall) GetCallHash() *PrimitiveTypesH256 {
	if x != nil {
		return x.CallHash
	}
	return nil
}

func (x *Whitelist_DispatchWhitelistedCallCall) GetCallEncodedLen() uint32 {
	if x != nil {
		return x.CallEncodedLen
	}
	return 0
}

func (x *Whitelist_DispatchWhitelistedCallCall) GetCallWeightWitness() *SpWeightsWeightV2Weight {
	if x != nil {
		return x.CallWeightWitness
	}
	return nil
}

type NominationPools_Root struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*NominationPools_Root_Id
	//	*NominationPools_Root_Index
	//	*NominationPools_Root_Raw
	//	*NominationPools_Root_Address32
	//	*NominationPools_Root_Address20
	Value isNominationPools_Root_Value `protobuf_oneof:"value"`
}

func (x *NominationPools_Root) Reset() {
	*x = NominationPools_Root{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[574]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NominationPools_Root) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NominationPools_Root) ProtoMessage() {}

func (x *NominationPools_Root) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[574]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NominationPools_Root.ProtoReflect.Descriptor instead.
func (*NominationPools_Root) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{574}
}

func (m *NominationPools_Root) GetValue() isNominationPools_Root_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *NominationPools_Root) GetId() *NominationPools_Id {
	if x, ok := x.GetValue().(*NominationPools_Root_Id); ok {
		return x.Id
	}
	return nil
}

func (x *NominationPools_Root) GetIndex() *NominationPools_Index {
	if x, ok := x.GetValue().(*NominationPools_Root_Index); ok {
		return x.Index
	}
	return nil
}

func (x *NominationPools_Root) GetRaw() *NominationPools_Raw {
	if x, ok := x.GetValue().(*NominationPools_Root_Raw); ok {
		return x.Raw
	}
	return nil
}

func (x *NominationPools_Root) GetAddress32() *NominationPools_Address32 {
	if x, ok := x.GetValue().(*NominationPools_Root_Address32); ok {
		return x.Address32
	}
	return nil
}

func (x *NominationPools_Root) GetAddress20() *NominationPools_Address20 {
	if x, ok := x.GetValue().(*NominationPools_Root_Address20); ok {
		return x.Address20
	}
	return nil
}

type isNominationPools_Root_Value interface {
	isNominationPools_Root_Value()
}

type NominationPools_Root_Id struct {
	Id *NominationPools_Id `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type NominationPools_Root_Index struct {
	Index *NominationPools_Index `protobuf:"bytes,2,opt,name=index,proto3,oneof"`
}

type NominationPools_Root_Raw struct {
	Raw *NominationPools_Raw `protobuf:"bytes,3,opt,name=raw,proto3,oneof"`
}

type NominationPools_Root_Address32 struct {
	Address32 *NominationPools_Address32 `protobuf:"bytes,4,opt,name=address32,proto3,oneof"`
}

type NominationPools_Root_Address20 struct {
	Address20 *NominationPools_Address20 `protobuf:"bytes,5,opt,name=address20,proto3,oneof"`
}

func (*NominationPools_Root_Id) isNominationPools_Root_Value() {}

func (*NominationPools_Root_Index) isNominationPools_Root_Value() {}

func (*NominationPools_Root_Raw) isNominationPools_Root_Value() {}

func (*NominationPools_Root_Address32) isNominationPools_Root_Value() {}

func (*NominationPools_Root_Address20) isNominationPools_Root_Value() {}

type FellowshipReferenda_System struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 *Value0 `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *FellowshipReferenda_System) Reset() {
	*x = FellowshipReferenda_System{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[575]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FellowshipReferenda_System) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FellowshipReferenda_System) ProtoMessage() {}

func (x *FellowshipReferenda_System) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[575]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FellowshipReferenda_System.ProtoReflect.Descriptor instead.
func (*FellowshipReferenda_System) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{575}
}

func (x *FellowshipReferenda_System) GetValue0() *Value0 {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Identity_Raw13 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Identity_Raw13) Reset() {
	*x = Identity_Raw13{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[576]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_Raw13) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_Raw13) ProtoMessage() {}

func (x *Identity_Raw13) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[576]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_Raw13.ProtoReflect.Descriptor instead.
func (*Identity_Raw13) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{576}
}

func (x *Identity_Raw13) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Identity_RemoveSubCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sub *Identity_Sub `protobuf:"bytes,1,opt,name=sub,proto3" json:"sub,omitempty"`
}

func (x *Identity_RemoveSubCall) Reset() {
	*x = Identity_RemoveSubCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[577]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_RemoveSubCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_RemoveSubCall) ProtoMessage() {}

func (x *Identity_RemoveSubCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[577]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_RemoveSubCall.ProtoReflect.Descriptor instead.
func (*Identity_RemoveSubCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{577}
}

func (x *Identity_RemoveSubCall) GetSub() *Identity_Sub {
	if x != nil {
		return x.Sub
	}
	return nil
}

type SpRuntimeGenericDigestDigestItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Logs *Babe_Logs `protobuf:"bytes,1,opt,name=logs,proto3" json:"logs,omitempty"`
}

func (x *SpRuntimeGenericDigestDigestItem) Reset() {
	*x = SpRuntimeGenericDigestDigestItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[578]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpRuntimeGenericDigestDigestItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpRuntimeGenericDigestDigestItem) ProtoMessage() {}

func (x *SpRuntimeGenericDigestDigestItem) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[578]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpRuntimeGenericDigestDigestItem.ProtoReflect.Descriptor instead.
func (*SpRuntimeGenericDigestDigestItem) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{578}
}

func (x *SpRuntimeGenericDigestDigestItem) GetLogs() *Babe_Logs {
	if x != nil {
		return x.Logs
	}
	return nil
}

type Balances_ForceUnreserveCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Who    *Balances_Who `protobuf:"bytes,1,opt,name=who,proto3" json:"who,omitempty"`
	Amount string        `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *Balances_ForceUnreserveCall) Reset() {
	*x = Balances_ForceUnreserveCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[579]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Balances_ForceUnreserveCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Balances_ForceUnreserveCall) ProtoMessage() {}

func (x *Balances_ForceUnreserveCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[579]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Balances_ForceUnreserveCall.ProtoReflect.Descriptor instead.
func (*Balances_ForceUnreserveCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{579}
}

func (x *Balances_ForceUnreserveCall) GetWho() *Balances_Who {
	if x != nil {
		return x.Who
	}
	return nil
}

func (x *Balances_ForceUnreserveCall) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type Vesting_Address32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Vesting_Address32) Reset() {
	*x = Vesting_Address32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[580]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vesting_Address32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vesting_Address32) ProtoMessage() {}

func (x *Vesting_Address32) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[580]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vesting_Address32.ProtoReflect.Descriptor instead.
func (*Vesting_Address32) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{580}
}

func (x *Vesting_Address32) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Staking_Stash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Staking_Stash) Reset() {
	*x = Staking_Stash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[581]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staking_Stash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staking_Stash) ProtoMessage() {}

func (x *Staking_Stash) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[581]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staking_Stash.ProtoReflect.Descriptor instead.
func (*Staking_Stash) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{581}
}

type ConvictionVoting_Raw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *ConvictionVoting_Raw) Reset() {
	*x = ConvictionVoting_Raw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[582]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConvictionVoting_Raw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvictionVoting_Raw) ProtoMessage() {}

func (x *ConvictionVoting_Raw) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[582]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvictionVoting_Raw.ProtoReflect.Descriptor instead.
func (*ConvictionVoting_Raw) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{582}
}

func (x *ConvictionVoting_Raw) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type GearVoucherPallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Call:
	//
	//	*GearVoucherPallet_IssueCall
	//	*GearVoucherPallet_CallCall
	//	*GearVoucherPallet_RevokeCall
	//	*GearVoucherPallet_UpdateCall
	//	*GearVoucherPallet_CallDeprecatedCall
	//	*GearVoucherPallet_DeclineCall
	Call isGearVoucherPallet_Call `protobuf_oneof:"call"`
}

func (x *GearVoucherPallet) Reset() {
	*x = GearVoucherPallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[583]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GearVoucherPallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GearVoucherPallet) ProtoMessage() {}

func (x *GearVoucherPallet) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[583]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GearVoucherPallet.ProtoReflect.Descriptor instead.
func (*GearVoucherPallet) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{583}
}

func (m *GearVoucherPallet) GetCall() isGearVoucherPallet_Call {
	if m != nil {
		return m.Call
	}
	return nil
}

func (x *GearVoucherPallet) GetIssueCall() *GearVoucher_IssueCall {
	if x, ok := x.GetCall().(*GearVoucherPallet_IssueCall); ok {
		return x.IssueCall
	}
	return nil
}

func (x *GearVoucherPallet) GetCallCall() *GearVoucher_CallCall {
	if x, ok := x.GetCall().(*GearVoucherPallet_CallCall); ok {
		return x.CallCall
	}
	return nil
}

func (x *GearVoucherPallet) GetRevokeCall() *GearVoucher_RevokeCall {
	if x, ok := x.GetCall().(*GearVoucherPallet_RevokeCall); ok {
		return x.RevokeCall
	}
	return nil
}

func (x *GearVoucherPallet) GetUpdateCall() *GearVoucher_UpdateCall {
	if x, ok := x.GetCall().(*GearVoucherPallet_UpdateCall); ok {
		return x.UpdateCall
	}
	return nil
}

func (x *GearVoucherPallet) GetCallDeprecatedCall() *GearVoucher_CallDeprecatedCall {
	if x, ok := x.GetCall().(*GearVoucherPallet_CallDeprecatedCall); ok {
		return x.CallDeprecatedCall
	}
	return nil
}

func (x *GearVoucherPallet) GetDeclineCall() *GearVoucher_DeclineCall {
	if x, ok := x.GetCall().(*GearVoucherPallet_DeclineCall); ok {
		return x.DeclineCall
	}
	return nil
}

type isGearVoucherPallet_Call interface {
	isGearVoucherPallet_Call()
}

type GearVoucherPallet_IssueCall struct {
	IssueCall *GearVoucher_IssueCall `protobuf:"bytes,1,opt,name=issue_call,json=issueCall,proto3,oneof"`
}

type GearVoucherPallet_CallCall struct {
	CallCall *GearVoucher_CallCall `protobuf:"bytes,2,opt,name=call_call,json=callCall,proto3,oneof"`
}

type GearVoucherPallet_RevokeCall struct {
	RevokeCall *GearVoucher_RevokeCall `protobuf:"bytes,3,opt,name=revoke_call,json=revokeCall,proto3,oneof"`
}

type GearVoucherPallet_UpdateCall struct {
	UpdateCall *GearVoucher_UpdateCall `protobuf:"bytes,4,opt,name=update_call,json=updateCall,proto3,oneof"`
}

type GearVoucherPallet_CallDeprecatedCall struct {
	CallDeprecatedCall *GearVoucher_CallDeprecatedCall `protobuf:"bytes,5,opt,name=call_deprecated_call,json=callDeprecatedCall,proto3,oneof"`
}

type GearVoucherPallet_DeclineCall struct {
	DeclineCall *GearVoucher_DeclineCall `protobuf:"bytes,6,opt,name=decline_call,json=declineCall,proto3,oneof"`
}

func (*GearVoucherPallet_IssueCall) isGearVoucherPallet_Call() {}

func (*GearVoucherPallet_CallCall) isGearVoucherPallet_Call() {}

func (*GearVoucherPallet_RevokeCall) isGearVoucherPallet_Call() {}

func (*GearVoucherPallet_UpdateCall) isGearVoucherPallet_Call() {}

func (*GearVoucherPallet_CallDeprecatedCall) isGearVoucherPallet_Call() {}

func (*GearVoucherPallet_DeclineCall) isGearVoucherPallet_Call() {}

type Staking_Index struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 *Staking_TupleNull `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Staking_Index) Reset() {
	*x = Staking_Index{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[584]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staking_Index) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staking_Index) ProtoMessage() {}

func (x *Staking_Index) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[584]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staking_Index.ProtoReflect.Descriptor instead.
func (*Staking_Index) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{584}
}

func (x *Staking_Index) GetValue0() *Staking_TupleNull {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Staking_Noop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Staking_Noop) Reset() {
	*x = Staking_Noop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[585]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staking_Noop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staking_Noop) ProtoMessage() {}

func (x *Staking_Noop) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[585]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staking_Noop.ProtoReflect.Descriptor instead.
func (*Staking_Noop) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{585}
}

type Identity_Address32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Identity_Address32) Reset() {
	*x = Identity_Address32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[586]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_Address32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_Address32) ProtoMessage() {}

func (x *Identity_Address32) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[586]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_Address32.ProtoReflect.Descriptor instead.
func (*Identity_Address32) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{586}
}

func (x *Identity_Address32) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Identity_Target struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*Identity_Target_Id
	//	*Identity_Target_Index
	//	*Identity_Target_Raw
	//	*Identity_Target_Address32
	//	*Identity_Target_Address20
	Value isIdentity_Target_Value `protobuf_oneof:"value"`
}

func (x *Identity_Target) Reset() {
	*x = Identity_Target{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[587]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_Target) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_Target) ProtoMessage() {}

func (x *Identity_Target) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[587]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_Target.ProtoReflect.Descriptor instead.
func (*Identity_Target) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{587}
}

func (m *Identity_Target) GetValue() isIdentity_Target_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Identity_Target) GetId() *Identity_Id {
	if x, ok := x.GetValue().(*Identity_Target_Id); ok {
		return x.Id
	}
	return nil
}

func (x *Identity_Target) GetIndex() *Identity_Index {
	if x, ok := x.GetValue().(*Identity_Target_Index); ok {
		return x.Index
	}
	return nil
}

func (x *Identity_Target) GetRaw() *Identity_Raw {
	if x, ok := x.GetValue().(*Identity_Target_Raw); ok {
		return x.Raw
	}
	return nil
}

func (x *Identity_Target) GetAddress32() *Identity_Address32 {
	if x, ok := x.GetValue().(*Identity_Target_Address32); ok {
		return x.Address32
	}
	return nil
}

func (x *Identity_Target) GetAddress20() *Identity_Address20 {
	if x, ok := x.GetValue().(*Identity_Target_Address20); ok {
		return x.Address20
	}
	return nil
}

type isIdentity_Target_Value interface {
	isIdentity_Target_Value()
}

type Identity_Target_Id struct {
	Id *Identity_Id `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type Identity_Target_Index struct {
	Index *Identity_Index `protobuf:"bytes,2,opt,name=index,proto3,oneof"`
}

type Identity_Target_Raw struct {
	Raw *Identity_Raw `protobuf:"bytes,3,opt,name=raw,proto3,oneof"`
}

type Identity_Target_Address32 struct {
	Address32 *Identity_Address32 `protobuf:"bytes,4,opt,name=address32,proto3,oneof"`
}

type Identity_Target_Address20 struct {
	Address20 *Identity_Address20 `protobuf:"bytes,5,opt,name=address20,proto3,oneof"`
}

func (*Identity_Target_Id) isIdentity_Target_Value() {}

func (*Identity_Target_Index) isIdentity_Target_Value() {}

func (*Identity_Target_Raw) isIdentity_Target_Value() {}

func (*Identity_Target_Address32) isIdentity_Target_Value() {}

func (*Identity_Target_Address20) isIdentity_Target_Value() {}

type NominationPools_Open struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NominationPools_Open) Reset() {
	*x = NominationPools_Open{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[588]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NominationPools_Open) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NominationPools_Open) ProtoMessage() {}

func (x *NominationPools_Open) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[588]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NominationPools_Open.ProtoReflect.Descriptor instead.
func (*NominationPools_Open) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{588}
}

type ElectionProviderMultiPhasePallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Call:
	//
	//	*ElectionProviderMultiPhasePallet_SubmitUnsignedCall
	//	*ElectionProviderMultiPhasePallet_SetMinimumUntrustedScoreCall
	//	*ElectionProviderMultiPhasePallet_SetEmergencyElectionResultCall
	//	*ElectionProviderMultiPhasePallet_SubmitCall
	//	*ElectionProviderMultiPhasePallet_GovernanceFallbackCall
	Call isElectionProviderMultiPhasePallet_Call `protobuf_oneof:"call"`
}

func (x *ElectionProviderMultiPhasePallet) Reset() {
	*x = ElectionProviderMultiPhasePallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[589]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectionProviderMultiPhasePallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectionProviderMultiPhasePallet) ProtoMessage() {}

func (x *ElectionProviderMultiPhasePallet) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[589]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectionProviderMultiPhasePallet.ProtoReflect.Descriptor instead.
func (*ElectionProviderMultiPhasePallet) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{589}
}

func (m *ElectionProviderMultiPhasePallet) GetCall() isElectionProviderMultiPhasePallet_Call {
	if m != nil {
		return m.Call
	}
	return nil
}

func (x *ElectionProviderMultiPhasePallet) GetSubmitUnsignedCall() *ElectionProviderMultiPhase_SubmitUnsignedCall {
	if x, ok := x.GetCall().(*ElectionProviderMultiPhasePallet_SubmitUnsignedCall); ok {
		return x.SubmitUnsignedCall
	}
	return nil
}

func (x *ElectionProviderMultiPhasePallet) GetSetMinimumUntrustedScoreCall() *ElectionProviderMultiPhase_SetMinimumUntrustedScoreCall {
	if x, ok := x.GetCall().(*ElectionProviderMultiPhasePallet_SetMinimumUntrustedScoreCall); ok {
		return x.SetMinimumUntrustedScoreCall
	}
	return nil
}

func (x *ElectionProviderMultiPhasePallet) GetSetEmergencyElectionResultCall() *ElectionProviderMultiPhase_SetEmergencyElectionResultCall {
	if x, ok := x.GetCall().(*ElectionProviderMultiPhasePallet_SetEmergencyElectionResultCall); ok {
		return x.SetEmergencyElectionResultCall
	}
	return nil
}

func (x *ElectionProviderMultiPhasePallet) GetSubmitCall() *ElectionProviderMultiPhase_SubmitCall {
	if x, ok := x.GetCall().(*ElectionProviderMultiPhasePallet_SubmitCall); ok {
		return x.SubmitCall
	}
	return nil
}

func (x *ElectionProviderMultiPhasePallet) GetGovernanceFallbackCall() *ElectionProviderMultiPhase_GovernanceFallbackCall {
	if x, ok := x.GetCall().(*ElectionProviderMultiPhasePallet_GovernanceFallbackCall); ok {
		return x.GovernanceFallbackCall
	}
	return nil
}

type isElectionProviderMultiPhasePallet_Call interface {
	isElectionProviderMultiPhasePallet_Call()
}

type ElectionProviderMultiPhasePallet_SubmitUnsignedCall struct {
	SubmitUnsignedCall *ElectionProviderMultiPhase_SubmitUnsignedCall `protobuf:"bytes,1,opt,name=submit_unsigned_call,json=submitUnsignedCall,proto3,oneof"`
}

type ElectionProviderMultiPhasePallet_SetMinimumUntrustedScoreCall struct {
	SetMinimumUntrustedScoreCall *ElectionProviderMultiPhase_SetMinimumUntrustedScoreCall `protobuf:"bytes,2,opt,name=set_minimum_untrusted_score_call,json=setMinimumUntrustedScoreCall,proto3,oneof"`
}

type ElectionProviderMultiPhasePallet_SetEmergencyElectionResultCall struct {
	SetEmergencyElectionResultCall *ElectionProviderMultiPhase_SetEmergencyElectionResultCall `protobuf:"bytes,3,opt,name=set_emergency_election_result_call,json=setEmergencyElectionResultCall,proto3,oneof"`
}

type ElectionProviderMultiPhasePallet_SubmitCall struct {
	SubmitCall *ElectionProviderMultiPhase_SubmitCall `protobuf:"bytes,4,opt,name=submit_call,json=submitCall,proto3,oneof"`
}

type ElectionProviderMultiPhasePallet_GovernanceFallbackCall struct {
	GovernanceFallbackCall *ElectionProviderMultiPhase_GovernanceFallbackCall `protobuf:"bytes,5,opt,name=governance_fallback_call,json=governanceFallbackCall,proto3,oneof"`
}

func (*ElectionProviderMultiPhasePallet_SubmitUnsignedCall) isElectionProviderMultiPhasePallet_Call() {
}

func (*ElectionProviderMultiPhasePallet_SetMinimumUntrustedScoreCall) isElectionProviderMultiPhasePallet_Call() {
}

func (*ElectionProviderMultiPhasePallet_SetEmergencyElectionResultCall) isElectionProviderMultiPhasePallet_Call() {
}

func (*ElectionProviderMultiPhasePallet_SubmitCall) isElectionProviderMultiPhasePallet_Call() {}

func (*ElectionProviderMultiPhasePallet_GovernanceFallbackCall) isElectionProviderMultiPhasePallet_Call() {
}

type NominationPools_Raw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *NominationPools_Raw) Reset() {
	*x = NominationPools_Raw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[590]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NominationPools_Raw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NominationPools_Raw) ProtoMessage() {}

func (x *NominationPools_Raw) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[590]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NominationPools_Raw.ProtoReflect.Descriptor instead.
func (*NominationPools_Raw) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{590}
}

func (x *NominationPools_Raw) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type NominationPools_PermissionlessWithdraw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NominationPools_PermissionlessWithdraw) Reset() {
	*x = NominationPools_PermissionlessWithdraw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[591]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NominationPools_PermissionlessWithdraw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NominationPools_PermissionlessWithdraw) ProtoMessage() {}

func (x *NominationPools_PermissionlessWithdraw) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[591]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NominationPools_PermissionlessWithdraw.ProtoReflect.Descriptor instead.
func (*NominationPools_PermissionlessWithdraw) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{591}
}

type SpConsensusBabeAppPublic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 *SpCoreSr25519Public `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *SpConsensusBabeAppPublic) Reset() {
	*x = SpConsensusBabeAppPublic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[592]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpConsensusBabeAppPublic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpConsensusBabeAppPublic) ProtoMessage() {}

func (x *SpConsensusBabeAppPublic) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[592]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpConsensusBabeAppPublic.ProtoReflect.Descriptor instead.
func (*SpConsensusBabeAppPublic) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{592}
}

func (x *SpConsensusBabeAppPublic) GetValue0() *SpCoreSr25519Public {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Grandpa_Equivocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*Grandpa_Equivocation_Prevote
	//	*Grandpa_Equivocation_Precommit
	Value isGrandpa_Equivocation_Value `protobuf_oneof:"value"`
}

func (x *Grandpa_Equivocation) Reset() {
	*x = Grandpa_Equivocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[593]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Grandpa_Equivocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Grandpa_Equivocation) ProtoMessage() {}

func (x *Grandpa_Equivocation) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[593]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Grandpa_Equivocation.ProtoReflect.Descriptor instead.
func (*Grandpa_Equivocation) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{593}
}

func (m *Grandpa_Equivocation) GetValue() isGrandpa_Equivocation_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Grandpa_Equivocation) GetPrevote() *Grandpa_Prevote {
	if x, ok := x.GetValue().(*Grandpa_Equivocation_Prevote); ok {
		return x.Prevote
	}
	return nil
}

func (x *Grandpa_Equivocation) GetPrecommit() *Grandpa_Precommit {
	if x, ok := x.GetValue().(*Grandpa_Equivocation_Precommit); ok {
		return x.Precommit
	}
	return nil
}

type isGrandpa_Equivocation_Value interface {
	isGrandpa_Equivocation_Value()
}

type Grandpa_Equivocation_Prevote struct {
	Prevote *Grandpa_Prevote `protobuf:"bytes,1,opt,name=prevote,proto3,oneof"`
}

type Grandpa_Equivocation_Precommit struct {
	Precommit *Grandpa_Precommit `protobuf:"bytes,2,opt,name=precommit,proto3,oneof"`
}

func (*Grandpa_Equivocation_Prevote) isGrandpa_Equivocation_Value() {}

func (*Grandpa_Equivocation_Precommit) isGrandpa_Equivocation_Value() {}

type FellowshipCollective_CleanupPollCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PollIndex uint32 `protobuf:"varint,1,opt,name=poll_index,json=pollIndex,proto3" json:"poll_index,omitempty"`
	Max       uint32 `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
}

func (x *FellowshipCollective_CleanupPollCall) Reset() {
	*x = FellowshipCollective_CleanupPollCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[594]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FellowshipCollective_CleanupPollCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FellowshipCollective_CleanupPollCall) ProtoMessage() {}

func (x *FellowshipCollective_CleanupPollCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[594]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FellowshipCollective_CleanupPollCall.ProtoReflect.Descriptor instead.
func (*FellowshipCollective_CleanupPollCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{594}
}

func (x *FellowshipCollective_CleanupPollCall) GetPollIndex() uint32 {
	if x != nil {
		return x.PollIndex
	}
	return 0
}

func (x *FellowshipCollective_CleanupPollCall) GetMax() uint32 {
	if x != nil {
		return x.Max
	}
	return 0
}

type Whitelist_WhitelistCallCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallHash *PrimitiveTypesH256 `protobuf:"bytes,1,opt,name=call_hash,json=callHash,proto3" json:"call_hash,omitempty"`
}

func (x *Whitelist_WhitelistCallCall) Reset() {
	*x = Whitelist_WhitelistCallCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[595]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Whitelist_WhitelistCallCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Whitelist_WhitelistCallCall) ProtoMessage() {}

func (x *Whitelist_WhitelistCallCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[595]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Whitelist_WhitelistCallCall.ProtoReflect.Descriptor instead.
func (*Whitelist_WhitelistCallCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{595}
}

func (x *Whitelist_WhitelistCallCall) GetCallHash() *PrimitiveTypesH256 {
	if x != nil {
		return x.CallHash
	}
	return nil
}

type ElectionProviderMultiPhase_PalletElectionProviderMultiPhaseSolutionOrSnapshotSize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Voters  uint32 `protobuf:"varint,1,opt,name=voters,proto3" json:"voters,omitempty"`
	Targets uint32 `protobuf:"varint,2,opt,name=targets,proto3" json:"targets,omitempty"`
}

func (x *ElectionProviderMultiPhase_PalletElectionProviderMultiPhaseSolutionOrSnapshotSize) Reset() {
	*x = ElectionProviderMultiPhase_PalletElectionProviderMultiPhaseSolutionOrSnapshotSize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[596]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectionProviderMultiPhase_PalletElectionProviderMultiPhaseSolutionOrSnapshotSize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectionProviderMultiPhase_PalletElectionProviderMultiPhaseSolutionOrSnapshotSize) ProtoMessage() {
}

func (x *ElectionProviderMultiPhase_PalletElectionProviderMultiPhaseSolutionOrSnapshotSize) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[596]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectionProviderMultiPhase_PalletElectionProviderMultiPhaseSolutionOrSnapshotSize.ProtoReflect.Descriptor instead.
func (*ElectionProviderMultiPhase_PalletElectionProviderMultiPhaseSolutionOrSnapshotSize) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{596}
}

func (x *ElectionProviderMultiPhase_PalletElectionProviderMultiPhaseSolutionOrSnapshotSize) GetVoters() uint32 {
	if x != nil {
		return x.Voters
	}
	return 0
}

func (x *ElectionProviderMultiPhase_PalletElectionProviderMultiPhaseSolutionOrSnapshotSize) GetTargets() uint32 {
	if x != nil {
		return x.Targets
	}
	return 0
}

type NominationPools_WithdrawUnbondedCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberAccount    *NominationPools_MemberAccount `protobuf:"bytes,1,opt,name=member_account,json=memberAccount,proto3" json:"member_account,omitempty"`
	NumSlashingSpans uint32                         `protobuf:"varint,2,opt,name=num_slashing_spans,json=numSlashingSpans,proto3" json:"num_slashing_spans,omitempty"`
}

func (x *NominationPools_WithdrawUnbondedCall) Reset() {
	*x = NominationPools_WithdrawUnbondedCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[597]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NominationPools_WithdrawUnbondedCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NominationPools_WithdrawUnbondedCall) ProtoMessage() {}

func (x *NominationPools_WithdrawUnbondedCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[597]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NominationPools_WithdrawUnbondedCall.ProtoReflect.Descriptor instead.
func (*NominationPools_WithdrawUnbondedCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{597}
}

func (x *NominationPools_WithdrawUnbondedCall) GetMemberAccount() *NominationPools_MemberAccount {
	if x != nil {
		return x.MemberAccount
	}
	return nil
}

func (x *NominationPools_WithdrawUnbondedCall) GetNumSlashingSpans() uint32 {
	if x != nil {
		return x.NumSlashingSpans
	}
	return 0
}

type NominationPools_MaxMembersPerPool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*NominationPools_MaxMembersPerPool_Noop
	//	*NominationPools_MaxMembersPerPool_Set
	//	*NominationPools_MaxMembersPerPool_Remove
	Value isNominationPools_MaxMembersPerPool_Value `protobuf_oneof:"value"`
}

func (x *NominationPools_MaxMembersPerPool) Reset() {
	*x = NominationPools_MaxMembersPerPool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[598]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NominationPools_MaxMembersPerPool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NominationPools_MaxMembersPerPool) ProtoMessage() {}

func (x *NominationPools_MaxMembersPerPool) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[598]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NominationPools_MaxMembersPerPool.ProtoReflect.Descriptor instead.
func (*NominationPools_MaxMembersPerPool) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{598}
}

func (m *NominationPools_MaxMembersPerPool) GetValue() isNominationPools_MaxMembersPerPool_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *NominationPools_MaxMembersPerPool) GetNoop() *NominationPools_Noop {
	if x, ok := x.GetValue().(*NominationPools_MaxMembersPerPool_Noop); ok {
		return x.Noop
	}
	return nil
}

func (x *NominationPools_MaxMembersPerPool) GetSet() *NominationPools_Set {
	if x, ok := x.GetValue().(*NominationPools_MaxMembersPerPool_Set); ok {
		return x.Set
	}
	return nil
}

func (x *NominationPools_MaxMembersPerPool) GetRemove() *NominationPools_Remove {
	if x, ok := x.GetValue().(*NominationPools_MaxMembersPerPool_Remove); ok {
		return x.Remove
	}
	return nil
}

type isNominationPools_MaxMembersPerPool_Value interface {
	isNominationPools_MaxMembersPerPool_Value()
}

type NominationPools_MaxMembersPerPool_Noop struct {
	Noop *NominationPools_Noop `protobuf:"bytes,1,opt,name=noop,proto3,oneof"`
}

type NominationPools_MaxMembersPerPool_Set struct {
	Set *NominationPools_Set `protobuf:"bytes,2,opt,name=set,proto3,oneof"`
}

type NominationPools_MaxMembersPerPool_Remove struct {
	Remove *NominationPools_Remove `protobuf:"bytes,3,opt,name=remove,proto3,oneof"`
}

func (*NominationPools_MaxMembersPerPool_Noop) isNominationPools_MaxMembersPerPool_Value() {}

func (*NominationPools_MaxMembersPerPool_Set) isNominationPools_MaxMembersPerPool_Value() {}

func (*NominationPools_MaxMembersPerPool_Remove) isNominationPools_MaxMembersPerPool_Value() {}

type ConvictionVoting_Address20 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *ConvictionVoting_Address20) Reset() {
	*x = ConvictionVoting_Address20{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[599]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConvictionVoting_Address20) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvictionVoting_Address20) ProtoMessage() {}

func (x *ConvictionVoting_Address20) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[599]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvictionVoting_Address20.ProtoReflect.Descriptor instead.
func (*ConvictionVoting_Address20) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{599}
}

func (x *ConvictionVoting_Address20) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Scheduler_CancelNamedCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Scheduler_CancelNamedCall) Reset() {
	*x = Scheduler_CancelNamedCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[600]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scheduler_CancelNamedCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scheduler_CancelNamedCall) ProtoMessage() {}

func (x *Scheduler_CancelNamedCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[600]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scheduler_CancelNamedCall.ProtoReflect.Descriptor instead.
func (*Scheduler_CancelNamedCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{600}
}

func (x *Scheduler_CancelNamedCall) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

type Identity_Raw32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Identity_Raw32) Reset() {
	*x = Identity_Raw32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[601]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_Raw32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_Raw32) ProtoMessage() {}

func (x *Identity_Raw32) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[601]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_Raw32.ProtoReflect.Descriptor instead.
func (*Identity_Raw32) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{601}
}

func (x *Identity_Raw32) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type Proxy_Address32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Proxy_Address32) Reset() {
	*x = Proxy_Address32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[602]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proxy_Address32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proxy_Address32) ProtoMessage() {}

func (x *Proxy_Address32) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[602]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proxy_Address32.ProtoReflect.Descriptor instead.
func (*Proxy_Address32) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{602}
}

func (x *Proxy_Address32) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type ElectionProviderMultiPhase_TupleSpCoreCryptoAccountId32SpNposElectionsSupport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 *SpCoreCryptoAccountId32 `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
	Value1 *SpNposElectionsSupport  `protobuf:"bytes,2,opt,name=value1,proto3" json:"value1,omitempty"`
}

func (x *ElectionProviderMultiPhase_TupleSpCoreCryptoAccountId32SpNposElectionsSupport) Reset() {
	*x = ElectionProviderMultiPhase_TupleSpCoreCryptoAccountId32SpNposElectionsSupport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[603]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectionProviderMultiPhase_TupleSpCoreCryptoAccountId32SpNposElectionsSupport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectionProviderMultiPhase_TupleSpCoreCryptoAccountId32SpNposElectionsSupport) ProtoMessage() {
}

func (x *ElectionProviderMultiPhase_TupleSpCoreCryptoAccountId32SpNposElectionsSupport) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[603]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectionProviderMultiPhase_TupleSpCoreCryptoAccountId32SpNposElectionsSupport.ProtoReflect.Descriptor instead.
func (*ElectionProviderMultiPhase_TupleSpCoreCryptoAccountId32SpNposElectionsSupport) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{603}
}

func (x *ElectionProviderMultiPhase_TupleSpCoreCryptoAccountId32SpNposElectionsSupport) GetValue0() *SpCoreCryptoAccountId32 {
	if x != nil {
		return x.Value0
	}
	return nil
}

func (x *ElectionProviderMultiPhase_TupleSpCoreCryptoAccountId32SpNposElectionsSupport) GetValue1() *SpNposElectionsSupport {
	if x != nil {
		return x.Value1
	}
	return nil
}

type Babe_TupleUint64Uint64 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 uint64 `protobuf:"varint,1,opt,name=value0,proto3" json:"value0,omitempty"`
	Value1 uint64 `protobuf:"varint,2,opt,name=value1,proto3" json:"value1,omitempty"`
}

func (x *Babe_TupleUint64Uint64) Reset() {
	*x = Babe_TupleUint64Uint64{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[604]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Babe_TupleUint64Uint64) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Babe_TupleUint64Uint64) ProtoMessage() {}

func (x *Babe_TupleUint64Uint64) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[604]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Babe_TupleUint64Uint64.ProtoReflect.Descriptor instead.
func (*Babe_TupleUint64Uint64) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{604}
}

func (x *Babe_TupleUint64Uint64) GetValue0() uint64 {
	if x != nil {
		return x.Value0
	}
	return 0
}

func (x *Babe_TupleUint64Uint64) GetValue1() uint64 {
	if x != nil {
		return x.Value1
	}
	return 0
}

type FellowshipReferenda_CancelCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *FellowshipReferenda_CancelCall) Reset() {
	*x = FellowshipReferenda_CancelCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[605]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FellowshipReferenda_CancelCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FellowshipReferenda_CancelCall) ProtoMessage() {}

func (x *FellowshipReferenda_CancelCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[605]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FellowshipReferenda_CancelCall.ProtoReflect.Descriptor instead.
func (*FellowshipReferenda_CancelCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{605}
}

func (x *FellowshipReferenda_CancelCall) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type Identity_Raw20 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 []byte `protobuf:"bytes,1,opt,name=value0,proto3" json:"value0,omitempty"`
}

func (x *Identity_Raw20) Reset() {
	*x = Identity_Raw20{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[606]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity_Raw20) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity_Raw20) ProtoMessage() {}

func (x *Identity_Raw20) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[606]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity_Raw20.ProtoReflect.Descriptor instead.
func (*Identity_Raw20) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{606}
}

func (x *Identity_Raw20) GetValue0() []byte {
	if x != nil {
		return x.Value0
	}
	return nil
}

type StakingRewards_AlignSupplyCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *StakingRewards_AlignSupplyCall) Reset() {
	*x = StakingRewards_AlignSupplyCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[607]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakingRewards_AlignSupplyCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakingRewards_AlignSupplyCall) ProtoMessage() {}

func (x *StakingRewards_AlignSupplyCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_metadata_type_v1_output_proto_msgTypes[607]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakingRewards_AlignSupplyCall.ProtoReflect.Descriptor instead.
func (*StakingRewards_AlignSupplyCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP(), []int{607}
}

func (x *StakingRewards_AlignSupplyCall) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

var File_sf_gear_metadata_type_v1_output_proto protoreflect.FileDescriptor

var file_sf_gear_metadata_type_v1_output_proto_rawDesc = []byte{
	0x0a, 0x25, 0x73, 0x66, 0x2f, 0x67, 0x65, 0x61, 0x72, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x22, 0x54, 0x0a, 0x0d, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x43, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x4e, 0x75, 0x6c, 0x6c, 0x52,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0x4f, 0x0a, 0x12, 0x54, 0x72, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x79, 0x5f, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x39, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x4e, 0x75, 0x6c,
	0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2c, 0x0a, 0x12, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x4b, 0x65, 0x63, 0x63, 0x61, 0x6b, 0x32, 0x35, 0x36, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0x82, 0x01, 0x0a, 0x14, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x53, 0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x12,
	0x6a, 0x0a, 0x04, 0x73, 0x75, 0x62, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x56, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x53, 0x70, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x33, 0x32, 0x50, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x73, 0x75, 0x62, 0x73, 0x22, 0x2d, 0x0a, 0x13, 0x4e,
	0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x53,
	0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0x1b, 0x0a, 0x19, 0x43, 0x6f,
	0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x4c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x36, 0x58, 0x22, 0x28, 0x0a, 0x0e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x34, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x30, 0x22, 0xc8, 0x14, 0x0a, 0x14, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x5f, 0x41,
	0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x5e, 0x0a, 0x11, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x70, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x33, 0x32, 0x52, 0x10, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x68, 0x0a, 0x0f, 0x6d, 0x61, 0x79, 0x62,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3a, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x73, 0x69, 0x67, 0x5f, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x73, 0x69, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x01, 0x52,
	0x0e, 0x6d, 0x61, 0x79, 0x62, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x40, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x06, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x12, 0x49, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x50, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x48, 0x00, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x3a, 0x0a, 0x04, 0x62, 0x61, 0x62, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x62, 0x65, 0x50, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x04, 0x62, 0x61, 0x62, 0x65, 0x12, 0x43, 0x0a, 0x07, 0x67,
	0x72, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x50,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x07, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x70, 0x61,
	0x12, 0x46, 0x0a, 0x08, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x07, 0x76, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x48, 0x00, 0x52, 0x07, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x47, 0x0a,
	0x09, 0x62, 0x61, 0x67, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x67, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x62, 0x61,
	0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x09, 0x69, 0x6d, 0x5f, 0x6f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6d, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12,
	0x43, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x07, 0x73, 0x74, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x12, 0x43, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00,
	0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x08, 0x74, 0x72, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x50,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x79, 0x12, 0x43, 0x0a, 0x07, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x74,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x07, 0x75,
	0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x5f, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x49, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x64, 0x61, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x50,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x64, 0x61, 0x12, 0x6b, 0x0a, 0x15, 0x66, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70,
	0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x6c,
	0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x14, 0x66, 0x65, 0x6c, 0x6c, 0x6f,
	0x77, 0x73, 0x68, 0x69, 0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x68, 0x0a, 0x14, 0x66, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73,
	0x68, 0x69, 0x70, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x50, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x48, 0x00, 0x52, 0x13, 0x66, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x12, 0x49, 0x0a, 0x09, 0x77, 0x68, 0x69,
	0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73,
	0x74, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x09, 0x77, 0x68, 0x69, 0x74, 0x65,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x48, 0x00, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x12,
	0x46, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x70,
	0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x46, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x3d, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x50,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x46,
	0x0a, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x73, 0x69, 0x67, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x12, 0x7f, 0x0a, 0x1d, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x1a, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x08, 0x62, 0x6f, 0x75, 0x6e, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x50, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x56, 0x0a, 0x0e, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73,
	0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x42,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x10, 0x6e, 0x6f, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x50, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x3a, 0x0a, 0x04, 0x67, 0x65, 0x61, 0x72, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x61, 0x72, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x04, 0x67, 0x65, 0x61,
	0x72, 0x12, 0x59, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x74,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x50, 0x0a, 0x0c,
	0x67, 0x65, 0x61, 0x72, 0x5f, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x61, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48,
	0x00, 0x52, 0x0b, 0x67, 0x65, 0x61, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x12, 0x50,
	0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70,
	0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x56, 0x32, 0x57,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x42, 0x06, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6d, 0x61, 0x79,
	0x62, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x6e, 0x0a, 0x1a,
	0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x31, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x31, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x32,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x32, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x77, 0x0a, 0x1c,
	0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x75, 0x6c,
	0x6e, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x57, 0x0a, 0x0d,
	0x69, 0x6e, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x70, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x33, 0x32, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0x91, 0x01, 0x0a, 0x18, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x43, 0x61,
	0x6c, 0x6c, 0x12, 0x47, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x43,
	0x6f, 0x72, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x33, 0x32, 0x52, 0x05, 0x73, 0x74, 0x61, 0x73, 0x68, 0x12, 0x2c, 0x0a, 0x12, 0x6e,
	0x75, 0x6d, 0x5f, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x70, 0x61, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x53, 0x6c, 0x61, 0x73,
	0x68, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x22, 0x2b, 0x0a, 0x13, 0x54, 0x72, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x79, 0x5f, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x43, 0x61, 0x6c, 0x6c,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x60, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x76, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x49, 0x64, 0x12, 0x49, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x43, 0x6f, 0x72, 0x65, 0x43,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x33, 0x32,
	0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0x76, 0x0a, 0x22, 0x43, 0x68, 0x69, 0x6c,
	0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x43,
	0x68, 0x69, 0x6c, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x28,
	0x0a, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x42, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x49, 0x64,
	0x22, 0xfa, 0x01, 0x0a, 0x1a, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x4d, 0x61, 0x78, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12,
	0x44, 0x0a, 0x04, 0x6e, 0x6f, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x4e, 0x6f, 0x6f, 0x70, 0x48, 0x00, 0x52,
	0x04, 0x6e, 0x6f, 0x6f, 0x70, 0x12, 0x41, 0x0a, 0x03, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x53, 0x65,
	0x74, 0x48, 0x00, 0x52, 0x03, 0x73, 0x65, 0x74, 0x12, 0x4a, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f,
	0x6f, 0x6c, 0x73, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x34, 0x0a,
	0x1a, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x57, 0x69,
	0x74, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x22, 0x99, 0x03, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x54, 0x6f, 0x12, 0x3f, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x49, 0x64, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x48, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x48, 0x00, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x42, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x52, 0x61, 0x77, 0x48, 0x00, 0x52, 0x03, 0x72, 0x61, 0x77, 0x12, 0x54, 0x0a, 0x09, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x33, 0x32, 0x48, 0x00, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32,
	0x12, 0x54, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x48, 0x00, 0x52, 0x09, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x54, 0x0a, 0x17, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73,
	0x5f, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x39, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x13, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x4e,
	0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x22, 0x13, 0x0a, 0x11, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x22,
	0xa9, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x61, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x5f,
	0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x40,
	0x0a, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x61, 0x72, 0x56, 0x6f, 0x75, 0x63,
	0x68, 0x65, 0x72, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x6f, 0x6e, 0x65,
	0x12, 0x40, 0x0a, 0x04, 0x73, 0x6f, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x61, 0x72, 0x56, 0x6f,
	0x75, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x53, 0x6f, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x04, 0x73, 0x6f,
	0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xff, 0x06, 0x0a, 0x0e,
	0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x63,
	0x0a, 0x12, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x5f, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x48,
	0x00, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x43,
	0x61, 0x6c, 0x6c, 0x12, 0x69, 0x0a, 0x14, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x79, 0x5f, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x12, 0x72, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x6c,
	0x0a, 0x15, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x79, 0x5f, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x13, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x5d, 0x0a, 0x10,
	0x73, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x5f, 0x53, 0x70, 0x65, 0x6e, 0x64,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x70, 0x65,
	0x6e, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x69, 0x0a, 0x14, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x5f, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x43, 0x61, 0x6c, 0x6c,
	0x48, 0x00, 0x52, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x61, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x4d, 0x0a, 0x0a, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x5f, 0x53,
	0x70, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x09, 0x73, 0x70, 0x65, 0x6e,
	0x64, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x50, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x5f, 0x50,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x60, 0x0a, 0x11, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x5a, 0x0a, 0x0f, 0x76, 0x6f, 0x69,
	0x64, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x5f, 0x56, 0x6f, 0x69, 0x64, 0x53, 0x70, 0x65, 0x6e, 0x64,
	0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0d, 0x76, 0x6f, 0x69, 0x64, 0x53, 0x70, 0x65, 0x6e,
	0x64, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x06, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x22, 0x3c, 0x0a,
	0x16, 0x43, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x79, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x79, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x61, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6e, 0x61, 0x79, 0x22, 0xf3, 0x03, 0x0a, 0x14,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x03, 0x61, 0x6e, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x5f, 0x41, 0x6e, 0x79, 0x48, 0x00, 0x52, 0x03, 0x61, 0x6e, 0x79, 0x12, 0x50, 0x0a,
	0x0c, 0x6e, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x5f, 0x4e, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x0b, 0x6e, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12,
	0x4c, 0x0a, 0x0a, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x5f, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x48,
	0x00, 0x52, 0x0a, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x43, 0x0a,
	0x07, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f,
	0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x07, 0x73, 0x74, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x12, 0x62, 0x0a, 0x12, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6a,
	0x75, 0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x11, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4a, 0x75, 0x64,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x50, 0x0a, 0x0c, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xf7, 0x01, 0x0a, 0x50, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x5f, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x38, 0x4c, 0x69, 0x73, 0x74,
	0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x12, 0x73,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5b,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x5f, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x53, 0x70, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x50, 0x65, 0x72, 0x54,
	0x68, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x65, 0x72, 0x55, 0x31, 0x36, 0x52, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x22, 0x4e, 0x0a, 0x11, 0x56,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x4e, 0x75, 0x6c, 0x6c,
	0x12, 0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x75, 0x70, 0x6c, 0x65,
	0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2e, 0x0a, 0x16, 0x54,
	0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x5f, 0x56, 0x6f, 0x69, 0x64, 0x53, 0x70, 0x65, 0x6e,
	0x64, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x99, 0x01, 0x0a, 0x12,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x43, 0x61,
	0x6c, 0x6c, 0x12, 0x38, 0x0a, 0x04, 0x72, 0x65, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x5f, 0x52, 0x65, 0x61, 0x6c, 0x52, 0x04, 0x72, 0x65, 0x61, 0x6c, 0x12, 0x49, 0x0a, 0x09,
	0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x48, 0x32, 0x35, 0x36, 0x52, 0x08, 0x63,
	0x61, 0x6c, 0x6c, 0x48, 0x61, 0x73, 0x68, 0x22, 0xbf, 0x01, 0x0a, 0x23, 0x46, 0x65, 0x6c, 0x6c,
	0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f,
	0x45, 0x6e, 0x61, 0x63, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x42, 0x0a, 0x02, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69,
	0x70, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f, 0x41, 0x74, 0x48, 0x00, 0x52,
	0x02, 0x61, 0x74, 0x12, 0x4b, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65,
	0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64,
	0x61, 0x5f, 0x41, 0x66, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb2, 0x04, 0x0a, 0x0e, 0x50, 0x72,
	0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x63, 0x0a, 0x12,
	0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x4e, 0x6f, 0x74,
	0x65, 0x50, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52,
	0x10, 0x6e, 0x6f, 0x74, 0x65, 0x50, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x6c,
	0x6c, 0x12, 0x69, 0x0a, 0x14, 0x75, 0x6e, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x55, 0x6e, 0x6e, 0x6f, 0x74, 0x65, 0x50, 0x72, 0x65, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x12, 0x75, 0x6e, 0x6e, 0x6f, 0x74, 0x65,
	0x50, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x6c, 0x0a, 0x15,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43,
	0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x13, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72,
	0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x72, 0x0a, 0x17, 0x75, 0x6e,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x55, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x15, 0x75, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x66,
	0x0a, 0x13, 0x65, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x43, 0x61, 0x6c,
	0x6c, 0x48, 0x00, 0x52, 0x11, 0x65, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x06, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x22, 0x0f,
	0x0a, 0x0d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x22,
	0x54, 0x0a, 0x1a, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x90, 0x01, 0x0a, 0x23, 0x53, 0x70, 0x43, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x45, 0x71, 0x75, 0x69,
	0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x15, 0x0a,
	0x06, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x0c, 0x65, 0x71, 0x75, 0x69, 0x76, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x5f, 0x45, 0x71,
	0x75, 0x69, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x65, 0x71, 0x75, 0x69,
	0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x06, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65,
	0x22, 0x28, 0x0a, 0x0e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77,
	0x32, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0x3e, 0x0a, 0x24, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x42, 0x69, 0x74, 0x46, 0x6c, 0x61,
	0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0x28, 0x0a, 0x0e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x33, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x30, 0x22, 0xfd, 0x01, 0x0a, 0x1d, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x4d, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x42, 0x6f, 0x6e, 0x64, 0x12, 0x44, 0x0a, 0x04, 0x6e, 0x6f, 0x6f, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f,
	0x4e, 0x6f, 0x6f, 0x70, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x6f, 0x6f, 0x70, 0x12, 0x41, 0x0a, 0x03,
	0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x03, 0x73, 0x65, 0x74, 0x12,
	0x4a, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x31, 0x0a, 0x19, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x52, 0x65, 0x66, 0x69, 0x6c, 0x6c, 0x43, 0x61, 0x6c,
	0x6c, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x79, 0x0a, 0x1e, 0x53, 0x74, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x66, 0x69, 0x6c, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x41, 0x0a, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x5f, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xf8, 0x01, 0x0a, 0x51, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x5f, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x31, 0x31, 0x4c, 0x69,
	0x73, 0x74, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30,
	0x12, 0x73, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x5b, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x53, 0x70, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x50, 0x65,
	0x72, 0x54, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x65, 0x72, 0x55, 0x31, 0x36, 0x52, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x22, 0x9a, 0x03,
	0x0a, 0x19, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c,
	0x73, 0x5f, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x3e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f,
	0x6c, 0x73, 0x5f, 0x49, 0x64, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x47, 0x0a, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x48, 0x00, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x41, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x52, 0x61, 0x77,
	0x48, 0x00, 0x52, 0x03, 0x72, 0x61, 0x77, 0x12, 0x53, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x33, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x48,
	0x00, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x12, 0x53, 0x0a, 0x09,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x32, 0x30, 0x48, 0x00, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32,
	0x30, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa1, 0x03, 0x0a, 0x09, 0x42,
	0x61, 0x62, 0x65, 0x5f, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x4c, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x5f,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x62, 0x65, 0x5f, 0x50, 0x72,
	0x65, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x52,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x73, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x62, 0x65, 0x5f, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x73, 0x75, 0x73, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x12, 0x39, 0x0a, 0x04, 0x73, 0x65, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x62, 0x65, 0x5f, 0x53,
	0x65, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x04, 0x73, 0x65, 0x61, 0x6c, 0x12, 0x3c, 0x0a, 0x05, 0x6f,
	0x74, 0x68, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x62, 0x65, 0x5f, 0x4f, 0x74, 0x68, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x12, 0x7a, 0x0a, 0x1b, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x62, 0x65, 0x5f, 0x52,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x19, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xea,
	0x01, 0x0a, 0x1e, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x5f, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x45, 0x71, 0x75, 0x69, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c,
	0x6c, 0x12, 0x6c, 0x0a, 0x12, 0x65, 0x71, 0x75, 0x69, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x45, 0x71, 0x75, 0x69, 0x76,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x11, 0x65, 0x71,
	0x75, 0x69, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12,
	0x5a, 0x0a, 0x0f, 0x6b, 0x65, 0x79, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f,
	0x6f, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x0d, 0x6b, 0x65,
	0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x22, 0x77, 0x0a, 0x2e, 0x49,
	0x6d, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x6d,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x72, 0x32, 0x35, 0x35, 0x31, 0x39, 0x41, 0x70, 0x70,
	0x53, 0x72, 0x32, 0x35, 0x35, 0x31, 0x39, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x45, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x43, 0x6f, 0x72, 0x65, 0x53,
	0x72, 0x32, 0x35, 0x35, 0x31, 0x39, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x30, 0x22, 0x2c, 0x0a, 0x14, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64,
	0x61, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x22, 0x2a, 0x0a, 0x12, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f,
	0x4b, 0x69, 0x6c, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xc7,
	0x12, 0x0a, 0x16, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x57, 0x69, 0x74, 0x68, 0x57,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x40, 0x0a, 0x06, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x48, 0x00, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x49, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3a, 0x0a, 0x04, 0x62, 0x61, 0x62, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x61, 0x62, 0x65, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x04, 0x62, 0x61,
	0x62, 0x65, 0x12, 0x43, 0x0a, 0x07, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x72, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x07,
	0x67, 0x72, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x12, 0x46, 0x0a, 0x08, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x50, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12,
	0x43, 0x0a, 0x07, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x07, 0x76, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x47, 0x0a, 0x09, 0x62, 0x61, 0x67, 0x73, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x61, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x48, 0x00, 0x52, 0x08, 0x62, 0x61, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x47, 0x0a,
	0x09, 0x69, 0x6d, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x4f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6d,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x43, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x48, 0x00, 0x52, 0x07, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x43, 0x0a, 0x07, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x46, 0x0a, 0x08, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08,
	0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x12, 0x43, 0x0a, 0x07, 0x75, 0x74, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x48, 0x00, 0x52, 0x07, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x5f, 0x0a,
	0x11, 0x63, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x6f, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x10, 0x63, 0x6f,
	0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x49,
	0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x09,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x12, 0x6b, 0x0a, 0x15, 0x66, 0x65, 0x6c,
	0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00,
	0x52, 0x14, 0x66, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x68, 0x0a, 0x14, 0x66, 0x65, 0x6c, 0x6c, 0x6f, 0x77,
	0x73, 0x68, 0x69, 0x70, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x64, 0x61, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x13, 0x66, 0x65, 0x6c,
	0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61,
	0x12, 0x49, 0x0a, 0x09, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57,
	0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00,
	0x52, 0x09, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x09, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x09, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x46,
	0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x05,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x46, 0x0a, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69,
	0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x50, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x12, 0x7f, 0x0a,
	0x1d, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x48, 0x00, 0x52, 0x1a, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x46,
	0x0a, 0x08, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x75, 0x6e,
	0x74, 0x69, 0x65, 0x73, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x62, 0x6f,
	0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x0e, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f,
	0x62, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x42,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52,
	0x0d, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x12, 0x5c,
	0x0a, 0x10, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6f,
	0x6c, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f,
	0x6f, 0x6c, 0x73, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x6e, 0x6f, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x3a, 0x0a, 0x04,
	0x67, 0x65, 0x61, 0x72, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x61, 0x72, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x48, 0x00, 0x52, 0x04, 0x67, 0x65, 0x61, 0x72, 0x12, 0x59, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x50, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x12, 0x50, 0x0a, 0x0c, 0x67, 0x65, 0x61, 0x72, 0x5f, 0x76, 0x6f, 0x75, 0x63,
	0x68, 0x65, 0x72, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x61, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72,
	0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x67, 0x65, 0x61, 0x72, 0x56, 0x6f,
	0x75, 0x63, 0x68, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x70, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x56, 0x32, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x42, 0x06, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x22, 0x4c, 0x0a, 0x10, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x38, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0x6e, 0x0a, 0x1a, 0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77,
	0x73, 0x68, 0x69, 0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x50, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0xea, 0x02, 0x0a, 0x0c, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x4e, 0x65, 0x77, 0x12, 0x37, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x49, 0x64, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x40, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x3a, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x48, 0x00, 0x52, 0x03, 0x72, 0x61, 0x77, 0x12, 0x4c,
	0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x48,
	0x00, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x12, 0x4c, 0x0a, 0x09,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x48, 0x00, 0x52,
	0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x2f, 0x0a, 0x17, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x53, 0x65,
	0x74, 0x48, 0x65, 0x61, 0x70, 0x50, 0x61, 0x67, 0x65, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x70,
	0x61, 0x67, 0x65, 0x73, 0x22, 0x56, 0x0a, 0x0e, 0x42, 0x61, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x5f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x44, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x61, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x54, 0x75, 0x70, 0x6c, 0x65,
	0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0xac, 0x01, 0x0a,
	0x1e, 0x42, 0x61, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x50, 0x75, 0x74, 0x49, 0x6e, 0x46,
	0x72, 0x6f, 0x6e, 0x74, 0x4f, 0x66, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x12,
	0x44, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x76, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x67, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x5f, 0x48, 0x65, 0x61, 0x76, 0x69, 0x65, 0x72, 0x52, 0x07, 0x68, 0x65,
	0x61, 0x76, 0x69, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x07, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x61, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x4c, 0x69, 0x67, 0x68, 0x74,
	0x65, 0x72, 0x52, 0x07, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x22, 0xe1, 0x01, 0x0a, 0x19,
	0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x4d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x04, 0x6e, 0x6f, 0x6f,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x4e, 0x6f, 0x6f, 0x70, 0x48,
	0x00, 0x52, 0x04, 0x6e, 0x6f, 0x6f, 0x70, 0x12, 0x39, 0x0a, 0x03, 0x73, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x03, 0x73,
	0x65, 0x74, 0x12, 0x42, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x00, 0x52, 0x06,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x94, 0x12, 0x0a, 0x18, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x41, 0x73, 0x44, 0x65,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x40, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x06, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x12, 0x49, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x50, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x48, 0x00, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x3a, 0x0a, 0x04, 0x62, 0x61, 0x62, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x62, 0x65, 0x50, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x04, 0x62, 0x61, 0x62, 0x65, 0x12, 0x43, 0x0a, 0x07, 0x67,
	0x72, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x50,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x07, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x70, 0x61,
	0x12, 0x46, 0x0a, 0x08, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x07, 0x76, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x48, 0x00, 0x52, 0x07, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x47, 0x0a,
	0x09, 0x62, 0x61, 0x67, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x67, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x62, 0x61,
	0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x09, 0x69, 0x6d, 0x5f, 0x6f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6d, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12,
	0x43, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x07, 0x73, 0x74, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x12, 0x43, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00,
	0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x08, 0x74, 0x72, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x50,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x79, 0x12, 0x43, 0x0a, 0x07, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x74,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x07, 0x75,
	0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x5f, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x49, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x64, 0x61, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x50,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x64, 0x61, 0x12, 0x6b, 0x0a, 0x15, 0x66, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70,
	0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x6c,
	0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x14, 0x66, 0x65, 0x6c, 0x6c, 0x6f,
	0x77, 0x73, 0x68, 0x69, 0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x68, 0x0a, 0x14, 0x66, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73,
	0x68, 0x69, 0x70, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x50, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x48, 0x00, 0x52, 0x13, 0x66, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x12, 0x49, 0x0a, 0x09, 0x77, 0x68, 0x69,
	0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73,
	0x74, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x09, 0x77, 0x68, 0x69, 0x74, 0x65,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x48, 0x00, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x12,
	0x46, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x70,
	0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x46, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x3d, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x50,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x46,
	0x0a, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x73, 0x69, 0x67, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x12, 0x7f, 0x0a, 0x1d, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x1a, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x08, 0x62, 0x6f, 0x75, 0x6e, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x50, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x56, 0x0a, 0x0e, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73,
	0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x42,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x10, 0x6e, 0x6f, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x50, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x3a, 0x0a, 0x04, 0x67, 0x65, 0x61, 0x72, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x61, 0x72, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x04, 0x67, 0x65, 0x61,
	0x72, 0x12, 0x59, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x74,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x50, 0x0a, 0x0c,
	0x67, 0x65, 0x61, 0x72, 0x5f, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x61, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48,
	0x00, 0x52, 0x0b, 0x67, 0x65, 0x61, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x42, 0x06,
	0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x22, 0x88, 0x03, 0x0a, 0x1b, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x73, 0x69, 0x67, 0x5f, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x41, 0x73, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x12, 0x5e, 0x0a, 0x11, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x43, 0x6f, 0x72,
	0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x33, 0x32, 0x52, 0x10, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x68, 0x0a, 0x0f, 0x6d, 0x61, 0x79, 0x62, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69,
	0x67, 0x5f, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67,
	0x54, 0x69, 0x6d, 0x65, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x6d, 0x61, 0x79,
	0x62, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x48, 0x61, 0x73, 0x68, 0x12, 0x50, 0x0a, 0x0a, 0x6d,
	0x61, 0x78, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x56, 0x32, 0x57, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x6d, 0x61, 0x79, 0x62, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x22, 0xa2, 0x01, 0x0a, 0x3d, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x5f, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x53, 0x70, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x33, 0x32, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x49, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x70, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x33, 0x32, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x22, 0xbb, 0x02, 0x0a, 0x24, 0x4e, 0x6f, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x57, 0x69, 0x74, 0x68, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73,
	0x5f, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x12, 0x51, 0x0a, 0x09, 0x6e,
	0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x6f, 0x72, 0x52, 0x09, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x4b,
	0x0a, 0x07, 0x62, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x42, 0x6f, 0x75, 0x6e, 0x63,
	0x65, 0x72, 0x52, 0x07, 0x62, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x70,
	0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x6f,
	0x6f, 0x6c, 0x49, 0x64, 0x22, 0x31, 0x0a, 0x17, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x42, 0x6f, 0x75,
	0x6e, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x12,
	0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0x24, 0x0a, 0x0a, 0x42, 0x61, 0x62, 0x65, 0x5f,
	0x4f, 0x74, 0x68, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0xe5, 0x01,
	0x0a, 0x1b, 0x42, 0x61, 0x62, 0x65, 0x5f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x71, 0x75,
	0x69, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x6a, 0x0a,
	0x12, 0x65, 0x71, 0x75, 0x69, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72,
	0x6f, 0x6f, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x53, 0x6c, 0x6f, 0x74, 0x73, 0x45, 0x71, 0x75, 0x69, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x11, 0x65, 0x71, 0x75, 0x69, 0x76, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x5a, 0x0a, 0x0f, 0x6b, 0x65, 0x79,
	0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x0d, 0x6b, 0x65, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x22, 0x2a, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x5f, 0x55, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x5d, 0x0a, 0x1d, 0x43, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x41, 0x62, 0x73, 0x74, 0x61,
	0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x79, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x61, 0x79, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6e, 0x61, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x62, 0x73, 0x74, 0x61, 0x69,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x62, 0x73, 0x74, 0x61, 0x69, 0x6e,
	0x22, 0xba, 0x01, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x41, 0x64, 0x64, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x44, 0x0a, 0x08, 0x64, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x52, 0x08, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x48, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x5f, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x22, 0x5c, 0x0a,
	0x2a, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x30, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x22, 0x6d, 0x0a, 0x14, 0x53,
	0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x43,
	0x61, 0x6c, 0x6c, 0x12, 0x55, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x70, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x22, 0x28, 0x0a, 0x0e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x39, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x30, 0x22, 0x5e, 0x0a, 0x2c, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61,
	0x73, 0x65, 0x5f, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x55, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x31, 0x22, 0xe5, 0x04, 0x0a, 0x1e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x59, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x5f, 0x6a,
	0x6f, 0x69, 0x6e, 0x5f, 0x62, 0x6f, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x4d, 0x69, 0x6e, 0x4a, 0x6f, 0x69,
	0x6e, 0x42, 0x6f, 0x6e, 0x64, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x4a, 0x6f, 0x69, 0x6e, 0x42, 0x6f,
	0x6e, 0x64, 0x12, 0x5f, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x62, 0x6f, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x4d, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x6f, 0x6e, 0x64, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42,
	0x6f, 0x6e, 0x64, 0x12, 0x4f, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c,
	0x73, 0x5f, 0x4d, 0x61, 0x78, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x50,
	0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x55, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x4d, 0x61, 0x78, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52,
	0x0a, 0x6d, 0x61, 0x78, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x6c, 0x0a, 0x14, 0x6d,
	0x61, 0x78, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x70,
	0x6f, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x4d, 0x61, 0x78, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x50,
	0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x50, 0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x71, 0x0a, 0x15, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f,
	0x6f, 0x6c, 0x73, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4d,
	0x61, 0x78, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x64, 0x0a, 0x1b,
	0x53, 0x70, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x47, 0x72, 0x61, 0x6e, 0x64,
	0x70, 0x61, 0x41, 0x70, 0x70, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x45, 0x0a, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x43, 0x6f, 0x72, 0x65, 0x45, 0x64, 0x32,
	0x35, 0x35, 0x31, 0x39, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x30, 0x22, 0x94, 0x01, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x12, 0x5d, 0x0a, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x50, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e,
	0x67, 0x56, 0x6f, 0x74, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x73, 0x0a, 0x18, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x53, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x57, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xf2,
	0x13, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x6e,
	0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x44, 0x0a, 0x08, 0x64,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x44,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x08, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x12, 0x38, 0x0a, 0x04, 0x72, 0x65, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x5f, 0x52, 0x65, 0x61, 0x6c, 0x52, 0x04, 0x72, 0x65, 0x61, 0x6c, 0x12, 0x5d, 0x0a, 0x10, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x48, 0x01, 0x52, 0x0e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x06, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x48, 0x00, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x49, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3a, 0x0a, 0x04, 0x62, 0x61, 0x62, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x61, 0x62, 0x65, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x04, 0x62,
	0x61, 0x62, 0x65, 0x12, 0x43, 0x0a, 0x07, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x72, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52,
	0x07, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x12, 0x46, 0x0a, 0x08, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x50, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x12, 0x43, 0x0a, 0x07, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x07, 0x76, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x47, 0x0a, 0x09, 0x62, 0x61, 0x67, 0x73, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x62, 0x61, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x47,
	0x0a, 0x09, 0x69, 0x6d, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x69,
	0x6d, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x43, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x48, 0x00, 0x52, 0x07, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x43, 0x0a, 0x07,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x46, 0x0a, 0x08, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52,
	0x08, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x12, 0x43, 0x0a, 0x07, 0x75, 0x74, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x07, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x5f,
	0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x6f, 0x74,
	0x69, 0x6e, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x6f, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x10, 0x63,
	0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x49, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52,
	0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x12, 0x6b, 0x0a, 0x15, 0x66, 0x65,
	0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48,
	0x00, 0x52, 0x14, 0x66, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x68, 0x0a, 0x14, 0x66, 0x65, 0x6c, 0x6c, 0x6f,
	0x77, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x64, 0x61, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x13, 0x66, 0x65,
	0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64,
	0x61, 0x12, 0x49, 0x0a, 0x09, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48,
	0x00, 0x52, 0x09, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x09,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x09, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x46, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52,
	0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x46, 0x0a, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73,
	0x69, 0x67, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x50, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x12, 0x7f,
	0x0a, 0x1d, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x50, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x48, 0x00, 0x52, 0x1a, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12,
	0x46, 0x0a, 0x08, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x75,
	0x6e, 0x74, 0x69, 0x65, 0x73, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x62,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x0e, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x69, 0x6c, 0x64,
	0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00,
	0x52, 0x0d, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x5c, 0x0a, 0x10, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f,
	0x6f, 0x6c, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x6f, 0x6c, 0x73, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x6e, 0x6f,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x3a, 0x0a,
	0x04, 0x67, 0x65, 0x61, 0x72, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x61, 0x72, 0x50, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x48, 0x00, 0x52, 0x04, 0x67, 0x65, 0x61, 0x72, 0x12, 0x59, 0x0a, 0x0f, 0x73, 0x74, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x50, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x12, 0x50, 0x0a, 0x0c, 0x67, 0x65, 0x61, 0x72, 0x5f, 0x76, 0x6f, 0x75,
	0x63, 0x68, 0x65, 0x72, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x61, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65,
	0x72, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x67, 0x65, 0x61, 0x72, 0x56,
	0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x42, 0x06, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x22, 0xbd, 0x02, 0x0a, 0x2d, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61,
	0x73, 0x65, 0x5f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x83, 0x01, 0x0a, 0x0c, 0x72, 0x61, 0x77, 0x5f, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x60, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61,
	0x73, 0x65, 0x5f, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x52, 0x61, 0x77, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b,
	0x72, 0x61, 0x77, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x85, 0x01, 0x0a, 0x07,
	0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6b, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x5f, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x07, 0x77, 0x69, 0x74, 0x6e,
	0x65, 0x73, 0x73, 0x22, 0x60, 0x0a, 0x13, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x42, 0x6f, 0x75, 0x6e,
	0x74, 0x69, 0x65, 0x73, 0x5f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x49, 0x0a, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74,
	0x69, 0x65, 0x73, 0x5f, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0x3b, 0x0a, 0x09, 0x42, 0x61, 0x62, 0x65, 0x5f, 0x53, 0x65,
	0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x31, 0x22, 0x71, 0x0a, 0x1f, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x53, 0x63,
	0x61, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x4e, 0x0a, 0x06, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x70, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x50, 0x65, 0x72,
	0x54, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x66,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x66, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x4c, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x54, 0x75, 0x70, 0x6c,
	0x65, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0x28, 0x0a,
	0x0e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x31, 0x12,
	0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0xf9, 0x01, 0x0a, 0x52, 0x45, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x70, 0x41,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x50, 0x65, 0x72, 0x54, 0x68, 0x69, 0x6e,
	0x67, 0x73, 0x50, 0x65, 0x72, 0x55, 0x31, 0x36, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x12, 0x73, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x31,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x54, 0x75, 0x70,
	0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x70, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x65, 0x74, 0x69, 0x63, 0x50, 0x65, 0x72, 0x54, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x65, 0x72,
	0x55, 0x31, 0x36, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x32, 0x22, 0xe8, 0x02, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x49, 0x64, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3f, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x39, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x5f, 0x52, 0x61, 0x77, 0x48, 0x00, 0x52, 0x03, 0x72, 0x61, 0x77, 0x12, 0x4b, 0x0a, 0x09, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x48, 0x00, 0x52, 0x09, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x12, 0x4b, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x32, 0x30, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x48, 0x00, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x32, 0x30, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x17,
	0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x22, 0x29, 0x0a, 0x0f, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x30, 0x22, 0xfe, 0x02, 0x0a, 0x0d, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x50, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x12, 0x74, 0x0a, 0x18, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65,
	0x71, 0x75, 0x69, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x5f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x45, 0x71, 0x75, 0x69, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c,
	0x48, 0x00, 0x52, 0x16, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x71, 0x75, 0x69, 0x76, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x8d, 0x01, 0x0a, 0x21, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x5f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x45, 0x71, 0x75, 0x69, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x1e, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x45, 0x71, 0x75, 0x69, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x5f, 0x0a, 0x11, 0x6e, 0x6f,
	0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x5f, 0x4e, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61,
	0x6c, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0f, 0x6e, 0x6f, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x06, 0x0a, 0x04, 0x63,
	0x61, 0x6c, 0x6c, 0x22, 0x25, 0x0a, 0x0b, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x52,
	0x61, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0xe7, 0x02, 0x0a, 0x0e, 0x56,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x36, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x49, 0x64, 0x48,
	0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x48, 0x00, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x39, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x52, 0x61, 0x77, 0x48, 0x00, 0x52, 0x03, 0x72, 0x61,
	0x77, 0x12, 0x4b, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33,
	0x32, 0x48, 0x00, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x12, 0x4b,
	0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x48, 0x00,
	0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x42, 0x07, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x1a, 0x0a, 0x18, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x22, 0x61, 0x0a, 0x19, 0x42, 0x61, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x50, 0x75, 0x74,
	0x49, 0x6e, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x4f, 0x66, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x44, 0x0a,
	0x07, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x67, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x5f, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x52, 0x07, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x65, 0x72, 0x22, 0x1d, 0x0a, 0x1b, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x6e,
	0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x56, 0x72, 0x66, 0x53, 0x6c, 0x6f,
	0x74, 0x73, 0x22, 0x88, 0x02, 0x0a, 0x1f, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x46,
	0x6f, 0x72, 0x63, 0x65, 0x56, 0x65, 0x73, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x40, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x61, 0x0a, 0x08, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x22, 0x97, 0x01,
	0x0a, 0x23, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x50, 0x72, 0x65, 0x66, 0x73, 0x12, 0x56, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69,
	0x63, 0x50, 0x65, 0x72, 0x54, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x65, 0x72, 0x62, 0x69, 0x6c,
	0x6c, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x22, 0xc1, 0x01, 0x0a, 0x1a, 0x56, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x56, 0x65, 0x73, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x40, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x61, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x50, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x22, 0x70, 0x0a, 0x1a, 0x46,
	0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x64, 0x61, 0x5f, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x12, 0x40, 0x0a, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x48, 0x32, 0x35, 0x36, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x6c,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x22, 0x92, 0x01,
	0x0a, 0x1b, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x65, 0x43, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x1b, 0x0a,
	0x09, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x07, 0x63, 0x75,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x5f,
	0x43, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x07, 0x63, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x66,
	0x65, 0x65, 0x22, 0x8d, 0x02, 0x0a, 0x15, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x04,
	0x6f, 0x70, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x4f, 0x70, 0x65, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x6f, 0x70,
	0x65, 0x6e, 0x12, 0x4d, 0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x12, 0x56, 0x0a, 0x0a, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x69, 0x6e, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73,
	0x5f, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x0a, 0x64,
	0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x69, 0x6e, 0x67, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x7d, 0x0a, 0x31, 0x49, 0x6d, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x50,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x6d, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x72, 0x32,
	0x35, 0x35, 0x31, 0x39, 0x41, 0x70, 0x70, 0x53, 0x72, 0x32, 0x35, 0x35, 0x31, 0x39, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x48, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x70, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x72, 0x32, 0x35, 0x35, 0x31, 0x39,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x30, 0x22, 0x13, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x43, 0x68, 0x69,
	0x6c, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x22, 0x35, 0x0a, 0x1d, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x64, 0x61, 0x5f, 0x4e, 0x75, 0x64, 0x67, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x64, 0x75, 0x6d, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x60, 0x0a,
	0x1c, 0x50, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x40, 0x0a,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x48, 0x32, 0x35, 0x36, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22,
	0x37, 0x0a, 0x1f, 0x43, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x55, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x43, 0x61,
	0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x22, 0x32, 0x0a, 0x18, 0x46, 0x65, 0x6c, 0x6c,
	0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x52, 0x61, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0x2b, 0x0a, 0x11,
	0x47, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0x63, 0x0a, 0x1c, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x43, 0x0a, 0x03, 0x77, 0x68, 0x6f,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x70, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x33, 0x32, 0x52, 0x03, 0x77, 0x68, 0x6f, 0x22, 0xf2,
	0x02, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x50, 0x61, 0x79, 0x65, 0x65,
	0x12, 0x42, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x5f, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x53, 0x74, 0x61, 0x73, 0x68, 0x48, 0x00, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x73, 0x68, 0x12, 0x4e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x04,
	0x6e, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x4e, 0x6f,
	0x6e, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x17, 0x0a, 0x15, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x50,
	0x75, 0x72, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x22, 0x28, 0x0a, 0x0e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x34, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0x21, 0x0a, 0x1f, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x50,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x22, 0x3b, 0x0a, 0x1c, 0x42, 0x6f, 0x75,
	0x6e, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x55, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x43, 0x75,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6f, 0x75,
	0x6e, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x6f,
	0x75, 0x6e, 0x74, 0x79, 0x49, 0x64, 0x22, 0x3f, 0x0a, 0x1c, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x79, 0x5f, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x49, 0x64, 0x22, 0x47, 0x0a, 0x2f, 0x46, 0x65, 0x6c, 0x6c, 0x6f,
	0x77, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f, 0x52,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x22, 0xf3, 0x04, 0x0a, 0x0f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x12, 0x57, 0x0a, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x5f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52,
	0x0c, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x51, 0x0a,
	0x0b, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x43, 0x61,
	0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x43, 0x61, 0x6c, 0x6c,
	0x12, 0x67, 0x0a, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x5f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x64,
	0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x11, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x61, 0x0a, 0x11, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x67, 0x0a, 0x13,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c,
	0x48, 0x00, 0x52, 0x11, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x41, 0x66, 0x74, 0x65,
	0x72, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x77, 0x0a, 0x19, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x41, 0x66, 0x74, 0x65, 0x72,
	0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x16, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x64, 0x41, 0x66, 0x74, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x06,
	0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x22, 0x50, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x41, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x4e, 0x75, 0x6c, 0x6c,
	0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0xf8, 0x01, 0x0a, 0x51, 0x45, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x55, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x56, 0x6f, 0x74,
	0x65, 0x73, 0x31, 0x33, 0x4c, 0x69, 0x73, 0x74, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x12, 0x73, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x31,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x54, 0x75, 0x70,
	0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x70, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x65, 0x74, 0x69, 0x63, 0x50, 0x65, 0x72, 0x54, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x65, 0x72,
	0x55, 0x31, 0x36, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x32, 0x22, 0xee, 0x02, 0x0a, 0x10, 0x42, 0x61, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x5f, 0x48, 0x65, 0x61, 0x76, 0x69, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x61, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x49, 0x64, 0x48, 0x00, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x40, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x67, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x5f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x3a, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x67, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x5f, 0x52, 0x61, 0x77, 0x48, 0x00, 0x52, 0x03, 0x72, 0x61, 0x77, 0x12,
	0x4c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61,
	0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32,
	0x48, 0x00, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x12, 0x4c, 0x0a,
	0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x67, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x48, 0x00,
	0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x42, 0x07, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x9e, 0x01, 0x0a, 0x24, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x78, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x17, 0x0a,
	0x07, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x5d, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x41, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x50, 0x65, 0x72, 0x54, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x50,
	0x65, 0x72, 0x62, 0x69, 0x6c, 0x6c, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x74, 0x0a, 0x1f, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x5f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x44,
	0x65, 0x61, 0x74, 0x68, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x3b, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x44, 0x65, 0x73, 0x74, 0x52,
	0x04, 0x64, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x15, 0x0a, 0x13, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x22, 0xb9, 0x01, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x12, 0x34, 0x0a,
	0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6f, 0x74, 0x48, 0x00, 0x52, 0x04, 0x72,
	0x6f, 0x6f, 0x74, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x48, 0x00, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12,
	0x34, 0x0a, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6e, 0x65, 0x48, 0x00, 0x52,
	0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xf8,
	0x01, 0x0a, 0x51, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x54, 0x75,
	0x70, 0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x31, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x75, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x12, 0x73, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61,
	0x73, 0x65, 0x5f, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x70,
	0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x50, 0x65, 0x72, 0x54, 0x68, 0x69,
	0x6e, 0x67, 0x73, 0x50, 0x65, 0x72, 0x55, 0x31, 0x36, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x31, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x22, 0xb5, 0x01, 0x0a, 0x37, 0x45, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x53, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x69,
	0x6d, 0x75, 0x6d, 0x55, 0x6e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x65, 0x0a, 0x10, 0x6d, 0x61, 0x79, 0x62, 0x65, 0x5f, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x4e, 0x70, 0x6f,
	0x73, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x6d, 0x61, 0x79, 0x62, 0x65,
	0x4e, 0x65, 0x78, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x88, 0x01, 0x01, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x6d, 0x61, 0x79, 0x62, 0x65, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x22, 0xfb, 0x01, 0x0a, 0x1b, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x4d, 0x69, 0x6e, 0x4a, 0x6f, 0x69, 0x6e, 0x42, 0x6f, 0x6e,
	0x64, 0x12, 0x44, 0x0a, 0x04, 0x6e, 0x6f, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x4e, 0x6f, 0x6f, 0x70, 0x48,
	0x00, 0x52, 0x04, 0x6e, 0x6f, 0x6f, 0x70, 0x12, 0x41, 0x0a, 0x03, 0x73, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f,
	0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x03, 0x73, 0x65, 0x74, 0x12, 0x4a, 0x0a, 0x06, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x00, 0x52, 0x06,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xd5, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x61, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x5f,
	0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4e, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x70, 0x72, 0x69,
	0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x73, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6b, 0x65, 0x65, 0x70,
	0x5f, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6b, 0x65,
	0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x22, 0x3d, 0x0a, 0x1c, 0x47, 0x72, 0x61, 0x6e, 0x64,
	0x70, 0x61, 0x5f, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x54, 0x72, 0x69, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x69, 0x65, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x74, 0x72, 0x69,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x2b, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x12, 0x16, 0x0a, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x30, 0x22, 0x38, 0x0a, 0x0c, 0x47, 0x65, 0x61, 0x72, 0x5f, 0x52, 0x75, 0x6e, 0x43,
	0x61, 0x6c, 0x6c, 0x12, 0x1c, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x67, 0x61, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x47, 0x61, 0x73, 0x88, 0x01,
	0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x67, 0x61, 0x73, 0x22, 0x30, 0x0a,
	0x18, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22,
	0x1b, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x33, 0x58, 0x22, 0xb2, 0x03, 0x0a,
	0x18, 0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x57, 0x68, 0x6f, 0x12, 0x43, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x49, 0x64, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4c,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73,
	0x68, 0x69, 0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x46, 0x0a, 0x03,
	0x72, 0x61, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x52, 0x61, 0x77, 0x48, 0x00, 0x52,
	0x03, 0x72, 0x61, 0x77, 0x12, 0x58, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33,
	0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33,
	0x32, 0x48, 0x00, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x12, 0x58,
	0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x6c,
	0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x48, 0x00, 0x52, 0x09, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xfb, 0x13, 0x0a, 0x10, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x3d, 0x0a, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x48, 0x00, 0x52,
	0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x12, 0x3d, 0x0a, 0x04, 0x72, 0x61, 0x77, 0x30, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x30, 0x48, 0x00, 0x52, 0x04,
	0x72, 0x61, 0x77, 0x30, 0x12, 0x3d, 0x0a, 0x04, 0x72, 0x61, 0x77, 0x31, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x48, 0x00, 0x52, 0x04, 0x72,
	0x61, 0x77, 0x31, 0x12, 0x3d, 0x0a, 0x04, 0x72, 0x61, 0x77, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61,
	0x77, 0x32, 0x12, 0x3d, 0x0a, 0x04, 0x72, 0x61, 0x77, 0x33, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x33, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61, 0x77,
	0x33, 0x12, 0x3d, 0x0a, 0x04, 0x72, 0x61, 0x77, 0x34, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x34, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61, 0x77, 0x34,
	0x12, 0x3d, 0x0a, 0x04, 0x72, 0x61, 0x77, 0x35, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x35, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61, 0x77, 0x35, 0x12,
	0x3d, 0x0a, 0x04, 0x72, 0x61, 0x77, 0x36, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x52, 0x61, 0x77, 0x36, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61, 0x77, 0x36, 0x12, 0x3d,
	0x0a, 0x04, 0x72, 0x61, 0x77, 0x37, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x52, 0x61, 0x77, 0x37, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61, 0x77, 0x37, 0x12, 0x3d, 0x0a,
	0x04, 0x72, 0x61, 0x77, 0x38, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x52, 0x61, 0x77, 0x38, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61, 0x77, 0x38, 0x12, 0x3d, 0x0a, 0x04,
	0x72, 0x61, 0x77, 0x39, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52,
	0x61, 0x77, 0x39, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61, 0x77, 0x39, 0x12, 0x40, 0x0a, 0x05, 0x72,
	0x61, 0x77, 0x31, 0x30, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52,
	0x61, 0x77, 0x31, 0x30, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x31, 0x30, 0x12, 0x40, 0x0a,
	0x05, 0x72, 0x61, 0x77, 0x31, 0x31, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x52, 0x61, 0x77, 0x31, 0x31, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x31, 0x31, 0x12,
	0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x31, 0x32, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x32, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x31,
	0x32, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x31, 0x33, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x33, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61,
	0x77, 0x31, 0x33, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x31, 0x34, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x34, 0x48, 0x00, 0x52, 0x05,
	0x72, 0x61, 0x77, 0x31, 0x34, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x31, 0x35, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x35, 0x48, 0x00,
	0x52, 0x05, 0x72, 0x61, 0x77, 0x31, 0x35, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x31, 0x36,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x36,
	0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x31, 0x36, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77,
	0x31, 0x37, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77,
	0x31, 0x37, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x31, 0x37, 0x12, 0x40, 0x0a, 0x05, 0x72,
	0x61, 0x77, 0x31, 0x38, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52,
	0x61, 0x77, 0x31, 0x38, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x31, 0x38, 0x12, 0x40, 0x0a,
	0x05, 0x72, 0x61, 0x77, 0x31, 0x39, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x52, 0x61, 0x77, 0x31, 0x39, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x31, 0x39, 0x12,
	0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x32, 0x30, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x30, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x32,
	0x30, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x32, 0x31, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x31, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61,
	0x77, 0x32, 0x31, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x32, 0x32, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x32, 0x48, 0x00, 0x52, 0x05,
	0x72, 0x61, 0x77, 0x32, 0x32, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x32, 0x33, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x33, 0x48, 0x00,
	0x52, 0x05, 0x72, 0x61, 0x77, 0x32, 0x33, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x32, 0x34,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x34,
	0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x32, 0x34, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77,
	0x32, 0x35, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77,
	0x32, 0x35, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x32, 0x35, 0x12, 0x40, 0x0a, 0x05, 0x72,
	0x61, 0x77, 0x32, 0x36, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52,
	0x61, 0x77, 0x32, 0x36, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x32, 0x36, 0x12, 0x40, 0x0a,
	0x05, 0x72, 0x61, 0x77, 0x32, 0x37, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x52, 0x61, 0x77, 0x32, 0x37, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x32, 0x37, 0x12,
	0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x32, 0x38, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x38, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x32,
	0x38, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x32, 0x39, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x39, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61,
	0x77, 0x32, 0x39, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x33, 0x30, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x33, 0x30, 0x48, 0x00, 0x52, 0x05,
	0x72, 0x61, 0x77, 0x33, 0x30, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x33, 0x31, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x33, 0x31, 0x48, 0x00,
	0x52, 0x05, 0x72, 0x61, 0x77, 0x33, 0x31, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x33, 0x32,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x33, 0x32,
	0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x33, 0x32, 0x12, 0x53, 0x0a, 0x0c, 0x62, 0x6c, 0x61,
	0x6b, 0x65, 0x5f, 0x74, 0x77, 0x6f, 0x32, 0x35, 0x36, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x42, 0x6c, 0x61, 0x6b, 0x65, 0x54, 0x77, 0x6f, 0x32, 0x35, 0x36, 0x48,
	0x00, 0x52, 0x0b, 0x62, 0x6c, 0x61, 0x6b, 0x65, 0x54, 0x77, 0x6f, 0x32, 0x35, 0x36, 0x12, 0x43,
	0x0a, 0x06, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x48, 0x00, 0x52, 0x06, 0x73, 0x68, 0x61,
	0x32, 0x35, 0x36, 0x12, 0x4c, 0x0a, 0x09, 0x6b, 0x65, 0x63, 0x63, 0x61, 0x6b, 0x32, 0x35, 0x36,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x4b, 0x65, 0x63, 0x63, 0x61,
	0x6b, 0x32, 0x35, 0x36, 0x48, 0x00, 0x52, 0x09, 0x6b, 0x65, 0x63, 0x63, 0x61, 0x6b, 0x32, 0x35,
	0x36, 0x12, 0x53, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x65, 0x32, 0x35,
	0x36, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x53, 0x68, 0x61, 0x54,
	0x68, 0x72, 0x65, 0x65, 0x32, 0x35, 0x36, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x54, 0x68,
	0x72, 0x65, 0x65, 0x32, 0x35, 0x36, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xbc, 0x02, 0x0a, 0x1f, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f,
	0x6f, 0x6c, 0x73, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x43,
	0x61, 0x6c, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x08,
	0x6e, 0x65, 0x77, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x4e, 0x65, 0x77, 0x52, 0x6f, 0x6f,
	0x74, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x5b, 0x0a, 0x0d, 0x6e, 0x65,
	0x77, 0x5f, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x4e, 0x65, 0x77,
	0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x4e, 0x6f,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x55, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x5f, 0x62,
	0x6f, 0x75, 0x6e, 0x63, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x4e, 0x65, 0x77, 0x42, 0x6f, 0x75, 0x6e, 0x63,
	0x65, 0x72, 0x52, 0x0a, 0x6e, 0x65, 0x77, 0x42, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x72, 0x22, 0x3d,
	0x0a, 0x25, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f, 0x52, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x0f, 0x0a,
	0x0d, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x73, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x22, 0xcb,
	0x01, 0x0a, 0x15, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f,
	0x6c, 0x73, 0x5f, 0x45, 0x78, 0x74, 0x72, 0x61, 0x12, 0x5a, 0x0a, 0x0c, 0x66, 0x72, 0x65, 0x65,
	0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x46, 0x72, 0x65, 0x65, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x66, 0x72, 0x65, 0x65, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x4d, 0x0a, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73,
	0x5f, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x48, 0x00, 0x52, 0x07, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x93, 0x02, 0x0a,
	0x15, 0x47, 0x65, 0x61, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x4b, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x70, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x33, 0x32, 0x52, 0x07, 0x73, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x43, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x54, 0x72, 0x65, 0x65,
	0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x6f, 0x64, 0x65,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x73, 0x22, 0x12, 0x0a, 0x10, 0x47, 0x65, 0x61, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65,
	0x72, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x22, 0x6a, 0x0a, 0x1e, 0x53, 0x70, 0x43, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x41, 0x70, 0x70, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x48, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x43, 0x6f, 0x72, 0x65, 0x45, 0x64, 0x32, 0x35, 0x35, 0x31,
	0x39, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x30, 0x22, 0x60, 0x0a, 0x0f, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x5f, 0x50, 0x72,
	0x65, 0x76, 0x6f, 0x74, 0x65, 0x12, 0x4d, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x70, 0x61,
	0x45, 0x71, 0x75, 0x69, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x30, 0x22, 0xb2, 0x01, 0x0a, 0x1a, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x5f, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43,
	0x61, 0x6c, 0x6c, 0x12, 0x41, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x44, 0x65, 0x73, 0x74, 0x52, 0x04, 0x64,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x62, 0x0a, 0x1a, 0x50, 0x72, 0x65,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x44, 0x0a, 0x06, 0x68, 0x61, 0x73, 0x68, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x48, 0x32, 0x35, 0x36, 0x52, 0x06, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x22, 0x29, 0x0a,
	0x0f, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30,
	0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0x6f, 0x0a, 0x24, 0x4e, 0x6f, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x43, 0x6c, 0x61, 0x69,
	0x6d, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c,
	0x12, 0x47, 0x0a, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x43, 0x6f, 0x72,
	0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x33, 0x32, 0x52, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x22, 0x28, 0x0a, 0x12, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x5f, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0xea, 0x02, 0x0a, 0x0c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x5f, 0x57, 0x68, 0x6f, 0x12, 0x37, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x5f, 0x49, 0x64, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x5f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x3a, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x5f, 0x52, 0x61, 0x77, 0x48, 0x00, 0x52, 0x03, 0x72, 0x61, 0x77, 0x12, 0x4c, 0x0a, 0x09, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x48, 0x00, 0x52, 0x09,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x12, 0x4c, 0x0a, 0x09, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x48, 0x00, 0x52, 0x09, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0xbd, 0x04, 0x0a, 0x0f, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x50, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x12, 0x67, 0x0a, 0x13, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x68, 0x69,
	0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74,
	0x43, 0x61, 0x6c, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x11, 0x77, 0x68, 0x69, 0x74,
	0x65, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x80, 0x01,
	0x0a, 0x1c, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69,
	0x73, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x43,
	0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x19, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x57, 0x68, 0x69,
	0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x61, 0x6c, 0x6c,
	0x12, 0x86, 0x01, 0x0a, 0x1e, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x77, 0x68,
	0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x44,
	0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74,
	0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x1b, 0x64, 0x69,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x65,
	0x64, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0xac, 0x01, 0x0a, 0x2c, 0x64, 0x69,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74,
	0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x70, 0x72, 0x65,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x4b, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x68, 0x69, 0x74,
	0x65, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x57, 0x68,
	0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x57, 0x69, 0x74,
	0x68, 0x50, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52,
	0x27, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69,
	0x73, 0x74, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x50, 0x72, 0x65, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x06, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c,
	0x22, 0x28, 0x0a, 0x0e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77,
	0x32, 0x36, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0x7e, 0x0a, 0x1c, 0x4e, 0x6f,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x53, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f,
	0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x6f, 0x6f,
	0x6c, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x2d, 0x0a, 0x13, 0x53, 0x70,
	0x43, 0x6f, 0x72, 0x65, 0x45, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0x3e, 0x0a, 0x1b, 0x54, 0x72, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x79, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x61, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x49, 0x64, 0x22, 0x2c, 0x0a, 0x12, 0x42, 0x61, 0x67,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x12,
	0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0x4c, 0x0a, 0x1c, 0x53, 0x74, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x5f, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x55, 0x6e, 0x62, 0x6f, 0x6e,
	0x64, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x75, 0x6d, 0x5f, 0x73,
	0x6c, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x70, 0x61, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x53, 0x70, 0x61, 0x6e, 0x73, 0x22, 0x3f, 0x0a, 0x27, 0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73,
	0x68, 0x69, 0x70, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f, 0x4e, 0x75, 0x64,
	0x67, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x75, 0x6d, 0x43, 0x61, 0x6c, 0x6c,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x26, 0x0a, 0x0c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0x56,
	0x0a, 0x1f, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c,
	0x73, 0x5f, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x43, 0x61, 0x6c,
	0x6c, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x30, 0x0a, 0x16, 0x53, 0x70, 0x43, 0x6f, 0x72, 0x65,
	0x45, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0x4a, 0x0a, 0x0e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f, 0x56, 0x6f, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x30, 0x22, 0x27, 0x0a, 0x0d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x52, 0x61, 0x77, 0x36, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0x3b, 0x0a,
	0x23, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f, 0x52, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x43, 0x61, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x70, 0x0a, 0x23, 0x57, 0x68,
	0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x57, 0x68,
	0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x61, 0x6c,
	0x6c, 0x12, 0x49, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x48, 0x32,
	0x35, 0x36, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x48, 0x61, 0x73, 0x68, 0x22, 0x28, 0x0a, 0x0e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x37, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0xcc, 0x01, 0x0a, 0x3c, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x53, 0x70, 0x43, 0x6f, 0x72, 0x65, 0x43,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x33, 0x32,
	0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x49, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x70, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x33, 0x32, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x30, 0x12, 0x41, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x52, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x31, 0x22, 0xa3, 0x01, 0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x38, 0x0a, 0x04, 0x72, 0x65, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x52, 0x65, 0x61, 0x6c, 0x52, 0x04, 0x72, 0x65, 0x61, 0x6c,
	0x12, 0x49, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x48, 0x32, 0x35,
	0x36, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x48, 0x61, 0x73, 0x68, 0x22, 0xc3, 0x06, 0x0a, 0x13,
	0x43, 0x68, 0x69, 0x6c, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x50, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x12, 0x6f, 0x0a, 0x15, 0x61, 0x64, 0x64, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68,
	0x69, 0x6c, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x41, 0x64, 0x64, 0x43,
	0x68, 0x69, 0x6c, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00,
	0x52, 0x12, 0x61, 0x64, 0x64, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x79,
	0x43, 0x61, 0x6c, 0x6c, 0x12, 0x6e, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x5f,
	0x63, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68,
	0x69, 0x6c, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x65, 0x43, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00,
	0x52, 0x12, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x43, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x43, 0x61, 0x6c, 0x6c, 0x12, 0x6b, 0x0a, 0x13, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x63,
	0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x69,
	0x6c, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x41, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x43, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x11,
	0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x43, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x61, 0x6c,
	0x6c, 0x12, 0x71, 0x0a, 0x15, 0x75, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x63, 0x75,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3b, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x69, 0x6c,
	0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x55, 0x6e, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x43, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52,
	0x13, 0x75, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x43, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x43, 0x61, 0x6c, 0x6c, 0x12, 0x75, 0x0a, 0x17, 0x61, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x41,
	0x77, 0x61, 0x72, 0x64, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x43,
	0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x14, 0x61, 0x77, 0x61, 0x72, 0x64, 0x43, 0x68, 0x69, 0x6c,
	0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x75, 0x0a, 0x17, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x74,
	0x79, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x42, 0x6f, 0x75,
	0x6e, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x43, 0x68, 0x69, 0x6c, 0x64,
	0x42, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x14, 0x63, 0x6c,
	0x61, 0x69, 0x6d, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x43, 0x61,
	0x6c, 0x6c, 0x12, 0x75, 0x0a, 0x17, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x68, 0x69, 0x6c, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x43, 0x61, 0x6c,
	0x6c, 0x48, 0x00, 0x52, 0x14, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x42,
	0x6f, 0x75, 0x6e, 0x74, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x06, 0x0a, 0x04, 0x63, 0x61, 0x6c,
	0x6c, 0x22, 0x6c, 0x0a, 0x10, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f, 0x49,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x58, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x56, 0x65, 0x63, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x65, 0x64, 0x56, 0x65, 0x63, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22,
	0xb7, 0x13, 0x0a, 0x1b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x77, 0x68, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x77,
	0x68, 0x65, 0x6e, 0x12, 0x61, 0x0a, 0x0e, 0x6d, 0x61, 0x79, 0x62, 0x65, 0x5f, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x5f, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x55, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x48, 0x01, 0x52, 0x0d, 0x6d, 0x61, 0x79, 0x62, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x69, 0x63, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x40, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x06, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x12, 0x49, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x50, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x48, 0x00, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x3a, 0x0a, 0x04, 0x62, 0x61, 0x62, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x62, 0x65, 0x50, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x04, 0x62, 0x61, 0x62, 0x65, 0x12, 0x43, 0x0a, 0x07, 0x67,
	0x72, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x50,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x07, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x70, 0x61,
	0x12, 0x46, 0x0a, 0x08, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x07, 0x76, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x48, 0x00, 0x52, 0x07, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x47, 0x0a,
	0x09, 0x62, 0x61, 0x67, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x67, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x62, 0x61,
	0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x09, 0x69, 0x6d, 0x5f, 0x6f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6d, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12,
	0x43, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x07, 0x73, 0x74, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x12, 0x43, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00,
	0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x08, 0x74, 0x72, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x50,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x79, 0x12, 0x43, 0x0a, 0x07, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x74,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x07, 0x75,
	0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x5f, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x49, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x64, 0x61, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x50,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x64, 0x61, 0x12, 0x6b, 0x0a, 0x15, 0x66, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70,
	0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x6c,
	0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x14, 0x66, 0x65, 0x6c, 0x6c, 0x6f,
	0x77, 0x73, 0x68, 0x69, 0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x68, 0x0a, 0x14, 0x66, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73,
	0x68, 0x69, 0x70, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x50, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x48, 0x00, 0x52, 0x13, 0x66, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x12, 0x49, 0x0a, 0x09, 0x77, 0x68, 0x69,
	0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73,
	0x74, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x09, 0x77, 0x68, 0x69, 0x74, 0x65,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x48, 0x00, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x12,
	0x46, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x70,
	0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x46, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x3d, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x50,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x46,
	0x0a, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x73, 0x69, 0x67, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x12, 0x7f, 0x0a, 0x1d, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x1a, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x08, 0x62, 0x6f, 0x75, 0x6e, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x50, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x56, 0x0a, 0x0e, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73,
	0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x42,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x10, 0x6e, 0x6f, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x50, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x3a, 0x0a, 0x04, 0x67, 0x65, 0x61, 0x72, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x61, 0x72, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x04, 0x67, 0x65, 0x61,
	0x72, 0x12, 0x59, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x74,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x50, 0x0a, 0x0c,
	0x67, 0x65, 0x61, 0x72, 0x5f, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x61, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48,
	0x00, 0x52, 0x0b, 0x67, 0x65, 0x61, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x42, 0x06,
	0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6d, 0x61, 0x79, 0x62, 0x65,
	0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x22, 0x27, 0x0a, 0x0d, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x34, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x30, 0x22, 0x1c, 0x0a, 0x1a, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x43,
	0x6c, 0x65, 0x61, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x61, 0x6c, 0x6c,
	0x22, 0xaa, 0x01, 0x0a, 0x41, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x5f,
	0x54, 0x75, 0x70, 0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x70, 0x41, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x50, 0x65, 0x72, 0x54, 0x68, 0x69, 0x6e, 0x67, 0x73,
	0x50, 0x65, 0x72, 0x55, 0x31, 0x36, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x12, 0x4d,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x41, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x50, 0x65, 0x72, 0x54, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x50,
	0x65, 0x72, 0x55, 0x31, 0x36, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x22, 0x3e, 0x0a,
	0x1b, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x5f, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x49, 0x64, 0x22, 0x54, 0x0a,
	0x18, 0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x64, 0x61, 0x5f, 0x56, 0x6f, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x52, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x30, 0x22, 0x1e, 0x0a, 0x1c, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x65, 0x64, 0x22, 0x48, 0x0a, 0x2e, 0x47, 0x65, 0x61, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68,
	0x65, 0x72, 0x5f, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x47, 0x65, 0x61, 0x72, 0x56, 0x6f, 0x75,
	0x63, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x56, 0x6f, 0x75, 0x63,
	0x68, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0x8c, 0x01,
	0x0a, 0x16, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x70,
	0x61, 0x50, 0x72, 0x65, 0x76, 0x6f, 0x74, 0x65, 0x12, 0x4d, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x48, 0x32, 0x35, 0x36, 0x52, 0x0a, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xf2, 0x01, 0x0a,
	0x18, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x44, 0x0a, 0x06, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12,
	0x47, 0x0a, 0x07, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x73, 0x48, 0x00, 0x52,
	0x07, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x3e, 0x0a, 0x04, 0x76, 0x6f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f, 0x56, 0x6f, 0x69, 0x64,
	0x48, 0x00, 0x52, 0x04, 0x76, 0x6f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x40, 0x0a, 0x14, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x68, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x77, 0x68, 0x65, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x22, 0xdd, 0x02, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x44, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x5f, 0x49, 0x64, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x37, 0x0a, 0x03, 0x72,
	0x61, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x48, 0x00, 0x52,
	0x03, 0x72, 0x61, 0x77, 0x12, 0x49, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33,
	0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x33, 0x32, 0x48, 0x00, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x12,
	0x49, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x48, 0x00, 0x52,
	0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x60, 0x0a, 0x1e, 0x47, 0x65, 0x61, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68,
	0x65, 0x72, 0x5f, 0x43, 0x61, 0x6c, 0x6c, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x3e, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x61, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x43, 0x61, 0x6c, 0x6c, 0x52,
	0x04, 0x63, 0x61, 0x6c, 0x6c, 0x22, 0x4e, 0x0a, 0x10, 0x47, 0x65, 0x61, 0x72, 0x56, 0x6f, 0x75,
	0x63, 0x68, 0x65, 0x72, 0x5f, 0x53, 0x6f, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x54, 0x72, 0x65, 0x65, 0x53, 0x65, 0x74, 0x52, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0x61, 0x0a, 0x19, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x41, 0x64, 0x64, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x72, 0x43, 0x61,
	0x6c, 0x6c, 0x12, 0x44, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x39, 0x0a, 0x1a, 0x42, 0x6f, 0x75, 0x6e,
	0x74, 0x69, 0x65, 0x73, 0x5f, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x42, 0x6f, 0x75, 0x6e,
	0x74, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x6f, 0x75, 0x6e, 0x74,
	0x79, 0x49, 0x64, 0x22, 0x33, 0x0a, 0x19, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30,
	0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0x15, 0x0a, 0x13, 0x47, 0x65, 0x61, 0x72,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x22,
	0x2c, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x5f, 0x52, 0x61, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0x28, 0x0a,
	0x0e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x32, 0x12,
	0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0x5a, 0x0a, 0x19, 0x42, 0x61, 0x62, 0x65, 0x5f,
	0x50, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x43, 0x61, 0x6c, 0x6c, 0x12, 0x3d, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x61, 0x62, 0x65, 0x5f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x22, 0x44, 0x0a, 0x22, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x49,
	0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x2a, 0x0a, 0x12, 0x53, 0x74, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x52, 0x65, 0x62, 0x6f, 0x6e, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x1b, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x32, 0x58, 0x22, 0x26, 0x0a, 0x0c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f,
	0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0x5d, 0x0a, 0x16, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x5f, 0x4b, 0x69, 0x6c, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x43, 0x61, 0x6c, 0x6c, 0x12, 0x43, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x5f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4b, 0x65, 0x79, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x22, 0xdd, 0x01, 0x0a, 0x16, 0x49, 0x6d,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74,
	0x43, 0x61, 0x6c, 0x6c, 0x12, 0x58, 0x0a, 0x09, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6d, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x50, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x49, 0x6d, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62,
	0x65, 0x61, 0x74, 0x52, 0x09, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x69,
	0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x4b, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x6d, 0x4f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x53, 0x72, 0x32, 0x35, 0x35, 0x31, 0x39, 0x41, 0x70, 0x70, 0x53, 0x72,
	0x32, 0x35, 0x35, 0x31, 0x39, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x45, 0x0a, 0x1d, 0x46, 0x65, 0x6c,
	0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x56, 0x6f, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f,
	0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x6c, 0x6c, 0x12, 0x10,
	0x0a, 0x03, 0x61, 0x79, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x79, 0x65,
	0x22, 0xee, 0x02, 0x0a, 0x10, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x43, 0x75,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x37, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x75,
	0x6e, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x49, 0x64, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65,
	0x73, 0x5f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x3a, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65,
	0x73, 0x5f, 0x52, 0x61, 0x77, 0x48, 0x00, 0x52, 0x03, 0x72, 0x61, 0x77, 0x12, 0x4c, 0x0a, 0x09,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x74,
	0x69, 0x65, 0x73, 0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x48, 0x00, 0x52,
	0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x12, 0x4c, 0x0a, 0x09, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65,
	0x73, 0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x48, 0x00, 0x52, 0x09, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x14, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x22, 0x2c, 0x0a, 0x12, 0x54, 0x72, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x79, 0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0x34, 0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x33, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0xc1, 0x08, 0x0a, 0x19,
	0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x64, 0x61, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x5b, 0x0a, 0x0b, 0x73, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77,
	0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x87, 0x01, 0x0a, 0x1b, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68,
	0x69, 0x70, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x18, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x44, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x61, 0x6c, 0x6c,
	0x12, 0x8a, 0x01, 0x0a, 0x1c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x64, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x63, 0x61, 0x6c,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x44, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x61, 0x6c, 0x6c,
	0x48, 0x00, 0x52, 0x19, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x5b, 0x0a,
	0x0b, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x38, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65,
	0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64,
	0x61, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0a,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x55, 0x0a, 0x09, 0x6b, 0x69,
	0x6c, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73,
	0x68, 0x69, 0x70, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f, 0x4b, 0x69, 0x6c,
	0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x08, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x61, 0x6c,
	0x6c, 0x12, 0x77, 0x0a, 0x15, 0x6e, 0x75, 0x64, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x64, 0x75, 0x6d, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x41, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x6c, 0x6c,
	0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f,
	0x4e, 0x75, 0x64, 0x67, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x75, 0x6d, 0x43,
	0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x13, 0x6e, 0x75, 0x64, 0x67, 0x65, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x64, 0x75, 0x6d, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x7b, 0x0a, 0x17, 0x6f, 0x6e,
	0x65, 0x5f, 0x66, 0x65, 0x77, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69,
	0x70, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f, 0x4f, 0x6e, 0x65, 0x46, 0x65,
	0x77, 0x65, 0x72, 0x44, 0x65, 0x63, 0x69, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x6c, 0x6c, 0x48,
	0x00, 0x52, 0x14, 0x6f, 0x6e, 0x65, 0x46, 0x65, 0x77, 0x65, 0x72, 0x44, 0x65, 0x63, 0x69, 0x64,
	0x69, 0x6e, 0x67, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x90, 0x01, 0x0a, 0x1e, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x49, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x6c, 0x6c,
	0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f,
	0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x1b, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x6b, 0x0a, 0x11, 0x73, 0x65,
	0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x64, 0x61, 0x5f, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x06, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x22,
	0x6b, 0x0a, 0x19, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x53, 0x65, 0x74, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x38, 0x0a, 0x03, 0x6e, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x4e, 0x65, 0x77, 0x52, 0x03, 0x6e, 0x65, 0x77, 0x22, 0x2b, 0x0a, 0x11,
	0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33,
	0x32, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0x55, 0x0a, 0x14, 0x53, 0x74, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x53, 0x65, 0x74, 0x50, 0x61, 0x79, 0x65, 0x65, 0x43, 0x61, 0x6c,
	0x6c, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61, 0x79, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x5f, 0x50, 0x61, 0x79, 0x65, 0x65, 0x52, 0x05, 0x70, 0x61, 0x79, 0x65, 0x65,
	0x22, 0xe0, 0x01, 0x0a, 0x18, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x4d, 0x69, 0x6e,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x6f, 0x6e, 0x64, 0x12, 0x3c, 0x0a,
	0x04, 0x6e, 0x6f, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x4e,
	0x6f, 0x6f, 0x70, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x6f, 0x6f, 0x70, 0x12, 0x39, 0x0a, 0x03, 0x73,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x53, 0x65, 0x74, 0x48,
	0x00, 0x52, 0x03, 0x73, 0x65, 0x74, 0x12, 0x42, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x5e, 0x0a, 0x19, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x4b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x61, 0x6c, 0x6c,
	0x12, 0x41, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x06, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x22, 0xd0, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x61, 0x72, 0x5f, 0x53, 0x65, 0x6e,
	0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x4e, 0x0a, 0x0b, 0x72, 0x65,
	0x70, 0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x70, 0x72, 0x69, 0x6d,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x52,
	0x09, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6b, 0x65, 0x65, 0x70, 0x5f,
	0x61, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6b, 0x65, 0x65,
	0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x22, 0x2e, 0x0a, 0x14, 0x53, 0x70, 0x43, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0x2c, 0x0a, 0x12, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74,
	0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x48, 0x32, 0x35, 0x36, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x30, 0x22, 0x2e, 0x0a, 0x14, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x42, 0x6c, 0x61, 0x6b, 0x65, 0x54, 0x77, 0x6f, 0x32, 0x35, 0x36, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x30, 0x22, 0x56, 0x0a, 0x1f, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73,
	0x5f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6f, 0x75, 0x6e, 0x74,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x6f, 0x75, 0x6e,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x29, 0x0a, 0x13,
	0x47, 0x65, 0x61, 0x72, 0x5f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x43,
	0x61, 0x6c, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x27, 0x0a, 0x0d, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30,
	0x22, 0xf8, 0x01, 0x0a, 0x51, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x5f,
	0x54, 0x75, 0x70, 0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x50, 0x68, 0x61, 0x73, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x31, 0x36, 0x4c, 0x69, 0x73, 0x74,
	0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x12, 0x73,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5b,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x5f, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x53, 0x70, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x50, 0x65, 0x72, 0x54,
	0x68, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x65, 0x72, 0x55, 0x31, 0x36, 0x52, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x22, 0xed, 0x02, 0x0a, 0x0f,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x37, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f,
	0x49, 0x64, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3a, 0x0a, 0x03, 0x72, 0x61,
	0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x52, 0x61, 0x77, 0x48,
	0x00, 0x52, 0x03, 0x72, 0x61, 0x77, 0x12, 0x4c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x33, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x48, 0x00, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x33, 0x32, 0x12, 0x4c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32,
	0x30, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x32, 0x30, 0x48, 0x00, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x32, 0x30, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x63, 0x0a, 0x12, 0x42,
	0x61, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x52, 0x65, 0x62, 0x61, 0x67, 0x43, 0x61, 0x6c,
	0x6c, 0x12, 0x4d, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x61, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x44, 0x69, 0x73, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x22, 0x31, 0x0a, 0x1d, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x53, 0x65, 0x74, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x61, 0x6c,
	0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x65, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6e, 0x65, 0x77, 0x22, 0x56, 0x0a, 0x0e, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x5f,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x44, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x5f, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x4e,
	0x75, 0x6c, 0x6c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0xa8, 0x05, 0x0a, 0x1a,
	0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x66, 0x0a, 0x0f, 0x61, 0x64,
	0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x41, 0x64, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x61, 0x6c,
	0x6c, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x64, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x61,
	0x6c, 0x6c, 0x12, 0x72, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x40, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x6c, 0x6c, 0x6f,
	0x77, 0x73, 0x68, 0x69, 0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x61, 0x6c,
	0x6c, 0x48, 0x00, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x6f, 0x0a, 0x12, 0x64, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65,
	0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x44, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43,
	0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x10, 0x64, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x6f, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x56, 0x0a, 0x09, 0x76, 0x6f, 0x74, 0x65,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69,
	0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x56, 0x6f, 0x74, 0x65,
	0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x08, 0x76, 0x6f, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c,
	0x12, 0x6c, 0x0a, 0x11, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x5f, 0x70, 0x6f, 0x6c, 0x6c,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69,
	0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x43, 0x6c, 0x65, 0x61,
	0x6e, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0f, 0x63,
	0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x06,
	0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x22, 0xe0, 0x04, 0x0a, 0x1d, 0x53, 0x74, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x5f, 0x53, 0x65, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x60, 0x0a, 0x12, 0x6d, 0x69, 0x6e, 0x5f,
	0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x62, 0x6f, 0x6e, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x4d, 0x69, 0x6e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x6f, 0x72, 0x42, 0x6f, 0x6e, 0x64, 0x52, 0x10, 0x6d, 0x69, 0x6e, 0x4e, 0x6f, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x6f, 0x6e, 0x64, 0x12, 0x60, 0x0a, 0x12, 0x6d, 0x69,
	0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x62, 0x6f, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x4d, 0x69, 0x6e, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x6f, 0x6e, 0x64, 0x52, 0x10, 0x6d, 0x69, 0x6e, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x6f, 0x6e, 0x64, 0x12, 0x63, 0x0a, 0x13,
	0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x4d, 0x61, 0x78,
	0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x11,
	0x6d, 0x61, 0x78, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x63, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x4d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x59, 0x0a, 0x0f, 0x63, 0x68, 0x69, 0x6c, 0x6c, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x5f, 0x43, 0x68, 0x69, 0x6c, 0x6c, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x52, 0x0e, 0x63, 0x68, 0x69, 0x6c, 0x6c, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x12, 0x56, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x4d, 0x69, 0x6e,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x66, 0x0a, 0x10, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x12, 0x40, 0x0a,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x48, 0x32, 0x35, 0x36, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12,
	0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6c, 0x65,
	0x6e, 0x22, 0x12, 0x0a, 0x10, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x56, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x6c, 0x6c, 0x22, 0x61, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x5f, 0x4b, 0x69, 0x63, 0x6b, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x4d, 0x0a, 0x03, 0x77, 0x68, 0x6f,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x70, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x03, 0x77, 0x68, 0x6f, 0x22, 0x44, 0x0a, 0x2c, 0x46, 0x65, 0x6c, 0x6c,
	0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xc5,
	0x12, 0x0a, 0x16, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x44, 0x69, 0x73, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x41, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x47, 0x0a, 0x09, 0x61, 0x73, 0x5f,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x41, 0x73, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x08, 0x61, 0x73, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x12, 0x40, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x06, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x12, 0x49, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x50, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x48, 0x00, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x3a, 0x0a, 0x04, 0x62, 0x61, 0x62, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x62, 0x65, 0x50, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x04, 0x62, 0x61, 0x62, 0x65, 0x12, 0x43, 0x0a, 0x07, 0x67,
	0x72, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x50,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x07, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x70, 0x61,
	0x12, 0x46, 0x0a, 0x08, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x07, 0x76, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x48, 0x00, 0x52, 0x07, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x47, 0x0a,
	0x09, 0x62, 0x61, 0x67, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x67, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x62, 0x61,
	0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x09, 0x69, 0x6d, 0x5f, 0x6f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6d, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12,
	0x43, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x07, 0x73, 0x74, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x12, 0x43, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00,
	0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x08, 0x74, 0x72, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x50,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x79, 0x12, 0x43, 0x0a, 0x07, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x74,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x07, 0x75,
	0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x5f, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x49, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x64, 0x61, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x50,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x64, 0x61, 0x12, 0x6b, 0x0a, 0x15, 0x66, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70,
	0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x6c,
	0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x14, 0x66, 0x65, 0x6c, 0x6c, 0x6f,
	0x77, 0x73, 0x68, 0x69, 0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x68, 0x0a, 0x14, 0x66, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73,
	0x68, 0x69, 0x70, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x50, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x48, 0x00, 0x52, 0x13, 0x66, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x12, 0x49, 0x0a, 0x09, 0x77, 0x68, 0x69,
	0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73,
	0x74, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x09, 0x77, 0x68, 0x69, 0x74, 0x65,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x48, 0x00, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x12,
	0x46, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x70,
	0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x46, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x3d, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x50,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x46,
	0x0a, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x73, 0x69, 0x67, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x12, 0x7f, 0x0a, 0x1d, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x1a, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x08, 0x62, 0x6f, 0x75, 0x6e, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x50, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x56, 0x0a, 0x0e, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73,
	0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x42,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x10, 0x6e, 0x6f, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x50, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x3a, 0x0a, 0x04, 0x67, 0x65, 0x61, 0x72, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x61, 0x72, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x04, 0x67, 0x65, 0x61,
	0x72, 0x12, 0x59, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x74,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x50, 0x0a, 0x0c,
	0x67, 0x65, 0x61, 0x72, 0x5f, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x61, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48,
	0x00, 0x52, 0x0b, 0x67, 0x65, 0x61, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x42, 0x06,
	0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x22, 0xfc, 0x01, 0x0a, 0x1c, 0x4e, 0x6f, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x4e, 0x65, 0x77, 0x4e, 0x6f,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x44, 0x0a, 0x04, 0x6e, 0x6f, 0x6f, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73,
	0x5f, 0x4e, 0x6f, 0x6f, 0x70, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x6f, 0x6f, 0x70, 0x12, 0x41, 0x0a,
	0x03, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x03, 0x73, 0x65, 0x74,
	0x12, 0x4a, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x07, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xfa, 0x13, 0x0a, 0x0f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x12, 0x3d, 0x0a, 0x04, 0x6e, 0x6f, 0x6e,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x4e, 0x6f, 0x6e, 0x65,
	0x48, 0x00, 0x52, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x12, 0x3d, 0x0a, 0x04, 0x72, 0x61, 0x77, 0x30,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x30, 0x48,
	0x00, 0x52, 0x04, 0x72, 0x61, 0x77, 0x30, 0x12, 0x3d, 0x0a, 0x04, 0x72, 0x61, 0x77, 0x31, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x48, 0x00,
	0x52, 0x04, 0x72, 0x61, 0x77, 0x31, 0x12, 0x3d, 0x0a, 0x04, 0x72, 0x61, 0x77, 0x32, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x48, 0x00, 0x52,
	0x04, 0x72, 0x61, 0x77, 0x32, 0x12, 0x3d, 0x0a, 0x04, 0x72, 0x61, 0x77, 0x33, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x33, 0x48, 0x00, 0x52, 0x04,
	0x72, 0x61, 0x77, 0x33, 0x12, 0x3d, 0x0a, 0x04, 0x72, 0x61, 0x77, 0x34, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x34, 0x48, 0x00, 0x52, 0x04, 0x72,
	0x61, 0x77, 0x34, 0x12, 0x3d, 0x0a, 0x04, 0x72, 0x61, 0x77, 0x35, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x35, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61,
	0x77, 0x35, 0x12, 0x3d, 0x0a, 0x04, 0x72, 0x61, 0x77, 0x36, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x36, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61, 0x77,
	0x36, 0x12, 0x3d, 0x0a, 0x04, 0x72, 0x61, 0x77, 0x37, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x37, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61, 0x77, 0x37,
	0x12, 0x3d, 0x0a, 0x04, 0x72, 0x61, 0x77, 0x38, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x38, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61, 0x77, 0x38, 0x12,
	0x3d, 0x0a, 0x04, 0x72, 0x61, 0x77, 0x39, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x52, 0x61, 0x77, 0x39, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61, 0x77, 0x39, 0x12, 0x40,
	0x0a, 0x05, 0x72, 0x61, 0x77, 0x31, 0x30, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x30, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x31, 0x30,
	0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x31, 0x31, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x31, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77,
	0x31, 0x31, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x31, 0x32, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x32, 0x48, 0x00, 0x52, 0x05, 0x72,
	0x61, 0x77, 0x31, 0x32, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x31, 0x33, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x33, 0x48, 0x00, 0x52,
	0x05, 0x72, 0x61, 0x77, 0x31, 0x33, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x31, 0x34, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x34, 0x48,
	0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x31, 0x34, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x31,
	0x35, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31,
	0x35, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x31, 0x35, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61,
	0x77, 0x31, 0x36, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61,
	0x77, 0x31, 0x36, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x31, 0x36, 0x12, 0x40, 0x0a, 0x05,
	0x72, 0x61, 0x77, 0x31, 0x37, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x52, 0x61, 0x77, 0x31, 0x37, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x31, 0x37, 0x12, 0x40,
	0x0a, 0x05, 0x72, 0x61, 0x77, 0x31, 0x38, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x38, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x31, 0x38,
	0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x31, 0x39, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x39, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77,
	0x31, 0x39, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x32, 0x30, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x30, 0x48, 0x00, 0x52, 0x05, 0x72,
	0x61, 0x77, 0x32, 0x30, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x32, 0x31, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x31, 0x48, 0x00, 0x52,
	0x05, 0x72, 0x61, 0x77, 0x32, 0x31, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x32, 0x32, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x32, 0x48,
	0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x32, 0x32, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x32,
	0x33, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32,
	0x33, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x32, 0x33, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61,
	0x77, 0x32, 0x34, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61,
	0x77, 0x32, 0x34, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x32, 0x34, 0x12, 0x40, 0x0a, 0x05,
	0x72, 0x61, 0x77, 0x32, 0x35, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x52, 0x61, 0x77, 0x32, 0x35, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x32, 0x35, 0x12, 0x40,
	0x0a, 0x05, 0x72, 0x61, 0x77, 0x32, 0x36, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x36, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x32, 0x36,
	0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x32, 0x37, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x37, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77,
	0x32, 0x37, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x32, 0x38, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x38, 0x48, 0x00, 0x52, 0x05, 0x72,
	0x61, 0x77, 0x32, 0x38, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x32, 0x39, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x39, 0x48, 0x00, 0x52,
	0x05, 0x72, 0x61, 0x77, 0x32, 0x39, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x33, 0x30, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x33, 0x30, 0x48,
	0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x33, 0x30, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x33,
	0x31, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x33,
	0x31, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x33, 0x31, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61,
	0x77, 0x33, 0x32, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61,
	0x77, 0x33, 0x32, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x33, 0x32, 0x12, 0x53, 0x0a, 0x0c,
	0x62, 0x6c, 0x61, 0x6b, 0x65, 0x5f, 0x74, 0x77, 0x6f, 0x32, 0x35, 0x36, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x42, 0x6c, 0x61, 0x6b, 0x65, 0x54, 0x77, 0x6f, 0x32,
	0x35, 0x36, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x6c, 0x61, 0x6b, 0x65, 0x54, 0x77, 0x6f, 0x32, 0x35,
	0x36, 0x12, 0x43, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x48, 0x00, 0x52, 0x06,
	0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x12, 0x4c, 0x0a, 0x09, 0x6b, 0x65, 0x63, 0x63, 0x61, 0x6b,
	0x32, 0x35, 0x36, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x4b, 0x65,
	0x63, 0x63, 0x61, 0x6b, 0x32, 0x35, 0x36, 0x48, 0x00, 0x52, 0x09, 0x6b, 0x65, 0x63, 0x63, 0x61,
	0x6b, 0x32, 0x35, 0x36, 0x12, 0x53, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x5f, 0x74, 0x68, 0x72, 0x65,
	0x65, 0x32, 0x35, 0x36, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x53,
	0x68, 0x61, 0x54, 0x68, 0x72, 0x65, 0x65, 0x32, 0x35, 0x36, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x68,
	0x61, 0x54, 0x68, 0x72, 0x65, 0x65, 0x32, 0x35, 0x36, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xfb, 0x13, 0x0a, 0x10, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x54, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x48, 0x00,
	0x52, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x12, 0x3d, 0x0a, 0x04, 0x72, 0x61, 0x77, 0x30, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x30, 0x48, 0x00, 0x52,
	0x04, 0x72, 0x61, 0x77, 0x30, 0x12, 0x3d, 0x0a, 0x04, 0x72, 0x61, 0x77, 0x31, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x48, 0x00, 0x52, 0x04,
	0x72, 0x61, 0x77, 0x31, 0x12, 0x3d, 0x0a, 0x04, 0x72, 0x61, 0x77, 0x32, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x48, 0x00, 0x52, 0x04, 0x72,
	0x61, 0x77, 0x32, 0x12, 0x3d, 0x0a, 0x04, 0x72, 0x61, 0x77, 0x33, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x33, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61,
	0x77, 0x33, 0x12, 0x3d, 0x0a, 0x04, 0x72, 0x61, 0x77, 0x34, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x34, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61, 0x77,
	0x34, 0x12, 0x3d, 0x0a, 0x04, 0x72, 0x61, 0x77, 0x35, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x35, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61, 0x77, 0x35,
	0x12, 0x3d, 0x0a, 0x04, 0x72, 0x61, 0x77, 0x36, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x36, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61, 0x77, 0x36, 0x12,
	0x3d, 0x0a, 0x04, 0x72, 0x61, 0x77, 0x37, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x52, 0x61, 0x77, 0x37, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61, 0x77, 0x37, 0x12, 0x3d,
	0x0a, 0x04, 0x72, 0x61, 0x77, 0x38, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x52, 0x61, 0x77, 0x38, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61, 0x77, 0x38, 0x12, 0x3d, 0x0a,
	0x04, 0x72, 0x61, 0x77, 0x39, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x52, 0x61, 0x77, 0x39, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61, 0x77, 0x39, 0x12, 0x40, 0x0a, 0x05,
	0x72, 0x61, 0x77, 0x31, 0x30, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x52, 0x61, 0x77, 0x31, 0x30, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x31, 0x30, 0x12, 0x40,
	0x0a, 0x05, 0x72, 0x61, 0x77, 0x31, 0x31, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x31, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x31, 0x31,
	0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x31, 0x32, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x32, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77,
	0x31, 0x32, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x31, 0x33, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x33, 0x48, 0x00, 0x52, 0x05, 0x72,
	0x61, 0x77, 0x31, 0x33, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x31, 0x34, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x34, 0x48, 0x00, 0x52,
	0x05, 0x72, 0x61, 0x77, 0x31, 0x34, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x31, 0x35, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x35, 0x48,
	0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x31, 0x35, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x31,
	0x36, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31,
	0x36, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x31, 0x36, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61,
	0x77, 0x31, 0x37, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61,
	0x77, 0x31, 0x37, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x31, 0x37, 0x12, 0x40, 0x0a, 0x05,
	0x72, 0x61, 0x77, 0x31, 0x38, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x52, 0x61, 0x77, 0x31, 0x38, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x31, 0x38, 0x12, 0x40,
	0x0a, 0x05, 0x72, 0x61, 0x77, 0x31, 0x39, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x39, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x31, 0x39,
	0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x32, 0x30, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x30, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77,
	0x32, 0x30, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x32, 0x31, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x31, 0x48, 0x00, 0x52, 0x05, 0x72,
	0x61, 0x77, 0x32, 0x31, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x32, 0x32, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x32, 0x48, 0x00, 0x52,
	0x05, 0x72, 0x61, 0x77, 0x32, 0x32, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x32, 0x33, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x33, 0x48,
	0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x32, 0x33, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x32,
	0x34, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32,
	0x34, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x32, 0x34, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61,
	0x77, 0x32, 0x35, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61,
	0x77, 0x32, 0x35, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x32, 0x35, 0x12, 0x40, 0x0a, 0x05,
	0x72, 0x61, 0x77, 0x32, 0x36, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x52, 0x61, 0x77, 0x32, 0x36, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x32, 0x36, 0x12, 0x40,
	0x0a, 0x05, 0x72, 0x61, 0x77, 0x32, 0x37, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x37, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x32, 0x37,
	0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x32, 0x38, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x38, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77,
	0x32, 0x38, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x32, 0x39, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x39, 0x48, 0x00, 0x52, 0x05, 0x72,
	0x61, 0x77, 0x32, 0x39, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x33, 0x30, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x33, 0x30, 0x48, 0x00, 0x52,
	0x05, 0x72, 0x61, 0x77, 0x33, 0x30, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x33, 0x31, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x33, 0x31, 0x48,
	0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x33, 0x31, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x33,
	0x32, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x33,
	0x32, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x33, 0x32, 0x12, 0x53, 0x0a, 0x0c, 0x62, 0x6c,
	0x61, 0x6b, 0x65, 0x5f, 0x74, 0x77, 0x6f, 0x32, 0x35, 0x36, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x42, 0x6c, 0x61, 0x6b, 0x65, 0x54, 0x77, 0x6f, 0x32, 0x35, 0x36,
	0x48, 0x00, 0x52, 0x0b, 0x62, 0x6c, 0x61, 0x6b, 0x65, 0x54, 0x77, 0x6f, 0x32, 0x35, 0x36, 0x12,
	0x43, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x48, 0x00, 0x52, 0x06, 0x73, 0x68,
	0x61, 0x32, 0x35, 0x36, 0x12, 0x4c, 0x0a, 0x09, 0x6b, 0x65, 0x63, 0x63, 0x61, 0x6b, 0x32, 0x35,
	0x36, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x4b, 0x65, 0x63, 0x63,
	0x61, 0x6b, 0x32, 0x35, 0x36, 0x48, 0x00, 0x52, 0x09, 0x6b, 0x65, 0x63, 0x63, 0x61, 0x6b, 0x32,
	0x35, 0x36, 0x12, 0x53, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x65, 0x32,
	0x35, 0x36, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x53, 0x68, 0x61,
	0x54, 0x68, 0x72, 0x65, 0x65, 0x32, 0x35, 0x36, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x54,
	0x68, 0x72, 0x65, 0x65, 0x32, 0x35, 0x36, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x14, 0x0a, 0x12, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x4f, 0x75, 0x74,
	0x4f, 0x66, 0x44, 0x61, 0x74, 0x65, 0x22, 0x4b, 0x0a, 0x0b, 0x42, 0x61, 0x62, 0x65, 0x5f, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x33, 0x0a, 0x02, 0x76, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x62,
	0x65, 0x5f, 0x56, 0x31, 0x48, 0x00, 0x52, 0x02, 0x76, 0x31, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x26, 0x0a, 0x0c, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x5f,
	0x52, 0x61, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0x64, 0x0a, 0x17, 0x46,
	0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x70, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x33, 0x32, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x30, 0x22, 0xbe, 0x13, 0x0a, 0x20, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x41, 0x66, 0x74,
	0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x12, 0x61, 0x0a, 0x0e,
	0x6d, 0x61, 0x79, 0x62, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x55,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x48, 0x01, 0x52, 0x0d, 0x6d,
	0x61, 0x79, 0x62, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x88, 0x01, 0x01, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x40, 0x0a, 0x06, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x49, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3a, 0x0a, 0x04, 0x62, 0x61, 0x62, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x61, 0x62, 0x65, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x04,
	0x62, 0x61, 0x62, 0x65, 0x12, 0x43, 0x0a, 0x07, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00,
	0x52, 0x07, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x12, 0x46, 0x0a, 0x08, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x50,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x12, 0x43, 0x0a, 0x07, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x07, 0x76,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x47, 0x0a, 0x09, 0x62, 0x61, 0x67, 0x73, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x62, 0x61, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x47, 0x0a, 0x09, 0x69, 0x6d, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08,
	0x69, 0x6d, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x43, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x48, 0x00, 0x52, 0x07, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x43, 0x0a,
	0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x08, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00,
	0x52, 0x08, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x12, 0x43, 0x0a, 0x07, 0x75, 0x74,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x07, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x5f, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x6f,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x10,
	0x63, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x49, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00,
	0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x12, 0x6b, 0x0a, 0x15, 0x66,
	0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x48, 0x00, 0x52, 0x14, 0x66, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x68, 0x0a, 0x14, 0x66, 0x65, 0x6c, 0x6c,
	0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x64, 0x61, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x13, 0x66,
	0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x64, 0x61, 0x12, 0x49, 0x0a, 0x09, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x48, 0x00, 0x52, 0x09, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x49, 0x0a,
	0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x09, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x46, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00,
	0x52, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x46, 0x0a, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x73, 0x69, 0x67, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x50, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x12,
	0x7f, 0x0a, 0x1d, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x50, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x48, 0x00, 0x52, 0x1a, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x12, 0x46, 0x0a, 0x08, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f,
	0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08,
	0x62, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x0e, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x69, 0x6c,
	0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48,
	0x00, 0x52, 0x0d, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x5c, 0x0a, 0x10, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x6e,
	0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x3a,
	0x0a, 0x04, 0x67, 0x65, 0x61, 0x72, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x61, 0x72, 0x50, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x48, 0x00, 0x52, 0x04, 0x67, 0x65, 0x61, 0x72, 0x12, 0x59, 0x0a, 0x0f, 0x73, 0x74,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x50, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x50, 0x0a, 0x0c, 0x67, 0x65, 0x61, 0x72, 0x5f, 0x76, 0x6f,
	0x75, 0x63, 0x68, 0x65, 0x72, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x61, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68,
	0x65, 0x72, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x67, 0x65, 0x61, 0x72,
	0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x42, 0x06, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x6d, 0x61, 0x79, 0x62, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x69, 0x63, 0x22, 0x62, 0x0a, 0x1e, 0x50, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x55,
	0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x43, 0x61, 0x6c, 0x6c, 0x12, 0x40, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x48, 0x32, 0x35, 0x36,
	0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0xf7, 0x01, 0x0a, 0x50, 0x45, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x50, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x73,
	0x33, 0x4c, 0x69, 0x73, 0x74, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x30, 0x12, 0x73, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x55,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x70, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69,
	0x63, 0x50, 0x65, 0x72, 0x54, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x65, 0x72, 0x55, 0x31, 0x36,
	0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32,
	0x22, 0x35, 0x0a, 0x1f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x53, 0x65, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x43,
	0x61, 0x6c, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x2c, 0x0a, 0x12, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0x5d, 0x0a, 0x10, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x42, 0x6f,
	0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x33, 0x32, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x30, 0x22, 0x32, 0x0a, 0x18, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30,
	0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0x1b, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x76,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x4c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x31, 0x58, 0x22, 0x88, 0x01, 0x0a, 0x25, 0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77,
	0x73, 0x68, 0x69, 0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x12,
	0x44, 0x0a, 0x03, 0x77, 0x68, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68,
	0x69, 0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x57, 0x68, 0x6f,
	0x52, 0x03, 0x77, 0x68, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x6e,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x52, 0x61, 0x6e, 0x6b,
	0x22, 0x28, 0x0a, 0x0e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77,
	0x31, 0x36, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0xf8, 0x13, 0x0a, 0x0d, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3d, 0x0a, 0x04,
	0x6e, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x4e,
	0x6f, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x12, 0x3d, 0x0a, 0x04, 0x72,
	0x61, 0x77, 0x30, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61,
	0x77, 0x30, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61, 0x77, 0x30, 0x12, 0x3d, 0x0a, 0x04, 0x72, 0x61,
	0x77, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77,
	0x31, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61, 0x77, 0x31, 0x12, 0x3d, 0x0a, 0x04, 0x72, 0x61, 0x77,
	0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32,
	0x48, 0x00, 0x52, 0x04, 0x72, 0x61, 0x77, 0x32, 0x12, 0x3d, 0x0a, 0x04, 0x72, 0x61, 0x77, 0x33,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x33, 0x48,
	0x00, 0x52, 0x04, 0x72, 0x61, 0x77, 0x33, 0x12, 0x3d, 0x0a, 0x04, 0x72, 0x61, 0x77, 0x34, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x34, 0x48, 0x00,
	0x52, 0x04, 0x72, 0x61, 0x77, 0x34, 0x12, 0x3d, 0x0a, 0x04, 0x72, 0x61, 0x77, 0x35, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x35, 0x48, 0x00, 0x52,
	0x04, 0x72, 0x61, 0x77, 0x35, 0x12, 0x3d, 0x0a, 0x04, 0x72, 0x61, 0x77, 0x36, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x36, 0x48, 0x00, 0x52, 0x04,
	0x72, 0x61, 0x77, 0x36, 0x12, 0x3d, 0x0a, 0x04, 0x72, 0x61, 0x77, 0x37, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x37, 0x48, 0x00, 0x52, 0x04, 0x72,
	0x61, 0x77, 0x37, 0x12, 0x3d, 0x0a, 0x04, 0x72, 0x61, 0x77, 0x38, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x38, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61,
	0x77, 0x38, 0x12, 0x3d, 0x0a, 0x04, 0x72, 0x61, 0x77, 0x39, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x39, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61, 0x77,
	0x39, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x31, 0x30, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x30, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61,
	0x77, 0x31, 0x30, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x31, 0x31, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x31, 0x48, 0x00, 0x52, 0x05,
	0x72, 0x61, 0x77, 0x31, 0x31, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x31, 0x32, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x32, 0x48, 0x00,
	0x52, 0x05, 0x72, 0x61, 0x77, 0x31, 0x32, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x31, 0x33,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x33,
	0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x31, 0x33, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77,
	0x31, 0x34, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77,
	0x31, 0x34, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x31, 0x34, 0x12, 0x40, 0x0a, 0x05, 0x72,
	0x61, 0x77, 0x31, 0x35, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52,
	0x61, 0x77, 0x31, 0x35, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x31, 0x35, 0x12, 0x40, 0x0a,
	0x05, 0x72, 0x61, 0x77, 0x31, 0x36, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x52, 0x61, 0x77, 0x31, 0x36, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x31, 0x36, 0x12,
	0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x31, 0x37, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x37, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x31,
	0x37, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x31, 0x38, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x38, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61,
	0x77, 0x31, 0x38, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x31, 0x39, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x39, 0x48, 0x00, 0x52, 0x05,
	0x72, 0x61, 0x77, 0x31, 0x39, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x32, 0x30, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x30, 0x48, 0x00,
	0x52, 0x05, 0x72, 0x61, 0x77, 0x32, 0x30, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x32, 0x31,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x31,
	0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x32, 0x31, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77,
	0x32, 0x32, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77,
	0x32, 0x32, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x32, 0x32, 0x12, 0x40, 0x0a, 0x05, 0x72,
	0x61, 0x77, 0x32, 0x33, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52,
	0x61, 0x77, 0x32, 0x33, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x32, 0x33, 0x12, 0x40, 0x0a,
	0x05, 0x72, 0x61, 0x77, 0x32, 0x34, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x52, 0x61, 0x77, 0x32, 0x34, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x32, 0x34, 0x12,
	0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x32, 0x35, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x35, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x32,
	0x35, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x32, 0x36, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x36, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61,
	0x77, 0x32, 0x36, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x32, 0x37, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x37, 0x48, 0x00, 0x52, 0x05,
	0x72, 0x61, 0x77, 0x32, 0x37, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x32, 0x38, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x38, 0x48, 0x00,
	0x52, 0x05, 0x72, 0x61, 0x77, 0x32, 0x38, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x32, 0x39,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x39,
	0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x32, 0x39, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77,
	0x33, 0x30, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77,
	0x33, 0x30, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x33, 0x30, 0x12, 0x40, 0x0a, 0x05, 0x72,
	0x61, 0x77, 0x33, 0x31, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52,
	0x61, 0x77, 0x33, 0x31, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x33, 0x31, 0x12, 0x40, 0x0a,
	0x05, 0x72, 0x61, 0x77, 0x33, 0x32, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x52, 0x61, 0x77, 0x33, 0x32, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x33, 0x32, 0x12,
	0x53, 0x0a, 0x0c, 0x62, 0x6c, 0x61, 0x6b, 0x65, 0x5f, 0x74, 0x77, 0x6f, 0x32, 0x35, 0x36, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x42, 0x6c, 0x61, 0x6b, 0x65, 0x54,
	0x77, 0x6f, 0x32, 0x35, 0x36, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x6c, 0x61, 0x6b, 0x65, 0x54, 0x77,
	0x6f, 0x32, 0x35, 0x36, 0x12, 0x43, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x18, 0x24,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x48,
	0x00, 0x52, 0x06, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x12, 0x4c, 0x0a, 0x09, 0x6b, 0x65, 0x63,
	0x63, 0x61, 0x6b, 0x32, 0x35, 0x36, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x4b, 0x65, 0x63, 0x63, 0x61, 0x6b, 0x32, 0x35, 0x36, 0x48, 0x00, 0x52, 0x09, 0x6b, 0x65,
	0x63, 0x63, 0x61, 0x6b, 0x32, 0x35, 0x36, 0x12, 0x53, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x5f, 0x74,
	0x68, 0x72, 0x65, 0x65, 0x32, 0x35, 0x36, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x53, 0x68, 0x61, 0x54, 0x68, 0x72, 0x65, 0x65, 0x32, 0x35, 0x36, 0x48, 0x00, 0x52,
	0x0b, 0x73, 0x68, 0x61, 0x54, 0x68, 0x72, 0x65, 0x65, 0x32, 0x35, 0x36, 0x42, 0x07, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xf7, 0x01, 0x0a, 0x50, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x5f, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x36,
	0x4c, 0x69, 0x73, 0x74, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x30, 0x12, 0x73, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x55, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x53, 0x70, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63,
	0x50, 0x65, 0x72, 0x54, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x65, 0x72, 0x55, 0x31, 0x36, 0x52,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x22,
	0x6e, 0x0a, 0x1c, 0x53, 0x70, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x69, 0x63, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12,
	0x4e, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x44,
	0x69, 0x67, 0x65, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x22,
	0x76, 0x0a, 0x1a, 0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x58, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x6f, 0x75, 0x6e, 0x64,
	0x65, 0x64, 0x56, 0x65, 0x63, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x56, 0x65, 0x63, 0x52,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0x95, 0x02, 0x0a, 0x1d, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x4a, 0x75, 0x64, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65,
	0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x41, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x4a, 0x0a, 0x09, 0x6a, 0x75, 0x64,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x6a, 0x75, 0x64, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x48, 0x32, 0x35, 0x36, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22,
	0x8c, 0x03, 0x0a, 0x15, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65,
	0x73, 0x5f, 0x43, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x3c, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x49,
	0x64, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x45, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x5f,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3f,
	0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x42, 0x6f, 0x75, 0x6e,
	0x74, 0x69, 0x65, 0x73, 0x5f, 0x52, 0x61, 0x77, 0x48, 0x00, 0x52, 0x03, 0x72, 0x61, 0x77, 0x12,
	0x51, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68,
	0x69, 0x6c, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x33, 0x32, 0x48, 0x00, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x33, 0x32, 0x12, 0x51, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x48, 0x00, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x32, 0x30, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x37,
	0x0a, 0x18, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x42, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6f,
	0x75, 0x6e, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62,
	0x6f, 0x75, 0x6e, 0x74, 0x79, 0x49, 0x64, 0x22, 0x10, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x22, 0xdd, 0x01, 0x0a, 0x15, 0x53, 0x74,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x4d, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x04, 0x6e, 0x6f, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x4e, 0x6f, 0x6f, 0x70, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x6f, 0x6f,
	0x70, 0x12, 0x39, 0x0a, 0x03, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x03, 0x73, 0x65, 0x74, 0x12, 0x42, 0x0a, 0x06,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x53, 0x0a, 0x06, 0x53, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x12, 0x49, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x70, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x33, 0x32, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0xbb,
	0x04, 0x0a, 0x0d, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x12, 0x4c, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x61, 0x6c,
	0x6c, 0x48, 0x00, 0x52, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x62,
	0x0a, 0x12, 0x61, 0x73, 0x5f, 0x64, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x41, 0x73,
	0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00,
	0x52, 0x10, 0x61, 0x73, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x61,
	0x6c, 0x6c, 0x12, 0x56, 0x0a, 0x0e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x6c, 0x6c, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x41, 0x6c, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x41, 0x6c, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x5c, 0x0a, 0x10, 0x64, 0x69,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x73, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x41, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x41, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x5c, 0x0a, 0x10, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x74,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x5c, 0x0a, 0x10, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x74, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x57, 0x69, 0x74, 0x68, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x43, 0x61,
	0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0e, 0x77, 0x69, 0x74, 0x68, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x43, 0x61, 0x6c, 0x6c, 0x42, 0x06, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x22, 0x55, 0x0a, 0x08,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x33, 0x32, 0x52, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x30, 0x22, 0x33, 0x0a, 0x1b, 0x47, 0x65, 0x61, 0x72, 0x5f, 0x53, 0x65, 0x74, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x61,
	0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa4, 0x03, 0x0a, 0x14, 0x53, 0x74, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x50, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x12, 0x56, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x5f, 0x52, 0x65, 0x66, 0x69, 0x6c, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0a, 0x72,
	0x65, 0x66, 0x69, 0x6c, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x66, 0x0a, 0x11, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x46,
	0x6f, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x69, 0x6c, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00,
	0x52, 0x0f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x69, 0x6c, 0x6c, 0x43, 0x61, 0x6c,
	0x6c, 0x12, 0x5c, 0x0a, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x5f, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x43, 0x61, 0x6c, 0x6c, 0x48,
	0x00, 0x52, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x43, 0x61, 0x6c, 0x6c, 0x12,
	0x66, 0x0a, 0x11, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x5f, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79,
	0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0f, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x53, 0x75, 0x70,
	0x70, 0x6c, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x06, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x22,
	0xfb, 0x02, 0x0a, 0x10, 0x47, 0x65, 0x61, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x5f,
	0x43, 0x61, 0x6c, 0x6c, 0x12, 0x56, 0x0a, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x61, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65,
	0x72, 0x5f, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52,
	0x0b, 0x73, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x50, 0x0a, 0x0a,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x61, 0x72,
	0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x48, 0x00, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x53,
	0x0a, 0x0b, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x61, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x5f, 0x0a, 0x0f, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x76,
	0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x61, 0x72, 0x56, 0x6f, 0x75, 0x63,
	0x68, 0x65, 0x72, 0x5f, 0x44, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x56, 0x6f, 0x75, 0x63, 0x68,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x0e, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x56, 0x6f, 0x75,
	0x63, 0x68, 0x65, 0x72, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2b, 0x0a,
	0x11, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x43, 0x61,
	0x6c, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0xf9, 0x02, 0x0a, 0x1c, 0x53,
	0x70, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x0b, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x6d,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x48, 0x32, 0x35, 0x36, 0x52, 0x0a,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x4b, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x48, 0x32, 0x35, 0x36, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12,
	0x55, 0x0a, 0x0f, 0x65, 0x78, 0x74, 0x72, 0x69, 0x6e, 0x73, 0x69, 0x63, 0x73, 0x5f, 0x72, 0x6f,
	0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x48, 0x32, 0x35, 0x36, 0x52, 0x0e, 0x65, 0x78, 0x74, 0x72, 0x69, 0x6e, 0x73, 0x69,
	0x63, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x4e, 0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x70, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x69, 0x63, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x52, 0x06,
	0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x22, 0xa2, 0x13, 0x0a, 0x16, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x5f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x61, 0x6c,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x68, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x77, 0x68, 0x65, 0x6e, 0x12, 0x61, 0x0a, 0x0e, 0x6d, 0x61, 0x79, 0x62, 0x65, 0x5f, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x5f, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x55, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x48, 0x01, 0x52, 0x0d, 0x6d, 0x61, 0x79, 0x62, 0x65, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x69, 0x63, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x40, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x06,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x49, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x50, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x3a, 0x0a, 0x04, 0x62, 0x61, 0x62, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x62, 0x65, 0x50,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x04, 0x62, 0x61, 0x62, 0x65, 0x12, 0x43, 0x0a,
	0x07, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x70,
	0x61, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x07, 0x67, 0x72, 0x61, 0x6e, 0x64,
	0x70, 0x61, 0x12, 0x46, 0x0a, 0x08, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00,
	0x52, 0x08, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x07, 0x76, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x07, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x47, 0x0a, 0x09, 0x62, 0x61, 0x67, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61,
	0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08,
	0x62, 0x61, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x09, 0x69, 0x6d, 0x5f, 0x6f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6d, 0x4f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x12, 0x43, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x07, 0x73,
	0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x43, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x48, 0x00, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x08, 0x74,
	0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x79, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x74, 0x72, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x79, 0x12, 0x43, 0x0a, 0x07, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52,
	0x07, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x5f, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x49, 0x0a, 0x09, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64,
	0x61, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x64, 0x61, 0x12, 0x6b, 0x0a, 0x15, 0x66, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68,
	0x69, 0x70, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x14, 0x66, 0x65, 0x6c,
	0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x68, 0x0a, 0x14, 0x66, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x5f,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x6c, 0x6c, 0x6f,
	0x77, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x50, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x13, 0x66, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68,
	0x69, 0x70, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x12, 0x49, 0x0a, 0x09, 0x77,
	0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c,
	0x69, 0x73, 0x74, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x09, 0x77, 0x68, 0x69,
	0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x12, 0x46, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52,
	0x08, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x46, 0x0a, 0x08, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x12, 0x46, 0x0a, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x12, 0x7f, 0x0a, 0x1d, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3a, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x50, 0x68, 0x61, 0x73, 0x65, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x1a, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x08, 0x62, 0x6f, 0x75,
	0x6e, 0x74, 0x69, 0x65, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x50,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x56, 0x0a, 0x0e, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69,
	0x65, 0x73, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x10, 0x6e, 0x6f, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x50, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x3a, 0x0a, 0x04, 0x67, 0x65, 0x61, 0x72, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x61, 0x72, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x04, 0x67,
	0x65, 0x61, 0x72, 0x12, 0x59, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0e,
	0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x50,
	0x0a, 0x0c, 0x67, 0x65, 0x61, 0x72, 0x5f, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x61, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x50, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x48, 0x00, 0x52, 0x0b, 0x67, 0x65, 0x61, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72,
	0x42, 0x06, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6d, 0x61, 0x79,
	0x62, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x22, 0xd1, 0x01, 0x0a, 0x20,
	0x43, 0x68, 0x69, 0x6c, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x65, 0x43, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x61, 0x6c, 0x6c,
	0x12, 0x28, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x74,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x79,
	0x49, 0x64, 0x12, 0x49, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x68, 0x69, 0x6c, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x43, 0x75, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x52, 0x07, 0x63, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x10, 0x0a,
	0x03, 0x66, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x66, 0x65, 0x65, 0x22,
	0x40, 0x0a, 0x25, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f,
	0x6c, 0x73, 0x5f, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x44, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x6f, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49,
	0x64, 0x22, 0xe1, 0x01, 0x0a, 0x19, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x4d, 0x61,
	0x78, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x3c, 0x0a, 0x04, 0x6e, 0x6f, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x5f, 0x4e, 0x6f, 0x6f, 0x70, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x6f, 0x6f, 0x70, 0x12, 0x39, 0x0a,
	0x03, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x53, 0x65,
	0x74, 0x48, 0x00, 0x52, 0x03, 0x73, 0x65, 0x74, 0x12, 0x42, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x07, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa1, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x64, 0x61, 0x5f, 0x45, 0x6e, 0x61, 0x63, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x02, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x64, 0x61, 0x5f, 0x41, 0x74, 0x48, 0x00, 0x52, 0x02, 0x61, 0x74, 0x12, 0x41, 0x0a,
	0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64,
	0x61, 0x5f, 0x41, 0x66, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x28, 0x0a, 0x26, 0x4e, 0x6f, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x6c, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x75, 0x6e, 0x64, 0x22, 0x0b, 0x0a, 0x09, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x4e, 0x75, 0x6c, 0x6c,
	0x22, 0x8e, 0x01, 0x0a, 0x15, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x52, 0x65, 0x61,
	0x70, 0x53, 0x74, 0x61, 0x73, 0x68, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x47, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x33, 0x32, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x73, 0x68, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x6c, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x5f, 0x73, 0x70, 0x61, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x6e, 0x75, 0x6d, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x61, 0x6e,
	0x73, 0x22, 0x4b, 0x0a, 0x18, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x22, 0x45,
	0x0a, 0x2d, 0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x44, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x28, 0x0a, 0x0e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x37, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22,
	0x8f, 0x01, 0x0a, 0x16, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x38, 0x0a, 0x03, 0x73, 0x75,
	0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x53, 0x75, 0x62, 0x52,
	0x03, 0x73, 0x75, 0x62, 0x12, 0x3b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0xa3, 0x13, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x38, 0x0a, 0x04, 0x72, 0x65, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x5f, 0x52, 0x65, 0x61, 0x6c, 0x52, 0x04, 0x72, 0x65, 0x61, 0x6c, 0x12,
	0x5d, 0x0a, 0x10, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x46, 0x6f, 0x72, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x54, 0x79, 0x70, 0x65, 0x48, 0x01, 0x52, 0x0e, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x40,
	0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x12, 0x49, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3a, 0x0a, 0x04, 0x62,
	0x61, 0x62, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x62, 0x65, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48,
	0x00, 0x52, 0x04, 0x62, 0x61, 0x62, 0x65, 0x12, 0x43, 0x0a, 0x07, 0x67, 0x72, 0x61, 0x6e, 0x64,
	0x70, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x50, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x48, 0x00, 0x52, 0x07, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x12, 0x46, 0x0a, 0x08,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x07, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00,
	0x52, 0x07, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x47, 0x0a, 0x09, 0x62, 0x61, 0x67,
	0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x62, 0x61, 0x67, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x47, 0x0a, 0x09, 0x69, 0x6d, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6d, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48,
	0x00, 0x52, 0x08, 0x69, 0x6d, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x43, 0x0a, 0x07, 0x73,
	0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x50,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x07, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x12, 0x43, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x07, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x08, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x50, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x48, 0x00, 0x52, 0x08, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x12, 0x43, 0x0a,
	0x07, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x07, 0x75, 0x74, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x5f, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48,
	0x00, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x49, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x50, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x12, 0x6b,
	0x0a, 0x15, 0x66, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73,
	0x68, 0x69, 0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x14, 0x66, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69,
	0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x68, 0x0a, 0x14, 0x66,
	0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x64, 0x61, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00,
	0x52, 0x13, 0x66, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x64, 0x61, 0x12, 0x49, 0x0a, 0x09, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x09, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x49, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00,
	0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x08, 0x70,
	0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x70, 0x72, 0x65, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x46, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48,
	0x00, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x3d, 0x0a, 0x05, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x50, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x48, 0x00, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x46, 0x0a, 0x08, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67,
	0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73,
	0x69, 0x67, 0x12, 0x7f, 0x0a, 0x1d, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x70, 0x68,
	0x61, 0x73, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x50,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x1a, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x08, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48,
	0x00, 0x52, 0x08, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x0e, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x68, 0x69, 0x6c, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x50, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x10, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00,
	0x52, 0x0f, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c,
	0x73, 0x12, 0x3a, 0x0a, 0x04, 0x67, 0x65, 0x61, 0x72, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x61, 0x72, 0x50,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x04, 0x67, 0x65, 0x61, 0x72, 0x12, 0x59, 0x0a,
	0x0f, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x50, 0x0a, 0x0c, 0x67, 0x65, 0x61, 0x72,
	0x5f, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x61, 0x72, 0x56, 0x6f,
	0x75, 0x63, 0x68, 0x65, 0x72, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x67,
	0x65, 0x61, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x42, 0x06, 0x0a, 0x04, 0x63, 0x61,
	0x6c, 0x6c, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xf8, 0x01, 0x0a, 0x51, 0x45, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x56, 0x6f, 0x74, 0x65,
	0x73, 0x31, 0x35, 0x4c, 0x69, 0x73, 0x74, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x30, 0x12, 0x73, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x54, 0x75, 0x70, 0x6c,
	0x65, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x70, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65,
	0x74, 0x69, 0x63, 0x50, 0x65, 0x72, 0x54, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x65, 0x72, 0x55,
	0x31, 0x36, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x32, 0x22, 0x2c, 0x0a, 0x12, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30,
	0x22, 0x2b, 0x0a, 0x11, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x32, 0x30, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0x37, 0x0a,
	0x18, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x42,
	0x6f, 0x75, 0x6e, 0x74, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6f, 0x75,
	0x6e, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x6f,
	0x75, 0x6e, 0x74, 0x79, 0x49, 0x64, 0x22, 0x39, 0x0a, 0x1a, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69,
	0x65, 0x73, 0x5f, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x43, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x43, 0x61, 0x6c, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x49,
	0x64, 0x22, 0x5e, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x5f, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x70, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x33, 0x32, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x30, 0x22, 0xfa, 0x04, 0x0a, 0x16, 0x47, 0x65, 0x61, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65,
	0x72, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x4b, 0x0a, 0x07,
	0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x43, 0x6f, 0x72, 0x65, 0x43,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x33, 0x32,
	0x52, 0x07, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x67, 0x0a, 0x0a, 0x76, 0x6f, 0x75,
	0x63, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x61, 0x72, 0x56, 0x6f, 0x75,
	0x63, 0x68, 0x65, 0x72, 0x5f, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x47, 0x65, 0x61, 0x72, 0x56,
	0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x56, 0x6f,
	0x75, 0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x52, 0x09, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x5d, 0x0a, 0x0e, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x33, 0x32, 0x48, 0x00, 0x52,
	0x0d, 0x6d, 0x6f, 0x76, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x88, 0x01,
	0x01, 0x12, 0x29, 0x0a, 0x0e, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x70,
	0x5f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x54, 0x6f, 0x70, 0x55, 0x70, 0x88, 0x01, 0x01, 0x12, 0x62, 0x0a, 0x0f,
	0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x61, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x41, 0x70, 0x70,
	0x65, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x02, 0x52, 0x0e, 0x61,
	0x70, 0x70, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x2a, 0x0a, 0x0e, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x0d, 0x63, 0x6f, 0x64, 0x65,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10,
	0x70, 0x72, 0x6f, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x6c, 0x6f, 0x6e,
	0x67, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x70, 0x5f,
	0x75, 0x70, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x72,
	0x6f, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xeb,
	0x02, 0x0a, 0x1b, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x47, 0x72, 0x61, 0x6e, 0x64,
	0x70, 0x61, 0x45, 0x71, 0x75, 0x69, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21,
	0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x51, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x70, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x70,
	0x61, 0x41, 0x70, 0x70, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x69, 0x0a, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x75, 0x70, 0x6c, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x47, 0x72, 0x61, 0x6e,
	0x64, 0x70, 0x61, 0x50, 0x72, 0x65, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x70, 0x43, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x41, 0x70, 0x70, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74, 0x12,
	0x6b, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x53, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x75, 0x70, 0x6c, 0x65,
	0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x50,
	0x72, 0x65, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x70, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75,
	0x73, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x41, 0x70, 0x70, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x22, 0x12, 0x0a, 0x10,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x22, 0x5e, 0x0a, 0x14, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x41, 0x6c, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x46, 0x0a, 0x05, 0x63, 0x61, 0x6c, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x61, 0x72, 0x61, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x05, 0x63, 0x61, 0x6c, 0x6c, 0x73,
	0x22, 0x06, 0x0a, 0x04, 0x52, 0x6f, 0x6f, 0x74, 0x22, 0xf8, 0x01, 0x0a, 0x51, 0x45, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x55, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x56, 0x6f, 0x74,
	0x65, 0x73, 0x31, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x12, 0x73, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x31,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x54, 0x75, 0x70,
	0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x70, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x65, 0x74, 0x69, 0x63, 0x50, 0x65, 0x72, 0x54, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x65, 0x72,
	0x55, 0x31, 0x36, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x32, 0x22, 0x4e, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x54,
	0x75, 0x70, 0x6c, 0x65, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x68, 0x0a, 0x21, 0x53, 0x70, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x43, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x73, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x22, 0xdb, 0x14,
	0x0a, 0x0d, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12,
	0x49, 0x0a, 0x09, 0x62, 0x6f, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x42, 0x6f, 0x6e, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00,
	0x52, 0x08, 0x62, 0x6f, 0x6e, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x59, 0x0a, 0x0f, 0x62, 0x6f,
	0x6e, 0x64, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x42, 0x6f, 0x6e, 0x64, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0d, 0x62, 0x6f, 0x6e, 0x64, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x4f, 0x0a, 0x0b, 0x75, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x55, 0x6e,
	0x62, 0x6f, 0x6e, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0a, 0x75, 0x6e, 0x62, 0x6f,
	0x6e, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x6e, 0x0a, 0x16, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x5f, 0x75, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x55, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00,
	0x52, 0x14, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x55, 0x6e, 0x62, 0x6f, 0x6e, 0x64,
	0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x55, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x5f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52,
	0x0c, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x55, 0x0a,
	0x0d, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0c, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x43, 0x61, 0x6c, 0x6c, 0x12, 0x4c, 0x0a, 0x0a, 0x63, 0x68, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x43, 0x68, 0x69, 0x6c,
	0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x09, 0x63, 0x68, 0x69, 0x6c, 0x6c, 0x43, 0x61,
	0x6c, 0x6c, 0x12, 0x56, 0x0a, 0x0e, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x65, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x53, 0x65,
	0x74, 0x50, 0x61, 0x79, 0x65, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x65,
	0x74, 0x50, 0x61, 0x79, 0x65, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x65, 0x0a, 0x13, 0x73, 0x65,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6c,
	0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x53, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x11,
	0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x61, 0x6c,
	0x6c, 0x12, 0x72, 0x0a, 0x18, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x15,
	0x73, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x81, 0x01, 0x0a, 0x1d, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61,
	0x73, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x5f, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x1a, 0x69,
	0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x78, 0x0a, 0x1a, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x5f, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x17, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43,
	0x61, 0x6c, 0x6c, 0x12, 0x60, 0x0a, 0x12, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x5f,
	0x65, 0x72, 0x61, 0x73, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x5f, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x4e, 0x6f, 0x45, 0x72, 0x61, 0x73, 0x43, 0x61,
	0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x4e, 0x6f, 0x45, 0x72, 0x61,
	0x73, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x60, 0x0a, 0x12, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x6e,
	0x65, 0x77, 0x5f, 0x65, 0x72, 0x61, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x4e, 0x65, 0x77, 0x45, 0x72, 0x61,
	0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x4e, 0x65, 0x77,
	0x45, 0x72, 0x61, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x6e, 0x0a, 0x16, 0x73, 0x65, 0x74, 0x5f, 0x69,
	0x6e, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x63, 0x61, 0x6c,
	0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x53, 0x65, 0x74, 0x49, 0x6e,
	0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x48,
	0x00, 0x52, 0x14, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x62, 0x0a, 0x12, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x5f, 0x75, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x55, 0x6e, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x10, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x73, 0x0a, 0x19, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x65, 0x72, 0x61, 0x5f, 0x61, 0x6c, 0x77,
	0x61, 0x79, 0x73, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x4e, 0x65, 0x77, 0x45, 0x72, 0x61, 0x41, 0x6c, 0x77,
	0x61, 0x79, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x15, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x4e, 0x65, 0x77, 0x45, 0x72, 0x61, 0x41, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x43, 0x61, 0x6c, 0x6c,
	0x12, 0x78, 0x0a, 0x1a, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x64, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x65, 0x64, 0x5f, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x44, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x43, 0x61, 0x6c, 0x6c, 0x48,
	0x00, 0x52, 0x17, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x44, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65,
	0x64, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x65, 0x0a, 0x13, 0x70, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x61, 0x6c,
	0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x50, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x11,
	0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x43, 0x61, 0x6c,
	0x6c, 0x12, 0x4f, 0x0a, 0x0b, 0x72, 0x65, 0x62, 0x6f, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x52, 0x65, 0x62, 0x6f, 0x6e, 0x64,
	0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x62, 0x6f, 0x6e, 0x64, 0x43, 0x61,
	0x6c, 0x6c, 0x12, 0x59, 0x0a, 0x0f, 0x72, 0x65, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x73, 0x68,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x52,
	0x65, 0x61, 0x70, 0x53, 0x74, 0x61, 0x73, 0x68, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0d,
	0x72, 0x65, 0x61, 0x70, 0x53, 0x74, 0x61, 0x73, 0x68, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x49, 0x0a,
	0x09, 0x6b, 0x69, 0x63, 0x6b, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x5f, 0x4b, 0x69, 0x63, 0x6b, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x08,
	0x6b, 0x69, 0x63, 0x6b, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x72, 0x0a, 0x18, 0x73, 0x65, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x53, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x43,
	0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x15, 0x73, 0x65, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x5c, 0x0a, 0x10,
	0x63, 0x68, 0x69, 0x6c, 0x6c, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x43, 0x68, 0x69, 0x6c, 0x6c, 0x4f,
	0x74, 0x68, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x68, 0x69, 0x6c,
	0x6c, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x85, 0x01, 0x0a, 0x1f, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x4d, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43,
	0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x1b, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x4d, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x61,
	0x6c, 0x6c, 0x12, 0x6f, 0x0a, 0x17, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x53, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x14, 0x73,
	0x65, 0x74, 0x4d, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43,
	0x61, 0x6c, 0x6c, 0x42, 0x06, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x22, 0x9d, 0x02, 0x0a, 0x15,
	0x43, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x51, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x48, 0x00, 0x52, 0x08,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x12, 0x48, 0x0a, 0x05, 0x73, 0x70, 0x6c, 0x69,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x48, 0x00, 0x52, 0x05, 0x73, 0x70, 0x6c,
	0x69, 0x74, 0x12, 0x5e, 0x0a, 0x0d, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x61, 0x62, 0x73, 0x74,
	0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x41, 0x62, 0x73, 0x74, 0x61,
	0x69, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x41, 0x62, 0x73, 0x74, 0x61,
	0x69, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xce, 0x01, 0x0a, 0x16,
	0x47, 0x65, 0x61, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x76, 0x6f,
	0x6b, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x4b, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x70, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x33, 0x32, 0x52, 0x07, 0x73, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x12, 0x67, 0x0a, 0x0a, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x61, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x50,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x47, 0x65, 0x61, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x49,
	0x64, 0x52, 0x09, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x22, 0x3e, 0x0a, 0x23,
	0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43,
	0x61, 0x6c, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x22, 0x57, 0x0a, 0x0a,
	0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x33, 0x32, 0x52, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0xdc, 0x07, 0x0a, 0x0f, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x64, 0x61, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x51, 0x0a, 0x0b, 0x73, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x64, 0x61, 0x5f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00,
	0x52, 0x0a, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x7d, 0x0a, 0x1b,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3c, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x44, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x48,
	0x00, 0x52, 0x18, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x80, 0x01, 0x0a, 0x1c,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x44, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x61, 0x6c,
	0x6c, 0x48, 0x00, 0x52, 0x19, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x44, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x51,
	0x0a, 0x0b, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x43,
	0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x43, 0x61, 0x6c,
	0x6c, 0x12, 0x4b, 0x0a, 0x09, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f, 0x4b, 0x69, 0x6c, 0x6c, 0x43, 0x61,
	0x6c, 0x6c, 0x48, 0x00, 0x52, 0x08, 0x6b, 0x69, 0x6c, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x6d,
	0x0a, 0x15, 0x6e, 0x75, 0x64, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64,
	0x75, 0x6d, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x64, 0x61, 0x5f, 0x4e, 0x75, 0x64, 0x67, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64,
	0x75, 0x6d, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x13, 0x6e, 0x75, 0x64, 0x67, 0x65, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x75, 0x6d, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x71, 0x0a,
	0x17, 0x6f, 0x6e, 0x65, 0x5f, 0x66, 0x65, 0x77, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x64, 0x61, 0x5f, 0x4f, 0x6e, 0x65, 0x46, 0x65, 0x77, 0x65, 0x72, 0x44, 0x65, 0x63, 0x69,
	0x64, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x14, 0x6f, 0x6e, 0x65, 0x46,
	0x65, 0x77, 0x65, 0x72, 0x44, 0x65, 0x63, 0x69, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x6c, 0x6c,
	0x12, 0x86, 0x01, 0x0a, 0x1e, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f, 0x52,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x1b, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x61, 0x0a, 0x11, 0x73, 0x65, 0x74,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x65, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x06, 0x0a, 0x04,
	0x63, 0x61, 0x6c, 0x6c, 0x22, 0x9c, 0x01, 0x0a, 0x23, 0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73,
	0x68, 0x69, 0x70, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f, 0x53, 0x65, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x50, 0x0a, 0x0a, 0x6d, 0x61, 0x79, 0x62, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x48, 0x32, 0x35, 0x36, 0x48, 0x00, 0x52, 0x09, 0x6d, 0x61, 0x79, 0x62, 0x65, 0x48, 0x61, 0x73,
	0x68, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x61, 0x79, 0x62, 0x65, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x22, 0x28, 0x0a, 0x0e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x52, 0x61, 0x77, 0x33, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0xc4, 0x01,
	0x0a, 0x3c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x54, 0x75, 0x70, 0x6c, 0x65,
	0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x70, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x41,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x30, 0x12, 0x41, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x31, 0x22, 0x2b, 0x0a, 0x15, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x4b, 0x65, 0x79, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x6b, 0x65, 0x79,
	0x73, 0x22, 0xeb, 0x02, 0x0a, 0x0d, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x44,
	0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x5f, 0x49, 0x64, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3a,
	0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f,
	0x52, 0x61, 0x77, 0x48, 0x00, 0x52, 0x03, 0x72, 0x61, 0x77, 0x12, 0x4c, 0x0a, 0x09, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x48, 0x00, 0x52, 0x09, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x12, 0x4c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x32, 0x30, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x48, 0x00, 0x52, 0x09, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x23, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x30, 0x22, 0x4f, 0x0a, 0x12, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73,
	0x5f, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x39, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x0e, 0x0a, 0x0c, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x53, 0x6c, 0x6f, 0x74, 0x73, 0x22, 0x1f, 0x0a, 0x1d, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x41, 0x6e, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x50, 0x6c, 0x61, 0x69,
	0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x22, 0xc7, 0x01, 0x0a, 0x0d, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x53, 0x0a, 0x0d, 0x73, 0x65, 0x74, 0x5f,
	0x6b, 0x65, 0x79, 0x73, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x53, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00,
	0x52, 0x0b, 0x73, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x59, 0x0a,
	0x0f, 0x70, 0x75, 0x72, 0x67, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x5f, 0x63, 0x61, 0x6c, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x50, 0x75, 0x72, 0x67, 0x65, 0x4b,
	0x65, 0x79, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x75, 0x72, 0x67, 0x65,
	0x4b, 0x65, 0x79, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x06, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c,
	0x22, 0x27, 0x0a, 0x0d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77,
	0x39, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0x19, 0x0a, 0x17, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x73,
	0x43, 0x61, 0x6c, 0x6c, 0x22, 0x40, 0x0a, 0x0e, 0x42, 0x61, 0x62, 0x65, 0x5f, 0x43, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x22, 0x14, 0x0a, 0x12, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x47, 0x6f, 0x6f, 0x64, 0x22, 0xd9, 0x02, 0x0a,
	0x0a, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x52, 0x65, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x49, 0x64, 0x48, 0x00, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3d, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x5f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x37, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x52,
	0x61, 0x77, 0x48, 0x00, 0x52, 0x03, 0x72, 0x61, 0x77, 0x12, 0x49, 0x0a, 0x09, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x48, 0x00, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x33, 0x32, 0x12, 0x49, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32,
	0x30, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x32, 0x30, 0x48, 0x00, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x42,
	0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x16, 0x0a, 0x14, 0x4e, 0x6f, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x4e, 0x6f, 0x6f, 0x70,
	0x22, 0xf8, 0x01, 0x0a, 0x18, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x4d, 0x61, 0x78, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x44, 0x0a,
	0x04, 0x6e, 0x6f, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x4e, 0x6f, 0x6f, 0x70, 0x48, 0x00, 0x52, 0x04, 0x6e,
	0x6f, 0x6f, 0x70, 0x12, 0x41, 0x0a, 0x03, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x53, 0x65, 0x74, 0x48,
	0x00, 0x52, 0x03, 0x73, 0x65, 0x74, 0x12, 0x4a, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c,
	0x73, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x19,
	0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x5f, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65,
	0x53, 0x70, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x50, 0x0a, 0x0b, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x5f, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63,
	0x69, 0x61, 0x72, 0x79, 0x52, 0x0b, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72,
	0x79, 0x22, 0x57, 0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x4e, 0x75, 0x6c, 0x6c, 0x12,
	0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x4e,
	0x75, 0x6c, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x7e, 0x0a, 0x1b, 0x43, 0x6f,
	0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x55,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12,
	0x49, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0xea, 0x02, 0x0a, 0x0c, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x53, 0x75, 0x62, 0x12, 0x37, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x49, 0x64, 0x48, 0x00,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x48, 0x00, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3a, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x48, 0x00, 0x52, 0x03, 0x72,
	0x61, 0x77, 0x12, 0x4c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x33, 0x32, 0x48, 0x00, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32,
	0x12, 0x4c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32,
	0x30, 0x48, 0x00, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x42, 0x07,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2c, 0x0a, 0x12, 0x42, 0x6f, 0x75, 0x6e, 0x74,
	0x69, 0x65, 0x73, 0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0x15, 0x0a, 0x13, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x4c, 0x6f, 0x77, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x22, 0xb8, 0x03, 0x0a,
	0x0e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12,
	0x73, 0x0a, 0x18, 0x61, 0x73, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x31, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x73, 0x69, 0x67, 0x5f, 0x41, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x31, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x15, 0x61,
	0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x31,
	0x43, 0x61, 0x6c, 0x6c, 0x12, 0x54, 0x0a, 0x0d, 0x61, 0x73, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x5f,
	0x41, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0b, 0x61,
	0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x6a, 0x0a, 0x15, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x61, 0x73, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x5f, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x41, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x61, 0x6c, 0x6c,
	0x48, 0x00, 0x52, 0x12, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x41, 0x73, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x67, 0x0a, 0x14, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x5f, 0x61, 0x73, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41,
	0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x11, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x41, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x61, 0x6c, 0x6c, 0x42,
	0x06, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x22, 0xbe, 0x01, 0x0a, 0x31, 0x45, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x2d, 0x0a,
	0x10, 0x6d, 0x61, 0x79, 0x62, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0e, 0x6d, 0x61, 0x79, 0x62, 0x65,
	0x4d, 0x61, 0x78, 0x56, 0x6f, 0x74, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11,
	0x6d, 0x61, 0x79, 0x62, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x0f, 0x6d, 0x61, 0x79, 0x62, 0x65,
	0x4d, 0x61, 0x78, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x88, 0x01, 0x01, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x6d, 0x61, 0x79, 0x62, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x6f, 0x74, 0x65,
	0x72, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6d, 0x61, 0x79, 0x62, 0x65, 0x5f, 0x6d, 0x61, 0x78,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x22, 0x96, 0x01, 0x0a, 0x07, 0x42, 0x61, 0x62,
	0x65, 0x5f, 0x56, 0x31, 0x12, 0x3e, 0x0a, 0x01, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x62, 0x65, 0x5f,
	0x54, 0x75, 0x70, 0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x55, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x52, 0x01, 0x63, 0x12, 0x4b, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f,
	0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x6c,
	0x6f, 0x74, 0x73, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x6c, 0x6f, 0x74,
	0x73, 0x22, 0x6e, 0x0a, 0x17, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x5f, 0x4e, 0x6f, 0x74,
	0x65, 0x53, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x64, 0x65, 0x6c,
	0x61, 0x79, 0x12, 0x3d, 0x0a, 0x1b, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x62, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6e,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x22, 0x71, 0x0a, 0x13, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x53, 0x65, 0x74,
	0x4b, 0x65, 0x79, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x44, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x61, 0x72, 0x61, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x70,
	0x72, 0x6f, 0x6f, 0x66, 0x22, 0x58, 0x0a, 0x0b, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79,
	0x5f, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x70, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x33, 0x32, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0x28,
	0x0a, 0x0e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x39,
	0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0x33, 0x0a, 0x19, 0x4e, 0x6f, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x33, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0x55, 0x0a,
	0x18, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f,
	0x54, 0x75, 0x70, 0x6c, 0x65, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x39, 0x0a, 0x1a, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x6c, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22,
	0x8c, 0x01, 0x0a, 0x13, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x41, 0x64, 0x64,
	0x53, 0x75, 0x62, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x38, 0x0a, 0x03, 0x73, 0x75, 0x62, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x53, 0x75, 0x62, 0x52, 0x03, 0x73, 0x75,
	0x62, 0x12, 0x3b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xf7,
	0x01, 0x0a, 0x50, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x54, 0x75,
	0x70, 0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x37, 0x4c, 0x69, 0x73, 0x74, 0x75, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x12, 0x73, 0x0a, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x31, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x5f, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x70, 0x41,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x50, 0x65, 0x72, 0x54, 0x68, 0x69, 0x6e,
	0x67, 0x73, 0x50, 0x65, 0x72, 0x55, 0x31, 0x36, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x31,
	0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x22, 0x83, 0x02, 0x0a, 0x23, 0x4e, 0x6f, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x44, 0x0a, 0x04, 0x6e, 0x6f, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x4e, 0x6f, 0x6f, 0x70, 0x48, 0x00,
	0x52, 0x04, 0x6e, 0x6f, 0x6f, 0x70, 0x12, 0x41, 0x0a, 0x03, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x53,
	0x65, 0x74, 0x48, 0x00, 0x52, 0x03, 0x73, 0x65, 0x74, 0x12, 0x4a, 0x0a, 0x06, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x00, 0x52, 0x06, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x30,
	0x0a, 0x16, 0x53, 0x70, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x72, 0x32, 0x35, 0x35, 0x31, 0x39, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30,
	0x22, 0x31, 0x0a, 0x19, 0x50, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x4e, 0x6f, 0x74,
	0x65, 0x50, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x14, 0x0a,
	0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x22, 0x27, 0x0a, 0x0d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x52, 0x61, 0x77, 0x38, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0xf9, 0x13, 0x0a,
	0x0e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x3d, 0x0a, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x12, 0x3d,
	0x0a, 0x04, 0x72, 0x61, 0x77, 0x30, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x52, 0x61, 0x77, 0x30, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61, 0x77, 0x30, 0x12, 0x3d, 0x0a,
	0x04, 0x72, 0x61, 0x77, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x52, 0x61, 0x77, 0x31, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61, 0x77, 0x31, 0x12, 0x3d, 0x0a, 0x04,
	0x72, 0x61, 0x77, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52,
	0x61, 0x77, 0x32, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61, 0x77, 0x32, 0x12, 0x3d, 0x0a, 0x04, 0x72,
	0x61, 0x77, 0x33, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61,
	0x77, 0x33, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61, 0x77, 0x33, 0x12, 0x3d, 0x0a, 0x04, 0x72, 0x61,
	0x77, 0x34, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77,
	0x34, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61, 0x77, 0x34, 0x12, 0x3d, 0x0a, 0x04, 0x72, 0x61, 0x77,
	0x35, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x35,
	0x48, 0x00, 0x52, 0x04, 0x72, 0x61, 0x77, 0x35, 0x12, 0x3d, 0x0a, 0x04, 0x72, 0x61, 0x77, 0x36,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x36, 0x48,
	0x00, 0x52, 0x04, 0x72, 0x61, 0x77, 0x36, 0x12, 0x3d, 0x0a, 0x04, 0x72, 0x61, 0x77, 0x37, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x37, 0x48, 0x00,
	0x52, 0x04, 0x72, 0x61, 0x77, 0x37, 0x12, 0x3d, 0x0a, 0x04, 0x72, 0x61, 0x77, 0x38, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x38, 0x48, 0x00, 0x52,
	0x04, 0x72, 0x61, 0x77, 0x38, 0x12, 0x3d, 0x0a, 0x04, 0x72, 0x61, 0x77, 0x39, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x39, 0x48, 0x00, 0x52, 0x04,
	0x72, 0x61, 0x77, 0x39, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x31, 0x30, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x30, 0x48, 0x00, 0x52,
	0x05, 0x72, 0x61, 0x77, 0x31, 0x30, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x31, 0x31, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x31, 0x48,
	0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x31, 0x31, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x31,
	0x32, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31,
	0x32, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x31, 0x32, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61,
	0x77, 0x31, 0x33, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61,
	0x77, 0x31, 0x33, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x31, 0x33, 0x12, 0x40, 0x0a, 0x05,
	0x72, 0x61, 0x77, 0x31, 0x34, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x52, 0x61, 0x77, 0x31, 0x34, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x31, 0x34, 0x12, 0x40,
	0x0a, 0x05, 0x72, 0x61, 0x77, 0x31, 0x35, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x35, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x31, 0x35,
	0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x31, 0x36, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x36, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77,
	0x31, 0x36, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x31, 0x37, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x37, 0x48, 0x00, 0x52, 0x05, 0x72,
	0x61, 0x77, 0x31, 0x37, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x31, 0x38, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x38, 0x48, 0x00, 0x52,
	0x05, 0x72, 0x61, 0x77, 0x31, 0x38, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x31, 0x39, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x39, 0x48,
	0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x31, 0x39, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x32,
	0x30, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32,
	0x30, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x32, 0x30, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61,
	0x77, 0x32, 0x31, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61,
	0x77, 0x32, 0x31, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x32, 0x31, 0x12, 0x40, 0x0a, 0x05,
	0x72, 0x61, 0x77, 0x32, 0x32, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x52, 0x61, 0x77, 0x32, 0x32, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x32, 0x32, 0x12, 0x40,
	0x0a, 0x05, 0x72, 0x61, 0x77, 0x32, 0x33, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x33, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x32, 0x33,
	0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x32, 0x34, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x34, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77,
	0x32, 0x34, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x32, 0x35, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x35, 0x48, 0x00, 0x52, 0x05, 0x72,
	0x61, 0x77, 0x32, 0x35, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x32, 0x36, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x36, 0x48, 0x00, 0x52,
	0x05, 0x72, 0x61, 0x77, 0x32, 0x36, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x32, 0x37, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x37, 0x48,
	0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x32, 0x37, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x32,
	0x38, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32,
	0x38, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x32, 0x38, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61,
	0x77, 0x32, 0x39, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61,
	0x77, 0x32, 0x39, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x32, 0x39, 0x12, 0x40, 0x0a, 0x05,
	0x72, 0x61, 0x77, 0x33, 0x30, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x52, 0x61, 0x77, 0x33, 0x30, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x33, 0x30, 0x12, 0x40,
	0x0a, 0x05, 0x72, 0x61, 0x77, 0x33, 0x31, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x52, 0x61, 0x77, 0x33, 0x31, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x33, 0x31,
	0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x33, 0x32, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x33, 0x32, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77,
	0x33, 0x32, 0x12, 0x53, 0x0a, 0x0c, 0x62, 0x6c, 0x61, 0x6b, 0x65, 0x5f, 0x74, 0x77, 0x6f, 0x32,
	0x35, 0x36, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x42, 0x6c, 0x61,
	0x6b, 0x65, 0x54, 0x77, 0x6f, 0x32, 0x35, 0x36, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x6c, 0x61, 0x6b,
	0x65, 0x54, 0x77, 0x6f, 0x32, 0x35, 0x36, 0x12, 0x43, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x32, 0x35,
	0x36, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x53, 0x68, 0x61, 0x32,
	0x35, 0x36, 0x48, 0x00, 0x52, 0x06, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x12, 0x4c, 0x0a, 0x09,
	0x6b, 0x65, 0x63, 0x63, 0x61, 0x6b, 0x32, 0x35, 0x36, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x4b, 0x65, 0x63, 0x63, 0x61, 0x6b, 0x32, 0x35, 0x36, 0x48, 0x00, 0x52,
	0x09, 0x6b, 0x65, 0x63, 0x63, 0x61, 0x6b, 0x32, 0x35, 0x36, 0x12, 0x53, 0x0a, 0x0c, 0x73, 0x68,
	0x61, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x65, 0x32, 0x35, 0x36, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x53, 0x68, 0x61, 0x54, 0x68, 0x72, 0x65, 0x65, 0x32, 0x35, 0x36,
	0x48, 0x00, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x54, 0x68, 0x72, 0x65, 0x65, 0x32, 0x35, 0x36, 0x42,
	0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3d, 0x0a, 0x13, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x53, 0x65, 0x74, 0x46, 0x65, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x66, 0x65, 0x65, 0x22, 0xdb, 0x01, 0x0a, 0x3b, 0x54, 0x75, 0x70, 0x6c,
	0x65, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x70, 0x61,
	0x50, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x70, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x41, 0x70, 0x70, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x4a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x47, 0x72, 0x61, 0x6e, 0x64,
	0x70, 0x61, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x30, 0x12, 0x50, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x70, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x70,
	0x61, 0x41, 0x70, 0x70, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x31, 0x22, 0x9d, 0x01, 0x0a, 0x24, 0x43, 0x6f, 0x6e, 0x76, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x56, 0x6f, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x49,
	0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x16, 0x0a, 0x14, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x51, 0x75, 0x69, 0x74, 0x53, 0x75, 0x62, 0x43, 0x61, 0x6c, 0x6c, 0x22, 0x56, 0x0a,
	0x0e, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x44, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x74,
	0x69, 0x65, 0x73, 0x5f, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0x9f, 0x01, 0x0a, 0x16, 0x53, 0x70, 0x4e, 0x70, 0x6f, 0x73,
	0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x6f, 0x0a, 0x06, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x54, 0x75, 0x70,
	0x6c, 0x65, 0x53, 0x70, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x33, 0x32, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x06, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x73, 0x22, 0x73, 0x0a, 0x1f, 0x43, 0x68, 0x69, 0x6c, 0x64,
	0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x43,
	0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x6f, 0x75, 0x6e,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x62, 0x6f,
	0x75, 0x6e, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x49, 0x64, 0x22, 0xfa, 0x01, 0x0a,
	0x1a, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73,
	0x5f, 0x4e, 0x65, 0x77, 0x42, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x04, 0x6e,
	0x6f, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x4e, 0x6f, 0x6f, 0x70, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x6f, 0x6f,
	0x70, 0x12, 0x41, 0x0a, 0x03, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52,
	0x03, 0x73, 0x65, 0x74, 0x12, 0x4a, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x73, 0x0a, 0x1e, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4b, 0x65,
	0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x3b, 0x0a, 0x04, 0x64,
	0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x44, 0x65,
	0x73, 0x74, 0x52, 0x04, 0x64, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x81,
	0x01, 0x0a, 0x23, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x46, 0x6f, 0x72, 0x63, 0x65,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x4d, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x5a, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x43, 0x6f, 0x72,
	0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x33, 0x32, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61,
	0x73, 0x68, 0x22, 0x53, 0x0a, 0x17, 0x53, 0x70, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x57,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x56, 0x32, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x72, 0x65, 0x66, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x72, 0x65, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6f,
	0x66, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6f, 0x66, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x27, 0x0a, 0x0d, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x33, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30,
	0x22, 0x28, 0x0a, 0x0e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77,
	0x33, 0x30, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0xb5, 0x01, 0x0a, 0x16, 0x47,
	0x65, 0x61, 0x72, 0x5f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x61, 0x6c,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x61, 0x6c, 0x69, 0x76,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69,
	0x76, 0x65, 0x22, 0x2c, 0x0a, 0x16, 0x47, 0x65, 0x61, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65,
	0x72, 0x5f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x22, 0x37, 0x0a, 0x16, 0x42, 0x61, 0x62, 0x65, 0x5f, 0x42, 0x61, 0x62, 0x65, 0x54, 0x72, 0x69,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72,
	0x69, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x74, 0x72, 0x69, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x59, 0x0a, 0x15, 0x56, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x56, 0x65, 0x73, 0x74, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x61,
	0x6c, 0x6c, 0x12, 0x40, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x06, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x22, 0x10, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f,
	0x53, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x22, 0x1b, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x76, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x4c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x35, 0x58, 0x22, 0xfa, 0x13, 0x0a, 0x0f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x12, 0x3d, 0x0a, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x48, 0x00,
	0x52, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x12, 0x3d, 0x0a, 0x04, 0x72, 0x61, 0x77, 0x30, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x30, 0x48, 0x00, 0x52,
	0x04, 0x72, 0x61, 0x77, 0x30, 0x12, 0x3d, 0x0a, 0x04, 0x72, 0x61, 0x77, 0x31, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x48, 0x00, 0x52, 0x04,
	0x72, 0x61, 0x77, 0x31, 0x12, 0x3d, 0x0a, 0x04, 0x72, 0x61, 0x77, 0x32, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x48, 0x00, 0x52, 0x04, 0x72,
	0x61, 0x77, 0x32, 0x12, 0x3d, 0x0a, 0x04, 0x72, 0x61, 0x77, 0x33, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x33, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61,
	0x77, 0x33, 0x12, 0x3d, 0x0a, 0x04, 0x72, 0x61, 0x77, 0x34, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x34, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61, 0x77,
	0x34, 0x12, 0x3d, 0x0a, 0x04, 0x72, 0x61, 0x77, 0x35, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x35, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61, 0x77, 0x35,
	0x12, 0x3d, 0x0a, 0x04, 0x72, 0x61, 0x77, 0x36, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x36, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61, 0x77, 0x36, 0x12,
	0x3d, 0x0a, 0x04, 0x72, 0x61, 0x77, 0x37, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x52, 0x61, 0x77, 0x37, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61, 0x77, 0x37, 0x12, 0x3d,
	0x0a, 0x04, 0x72, 0x61, 0x77, 0x38, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x52, 0x61, 0x77, 0x38, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61, 0x77, 0x38, 0x12, 0x3d, 0x0a,
	0x04, 0x72, 0x61, 0x77, 0x39, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x52, 0x61, 0x77, 0x39, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61, 0x77, 0x39, 0x12, 0x40, 0x0a, 0x05,
	0x72, 0x61, 0x77, 0x31, 0x30, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x52, 0x61, 0x77, 0x31, 0x30, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x31, 0x30, 0x12, 0x40,
	0x0a, 0x05, 0x72, 0x61, 0x77, 0x31, 0x31, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x31, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x31, 0x31,
	0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x31, 0x32, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x32, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77,
	0x31, 0x32, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x31, 0x33, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x33, 0x48, 0x00, 0x52, 0x05, 0x72,
	0x61, 0x77, 0x31, 0x33, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x31, 0x34, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x34, 0x48, 0x00, 0x52,
	0x05, 0x72, 0x61, 0x77, 0x31, 0x34, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x31, 0x35, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x35, 0x48,
	0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x31, 0x35, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x31,
	0x36, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31,
	0x36, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x31, 0x36, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61,
	0x77, 0x31, 0x37, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61,
	0x77, 0x31, 0x37, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x31, 0x37, 0x12, 0x40, 0x0a, 0x05,
	0x72, 0x61, 0x77, 0x31, 0x38, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x52, 0x61, 0x77, 0x31, 0x38, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x31, 0x38, 0x12, 0x40,
	0x0a, 0x05, 0x72, 0x61, 0x77, 0x31, 0x39, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x39, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x31, 0x39,
	0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x32, 0x30, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x30, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77,
	0x32, 0x30, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x32, 0x31, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x31, 0x48, 0x00, 0x52, 0x05, 0x72,
	0x61, 0x77, 0x32, 0x31, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x32, 0x32, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x32, 0x48, 0x00, 0x52,
	0x05, 0x72, 0x61, 0x77, 0x32, 0x32, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x32, 0x33, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x33, 0x48,
	0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x32, 0x33, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x32,
	0x34, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32,
	0x34, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x32, 0x34, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61,
	0x77, 0x32, 0x35, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61,
	0x77, 0x32, 0x35, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x32, 0x35, 0x12, 0x40, 0x0a, 0x05,
	0x72, 0x61, 0x77, 0x32, 0x36, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x52, 0x61, 0x77, 0x32, 0x36, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x32, 0x36, 0x12, 0x40,
	0x0a, 0x05, 0x72, 0x61, 0x77, 0x32, 0x37, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x37, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x32, 0x37,
	0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x32, 0x38, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x38, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77,
	0x32, 0x38, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x32, 0x39, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x39, 0x48, 0x00, 0x52, 0x05, 0x72,
	0x61, 0x77, 0x32, 0x39, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x33, 0x30, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x33, 0x30, 0x48, 0x00, 0x52,
	0x05, 0x72, 0x61, 0x77, 0x33, 0x30, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x33, 0x31, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x33, 0x31, 0x48,
	0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x33, 0x31, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x33,
	0x32, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x33,
	0x32, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x33, 0x32, 0x12, 0x53, 0x0a, 0x0c, 0x62, 0x6c,
	0x61, 0x6b, 0x65, 0x5f, 0x74, 0x77, 0x6f, 0x32, 0x35, 0x36, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x42, 0x6c, 0x61, 0x6b, 0x65, 0x54, 0x77, 0x6f, 0x32, 0x35, 0x36,
	0x48, 0x00, 0x52, 0x0b, 0x62, 0x6c, 0x61, 0x6b, 0x65, 0x54, 0x77, 0x6f, 0x32, 0x35, 0x36, 0x12,
	0x43, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x48, 0x00, 0x52, 0x06, 0x73, 0x68,
	0x61, 0x32, 0x35, 0x36, 0x12, 0x4c, 0x0a, 0x09, 0x6b, 0x65, 0x63, 0x63, 0x61, 0x6b, 0x32, 0x35,
	0x36, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x4b, 0x65, 0x63, 0x63,
	0x61, 0x6b, 0x32, 0x35, 0x36, 0x48, 0x00, 0x52, 0x09, 0x6b, 0x65, 0x63, 0x63, 0x61, 0x6b, 0x32,
	0x35, 0x36, 0x12, 0x53, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x65, 0x32,
	0x35, 0x36, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x53, 0x68, 0x61,
	0x54, 0x68, 0x72, 0x65, 0x65, 0x32, 0x35, 0x36, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x54,
	0x68, 0x72, 0x65, 0x65, 0x32, 0x35, 0x36, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x2d, 0x0a, 0x13, 0x53, 0x70, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x72, 0x32, 0x35, 0x35, 0x31,
	0x39, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22,
	0xed, 0x01, 0x0a, 0x23, 0x42, 0x61, 0x62, 0x65, 0x5f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45,
	0x71, 0x75, 0x69, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x6a, 0x0a, 0x12, 0x65, 0x71, 0x75, 0x69, 0x76,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x70, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x45,
	0x71, 0x75, 0x69, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x52, 0x11, 0x65, 0x71, 0x75, 0x69, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x12, 0x5a, 0x0a, 0x0f, 0x6b, 0x65, 0x79, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x52, 0x0d, 0x6b, 0x65, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x22,
	0x4f, 0x0a, 0x12, 0x42, 0x61, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x54, 0x75, 0x70, 0x6c,
	0x65, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x75, 0x70, 0x6c, 0x65, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x4d, 0x0a, 0x11, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22,
	0xf7, 0x01, 0x0a, 0x50, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x54,
	0x75, 0x70, 0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x75, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x12, 0x73, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61,
	0x73, 0x65, 0x5f, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x70,
	0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x50, 0x65, 0x72, 0x54, 0x68, 0x69,
	0x6e, 0x67, 0x73, 0x50, 0x65, 0x72, 0x55, 0x31, 0x36, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x31, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x22, 0xe7, 0x02, 0x0a, 0x0e, 0x56, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x36, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x49, 0x64, 0x48, 0x00,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x48, 0x00, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x39, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x52, 0x61, 0x77, 0x48, 0x00, 0x52, 0x03, 0x72, 0x61, 0x77,
	0x12, 0x4b, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32,
	0x48, 0x00, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x12, 0x4b, 0x0a,
	0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x48, 0x00, 0x52,
	0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x9d, 0x03, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12,
	0x3f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x49, 0x64, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x48, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x42, 0x0a, 0x03, 0x72, 0x61,
	0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x52, 0x61, 0x77, 0x48, 0x00, 0x52, 0x03, 0x72, 0x61, 0x77, 0x12, 0x54,
	0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x48, 0x00, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x33, 0x32, 0x12, 0x54, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32,
	0x30, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x48, 0x00, 0x52,
	0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x38, 0x0a, 0x1e, 0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69,
	0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x32, 0x30, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0x58, 0x0a,
	0x0b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x33, 0x32, 0x52,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0xe7, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x61, 0x72,
	0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x61,
	0x6c, 0x6c, 0x12, 0x44, 0x0a, 0x07, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x64,
	0x52, 0x06, 0x63, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x61, 0x6c, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x69, 0x6e, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x61, 0x6c, 0x69, 0x76, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76,
	0x65, 0x22, 0x18, 0x0a, 0x16, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x22, 0xeb, 0x02, 0x0a, 0x0c,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x4d, 0x0a, 0x0d,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x83, 0x01, 0x0a, 0x21,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x6c, 0x6f, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x6e, 0x64, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x73,
	0x48, 0x00, 0x52, 0x1d, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x6e, 0x64, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x53, 0x6c, 0x6f, 0x74,
	0x73, 0x12, 0x7d, 0x0a, 0x1f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x6e, 0x64,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x76, 0x72, 0x66, 0x5f, 0x73,
	0x6c, 0x6f, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x6e, 0x64,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x56, 0x72, 0x66, 0x53, 0x6c, 0x6f, 0x74,
	0x73, 0x48, 0x00, 0x52, 0x1b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x6e, 0x64, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x56, 0x72, 0x66, 0x53, 0x6c, 0x6f, 0x74, 0x73,
	0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x49, 0x0a, 0x2f, 0x43, 0x6f, 0x6e,
	0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x50, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f,
	0x74, 0x69, 0x6e, 0x67, 0x56, 0x6f, 0x74, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x30, 0x22, 0xf2, 0x04, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12,
	0x52, 0x0a, 0x09, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x56,
	0x6f, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x08, 0x76, 0x6f, 0x74, 0x65, 0x43,
	0x61, 0x6c, 0x6c, 0x12, 0x5e, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x43,
	0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x43,
	0x61, 0x6c, 0x6c, 0x12, 0x64, 0x0a, 0x0f, 0x75, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x55, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0e, 0x75, 0x6e, 0x64, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x58, 0x0a, 0x0b, 0x75, 0x6e, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x55, 0x6e, 0x6c, 0x6f, 0x63,
	0x6b, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0a, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x43,
	0x61, 0x6c, 0x6c, 0x12, 0x65, 0x0a, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x76, 0x6f,
	0x74, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x56, 0x6f, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x75, 0x0a, 0x16, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4f, 0x74, 0x68,
	0x65, 0x72, 0x56, 0x6f, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x13, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x56, 0x6f, 0x74, 0x65, 0x43, 0x61, 0x6c,
	0x6c, 0x42, 0x06, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x22, 0x56, 0x0a, 0x0e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x44, 0x0a, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x54, 0x75, 0x70, 0x6c, 0x65, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x30, 0x22, 0xee, 0x02, 0x0a, 0x10, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x49, 0x64, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x40, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x3a, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x48, 0x00, 0x52, 0x03, 0x72, 0x61, 0x77, 0x12, 0x4c, 0x0a,
	0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x48, 0x00,
	0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x12, 0x4c, 0x0a, 0x09, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x48, 0x00, 0x52, 0x09,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x25, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x52, 0x61,
	0x77, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0xec, 0x01, 0x0a, 0x12, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x5f, 0x4b, 0x69, 0x6c, 0x6c, 0x50, 0x75, 0x72, 0x65, 0x43, 0x61, 0x6c, 0x6c,
	0x12, 0x41, 0x0a, 0x07, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x5f, 0x53, 0x70, 0x61, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x07, 0x73, 0x70, 0x61, 0x77,
	0x6e, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x65, 0x78, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x91, 0x02, 0x0a, 0x1a, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x73, 0x69, 0x67, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x73, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x5e, 0x0a, 0x11, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x43, 0x6f,
	0x72, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x33, 0x32, 0x52, 0x10, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x5f, 0x50, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x48, 0x61, 0x73, 0x68, 0x22, 0x2c, 0x0a, 0x12,
	0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x32, 0x30, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0x81, 0x06, 0x0a, 0x0a, 0x47,
	0x65, 0x61, 0x72, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x59, 0x0a, 0x10, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x61, 0x72, 0x5f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x61,
	0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x64, 0x65,
	0x43, 0x61, 0x6c, 0x6c, 0x12, 0x62, 0x0a, 0x13, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x61,
	0x72, 0x5f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x43,
	0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x11, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x62, 0x0a, 0x13, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x61, 0x72, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x5c, 0x0a, 0x11,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x61, 0x6c,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x61, 0x72, 0x5f, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x65, 0x6e, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x56, 0x0a, 0x0f, 0x73, 0x65,
	0x6e, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x61, 0x72, 0x5f, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x61, 0x6c,
	0x6c, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x61,
	0x6c, 0x6c, 0x12, 0x59, 0x0a, 0x10, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x61, 0x72, 0x5f, 0x43, 0x6c, 0x61,
	0x69, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0e, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x43, 0x0a,
	0x08, 0x72, 0x75, 0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x61, 0x72, 0x5f,
	0x52, 0x75, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x43, 0x61,
	0x6c, 0x6c, 0x12, 0x72, 0x0a, 0x19, 0x73, 0x65, 0x74, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x5f, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x61, 0x72, 0x5f, 0x53, 0x65, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x49, 0x6e, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x16,
	0x73, 0x65, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x68, 0x65, 0x72, 0x65,
	0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x06, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x22, 0x76,
	0x0a, 0x18, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x3b, 0x0a, 0x04, 0x64, 0x65,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x44, 0x65, 0x73,
	0x74, 0x52, 0x04, 0x64, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6b, 0x65, 0x65, 0x70, 0x5f,
	0x61, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6b, 0x65, 0x65,
	0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x22, 0x35, 0x0a, 0x1b, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x46, 0x72, 0x65, 0x65, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0x13, 0x0a,
	0x11, 0x47, 0x65, 0x61, 0x72, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x50, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x22, 0x76, 0x0a, 0x22, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74,
	0x69, 0x65, 0x73, 0x5f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x42, 0x6f,
	0x75, 0x6e, 0x74, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x79,
	0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x62, 0x6f, 0x75, 0x6e,
	0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x49, 0x64, 0x22, 0x7e, 0x0a, 0x26, 0x4e, 0x6f,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x53, 0x65,
	0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x43, 0x61, 0x6c, 0x6c, 0x12, 0x54, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f,
	0x6f, 0x6c, 0x73, 0x5f, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x26, 0x0a, 0x0c, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x52, 0x61, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x30, 0x22, 0x57, 0x0a, 0x1b, 0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x73, 0x12, 0x38, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x30, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0x27, 0x0a, 0x0d, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x35, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x30, 0x22, 0xf7, 0x01, 0x0a, 0x50, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x5f, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x35, 0x4c,
	0x69, 0x73, 0x74, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x30, 0x12, 0x73, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x5b, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x55, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x53, 0x70, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x50,
	0x65, 0x72, 0x54, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x65, 0x72, 0x55, 0x31, 0x36, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x22, 0x58,
	0x0a, 0x0b, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x49, 0x64, 0x12, 0x49, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x43, 0x6f, 0x72, 0x65, 0x43,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x33, 0x32,
	0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0x2c, 0x0a, 0x12, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0x2c, 0x0a, 0x12, 0x47, 0x70, 0x72, 0x69, 0x6d, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x73, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x30, 0x22, 0x29, 0x0a, 0x0f, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64,
	0x61, 0x5f, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22,
	0x9d, 0x02, 0x0a, 0x14, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x5b, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x4f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x4f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x48, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12,
	0x5e, 0x0a, 0x10, 0x65, 0x6e, 0x61, 0x63, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f, 0x45,
	0x6e, 0x61, 0x63, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0f,
	0x65, 0x6e, 0x61, 0x63, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0xf9, 0x13, 0x0a, 0x0e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x3d, 0x0a, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x6f, 0x6e,
	0x65, 0x12, 0x3d, 0x0a, 0x04, 0x72, 0x61, 0x77, 0x30, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x30, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61, 0x77, 0x30,
	0x12, 0x3d, 0x0a, 0x04, 0x72, 0x61, 0x77, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61, 0x77, 0x31, 0x12,
	0x3d, 0x0a, 0x04, 0x72, 0x61, 0x77, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61, 0x77, 0x32, 0x12, 0x3d,
	0x0a, 0x04, 0x72, 0x61, 0x77, 0x33, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x52, 0x61, 0x77, 0x33, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61, 0x77, 0x33, 0x12, 0x3d, 0x0a,
	0x04, 0x72, 0x61, 0x77, 0x34, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x52, 0x61, 0x77, 0x34, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61, 0x77, 0x34, 0x12, 0x3d, 0x0a, 0x04,
	0x72, 0x61, 0x77, 0x35, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52,
	0x61, 0x77, 0x35, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61, 0x77, 0x35, 0x12, 0x3d, 0x0a, 0x04, 0x72,
	0x61, 0x77, 0x36, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61,
	0x77, 0x36, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61, 0x77, 0x36, 0x12, 0x3d, 0x0a, 0x04, 0x72, 0x61,
	0x77, 0x37, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77,
	0x37, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61, 0x77, 0x37, 0x12, 0x3d, 0x0a, 0x04, 0x72, 0x61, 0x77,
	0x38, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x38,
	0x48, 0x00, 0x52, 0x04, 0x72, 0x61, 0x77, 0x38, 0x12, 0x3d, 0x0a, 0x04, 0x72, 0x61, 0x77, 0x39,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x39, 0x48,
	0x00, 0x52, 0x04, 0x72, 0x61, 0x77, 0x39, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x31, 0x30,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x30,
	0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x31, 0x30, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77,
	0x31, 0x31, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77,
	0x31, 0x31, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x31, 0x31, 0x12, 0x40, 0x0a, 0x05, 0x72,
	0x61, 0x77, 0x31, 0x32, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52,
	0x61, 0x77, 0x31, 0x32, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x31, 0x32, 0x12, 0x40, 0x0a,
	0x05, 0x72, 0x61, 0x77, 0x31, 0x33, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x52, 0x61, 0x77, 0x31, 0x33, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x31, 0x33, 0x12,
	0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x31, 0x34, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x34, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x31,
	0x34, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x31, 0x35, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x35, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61,
	0x77, 0x31, 0x35, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x31, 0x36, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x36, 0x48, 0x00, 0x52, 0x05,
	0x72, 0x61, 0x77, 0x31, 0x36, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x31, 0x37, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x37, 0x48, 0x00,
	0x52, 0x05, 0x72, 0x61, 0x77, 0x31, 0x37, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x31, 0x38,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x38,
	0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x31, 0x38, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77,
	0x31, 0x39, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77,
	0x31, 0x39, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x31, 0x39, 0x12, 0x40, 0x0a, 0x05, 0x72,
	0x61, 0x77, 0x32, 0x30, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52,
	0x61, 0x77, 0x32, 0x30, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x32, 0x30, 0x12, 0x40, 0x0a,
	0x05, 0x72, 0x61, 0x77, 0x32, 0x31, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x52, 0x61, 0x77, 0x32, 0x31, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x32, 0x31, 0x12,
	0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x32, 0x32, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x32, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x32,
	0x32, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x32, 0x33, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x33, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61,
	0x77, 0x32, 0x33, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x32, 0x34, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x34, 0x48, 0x00, 0x52, 0x05,
	0x72, 0x61, 0x77, 0x32, 0x34, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x32, 0x35, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x35, 0x48, 0x00,
	0x52, 0x05, 0x72, 0x61, 0x77, 0x32, 0x35, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x32, 0x36,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x36,
	0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x32, 0x36, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77,
	0x32, 0x37, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77,
	0x32, 0x37, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x32, 0x37, 0x12, 0x40, 0x0a, 0x05, 0x72,
	0x61, 0x77, 0x32, 0x38, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52,
	0x61, 0x77, 0x32, 0x38, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x32, 0x38, 0x12, 0x40, 0x0a,
	0x05, 0x72, 0x61, 0x77, 0x32, 0x39, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x52, 0x61, 0x77, 0x32, 0x39, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x32, 0x39, 0x12,
	0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x33, 0x30, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x33, 0x30, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x33,
	0x30, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x33, 0x31, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x33, 0x31, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61,
	0x77, 0x33, 0x31, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x33, 0x32, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x33, 0x32, 0x48, 0x00, 0x52, 0x05,
	0x72, 0x61, 0x77, 0x33, 0x32, 0x12, 0x53, 0x0a, 0x0c, 0x62, 0x6c, 0x61, 0x6b, 0x65, 0x5f, 0x74,
	0x77, 0x6f, 0x32, 0x35, 0x36, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x42, 0x6c, 0x61, 0x6b, 0x65, 0x54, 0x77, 0x6f, 0x32, 0x35, 0x36, 0x48, 0x00, 0x52, 0x0b, 0x62,
	0x6c, 0x61, 0x6b, 0x65, 0x54, 0x77, 0x6f, 0x32, 0x35, 0x36, 0x12, 0x43, 0x0a, 0x06, 0x73, 0x68,
	0x61, 0x32, 0x35, 0x36, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x53,
	0x68, 0x61, 0x32, 0x35, 0x36, 0x48, 0x00, 0x52, 0x06, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x12,
	0x4c, 0x0a, 0x09, 0x6b, 0x65, 0x63, 0x63, 0x61, 0x6b, 0x32, 0x35, 0x36, 0x18, 0x25, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x4b, 0x65, 0x63, 0x63, 0x61, 0x6b, 0x32, 0x35, 0x36,
	0x48, 0x00, 0x52, 0x09, 0x6b, 0x65, 0x63, 0x63, 0x61, 0x6b, 0x32, 0x35, 0x36, 0x12, 0x53, 0x0a,
	0x0c, 0x73, 0x68, 0x61, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x65, 0x32, 0x35, 0x36, 0x18, 0x26, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x53, 0x68, 0x61, 0x54, 0x68, 0x72, 0x65, 0x65,
	0x32, 0x35, 0x36, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x54, 0x68, 0x72, 0x65, 0x65, 0x32,
	0x35, 0x36, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x14, 0x0a, 0x12, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x45, 0x72, 0x72, 0x6f, 0x6e, 0x65, 0x6f, 0x75,
	0x73, 0x22, 0x50, 0x0a, 0x08, 0x42, 0x54, 0x72, 0x65, 0x65, 0x53, 0x65, 0x74, 0x12, 0x44, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x74,
	0x69, 0x76, 0x65, 0x73, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x52, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x30, 0x22, 0x81, 0x02, 0x0a, 0x12, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79,
	0x5f, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x4b, 0x0a, 0x0a, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x79, 0x5f, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x09, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x53, 0x0a, 0x0b, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x70, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x33, 0x32, 0x52, 0x0b, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63,
	0x69, 0x61, 0x72, 0x79, 0x12, 0x22, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x46, 0x72, 0x6f, 0x6d, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x22, 0x28, 0x0a, 0x0e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x38, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x30, 0x22, 0x0b, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x41, 0x6e, 0x79, 0x22, 0x9e,
	0x03, 0x0a, 0x1d, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f,
	0x6c, 0x73, 0x5f, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x3e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x49, 0x64, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x47, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x48, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x41, 0x0a, 0x03, 0x72, 0x61, 0x77,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c,
	0x73, 0x5f, 0x52, 0x61, 0x77, 0x48, 0x00, 0x52, 0x03, 0x72, 0x61, 0x77, 0x12, 0x53, 0x0a, 0x09,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x33, 0x32, 0x48, 0x00, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33,
	0x32, 0x12, 0x53, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x48, 0x00, 0x52, 0x09, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x8a, 0x01, 0x0a, 0x1c, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f,
	0x6f, 0x6c, 0x73, 0x5f, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c,
	0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x0a, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x43, 0x6f, 0x72, 0x65, 0x43,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x33, 0x32,
	0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x22, 0xc5, 0x02, 0x0a,
	0x0e, 0x42, 0x61, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12,
	0x4d, 0x0a, 0x0a, 0x72, 0x65, 0x62, 0x61, 0x67, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x61, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x52, 0x65, 0x62, 0x61, 0x67, 0x43, 0x61, 0x6c,
	0x6c, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x62, 0x61, 0x67, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x65,
	0x0a, 0x14, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x5f, 0x6f,
	0x66, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x5f, 0x50, 0x75, 0x74, 0x49, 0x6e, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x4f, 0x66, 0x43, 0x61, 0x6c,
	0x6c, 0x48, 0x00, 0x52, 0x10, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x4f,
	0x66, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x75, 0x0a, 0x1a, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x5f,
	0x66, 0x72, 0x6f, 0x6e, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x50, 0x75,
	0x74, 0x49, 0x6e, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x4f, 0x66, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x43,
	0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x15, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x46, 0x72, 0x6f, 0x6e,
	0x74, 0x4f, 0x66, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x06, 0x0a, 0x04,
	0x63, 0x61, 0x6c, 0x6c, 0x22, 0x19, 0x0a, 0x17, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f,
	0x46, 0x6f, 0x72, 0x63, 0x65, 0x4e, 0x65, 0x77, 0x45, 0x72, 0x61, 0x43, 0x61, 0x6c, 0x6c, 0x22,
	0x66, 0x0a, 0x1d, 0x53, 0x70, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x41, 0x70, 0x70, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x12, 0x45, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x43, 0x6f,
	0x72, 0x65, 0x53, 0x72, 0x32, 0x35, 0x35, 0x31, 0x39, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0xc2, 0x0b, 0x0a, 0x0e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x63, 0x0a, 0x12, 0x61, 0x64,
	0x64, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x41, 0x64, 0x64, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x10, 0x61,
	0x64, 0x64, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x12,
	0x60, 0x0a, 0x11, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x53,
	0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00,
	0x52, 0x0f, 0x73, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x61, 0x6c,
	0x6c, 0x12, 0x54, 0x0a, 0x0d, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x53, 0x65, 0x74,
	0x53, 0x75, 0x62, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x65, 0x74, 0x53,
	0x75, 0x62, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x66, 0x0a, 0x13, 0x63, 0x6c, 0x65, 0x61, 0x72,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x11, 0x63, 0x6c,
	0x65, 0x61, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x12,
	0x6f, 0x0a, 0x16, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6a, 0x75, 0x64, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4a, 0x75, 0x64, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x14, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c,
	0x12, 0x66, 0x0a, 0x13, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x11, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x51, 0x0a, 0x0c, 0x73, 0x65, 0x74, 0x5f,
	0x66, 0x65, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x53, 0x65, 0x74, 0x46, 0x65, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52,
	0x0a, 0x73, 0x65, 0x74, 0x46, 0x65, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x64, 0x0a, 0x13, 0x73,
	0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x53, 0x65, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52,
	0x10, 0x73, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x43, 0x61, 0x6c,
	0x6c, 0x12, 0x5a, 0x0a, 0x0f, 0x73, 0x65, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x53,
	0x65, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0d,
	0x73, 0x65, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x6f, 0x0a,
	0x16, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x5f, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x63,
	0x0a, 0x12, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x4b,
	0x69, 0x6c, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x48,
	0x00, 0x52, 0x10, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43,
	0x61, 0x6c, 0x6c, 0x12, 0x51, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x41, 0x64,
	0x64, 0x53, 0x75, 0x62, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x53,
	0x75, 0x62, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x5a, 0x0a, 0x0f, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x43, 0x61, 0x6c,
	0x6c, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x43, 0x61,
	0x6c, 0x6c, 0x12, 0x5a, 0x0a, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x73, 0x75, 0x62,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x75, 0x62, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52,
	0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x75, 0x62, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x54,
	0x0a, 0x0d, 0x71, 0x75, 0x69, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x51, 0x75, 0x69, 0x74, 0x53, 0x75,
	0x62, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0b, 0x71, 0x75, 0x69, 0x74, 0x53, 0x75, 0x62,
	0x43, 0x61, 0x6c, 0x6c, 0x42, 0x06, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x22, 0x0f, 0x0a, 0x0d,
	0x47, 0x65, 0x61, 0x72, 0x47, 0x61, 0x73, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x22, 0xf1, 0x02,
	0x0a, 0x13, 0x42, 0x61, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x44, 0x69, 0x73, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x67,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x49, 0x64, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x67, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x5f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x3a, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x67, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x5f, 0x52, 0x61, 0x77, 0x48, 0x00, 0x52, 0x03, 0x72, 0x61, 0x77, 0x12, 0x4c, 0x0a, 0x09,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x67, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x48, 0x00, 0x52,
	0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x12, 0x4c, 0x0a, 0x09, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x67, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x48, 0x00, 0x52, 0x09, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x2e, 0x0a, 0x14, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x53, 0x68,
	0x61, 0x54, 0x68, 0x72, 0x65, 0x65, 0x32, 0x35, 0x36, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x30, 0x22, 0x71, 0x0a, 0x28, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x50, 0x6f, 0x6f, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x55, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x17, 0x0a,
	0x07, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x6c,
	0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x70, 0x61, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x53,
	0x70, 0x61, 0x6e, 0x73, 0x22, 0x8d, 0x03, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x54, 0x6f, 0x12, 0x3d, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x5f, 0x49, 0x64, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x46, 0x0a, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x5f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x40, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x52, 0x61, 0x77, 0x48, 0x00, 0x52, 0x03,
	0x72, 0x61, 0x77, 0x12, 0x52, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x48, 0x00, 0x52, 0x09, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x12, 0x52, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x32, 0x30, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x48, 0x00,
	0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x42, 0x07, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0xbe, 0x04, 0x0a, 0x12, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x07, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x12, 0x47, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x46, 0x65, 0x65, 0x50, 0x61, 0x69,
	0x64, 0x48, 0x00, 0x52, 0x07, 0x66, 0x65, 0x65, 0x50, 0x61, 0x69, 0x64, 0x12, 0x4f, 0x0a, 0x0a,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x48,
	0x00, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x4d, 0x0a,
	0x0a, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x47, 0x6f, 0x6f, 0x64, 0x48,
	0x00, 0x52, 0x09, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x47, 0x6f, 0x6f, 0x64, 0x12, 0x4e, 0x0a, 0x0b,
	0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x44, 0x61, 0x74, 0x65, 0x48,
	0x00, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x4f, 0x66, 0x44, 0x61, 0x74, 0x65, 0x12, 0x50, 0x0a, 0x0b,
	0x6c, 0x6f, 0x77, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x4c, 0x6f, 0x77, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x48, 0x00, 0x52, 0x0a, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x4c,
	0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x6e, 0x65, 0x6f, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x45, 0x72, 0x72, 0x6f, 0x6e, 0x65, 0x6f, 0x75, 0x73, 0x48,
	0x00, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x6e, 0x65, 0x6f, 0x75, 0x73, 0x42, 0x07, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x26, 0x0a, 0x0c, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65,
	0x73, 0x5f, 0x52, 0x61, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0x70, 0x0a,
	0x1b, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x3b, 0x0a, 0x02,
	0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x5f, 0x54, 0x6f, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x41, 0x0a, 0x0f, 0x42, 0x61, 0x62, 0x65, 0x5f, 0x50, 0x72, 0x65, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x31, 0x22, 0x97, 0x06, 0x0a, 0x0e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x50,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x76, 0x0a, 0x19, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x64, 0x65, 0x61, 0x74, 0x68, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x44, 0x65, 0x61, 0x74, 0x68, 0x43,
	0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x44, 0x65, 0x61, 0x74, 0x68, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x66, 0x0a,
	0x13, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x46,
	0x6f, 0x72, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c,
	0x48, 0x00, 0x52, 0x11, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x73, 0x0a, 0x18, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x5f, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x61, 0x6c,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x43, 0x61, 0x6c,
	0x6c, 0x48, 0x00, 0x52, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4b, 0x65, 0x65,
	0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x60, 0x0a, 0x11, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x41, 0x6c, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x69, 0x0a, 0x14,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x46,
	0x6f, 0x72, 0x63, 0x65, 0x55, 0x6e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x43, 0x61, 0x6c,
	0x6c, 0x48, 0x00, 0x52, 0x12, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x55, 0x6e, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x6c, 0x0a, 0x15, 0x75, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x5f, 0x63, 0x61, 0x6c, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00,
	0x52, 0x13, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x6d, 0x0a, 0x16, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x73,
	0x65, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x53,
	0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52,
	0x13, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x53, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x43, 0x61, 0x6c, 0x6c, 0x42, 0x06, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x22, 0xee, 0x02, 0x0a,
	0x10, 0x42, 0x61, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x65,
	0x72, 0x12, 0x37, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x67, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x5f, 0x49, 0x64, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3a, 0x0a, 0x03,
	0x72, 0x61, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x52, 0x61,
	0x77, 0x48, 0x00, 0x52, 0x03, 0x72, 0x61, 0x77, 0x12, 0x4c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x33, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x5f,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x48, 0x00, 0x52, 0x09, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x12, 0x4c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x32, 0x30, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x48, 0x00, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x32, 0x30, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2c, 0x0a,
	0x12, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x32, 0x30, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0xf9, 0x13, 0x0a, 0x0e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x12, 0x3d,
	0x0a, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x12, 0x3d, 0x0a,
	0x04, 0x72, 0x61, 0x77, 0x30, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x52, 0x61, 0x77, 0x30, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61, 0x77, 0x30, 0x12, 0x3d, 0x0a, 0x04,
	0x72, 0x61, 0x77, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52,
	0x61, 0x77, 0x31, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61, 0x77, 0x31, 0x12, 0x3d, 0x0a, 0x04, 0x72,
	0x61, 0x77, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61,
	0x77, 0x32, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61, 0x77, 0x32, 0x12, 0x3d, 0x0a, 0x04, 0x72, 0x61,
	0x77, 0x33, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77,
	0x33, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61, 0x77, 0x33, 0x12, 0x3d, 0x0a, 0x04, 0x72, 0x61, 0x77,
	0x34, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x34,
	0x48, 0x00, 0x52, 0x04, 0x72, 0x61, 0x77, 0x34, 0x12, 0x3d, 0x0a, 0x04, 0x72, 0x61, 0x77, 0x35,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x35, 0x48,
	0x00, 0x52, 0x04, 0x72, 0x61, 0x77, 0x35, 0x12, 0x3d, 0x0a, 0x04, 0x72, 0x61, 0x77, 0x36, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x36, 0x48, 0x00,
	0x52, 0x04, 0x72, 0x61, 0x77, 0x36, 0x12, 0x3d, 0x0a, 0x04, 0x72, 0x61, 0x77, 0x37, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x37, 0x48, 0x00, 0x52,
	0x04, 0x72, 0x61, 0x77, 0x37, 0x12, 0x3d, 0x0a, 0x04, 0x72, 0x61, 0x77, 0x38, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x38, 0x48, 0x00, 0x52, 0x04,
	0x72, 0x61, 0x77, 0x38, 0x12, 0x3d, 0x0a, 0x04, 0x72, 0x61, 0x77, 0x39, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x39, 0x48, 0x00, 0x52, 0x04, 0x72,
	0x61, 0x77, 0x39, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x31, 0x30, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x30, 0x48, 0x00, 0x52, 0x05,
	0x72, 0x61, 0x77, 0x31, 0x30, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x31, 0x31, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x31, 0x48, 0x00,
	0x52, 0x05, 0x72, 0x61, 0x77, 0x31, 0x31, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x31, 0x32,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x32,
	0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x31, 0x32, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77,
	0x31, 0x33, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77,
	0x31, 0x33, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x31, 0x33, 0x12, 0x40, 0x0a, 0x05, 0x72,
	0x61, 0x77, 0x31, 0x34, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52,
	0x61, 0x77, 0x31, 0x34, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x31, 0x34, 0x12, 0x40, 0x0a,
	0x05, 0x72, 0x61, 0x77, 0x31, 0x35, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x52, 0x61, 0x77, 0x31, 0x35, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x31, 0x35, 0x12,
	0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x31, 0x36, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x36, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x31,
	0x36, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x31, 0x37, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x37, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61,
	0x77, 0x31, 0x37, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x31, 0x38, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x38, 0x48, 0x00, 0x52, 0x05,
	0x72, 0x61, 0x77, 0x31, 0x38, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x31, 0x39, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x39, 0x48, 0x00,
	0x52, 0x05, 0x72, 0x61, 0x77, 0x31, 0x39, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x32, 0x30,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x30,
	0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x32, 0x30, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77,
	0x32, 0x31, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77,
	0x32, 0x31, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x32, 0x31, 0x12, 0x40, 0x0a, 0x05, 0x72,
	0x61, 0x77, 0x32, 0x32, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52,
	0x61, 0x77, 0x32, 0x32, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x32, 0x32, 0x12, 0x40, 0x0a,
	0x05, 0x72, 0x61, 0x77, 0x32, 0x33, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x52, 0x61, 0x77, 0x32, 0x33, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x32, 0x33, 0x12,
	0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x32, 0x34, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x34, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x32,
	0x34, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x32, 0x35, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x35, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61,
	0x77, 0x32, 0x35, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x32, 0x36, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x36, 0x48, 0x00, 0x52, 0x05,
	0x72, 0x61, 0x77, 0x32, 0x36, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x32, 0x37, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x37, 0x48, 0x00,
	0x52, 0x05, 0x72, 0x61, 0x77, 0x32, 0x37, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x32, 0x38,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x38,
	0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x32, 0x38, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77,
	0x32, 0x39, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77,
	0x32, 0x39, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x32, 0x39, 0x12, 0x40, 0x0a, 0x05, 0x72,
	0x61, 0x77, 0x33, 0x30, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52,
	0x61, 0x77, 0x33, 0x30, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x33, 0x30, 0x12, 0x40, 0x0a,
	0x05, 0x72, 0x61, 0x77, 0x33, 0x31, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x52, 0x61, 0x77, 0x33, 0x31, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x33, 0x31, 0x12,
	0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x33, 0x32, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x33, 0x32, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x33,
	0x32, 0x12, 0x53, 0x0a, 0x0c, 0x62, 0x6c, 0x61, 0x6b, 0x65, 0x5f, 0x74, 0x77, 0x6f, 0x32, 0x35,
	0x36, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x42, 0x6c, 0x61, 0x6b,
	0x65, 0x54, 0x77, 0x6f, 0x32, 0x35, 0x36, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x6c, 0x61, 0x6b, 0x65,
	0x54, 0x77, 0x6f, 0x32, 0x35, 0x36, 0x12, 0x43, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x53, 0x68, 0x61, 0x32, 0x35,
	0x36, 0x48, 0x00, 0x52, 0x06, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x12, 0x4c, 0x0a, 0x09, 0x6b,
	0x65, 0x63, 0x63, 0x61, 0x6b, 0x32, 0x35, 0x36, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x4b, 0x65, 0x63, 0x63, 0x61, 0x6b, 0x32, 0x35, 0x36, 0x48, 0x00, 0x52, 0x09,
	0x6b, 0x65, 0x63, 0x63, 0x61, 0x6b, 0x32, 0x35, 0x36, 0x12, 0x53, 0x0a, 0x0c, 0x73, 0x68, 0x61,
	0x5f, 0x74, 0x68, 0x72, 0x65, 0x65, 0x32, 0x35, 0x36, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x53, 0x68, 0x61, 0x54, 0x68, 0x72, 0x65, 0x65, 0x32, 0x35, 0x36, 0x48,
	0x00, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x54, 0x68, 0x72, 0x65, 0x65, 0x32, 0x35, 0x36, 0x42, 0x07,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xe5, 0x01, 0x0a, 0x1d, 0x43, 0x6f, 0x6e, 0x76,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x44, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12,
	0x3d, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x54, 0x6f, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x55,
	0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x43,
	0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x76, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22,
	0x9a, 0x02, 0x0a, 0x22, 0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x4e, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x48, 0x00, 0x52, 0x06,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x51, 0x0a, 0x07, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x73, 0x48, 0x00,
	0x52, 0x07, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x48, 0x0a, 0x04, 0x76, 0x6f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f, 0x56, 0x6f, 0x69, 0x64, 0x48, 0x00, 0x52, 0x04, 0x76,
	0x6f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x31, 0x0a, 0x17,
	0x43, 0x68, 0x69, 0x6c, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22,
	0x68, 0x0a, 0x1c, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x53, 0x65, 0x74, 0x4d, 0x69,
	0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x12,
	0x48, 0x0a, 0x03, 0x6e, 0x65, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x65, 0x74, 0x69, 0x63, 0x50, 0x65, 0x72, 0x54, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x65, 0x72,
	0x62, 0x69, 0x6c, 0x6c, 0x52, 0x03, 0x6e, 0x65, 0x77, 0x22, 0x10, 0x0a, 0x0e, 0x47, 0x65, 0x61,
	0x72, 0x42, 0x61, 0x6e, 0x6b, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x22, 0xa2, 0x06, 0x0a, 0x0c,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x4e, 0x0a, 0x0b,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x5f, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00,
	0x52, 0x0a, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x62, 0x0a, 0x13,
	0x73, 0x65, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x70, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x53, 0x65, 0x74, 0x48,
	0x65, 0x61, 0x70, 0x50, 0x61, 0x67, 0x65, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x10,
	0x73, 0x65, 0x74, 0x48, 0x65, 0x61, 0x70, 0x50, 0x61, 0x67, 0x65, 0x73, 0x43, 0x61, 0x6c, 0x6c,
	0x12, 0x52, 0x0a, 0x0d, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x61, 0x6c,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x43, 0x61, 0x6c, 0x6c, 0x12, 0x7b, 0x0a, 0x1c, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x53, 0x65, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x18, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x43, 0x61, 0x6c,
	0x6c, 0x12, 0x5b, 0x0a, 0x10, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x53, 0x65,
	0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0e,
	0x73, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x5e,
	0x0a, 0x11, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x4b, 0x69, 0x6c, 0x6c,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0f, 0x6b,
	0x69, 0x6c, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x5b,
	0x0a, 0x10, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x4b, 0x69, 0x6c, 0x6c, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0e, 0x6b, 0x69, 0x6c,
	0x6c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x6b, 0x0a, 0x16, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x52, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x57, 0x69, 0x74, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c,
	0x6c, 0x48, 0x00, 0x52, 0x13, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x57, 0x69, 0x74, 0x68, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x06, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c,
	0x22, 0x2c, 0x0a, 0x12, 0x42, 0x61, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0x28,
	0x0a, 0x0e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x30,
	0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0x73, 0x0a, 0x15, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x5f, 0x53, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x61, 0x6c,
	0x6c, 0x12, 0x5a, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x44, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x5f, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xdd, 0x10,
	0x0a, 0x19, 0x56, 0x61, 0x72, 0x61, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4e, 0x70, 0x6f,
	0x73, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x36, 0x12, 0x5e, 0x0a, 0x06, 0x76,
	0x6f, 0x74, 0x65, 0x73, 0x31, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x5f, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x55, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x52, 0x06, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x31, 0x12, 0x84, 0x01, 0x0a, 0x06,
	0x76, 0x6f, 0x74, 0x65, 0x73, 0x32, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x6c, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61,
	0x73, 0x65, 0x5f, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x54, 0x75,
	0x70, 0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x70, 0x41, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x65, 0x74, 0x69, 0x63, 0x50, 0x65, 0x72, 0x54, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x65,
	0x72, 0x55, 0x31, 0x36, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x06, 0x76, 0x6f, 0x74, 0x65,
	0x73, 0x32, 0x12, 0x82, 0x01, 0x0a, 0x06, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x33, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x6a, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x55,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x56,
	0x6f, 0x74, 0x65, 0x73, 0x33, 0x4c, 0x69, 0x73, 0x74, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x52,
	0x06, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x33, 0x12, 0x82, 0x01, 0x0a, 0x06, 0x76, 0x6f, 0x74, 0x65,
	0x73, 0x34, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x6a, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x54,
	0x75, 0x70, 0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x75, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x52, 0x06, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x34, 0x12, 0x82, 0x01, 0x0a,
	0x06, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x35, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x6a, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x5f, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x35, 0x4c,
	0x69, 0x73, 0x74, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x06, 0x76, 0x6f, 0x74, 0x65, 0x73,
	0x35, 0x12, 0x82, 0x01, 0x0a, 0x06, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x36, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x6a, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x55, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x56, 0x6f,
	0x74, 0x65, 0x73, 0x36, 0x4c, 0x69, 0x73, 0x74, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x06,
	0x76, 0x6f, 0x74, 0x65, 0x73, 0x36, 0x12, 0x82, 0x01, 0x0a, 0x06, 0x76, 0x6f, 0x74, 0x65, 0x73,
	0x37, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x6a, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x54, 0x75,
	0x70, 0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x37, 0x4c, 0x69, 0x73, 0x74, 0x75, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x52, 0x06, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x37, 0x12, 0x82, 0x01, 0x0a, 0x06,
	0x76, 0x6f, 0x74, 0x65, 0x73, 0x38, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x6a, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61,
	0x73, 0x65, 0x5f, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x38, 0x4c, 0x69,
	0x73, 0x74, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x06, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x38,
	0x12, 0x82, 0x01, 0x0a, 0x06, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x39, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x6a, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x55, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x56, 0x6f, 0x74,
	0x65, 0x73, 0x39, 0x4c, 0x69, 0x73, 0x74, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x06, 0x76,
	0x6f, 0x74, 0x65, 0x73, 0x39, 0x12, 0x85, 0x01, 0x0a, 0x07, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x31,
	0x30, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x6b, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x54, 0x75,
	0x70, 0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x31, 0x30, 0x4c, 0x69, 0x73, 0x74, 0x75, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x52, 0x07, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x31, 0x30, 0x12, 0x85, 0x01,
	0x0a, 0x07, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x31, 0x31, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x6b, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x50, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x73,
	0x31, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x07, 0x76, 0x6f,
	0x74, 0x65, 0x73, 0x31, 0x31, 0x12, 0x85, 0x01, 0x0a, 0x07, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x31,
	0x32, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x6b, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x54, 0x75,
	0x70, 0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x31, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x75, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x52, 0x07, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x31, 0x32, 0x12, 0x85, 0x01,
	0x0a, 0x07, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x31, 0x33, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x6b, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x50, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x73,
	0x31, 0x33, 0x4c, 0x69, 0x73, 0x74, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x07, 0x76, 0x6f,
	0x74, 0x65, 0x73, 0x31, 0x33, 0x12, 0x85, 0x01, 0x0a, 0x07, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x31,
	0x34, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x6b, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x54, 0x75,
	0x70, 0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x31, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x75, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x52, 0x07, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x31, 0x34, 0x12, 0x85, 0x01,
	0x0a, 0x07, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x31, 0x35, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x6b, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x50, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x73,
	0x31, 0x35, 0x4c, 0x69, 0x73, 0x74, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x07, 0x76, 0x6f,
	0x74, 0x65, 0x73, 0x31, 0x35, 0x12, 0x85, 0x01, 0x0a, 0x07, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x31,
	0x36, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x6b, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x54, 0x75,
	0x70, 0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x31, 0x36, 0x4c, 0x69, 0x73, 0x74, 0x75, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x52, 0x07, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x31, 0x36, 0x22, 0x89, 0x01,
	0x0a, 0x18, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x41, 0x77, 0x61, 0x72, 0x64,
	0x42, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6f,
	0x75, 0x6e, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62,
	0x6f, 0x75, 0x6e, 0x74, 0x79, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x0b, 0x62, 0x65, 0x6e, 0x65, 0x66,
	0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73,
	0x5f, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x52, 0x0b, 0x62, 0x65,
	0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x22, 0x19, 0x0a, 0x17, 0x4e, 0x6f, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x22, 0xf7, 0x13, 0x0a, 0x0c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x57, 0x65, 0x62, 0x12, 0x3d, 0x0a, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x04,
	0x6e, 0x6f, 0x6e, 0x65, 0x12, 0x3d, 0x0a, 0x04, 0x72, 0x61, 0x77, 0x30, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x30, 0x48, 0x00, 0x52, 0x04, 0x72,
	0x61, 0x77, 0x30, 0x12, 0x3d, 0x0a, 0x04, 0x72, 0x61, 0x77, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61,
	0x77, 0x31, 0x12, 0x3d, 0x0a, 0x04, 0x72, 0x61, 0x77, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61, 0x77,
	0x32, 0x12, 0x3d, 0x0a, 0x04, 0x72, 0x61, 0x77, 0x33, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x33, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61, 0x77, 0x33,
	0x12, 0x3d, 0x0a, 0x04, 0x72, 0x61, 0x77, 0x34, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x34, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61, 0x77, 0x34, 0x12,
	0x3d, 0x0a, 0x04, 0x72, 0x61, 0x77, 0x35, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x52, 0x61, 0x77, 0x35, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61, 0x77, 0x35, 0x12, 0x3d,
	0x0a, 0x04, 0x72, 0x61, 0x77, 0x36, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x52, 0x61, 0x77, 0x36, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61, 0x77, 0x36, 0x12, 0x3d, 0x0a,
	0x04, 0x72, 0x61, 0x77, 0x37, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x52, 0x61, 0x77, 0x37, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61, 0x77, 0x37, 0x12, 0x3d, 0x0a, 0x04,
	0x72, 0x61, 0x77, 0x38, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52,
	0x61, 0x77, 0x38, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61, 0x77, 0x38, 0x12, 0x3d, 0x0a, 0x04, 0x72,
	0x61, 0x77, 0x39, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61,
	0x77, 0x39, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61, 0x77, 0x39, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61,
	0x77, 0x31, 0x30, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61,
	0x77, 0x31, 0x30, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x31, 0x30, 0x12, 0x40, 0x0a, 0x05,
	0x72, 0x61, 0x77, 0x31, 0x31, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x52, 0x61, 0x77, 0x31, 0x31, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x31, 0x31, 0x12, 0x40,
	0x0a, 0x05, 0x72, 0x61, 0x77, 0x31, 0x32, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x32, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x31, 0x32,
	0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x31, 0x33, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x33, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77,
	0x31, 0x33, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x31, 0x34, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x34, 0x48, 0x00, 0x52, 0x05, 0x72,
	0x61, 0x77, 0x31, 0x34, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x31, 0x35, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x35, 0x48, 0x00, 0x52,
	0x05, 0x72, 0x61, 0x77, 0x31, 0x35, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x31, 0x36, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x36, 0x48,
	0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x31, 0x36, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x31,
	0x37, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31,
	0x37, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x31, 0x37, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61,
	0x77, 0x31, 0x38, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61,
	0x77, 0x31, 0x38, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x31, 0x38, 0x12, 0x40, 0x0a, 0x05,
	0x72, 0x61, 0x77, 0x31, 0x39, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x52, 0x61, 0x77, 0x31, 0x39, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x31, 0x39, 0x12, 0x40,
	0x0a, 0x05, 0x72, 0x61, 0x77, 0x32, 0x30, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x30, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x32, 0x30,
	0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x32, 0x31, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x31, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77,
	0x32, 0x31, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x32, 0x32, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x32, 0x48, 0x00, 0x52, 0x05, 0x72,
	0x61, 0x77, 0x32, 0x32, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x32, 0x33, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x33, 0x48, 0x00, 0x52,
	0x05, 0x72, 0x61, 0x77, 0x32, 0x33, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x32, 0x34, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x34, 0x48,
	0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x32, 0x34, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x32,
	0x35, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32,
	0x35, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x32, 0x35, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61,
	0x77, 0x32, 0x36, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61,
	0x77, 0x32, 0x36, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x32, 0x36, 0x12, 0x40, 0x0a, 0x05,
	0x72, 0x61, 0x77, 0x32, 0x37, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x52, 0x61, 0x77, 0x32, 0x37, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x32, 0x37, 0x12, 0x40,
	0x0a, 0x05, 0x72, 0x61, 0x77, 0x32, 0x38, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x38, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x32, 0x38,
	0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x32, 0x39, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x39, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77,
	0x32, 0x39, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x33, 0x30, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x33, 0x30, 0x48, 0x00, 0x52, 0x05, 0x72,
	0x61, 0x77, 0x33, 0x30, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x33, 0x31, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x33, 0x31, 0x48, 0x00, 0x52,
	0x05, 0x72, 0x61, 0x77, 0x33, 0x31, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x33, 0x32, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x33, 0x32, 0x48,
	0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x33, 0x32, 0x12, 0x53, 0x0a, 0x0c, 0x62, 0x6c, 0x61, 0x6b,
	0x65, 0x5f, 0x74, 0x77, 0x6f, 0x32, 0x35, 0x36, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x42, 0x6c, 0x61, 0x6b, 0x65, 0x54, 0x77, 0x6f, 0x32, 0x35, 0x36, 0x48, 0x00,
	0x52, 0x0b, 0x62, 0x6c, 0x61, 0x6b, 0x65, 0x54, 0x77, 0x6f, 0x32, 0x35, 0x36, 0x12, 0x43, 0x0a,
	0x06, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x48, 0x00, 0x52, 0x06, 0x73, 0x68, 0x61, 0x32,
	0x35, 0x36, 0x12, 0x4c, 0x0a, 0x09, 0x6b, 0x65, 0x63, 0x63, 0x61, 0x6b, 0x32, 0x35, 0x36, 0x18,
	0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x4b, 0x65, 0x63, 0x63, 0x61, 0x6b,
	0x32, 0x35, 0x36, 0x48, 0x00, 0x52, 0x09, 0x6b, 0x65, 0x63, 0x63, 0x61, 0x6b, 0x32, 0x35, 0x36,
	0x12, 0x53, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x65, 0x32, 0x35, 0x36,
	0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x53, 0x68, 0x61, 0x54, 0x68,
	0x72, 0x65, 0x65, 0x32, 0x35, 0x36, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x54, 0x68, 0x72,
	0x65, 0x65, 0x32, 0x35, 0x36, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x15,
	0x0a, 0x13, 0x47, 0x65, 0x61, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x50,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x22, 0x20, 0x0a, 0x1e, 0x42, 0x61, 0x62, 0x65, 0x5f, 0x52, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0x58, 0x0a, 0x1f, 0x53, 0x74, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x44, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65,
	0x64, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x65, 0x72, 0x61, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x6c, 0x61, 0x73, 0x68, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65,
	0x73, 0x22, 0xde, 0x01, 0x0a, 0x16, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x43, 0x68,
	0x69, 0x6c, 0x6c, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x3c, 0x0a, 0x04,
	0x6e, 0x6f, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x4e, 0x6f,
	0x6f, 0x70, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x6f, 0x6f, 0x70, 0x12, 0x39, 0x0a, 0x03, 0x73, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x53, 0x65, 0x74, 0x48, 0x00,
	0x52, 0x03, 0x73, 0x65, 0x74, 0x12, 0x42, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48,
	0x00, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xad, 0x01, 0x0a, 0x25, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x5f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x83, 0x01, 0x0a,
	0x0c, 0x72, 0x61, 0x77, 0x5f, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x60, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x61, 0x77, 0x53, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x72, 0x61, 0x77, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xd3, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x61, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68,
	0x65, 0x72, 0x5f, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4e, 0x0a, 0x0b,
	0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x70, 0x72,
	0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x67, 0x61, 0x73, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6b, 0x65, 0x65,
	0x70, 0x5f, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6b,
	0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x22, 0xf2, 0x01, 0x0a, 0x26, 0x47, 0x72, 0x61,
	0x6e, 0x64, 0x70, 0x61, 0x5f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x71, 0x75, 0x69, 0x76,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43,
	0x61, 0x6c, 0x6c, 0x12, 0x6c, 0x0a, 0x12, 0x65, 0x71, 0x75, 0x69, 0x76, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3d, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x43, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x45, 0x71, 0x75,
	0x69, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x11,
	0x65, 0x71, 0x75, 0x69, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6f,
	0x66, 0x12, 0x5a, 0x0a, 0x0f, 0x6b, 0x65, 0x79, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x70,
	0x72, 0x6f, 0x6f, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x0d,
	0x6b, 0x65, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x22, 0xf2, 0x02,
	0x0a, 0x14, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x5f, 0x42, 0x65, 0x6e, 0x65, 0x66,
	0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x12, 0x37, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x5f, 0x49, 0x64, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x40, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x79, 0x5f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x3a, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x48, 0x00, 0x52, 0x03, 0x72, 0x61, 0x77, 0x12, 0x4c, 0x0a,
	0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x79, 0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x48, 0x00,
	0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x12, 0x4c, 0x0a, 0x09, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x79, 0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x48, 0x00, 0x52, 0x09,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xdf, 0x04, 0x0a, 0x1b, 0x43, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x43, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x4e, 0x6f, 0x6e,
	0x65, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x12, 0x51, 0x0a, 0x08, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x31, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x31, 0x58,
	0x48, 0x00, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x31, 0x78, 0x12, 0x51, 0x0a, 0x08,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x32, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x4c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x32, 0x58, 0x48, 0x00, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x32, 0x78, 0x12,
	0x51, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x33, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x4c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x33, 0x58, 0x48, 0x00, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x33, 0x78, 0x12, 0x51, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x34, 0x78, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x34, 0x58, 0x48, 0x00, 0x52, 0x08, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x34, 0x78, 0x12, 0x51, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x35,
	0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x35, 0x58, 0x48, 0x00, 0x52, 0x08,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x35, 0x78, 0x12, 0x51, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x36, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x36, 0x58, 0x48,
	0x00, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x36, 0x78, 0x42, 0x07, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x97, 0x02, 0x0a, 0x1c, 0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73,
	0x68, 0x69, 0x70, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x4e, 0x0a, 0x06, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x64, 0x61, 0x5f, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x48, 0x00, 0x52, 0x06, 0x6c,
	0x65, 0x67, 0x61, 0x63, 0x79, 0x12, 0x4e, 0x0a, 0x06, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x64, 0x61, 0x5f, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x06, 0x69,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x4e, 0x0a, 0x06, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x64, 0x61, 0x5f, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x48, 0x00, 0x52, 0x06, 0x6c,
	0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc1,
	0x01, 0x0a, 0x39, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x53, 0x65,
	0x74, 0x45, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x83, 0x01, 0x0a,
	0x08, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x67, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x50, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x53, 0x70, 0x43, 0x6f, 0x72,
	0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x33, 0x32, 0x53, 0x70, 0x4e, 0x70, 0x6f, 0x73, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x08, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x22, 0x62, 0x0a, 0x11, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x5f, 0x50, 0x72,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x4d, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x47, 0x72, 0x61, 0x6e, 0x64,
	0x70, 0x61, 0x45, 0x71, 0x75, 0x69, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0x27, 0x0a, 0x0d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22,
	0xd2, 0x07, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12,
	0x4a, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x5f, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x54, 0x0a, 0x0e, 0x61,
	0x64, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x5f, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x61, 0x6c,
	0x6c, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x61, 0x6c,
	0x6c, 0x12, 0x5d, 0x0a, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52,
	0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x61, 0x6c, 0x6c,
	0x12, 0x63, 0x0a, 0x13, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x69,
	0x65, 0x73, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x73, 0x43, 0x61, 0x6c, 0x6c,
	0x48, 0x00, 0x52, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x69, 0x65,
	0x73, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x5a, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x70, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x75, 0x72, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48,
	0x00, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x75, 0x72, 0x65, 0x43, 0x61, 0x6c,
	0x6c, 0x12, 0x54, 0x0a, 0x0e, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x75, 0x72, 0x65, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x4b, 0x69, 0x6c, 0x6c, 0x50,
	0x75, 0x72, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0c, 0x6b, 0x69, 0x6c, 0x6c, 0x50,
	0x75, 0x72, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x53, 0x0a, 0x0d, 0x61, 0x6e, 0x6e, 0x6f, 0x75,
	0x6e, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f,
	0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0c,
	0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x72, 0x0a, 0x18,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x16, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c,
	0x12, 0x72, 0x0a, 0x18, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x75,
	0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x5f, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x16, 0x72, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x61, 0x6c, 0x6c, 0x12, 0x66, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x61, 0x6e,
	0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x5f, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63,
	0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x41,
	0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x06, 0x0a, 0x04,
	0x63, 0x61, 0x6c, 0x6c, 0x22, 0xb3, 0x01, 0x0a, 0x39, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4e,
	0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x59, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63,
	0x50, 0x65, 0x72, 0x54, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x65, 0x72, 0x62, 0x69, 0x6c, 0x6c,
	0x52, 0x0b, 0x6d, 0x61, 0x78, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x22, 0x8b, 0x04, 0x0a, 0x0d, 0x56,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x49, 0x0a, 0x09,
	0x76, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x56, 0x65, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x08, 0x76,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x59, 0x0a, 0x0f, 0x76, 0x65, 0x73, 0x74, 0x5f,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x56, 0x65, 0x73, 0x74, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x61, 0x6c,
	0x6c, 0x48, 0x00, 0x52, 0x0d, 0x76, 0x65, 0x73, 0x74, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x61,
	0x6c, 0x6c, 0x12, 0x68, 0x0a, 0x14, 0x76, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x56, 0x65, 0x73, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x12, 0x76, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x78, 0x0a, 0x1a,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x76, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x39, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x56, 0x65, 0x73, 0x74, 0x65, 0x64, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x17, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x56, 0x65, 0x73, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x68, 0x0a, 0x14, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x12, 0x6d, 0x65,
	0x72, 0x67, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x43, 0x61, 0x6c, 0x6c,
	0x42, 0x06, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x22, 0x54, 0x0a, 0x10, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x12, 0x40, 0x0a, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x48, 0x32, 0x35, 0x36, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x3a,
	0x0a, 0x22, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x43, 0x61, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x75, 0x0a, 0x21, 0x43, 0x68,
	0x69, 0x6c, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x55, 0x6e, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x43, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x12,
	0x28, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x49,
	0x64, 0x22, 0x23, 0x0a, 0x21, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x6c,
	0x65, 0x73, 0x73, 0x41, 0x6c, 0x6c, 0x22, 0x4a, 0x0a, 0x0e, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x38, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x30, 0x22, 0x60, 0x0a, 0x16, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x46, 0x6f,
	0x72, 0x63, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x46, 0x0a, 0x05,
	0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x72, 0x61, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x05, 0x63,
	0x61, 0x6c, 0x6c, 0x73, 0x22, 0x1b, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x34,
	0x58, 0x22, 0x6a, 0x0a, 0x22, 0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x41, 0x64, 0x64, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x44, 0x0a, 0x03, 0x77, 0x68, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x57, 0x68, 0x6f, 0x52, 0x03, 0x77, 0x68, 0x6f, 0x22, 0x97, 0x03,
	0x0a, 0x16, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c,
	0x73, 0x5f, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f,
	0x49, 0x64, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x47, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f,
	0x6c, 0x73, 0x5f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x41, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x52, 0x61, 0x77, 0x48, 0x00, 0x52,
	0x03, 0x72, 0x61, 0x77, 0x12, 0x53, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33,
	0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f,
	0x6c, 0x73, 0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x48, 0x00, 0x52, 0x09,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x12, 0x53, 0x0a, 0x09, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32,
	0x30, 0x48, 0x00, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x42, 0x07,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5b, 0x0a, 0x11, 0x55, 0x74, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x46, 0x0a, 0x05,
	0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x72, 0x61, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x05, 0x63,
	0x61, 0x6c, 0x6c, 0x73, 0x22, 0xdc, 0x02, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x53,
	0x70, 0x61, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x5f, 0x49, 0x64, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x37, 0x0a, 0x03, 0x72,
	0x61, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x48, 0x00, 0x52,
	0x03, 0x72, 0x61, 0x77, 0x12, 0x49, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33,
	0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x33, 0x32, 0x48, 0x00, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x12,
	0x49, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x48, 0x00, 0x52,
	0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x89, 0x13, 0x0a, 0x15, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x51, 0x0a,
	0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x4a, 0x6f, 0x69, 0x6e,
	0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x43, 0x61, 0x6c, 0x6c,
	0x12, 0x61, 0x0a, 0x0f, 0x62, 0x6f, 0x6e, 0x64, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x42, 0x6f, 0x6e, 0x64, 0x45, 0x78, 0x74, 0x72, 0x61, 0x43, 0x61,
	0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0d, 0x62, 0x6f, 0x6e, 0x64, 0x45, 0x78, 0x74, 0x72, 0x61, 0x43,
	0x61, 0x6c, 0x6c, 0x12, 0x67, 0x0a, 0x11, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x70, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x50,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6c, 0x61,
	0x69, 0x6d, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x57, 0x0a, 0x0b,
	0x75, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x55, 0x6e, 0x62,
	0x6f, 0x6e, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0a, 0x75, 0x6e, 0x62, 0x6f, 0x6e,
	0x64, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x83, 0x01, 0x0a, 0x1b, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x75, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x65, 0x64,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x50, 0x6f, 0x6f, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x55, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x48,
	0x00, 0x52, 0x18, 0x70, 0x6f, 0x6f, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x55,
	0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x76, 0x0a, 0x16, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x75, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x65, 0x64,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x55,
	0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x14, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x55, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x65, 0x64, 0x43,
	0x61, 0x6c, 0x6c, 0x12, 0x57, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f,
	0x6f, 0x6c, 0x73, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x78, 0x0a, 0x18,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x70, 0x6f, 0x6f, 0x6c,
	0x5f, 0x69, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x57, 0x69, 0x74, 0x68, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00,
	0x52, 0x14, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x50, 0x6f, 0x6f, 0x6c,
	0x49, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x5d, 0x0a, 0x0d, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0c, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x5e, 0x0a, 0x0e, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x53, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x67, 0x0a, 0x11, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x39, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x53, 0x65, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0f, 0x73,
	0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x64,
	0x0a, 0x10, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f,
	0x6f, 0x6c, 0x73, 0x5f, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x43, 0x61,
	0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x43, 0x61, 0x6c, 0x6c, 0x12, 0x67, 0x0a, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72,
	0x6f, 0x6c, 0x65, 0x73, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x39, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x54, 0x0a,
	0x0a, 0x63, 0x68, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x43, 0x68, 0x69,
	0x6c, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x09, 0x63, 0x68, 0x69, 0x6c, 0x6c, 0x43,
	0x61, 0x6c, 0x6c, 0x12, 0x71, 0x0a, 0x15, 0x62, 0x6f, 0x6e, 0x64, 0x5f, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x42, 0x6f,
	0x6e, 0x64, 0x45, 0x78, 0x74, 0x72, 0x61, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c,
	0x48, 0x00, 0x52, 0x12, 0x62, 0x6f, 0x6e, 0x64, 0x45, 0x78, 0x74, 0x72, 0x61, 0x4f, 0x74, 0x68,
	0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x7d, 0x0a, 0x19, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6c,
	0x61, 0x69, 0x6d, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x53, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x16, 0x73,
	0x65, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x77, 0x0a, 0x17, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x70,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c,
	0x73, 0x5f, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x4f, 0x74, 0x68,
	0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x14, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x50,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x6d,
	0x0a, 0x13, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x11, 0x73, 0x65, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x77, 0x0a,
	0x17, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x6d, 0x61, 0x78, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x78, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00,
	0x52, 0x14, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d,
	0x61, 0x78, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x8d, 0x01, 0x0a, 0x1f, 0x73, 0x65, 0x74, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x45, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x53, 0x65, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x1b, 0x73, 0x65, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x73, 0x0a, 0x15, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73,
	0x5f, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x13, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x7a, 0x0a, 0x18, 0x61,
	0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x50,
	0x6f, 0x6f, 0x6c, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00,
	0x52, 0x15, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x44, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x06, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x22,
	0x58, 0x0a, 0x0b, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x49, 0x64, 0x12, 0x49,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x43, 0x6f, 0x72, 0x65,
	0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x33,
	0x32, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0x0e, 0x0a, 0x0c, 0x53, 0x74, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x22, 0xc5, 0x02, 0x0a, 0x1e, 0x46, 0x65,
	0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64,
	0x61, 0x5f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x65, 0x0a, 0x0f,
	0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x64, 0x61, 0x5f, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x12, 0x52, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x64, 0x61, 0x5f, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x68, 0x0a, 0x10, 0x65, 0x6e, 0x61, 0x63, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3d, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x6c,
	0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61,
	0x5f, 0x45, 0x6e, 0x61, 0x63, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x0f, 0x65, 0x6e, 0x61, 0x63, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0x97, 0x12, 0x0a, 0x31, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73,
	0x74, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x50, 0x72, 0x65, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x40, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48,
	0x00, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x49, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x3a, 0x0a, 0x04, 0x62, 0x61, 0x62, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61,
	0x62, 0x65, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x04, 0x62, 0x61, 0x62, 0x65,
	0x12, 0x43, 0x0a, 0x07, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x61,
	0x6e, 0x64, 0x70, 0x61, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x07, 0x67, 0x72,
	0x61, 0x6e, 0x64, 0x70, 0x61, 0x12, 0x46, 0x0a, 0x08, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x50, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x48, 0x00, 0x52, 0x08, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x43, 0x0a,
	0x07, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x07, 0x76, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x47, 0x0a, 0x09, 0x62, 0x61, 0x67, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x61, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48,
	0x00, 0x52, 0x08, 0x62, 0x61, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x09, 0x69,
	0x6d, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x4f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6d, 0x4f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x12, 0x43, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00,
	0x52, 0x07, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x43, 0x0a, 0x07, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x46,
	0x0a, 0x08, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x79, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x74, 0x72,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x12, 0x43, 0x0a, 0x07, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x48, 0x00, 0x52, 0x07, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x5f, 0x0a, 0x11, 0x63,
	0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x69,
	0x6e, 0x67, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x76,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x49, 0x0a, 0x09,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x64, 0x61, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x12, 0x6b, 0x0a, 0x15, 0x66, 0x65, 0x6c, 0x6c, 0x6f,
	0x77, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x14,
	0x66, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x68, 0x0a, 0x14, 0x66, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68,
	0x69, 0x70, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65,
	0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64,
	0x61, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x13, 0x66, 0x65, 0x6c, 0x6c, 0x6f,
	0x77, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x12, 0x49,
	0x0a, 0x09, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x68, 0x69,
	0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x09,
	0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x09, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x48, 0x00, 0x52, 0x08, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x46, 0x0a, 0x08,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x05, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x12, 0x46, 0x0a, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48,
	0x00, 0x52, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x12, 0x7f, 0x0a, 0x1d, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00,
	0x52, 0x1a, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x08,
	0x62, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69,
	0x65, 0x73, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x62, 0x6f, 0x75, 0x6e,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x0e, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x62, 0x6f,
	0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x42, 0x6f, 0x75,
	0x6e, 0x74, 0x69, 0x65, 0x73, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x10,
	0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x73,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c,
	0x73, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x6e, 0x6f, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x3a, 0x0a, 0x04, 0x67, 0x65,
	0x61, 0x72, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x61, 0x72, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00,
	0x52, 0x04, 0x67, 0x65, 0x61, 0x72, 0x12, 0x59, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48,
	0x00, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x12, 0x50, 0x0a, 0x0c, 0x67, 0x65, 0x61, 0x72, 0x5f, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65,
	0x72, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x61, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x50, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x67, 0x65, 0x61, 0x72, 0x56, 0x6f, 0x75, 0x63,
	0x68, 0x65, 0x72, 0x42, 0x06, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x22, 0x0f, 0x0a, 0x0d, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x5f, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x22, 0x5c, 0x0a, 0x0f,
	0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x49, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x43, 0x6f, 0x72,
	0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x33, 0x32, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0x67, 0x0a, 0x10, 0x53, 0x74,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x42, 0x6f, 0x6e, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61, 0x79, 0x65, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x50, 0x61, 0x79, 0x65, 0x65, 0x52, 0x05, 0x70, 0x61,
	0x79, 0x65, 0x65, 0x22, 0x58, 0x0a, 0x0b, 0x42, 0x61, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x5f,
	0x49, 0x64, 0x12, 0x49, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70,
	0x43, 0x6f, 0x72, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x33, 0x32, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0x33, 0x0a,
	0x19, 0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x64, 0x61, 0x5f, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x30, 0x22, 0x35, 0x0a, 0x1b, 0x53, 0x70, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74,
	0x69, 0x63, 0x50, 0x65, 0x72, 0x54, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x65, 0x72, 0x55, 0x31,
	0x36, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0x1c, 0x0a, 0x1a, 0x47, 0x65, 0x61,
	0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x44, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65,
	0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x22, 0x8e, 0x01, 0x0a, 0x18, 0x46, 0x69, 0x6e, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x50, 0x72, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x12, 0x4d, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x48, 0x32, 0x35, 0x36, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xaf, 0x01, 0x0a, 0x1c, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x5f, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x44, 0x0a, 0x08, 0x64, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x44, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x08, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12,
	0x49, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x48, 0x32, 0x35, 0x36,
	0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x48, 0x61, 0x73, 0x68, 0x22, 0x64, 0x0a, 0x13, 0x47, 0x65,
	0x61, 0x72, 0x5f, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x61, 0x6c,
	0x6c, 0x12, 0x4d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x22, 0xf8, 0x13, 0x0a, 0x0d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x69,
	0x6f, 0x74, 0x12, 0x3d, 0x0a, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x6f, 0x6e,
	0x65, 0x12, 0x3d, 0x0a, 0x04, 0x72, 0x61, 0x77, 0x30, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x30, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61, 0x77, 0x30,
	0x12, 0x3d, 0x0a, 0x04, 0x72, 0x61, 0x77, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61, 0x77, 0x31, 0x12,
	0x3d, 0x0a, 0x04, 0x72, 0x61, 0x77, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61, 0x77, 0x32, 0x12, 0x3d,
	0x0a, 0x04, 0x72, 0x61, 0x77, 0x33, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x52, 0x61, 0x77, 0x33, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61, 0x77, 0x33, 0x12, 0x3d, 0x0a,
	0x04, 0x72, 0x61, 0x77, 0x34, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x52, 0x61, 0x77, 0x34, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61, 0x77, 0x34, 0x12, 0x3d, 0x0a, 0x04,
	0x72, 0x61, 0x77, 0x35, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52,
	0x61, 0x77, 0x35, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61, 0x77, 0x35, 0x12, 0x3d, 0x0a, 0x04, 0x72,
	0x61, 0x77, 0x36, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61,
	0x77, 0x36, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61, 0x77, 0x36, 0x12, 0x3d, 0x0a, 0x04, 0x72, 0x61,
	0x77, 0x37, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77,
	0x37, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61, 0x77, 0x37, 0x12, 0x3d, 0x0a, 0x04, 0x72, 0x61, 0x77,
	0x38, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x38,
	0x48, 0x00, 0x52, 0x04, 0x72, 0x61, 0x77, 0x38, 0x12, 0x3d, 0x0a, 0x04, 0x72, 0x61, 0x77, 0x39,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x39, 0x48,
	0x00, 0x52, 0x04, 0x72, 0x61, 0x77, 0x39, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x31, 0x30,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x30,
	0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x31, 0x30, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77,
	0x31, 0x31, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77,
	0x31, 0x31, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x31, 0x31, 0x12, 0x40, 0x0a, 0x05, 0x72,
	0x61, 0x77, 0x31, 0x32, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52,
	0x61, 0x77, 0x31, 0x32, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x31, 0x32, 0x12, 0x40, 0x0a,
	0x05, 0x72, 0x61, 0x77, 0x31, 0x33, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x52, 0x61, 0x77, 0x31, 0x33, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x31, 0x33, 0x12,
	0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x31, 0x34, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x34, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x31,
	0x34, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x31, 0x35, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x35, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61,
	0x77, 0x31, 0x35, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x31, 0x36, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x36, 0x48, 0x00, 0x52, 0x05,
	0x72, 0x61, 0x77, 0x31, 0x36, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x31, 0x37, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x37, 0x48, 0x00,
	0x52, 0x05, 0x72, 0x61, 0x77, 0x31, 0x37, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x31, 0x38,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x38,
	0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x31, 0x38, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77,
	0x31, 0x39, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77,
	0x31, 0x39, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x31, 0x39, 0x12, 0x40, 0x0a, 0x05, 0x72,
	0x61, 0x77, 0x32, 0x30, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52,
	0x61, 0x77, 0x32, 0x30, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x32, 0x30, 0x12, 0x40, 0x0a,
	0x05, 0x72, 0x61, 0x77, 0x32, 0x31, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x52, 0x61, 0x77, 0x32, 0x31, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x32, 0x31, 0x12,
	0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x32, 0x32, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x32, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x32,
	0x32, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x32, 0x33, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x33, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61,
	0x77, 0x32, 0x33, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x32, 0x34, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x34, 0x48, 0x00, 0x52, 0x05,
	0x72, 0x61, 0x77, 0x32, 0x34, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x32, 0x35, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x35, 0x48, 0x00,
	0x52, 0x05, 0x72, 0x61, 0x77, 0x32, 0x35, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x32, 0x36,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x36,
	0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x32, 0x36, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77,
	0x32, 0x37, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77,
	0x32, 0x37, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x32, 0x37, 0x12, 0x40, 0x0a, 0x05, 0x72,
	0x61, 0x77, 0x32, 0x38, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52,
	0x61, 0x77, 0x32, 0x38, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x32, 0x38, 0x12, 0x40, 0x0a,
	0x05, 0x72, 0x61, 0x77, 0x32, 0x39, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x52, 0x61, 0x77, 0x32, 0x39, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x32, 0x39, 0x12,
	0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x33, 0x30, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x33, 0x30, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x77, 0x33,
	0x30, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x33, 0x31, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x33, 0x31, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61,
	0x77, 0x33, 0x31, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x61, 0x77, 0x33, 0x32, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x33, 0x32, 0x48, 0x00, 0x52, 0x05,
	0x72, 0x61, 0x77, 0x33, 0x32, 0x12, 0x53, 0x0a, 0x0c, 0x62, 0x6c, 0x61, 0x6b, 0x65, 0x5f, 0x74,
	0x77, 0x6f, 0x32, 0x35, 0x36, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x42, 0x6c, 0x61, 0x6b, 0x65, 0x54, 0x77, 0x6f, 0x32, 0x35, 0x36, 0x48, 0x00, 0x52, 0x0b, 0x62,
	0x6c, 0x61, 0x6b, 0x65, 0x54, 0x77, 0x6f, 0x32, 0x35, 0x36, 0x12, 0x43, 0x0a, 0x06, 0x73, 0x68,
	0x61, 0x32, 0x35, 0x36, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x53,
	0x68, 0x61, 0x32, 0x35, 0x36, 0x48, 0x00, 0x52, 0x06, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x12,
	0x4c, 0x0a, 0x09, 0x6b, 0x65, 0x63, 0x63, 0x61, 0x6b, 0x32, 0x35, 0x36, 0x18, 0x25, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x4b, 0x65, 0x63, 0x63, 0x61, 0x6b, 0x32, 0x35, 0x36,
	0x48, 0x00, 0x52, 0x09, 0x6b, 0x65, 0x63, 0x63, 0x61, 0x6b, 0x32, 0x35, 0x36, 0x12, 0x53, 0x0a,
	0x0c, 0x73, 0x68, 0x61, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x65, 0x32, 0x35, 0x36, 0x18, 0x26, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x53, 0x68, 0x61, 0x54, 0x68, 0x72, 0x65, 0x65,
	0x32, 0x35, 0x36, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x54, 0x68, 0x72, 0x65, 0x65, 0x32,
	0x35, 0x36, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4c, 0x0a, 0x0f, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x5f, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x39,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x4e, 0x75,
	0x6c, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xf8, 0x01, 0x0a, 0x51, 0x45, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x55, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x56, 0x6f,
	0x74, 0x65, 0x73, 0x31, 0x30, 0x4c, 0x69, 0x73, 0x74, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12,
	0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x12, 0x73, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x31, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x54, 0x75,
	0x70, 0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x70, 0x41, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x65, 0x74, 0x69, 0x63, 0x50, 0x65, 0x72, 0x54, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x65,
	0x72, 0x55, 0x31, 0x36, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x32, 0x22, 0x4f, 0x0a, 0x12, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x5f, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x39, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x6b, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x5f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x53, 0x0a,
	0x05, 0x70, 0x72, 0x65, 0x66, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f,
	0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x66, 0x73, 0x52, 0x05, 0x70, 0x72, 0x65,
	0x66, 0x73, 0x22, 0x25, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x53, 0x65,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0xe0, 0x01, 0x0a, 0x18, 0x53, 0x74,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x4d, 0x69, 0x6e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x6f, 0x72, 0x42, 0x6f, 0x6e, 0x64, 0x12, 0x3c, 0x0a, 0x04, 0x6e, 0x6f, 0x6f, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x4e, 0x6f, 0x6f, 0x70, 0x48, 0x00, 0x52, 0x04,
	0x6e, 0x6f, 0x6f, 0x70, 0x12, 0x39, 0x0a, 0x03, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x03, 0x73, 0x65, 0x74, 0x12,
	0x42, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x6d, 0x0a, 0x25,
	0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x44, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x44, 0x0a, 0x03, 0x77, 0x68, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65,
	0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x57, 0x68, 0x6f, 0x52, 0x03, 0x77, 0x68, 0x6f, 0x22, 0xd2, 0x01, 0x0a, 0x14,
	0x47, 0x65, 0x61, 0x72, 0x5f, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x43, 0x61, 0x6c, 0x6c, 0x12, 0x4e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x73,
	0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65,
	0x22, 0x32, 0x0a, 0x18, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x30, 0x22, 0xfd, 0x01, 0x0a, 0x46, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x5f, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x52, 0x61, 0x77, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x4f, 0x0a, 0x08, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x72,
	0x61, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4e, 0x70, 0x6f, 0x73, 0x53, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x31, 0x36, 0x52, 0x08, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x4c, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x4e, 0x70, 0x6f,
	0x73, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x22, 0x36, 0x0a, 0x1c, 0x53, 0x70, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x65, 0x74, 0x69, 0x63, 0x50, 0x65, 0x72, 0x54, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0x83, 0x01, 0x0a,
	0x17, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x5f, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x50, 0x0a, 0x0b, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x5f, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69,
	0x63, 0x69, 0x61, 0x72, 0x79, 0x52, 0x0b, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61,
	0x72, 0x79, 0x22, 0x48, 0x0a, 0x0c, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x56, 0x6f,
	0x69, 0x64, 0x12, 0x38, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x30, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0x28, 0x0a, 0x0e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x38, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0xe4, 0x12, 0x0a, 0x1e, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x73, 0x69, 0x67, 0x5f, 0x41, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x31, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x5e, 0x0a, 0x11, 0x6f, 0x74, 0x68,
	0x65, 0x72, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x70, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x33, 0x32, 0x52, 0x10, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x06, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x48, 0x00, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x49, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3a, 0x0a, 0x04, 0x62, 0x61, 0x62, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x61, 0x62, 0x65, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x04, 0x62, 0x61,
	0x62, 0x65, 0x12, 0x43, 0x0a, 0x07, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x72, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x07,
	0x67, 0x72, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x12, 0x46, 0x0a, 0x08, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x50, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12,
	0x43, 0x0a, 0x07, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x07, 0x76, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x47, 0x0a, 0x09, 0x62, 0x61, 0x67, 0x73, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x61, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x48, 0x00, 0x52, 0x08, 0x62, 0x61, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x47, 0x0a,
	0x09, 0x69, 0x6d, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x4f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6d,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x43, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x48, 0x00, 0x52, 0x07, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x43, 0x0a, 0x07, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x46, 0x0a, 0x08, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08,
	0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x12, 0x43, 0x0a, 0x07, 0x75, 0x74, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x48, 0x00, 0x52, 0x07, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x5f, 0x0a,
	0x11, 0x63, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x6f, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x10, 0x63, 0x6f,
	0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x49,
	0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x09,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x12, 0x6b, 0x0a, 0x15, 0x66, 0x65, 0x6c,
	0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00,
	0x52, 0x14, 0x66, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x68, 0x0a, 0x14, 0x66, 0x65, 0x6c, 0x6c, 0x6f, 0x77,
	0x73, 0x68, 0x69, 0x70, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x64, 0x61, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x13, 0x66, 0x65, 0x6c,
	0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61,
	0x12, 0x49, 0x0a, 0x09, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57,
	0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00,
	0x52, 0x09, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x09, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x09, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x46,
	0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x05,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x46, 0x0a, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69,
	0x67, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x50, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x12, 0x7f, 0x0a,
	0x1d, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x48, 0x00, 0x52, 0x1a, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x46,
	0x0a, 0x08, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x75, 0x6e,
	0x74, 0x69, 0x65, 0x73, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x62, 0x6f,
	0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x0e, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f,
	0x62, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x42,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52,
	0x0d, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x12, 0x5c,
	0x0a, 0x10, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6f,
	0x6c, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f,
	0x6f, 0x6c, 0x73, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x6e, 0x6f, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x3a, 0x0a, 0x04,
	0x67, 0x65, 0x61, 0x72, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x61, 0x72, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x48, 0x00, 0x52, 0x04, 0x67, 0x65, 0x61, 0x72, 0x12, 0x59, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x50, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x12, 0x50, 0x0a, 0x0c, 0x67, 0x65, 0x61, 0x72, 0x5f, 0x76, 0x6f, 0x75, 0x63,
	0x68, 0x65, 0x72, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x61, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72,
	0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x67, 0x65, 0x61, 0x72, 0x56, 0x6f,
	0x75, 0x63, 0x68, 0x65, 0x72, 0x42, 0x06, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x22, 0x73, 0x0a,
	0x1c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x53,
	0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x38, 0x0a,
	0x03, 0x77, 0x68, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x57,
	0x68, 0x6f, 0x52, 0x03, 0x77, 0x68, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x66,
	0x72, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x46, 0x72,
	0x65, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x16, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x53, 0x65, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x56, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x42, 0x69, 0x74, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0xbf, 0x01, 0x0a, 0x14,
	0x47, 0x65, 0x61, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x43, 0x61, 0x6c, 0x6c,
	0x43, 0x61, 0x6c, 0x6c, 0x12, 0x67, 0x0a, 0x0a, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x61, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x5f,
	0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x47, 0x65, 0x61, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65,
	0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72,
	0x49, 0x64, 0x52, 0x09, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3e, 0x0a,
	0x04, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x61, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68,
	0x65, 0x72, 0x5f, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x22, 0xd7, 0x01,
	0x0a, 0x39, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x47,
	0x72, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x50, 0x72, 0x65, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x70, 0x43,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x41,
	0x70, 0x70, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x48, 0x0a, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x47,
	0x72, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x50, 0x72, 0x65, 0x76, 0x6f, 0x74, 0x65, 0x52, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x30, 0x12, 0x50, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x70, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x47, 0x72, 0x61, 0x6e,
	0x64, 0x70, 0x61, 0x41, 0x70, 0x70, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x22, 0x40, 0x0a, 0x28, 0x46, 0x65, 0x6c, 0x6c, 0x6f,
	0x77, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f, 0x4f,
	0x6e, 0x65, 0x46, 0x65, 0x77, 0x65, 0x72, 0x44, 0x65, 0x63, 0x69, 0x64, 0x69, 0x6e, 0x67, 0x43,
	0x61, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x22, 0xee, 0x03, 0x0a, 0x0f, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x5f, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a,
	0x03, 0x61, 0x6e, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x41, 0x6e, 0x79, 0x48,
	0x00, 0x52, 0x03, 0x61, 0x6e, 0x79, 0x12, 0x50, 0x0a, 0x0c, 0x6e, 0x6f, 0x6e, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x4e, 0x6f,
	0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x6e, 0x6f, 0x6e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x0a, 0x67, 0x6f, 0x76, 0x65,
	0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x47, 0x6f,
	0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x67, 0x6f, 0x76, 0x65,
	0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x48, 0x00, 0x52, 0x07, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x62, 0x0a, 0x12, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x11, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x50, 0x0a, 0x0c, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x34, 0x0a, 0x19, 0x4e, 0x6f,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x43, 0x68,
	0x69, 0x6c, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x6f, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64,
	0x22, 0xcd, 0x01, 0x0a, 0x22, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69,
	0x65, 0x73, 0x5f, 0x41, 0x77, 0x61, 0x72, 0x64, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x42, 0x6f, 0x75,
	0x6e, 0x74, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x74,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x49, 0x64, 0x12, 0x55, 0x0a, 0x0b, 0x62, 0x65, 0x6e,
	0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x42,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69,
	0x61, 0x72, 0x79, 0x52, 0x0b, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79,
	0x22, 0x36, 0x0a, 0x1c, 0x53, 0x70, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63,
	0x50, 0x65, 0x72, 0x54, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x65, 0x72, 0x62, 0x69, 0x6c, 0x6c,
	0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0x40, 0x0a, 0x26, 0x42, 0x6f, 0x75, 0x6e,
	0x64, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x6f,
	0x75, 0x6e, 0x64, 0x65, 0x64, 0x56, 0x65, 0x63, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x56,
	0x65, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0xef, 0x01, 0x0a, 0x12, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x12, 0x44, 0x0a, 0x06, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x48, 0x00, 0x52,
	0x06, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x12, 0x44, 0x0a, 0x06, 0x69, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f, 0x49, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x06, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x44, 0x0a,
	0x06, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x64, 0x61, 0x5f, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x48, 0x00, 0x52, 0x06, 0x6c, 0x6f, 0x6f,
	0x6b, 0x75, 0x70, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5b, 0x0a, 0x1e,
	0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x39,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x4e, 0x75,
	0x6c, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4f, 0x0a, 0x12, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x4e, 0x75, 0x6c, 0x6c, 0x12,
	0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x4e,
	0x75, 0x6c, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x26, 0x0a, 0x0c, 0x42, 0x61,
	0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x52, 0x61, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x30, 0x22, 0xba, 0x01, 0x0a, 0x20, 0x49, 0x6d, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x6d, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x48, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x27, 0x0a, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x4c, 0x65, 0x6e, 0x22,
	0xbd, 0x01, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x44, 0x0a, 0x08, 0x64, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x44, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x08, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12,
	0x48, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x5f, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6c,
	0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x22,
	0x84, 0x01, 0x0a, 0x20, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65,
	0x73, 0x5f, 0x41, 0x64, 0x64, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x79,
	0x43, 0x61, 0x6c, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x62,
	0x6f, 0x75, 0x6e, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2e, 0x0a, 0x14, 0x47, 0x70, 0x72, 0x69, 0x6d, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0x5c, 0x0a, 0x1f, 0x43, 0x6f, 0x6e, 0x76, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x56, 0x6f, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x22, 0x19, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0xa7, 0x01, 0x0a, 0x1a, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f,
	0x6f, 0x6c, 0x73, 0x5f, 0x55, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x5e,
	0x0a, 0x0e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c,
	0x73, 0x5f, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x0d, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29,
	0x0a, 0x10, 0x75, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x6e, 0x62, 0x6f, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x19, 0x0a, 0x17, 0x4e, 0x6f, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x22, 0xe5, 0x01, 0x0a, 0x48, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x53, 0x70,
	0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x50, 0x65, 0x72, 0x54, 0x68, 0x69,
	0x6e, 0x67, 0x73, 0x50, 0x65, 0x72, 0x62, 0x69, 0x6c, 0x6c, 0x73, 0x70, 0x43, 0x6f, 0x72, 0x65,
	0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x33,
	0x32, 0x12, 0x4e, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x41,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x50, 0x65, 0x72, 0x54, 0x68, 0x69, 0x6e,
	0x67, 0x73, 0x50, 0x65, 0x72, 0x62, 0x69, 0x6c, 0x6c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x30, 0x12, 0x49, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x43,
	0x6f, 0x72, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x33, 0x32, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x22, 0xf7, 0x01, 0x0a,
	0x17, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73,
	0x5f, 0x4e, 0x65, 0x77, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x44, 0x0a, 0x04, 0x6e, 0x6f, 0x6f, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c,
	0x73, 0x5f, 0x4e, 0x6f, 0x6f, 0x70, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x6f, 0x6f, 0x70, 0x12, 0x41,
	0x0a, 0x03, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x03, 0x73, 0x65,
	0x74, 0x12, 0x4a, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x07, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x61, 0x72, 0x56,
	0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x44, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x61,
	0x6c, 0x6c, 0x12, 0x67, 0x0a, 0x0a, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x61, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x50, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x47, 0x65, 0x61, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x49, 0x64,
	0x52, 0x09, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x22, 0x49, 0x0a, 0x15, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x4b, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x43, 0x61, 0x6c, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73,
	0x75, 0x62, 0x6b, 0x65, 0x79, 0x73, 0x22, 0x4b, 0x0a, 0x0f, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x52, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x30, 0x22, 0x6e, 0x0a, 0x26, 0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69,
	0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x50, 0x72, 0x6f, 0x6d,
	0x6f, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x44, 0x0a,
	0x03, 0x77, 0x68, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x57, 0x68, 0x6f, 0x52, 0x03,
	0x77, 0x68, 0x6f, 0x22, 0x5e, 0x0a, 0x1a, 0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69,
	0x70, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f, 0x4c, 0x65, 0x67, 0x61, 0x63,
	0x79, 0x12, 0x40, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x48, 0x32, 0x35, 0x36, 0x52, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x22, 0x1c, 0x0a, 0x1a, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x69, 0x6e,
	0x67, 0x22, 0x50, 0x0a, 0x20, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x5f, 0x50, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x54, 0x69, 0x6d, 0x65,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x22, 0x10, 0x0a, 0x0e, 0x4f, 0x66, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x50,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x22, 0x2b, 0x0a, 0x11, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x42, 0x6f,
	0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x52, 0x61, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x30, 0x22, 0x1a, 0x0a, 0x18, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x22, 0x31,
	0x0a, 0x17, 0x53, 0x70, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x33, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x30, 0x22, 0x7f, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x56, 0x6f, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x6f, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x70, 0x6f, 0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x43, 0x0a,
	0x04, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x04, 0x76, 0x6f,
	0x74, 0x65, 0x22, 0x38, 0x0a, 0x1e, 0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x33, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0x2a, 0x0a, 0x10,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x46, 0x65, 0x65, 0x50, 0x61, 0x69, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0x8c, 0x01, 0x0a, 0x1c, 0x53, 0x70, 0x4e,
	0x70, 0x6f, 0x73, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x69, 0x6e,
	0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x75, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x75, 0x6d, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73,
	0x75, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x75, 0x6d, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x64, 0x22, 0x66, 0x0a, 0x1d, 0x4e, 0x6f, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x42, 0x6f, 0x6e, 0x64, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x45, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f,
	0x6c, 0x73, 0x5f, 0x45, 0x78, 0x74, 0x72, 0x61, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22,
	0x13, 0x0a, 0x11, 0x47, 0x65, 0x61, 0x72, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x22, 0x57, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f,
	0x49, 0x64, 0x12, 0x49, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70,
	0x43, 0x6f, 0x72, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x33, 0x32, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0x4d, 0x0a,
	0x1b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x54, 0x75, 0x70, 0x6c, 0x65,
	0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x30, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x22, 0x5f, 0x0a, 0x1b,
	0x50, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x55, 0x6e, 0x6e, 0x6f, 0x74, 0x65, 0x50,
	0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x40, 0x0a, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x48, 0x32, 0x35, 0x36, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x12, 0x0a,
	0x10, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x22, 0xf7, 0x01, 0x0a, 0x50, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x5f, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x39, 0x4c, 0x69, 0x73, 0x74,
	0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x12, 0x73,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5b,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x5f, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x53, 0x70, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x50, 0x65, 0x72, 0x54,
	0x68, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x65, 0x72, 0x55, 0x31, 0x36, 0x52, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x22, 0x82, 0x03, 0x0a, 0x16,
	0x56, 0x61, 0x72, 0x61, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x46, 0x0a, 0x04, 0x62, 0x61, 0x62, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x70, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x42, 0x61, 0x62, 0x65, 0x41,
	0x70, 0x70, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x04, 0x62, 0x61, 0x62, 0x65, 0x12, 0x4f,
	0x0a, 0x07, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x43, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x41, 0x70, 0x70,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x07, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x12,
	0x65, 0x0a, 0x09, 0x69, 0x6d, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x48, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x6d, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x72, 0x32, 0x35, 0x35, 0x31, 0x39, 0x41, 0x70, 0x70, 0x53,
	0x72, 0x32, 0x35, 0x35, 0x31, 0x39, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x08, 0x69, 0x6d,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x68, 0x0a, 0x13, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x70, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x41, 0x70, 0x70, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x12, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x22, 0xe4, 0x01, 0x0a, 0x10, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x41, 0x73, 0x4f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x42, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x48,
	0x00, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x45, 0x0a, 0x07, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x07, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x73,
	0x12, 0x3c, 0x0a, 0x04, 0x76, 0x6f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x56, 0x6f, 0x69, 0x64, 0x48, 0x00, 0x52, 0x04, 0x76, 0x6f, 0x69, 0x64, 0x42, 0x07,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x30, 0x0a, 0x16, 0x46, 0x65, 0x6c, 0x6c, 0x6f,
	0x77, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f, 0x41,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0x25, 0x0a, 0x11, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x53, 0x65, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x10,
	0x0a, 0x03, 0x6e, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6e, 0x6f, 0x77,
	0x22, 0x12, 0x0a, 0x10, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x50, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x22, 0x82, 0x03, 0x0a, 0x0a, 0x42, 0x61, 0x62, 0x65, 0x50, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x12, 0x71, 0x0a, 0x18, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x71,
	0x75, 0x69, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x61, 0x62, 0x65, 0x5f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x71, 0x75, 0x69,
	0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x16,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x71, 0x75, 0x69, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x8a, 0x01, 0x0a, 0x21, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75,
	0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61,
	0x62, 0x65, 0x5f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x71, 0x75, 0x69, 0x76, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x61, 0x6c,
	0x6c, 0x48, 0x00, 0x52, 0x1e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x71, 0x75, 0x69, 0x76,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43,
	0x61, 0x6c, 0x6c, 0x12, 0x6c, 0x0a, 0x17, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x61, 0x62, 0x65, 0x5f, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x14, 0x70, 0x6c, 0x61,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x61, 0x6c,
	0x6c, 0x42, 0x06, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x22, 0x73, 0x0a, 0x0e, 0x49, 0x6d, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x59, 0x0a, 0x0e, 0x68,
	0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6d, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61,
	0x74, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0d, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65,
	0x61, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x06, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x22, 0x6b,
	0x0a, 0x16, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x43, 0x68, 0x69, 0x6c, 0x6c, 0x4f,
	0x74, 0x68, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x51, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x33, 0x32, 0x52,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x22, 0x62, 0x0a, 0x14, 0x53,
	0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x4a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x54, 0x75,
	0x70, 0x6c, 0x65, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22,
	0x34, 0x0a, 0x1c, 0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f, 0x4b, 0x69, 0x6c, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xa9, 0x13, 0x0a, 0x1b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x5f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x41, 0x66, 0x74, 0x65,
	0x72, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x12, 0x61, 0x0a, 0x0e, 0x6d,
	0x61, 0x79, 0x62, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x55, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x48, 0x01, 0x52, 0x0d, 0x6d, 0x61,
	0x79, 0x62, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x88, 0x01, 0x01, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x40, 0x0a, 0x06, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x48, 0x00, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x49, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3a, 0x0a, 0x04, 0x62, 0x61, 0x62, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x61, 0x62, 0x65, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x04, 0x62,
	0x61, 0x62, 0x65, 0x12, 0x43, 0x0a, 0x07, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x72, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52,
	0x07, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x12, 0x46, 0x0a, 0x08, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x50, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x12, 0x43, 0x0a, 0x07, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x07, 0x76, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x47, 0x0a, 0x09, 0x62, 0x61, 0x67, 0x73, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x62, 0x61, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x47,
	0x0a, 0x09, 0x69, 0x6d, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x69,
	0x6d, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x43, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x48, 0x00, 0x52, 0x07, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x43, 0x0a, 0x07,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x46, 0x0a, 0x08, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52,
	0x08, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x12, 0x43, 0x0a, 0x07, 0x75, 0x74, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x07, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x5f,
	0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x6f, 0x74,
	0x69, 0x6e, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x6f, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x10, 0x63,
	0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x49, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52,
	0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x12, 0x6b, 0x0a, 0x15, 0x66, 0x65,
	0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48,
	0x00, 0x52, 0x14, 0x66, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x68, 0x0a, 0x14, 0x66, 0x65, 0x6c, 0x6c, 0x6f,
	0x77, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x64, 0x61, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x13, 0x66, 0x65,
	0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64,
	0x61, 0x12, 0x49, 0x0a, 0x09, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48,
	0x00, 0x52, 0x09, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x09,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x09, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x46, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52,
	0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x46, 0x0a, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73,
	0x69, 0x67, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x50, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x12, 0x7f,
	0x0a, 0x1d, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x50, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x48, 0x00, 0x52, 0x1a, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12,
	0x46, 0x0a, 0x08, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x75,
	0x6e, 0x74, 0x69, 0x65, 0x73, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x62,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x0e, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x69, 0x6c, 0x64,
	0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00,
	0x52, 0x0d, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x5c, 0x0a, 0x10, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f,
	0x6f, 0x6c, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x6f, 0x6c, 0x73, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x6e, 0x6f,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x3a, 0x0a,
	0x04, 0x67, 0x65, 0x61, 0x72, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x61, 0x72, 0x50, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x48, 0x00, 0x52, 0x04, 0x67, 0x65, 0x61, 0x72, 0x12, 0x59, 0x0a, 0x0f, 0x73, 0x74, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x50, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x12, 0x50, 0x0a, 0x0c, 0x67, 0x65, 0x61, 0x72, 0x5f, 0x76, 0x6f, 0x75,
	0x63, 0x68, 0x65, 0x72, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x61, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65,
	0x72, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x67, 0x65, 0x61, 0x72, 0x56,
	0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x42, 0x06, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x6d, 0x61, 0x79, 0x62, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69,
	0x63, 0x22, 0xf9, 0x04, 0x0a, 0x29, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x50,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x60, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x56, 0x65, 0x63, 0x42, 0x6f, 0x75, 0x6e, 0x64,
	0x65, 0x64, 0x56, 0x65, 0x63, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x12, 0x44, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x07,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x3e, 0x0a, 0x05, 0x6c, 0x65, 0x67, 0x61, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x4c, 0x65, 0x67, 0x61, 0x6c,
	0x52, 0x05, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x12, 0x38, 0x0a, 0x03, 0x77, 0x65, 0x62, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x57, 0x65, 0x62, 0x52, 0x03, 0x77, 0x65,
	0x62, 0x12, 0x3b, 0x0a, 0x04, 0x72, 0x69, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x52, 0x69, 0x6f, 0x74, 0x52, 0x04, 0x72, 0x69, 0x6f, 0x74, 0x12, 0x3e,
	0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x27,
	0x0a, 0x0f, 0x70, 0x67, 0x70, 0x5f, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x70, 0x67, 0x70, 0x46, 0x69, 0x6e, 0x67,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x44, 0x0a, 0x07, 0x74, 0x77, 0x69, 0x74, 0x74,
	0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x54, 0x77, 0x69,
	0x74, 0x74, 0x65, 0x72, 0x52, 0x07, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x22, 0x55, 0x0a,
	0x1d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x65, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x72, 0x65, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x17, 0x0a, 0x07, 0x6d,
	0x61, 0x78, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61,
	0x78, 0x46, 0x65, 0x65, 0x22, 0x56, 0x0a, 0x19, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x4e, 0x75, 0x6c,
	0x6c, 0x12, 0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x75, 0x70, 0x6c,
	0x65, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x12, 0x0a, 0x10,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x22, 0x8c, 0x01, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x75, 0x72, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x48, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22,
	0x13, 0x0a, 0x11, 0x47, 0x65, 0x61, 0x72, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x50, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x22, 0x28, 0x0a, 0x0e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x52, 0x61, 0x77, 0x32, 0x35, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0xe0,
	0x01, 0x0a, 0x21, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f,
	0x6c, 0x73, 0x5f, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x43, 0x61, 0x6c, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x8e, 0x01,
	0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x62, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c,
	0x73, 0x5f, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x53, 0x70, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65,
	0x74, 0x69, 0x63, 0x50, 0x65, 0x72, 0x54, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x65, 0x72, 0x62,
	0x69, 0x6c, 0x6c, 0x73, 0x70, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x33, 0x32, 0x48, 0x00, 0x52, 0x0d, 0x6e, 0x65,
	0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x8f, 0x03, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x5f, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x3d, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f,
	0x49, 0x64, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x46, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x5f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x40, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x52, 0x61, 0x77, 0x48, 0x00, 0x52, 0x03, 0x72,
	0x61, 0x77, 0x12, 0x52, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x48, 0x00, 0x52, 0x09, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x12, 0x52, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x32, 0x30, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x48, 0x00, 0x52,
	0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x3e, 0x0a, 0x15, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x42,
	0x6f, 0x6e, 0x64, 0x45, 0x78, 0x74, 0x72, 0x61, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x25, 0x0a, 0x0e,
	0x6d, 0x61, 0x78, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x22, 0x89, 0x01, 0x0a, 0x19, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f,
	0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x43, 0x61, 0x6c,
	0x6c, 0x12, 0x5a, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73,
	0x74, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x33, 0x32, 0x52, 0x0e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x73, 0x68, 0x12, 0x10, 0x0a,
	0x03, 0x65, 0x72, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x65, 0x72, 0x61, 0x22,
	0x92, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f, 0x53, 0x65,
	0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x50, 0x0a, 0x0a, 0x6d, 0x61, 0x79, 0x62, 0x65, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x48, 0x32, 0x35, 0x36, 0x48, 0x00, 0x52, 0x09, 0x6d, 0x61, 0x79, 0x62, 0x65, 0x48, 0x61,
	0x73, 0x68, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x61, 0x79, 0x62, 0x65, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x22, 0x27, 0x0a, 0x0d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x52, 0x61, 0x77, 0x30, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0x28, 0x0a,
	0x0e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x31, 0x12,
	0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0xb5, 0x01, 0x0a, 0x22, 0x4e, 0x6f, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x42, 0x6f, 0x6e, 0x64,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x48,
	0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f,
	0x6c, 0x73, 0x5f, 0x45, 0x78, 0x74, 0x72, 0x61, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22,
	0xbc, 0x01, 0x0a, 0x2b, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f,
	0x6f, 0x6c, 0x73, 0x5f, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12,
	0x17, 0x0a, 0x07, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x74, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4e,
	0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x22, 0xef,
	0x02, 0x0a, 0x21, 0x53, 0x70, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x53, 0x6c,
	0x6f, 0x74, 0x73, 0x45, 0x71, 0x75, 0x69, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x6f, 0x66, 0x12, 0x4e, 0x0a, 0x08, 0x6f, 0x66, 0x66, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x70, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x42, 0x61, 0x62,
	0x65, 0x41, 0x70, 0x70, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x08, 0x6f, 0x66, 0x66, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70,
	0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x53, 0x6c,
	0x6f, 0x74, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x59, 0x0a, 0x0c, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x52, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0b, 0x66, 0x69, 0x72, 0x73, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x5b, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x22, 0x89, 0x01, 0x0a, 0x2b, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x50, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x65, 0x72,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x19, 0x0a, 0x17,
	0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x4e, 0x6f, 0x45,
	0x72, 0x61, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x22, 0x27, 0x0a, 0x0d, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x37, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30,
	0x22, 0x64, 0x0a, 0x15, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f,
	0x6f, 0x6c, 0x73, 0x5f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x4b, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0x56, 0x0a, 0x0e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x5f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x44, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x54, 0x75, 0x70,
	0x6c, 0x65, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0x1b,
	0x0a, 0x19, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x22, 0xf2, 0x02, 0x0a, 0x14,
	0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63,
	0x69, 0x61, 0x72, 0x79, 0x12, 0x37, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x75, 0x6e,
	0x74, 0x69, 0x65, 0x73, 0x5f, 0x49, 0x64, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73,
	0x5f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x3a, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73,
	0x5f, 0x52, 0x61, 0x77, 0x48, 0x00, 0x52, 0x03, 0x72, 0x61, 0x77, 0x12, 0x4c, 0x0a, 0x09, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69,
	0x65, 0x73, 0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x48, 0x00, 0x52, 0x09,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x12, 0x4c, 0x0a, 0x09, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73,
	0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x48, 0x00, 0x52, 0x09, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0xeb, 0x03, 0x0a, 0x1a, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x5c, 0x0a, 0x0c, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73,
	0x5f, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x48, 0x00, 0x52,
	0x0c, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x12, 0x7b, 0x0a,
	0x17, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x6c, 0x65, 0x73, 0x73, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x6c, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64,
	0x48, 0x00, 0x52, 0x16, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x6c, 0x65,
	0x73, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x7b, 0x0a, 0x17, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x77, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x6c, 0x65, 0x73, 0x73, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x48, 0x00, 0x52,
	0x16, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x6c, 0x65, 0x73, 0x73, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x6c, 0x0a, 0x12, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x6c, 0x65, 0x73, 0x73, 0x41, 0x6c, 0x6c,
	0x48, 0x00, 0x52, 0x11, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x6c, 0x65,
	0x73, 0x73, 0x41, 0x6c, 0x6c, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x28,
	0x0a, 0x0e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x31, 0x35,
	0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0x90, 0x03, 0x0a, 0x19, 0x43, 0x68, 0x69,
	0x6c, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x42, 0x65, 0x6e, 0x65, 0x66,
	0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x12, 0x3c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68,
	0x69, 0x6c, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x49, 0x64, 0x48, 0x00,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x45, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x68, 0x69, 0x6c, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3f, 0x0a, 0x03, 0x72,
	0x61, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65,
	0x73, 0x5f, 0x52, 0x61, 0x77, 0x48, 0x00, 0x52, 0x03, 0x72, 0x61, 0x77, 0x12, 0x51, 0x0a, 0x09,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x69, 0x6c, 0x64,
	0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x33, 0x32, 0x48, 0x00, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x12,
	0x51, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68,
	0x69, 0x6c, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x32, 0x30, 0x48, 0x00, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x32, 0x30, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x63, 0x0a, 0x0f, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x48,
	0x0a, 0x08, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x53, 0x65, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52,
	0x07, 0x73, 0x65, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x06, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c,
	0x22, 0x98, 0x03, 0x0a, 0x17, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x42, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f,
	0x6f, 0x6c, 0x73, 0x5f, 0x49, 0x64, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x47, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x48, 0x00, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x41, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x52, 0x61,
	0x77, 0x48, 0x00, 0x52, 0x03, 0x72, 0x61, 0x77, 0x12, 0x53, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x33, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32,
	0x48, 0x00, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x12, 0x53, 0x0a,
	0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x32, 0x30, 0x48, 0x00, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x32, 0x30, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x98, 0x02, 0x0a, 0x1a,
	0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x42, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x52, 0x6f, 0x6f, 0x74,
	0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x12, 0x51, 0x0a, 0x09, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x09,
	0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x4b, 0x0a, 0x07, 0x62, 0x6f, 0x75,
	0x6e, 0x63, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x42, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x72, 0x52, 0x07, 0x62,
	0x6f, 0x75, 0x6e, 0x63, 0x65, 0x72, 0x22, 0x5f, 0x0a, 0x12, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x33, 0x32, 0x52,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0xae, 0x01, 0x0a, 0x18, 0x53, 0x70, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x50,
	0x72, 0x6f, 0x6f, 0x66, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4f,
	0x0a, 0x0a, 0x74, 0x72, 0x69, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61,
	0x62, 0x65, 0x5f, 0x42, 0x61, 0x62, 0x65, 0x54, 0x72, 0x69, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x74, 0x72, 0x69, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12,
	0x27, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x1f, 0x0a, 0x1d, 0x53, 0x74, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x5f, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x4e, 0x65, 0x77, 0x45, 0x72, 0x61, 0x41,
	0x6c, 0x77, 0x61, 0x79, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x22, 0xfd, 0x11, 0x0a, 0x16, 0x56, 0x61,
	0x72, 0x61, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x43, 0x61, 0x6c, 0x6c, 0x12, 0x40, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x06,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x49, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x50, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x3a, 0x0a, 0x04, 0x62, 0x61, 0x62, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x62, 0x65, 0x50,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x04, 0x62, 0x61, 0x62, 0x65, 0x12, 0x43, 0x0a,
	0x07, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x70,
	0x61, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x07, 0x67, 0x72, 0x61, 0x6e, 0x64,
	0x70, 0x61, 0x12, 0x46, 0x0a, 0x08, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00,
	0x52, 0x08, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x07, 0x76, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x07, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x47, 0x0a, 0x09, 0x62, 0x61, 0x67, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61,
	0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08,
	0x62, 0x61, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x09, 0x69, 0x6d, 0x5f, 0x6f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6d, 0x4f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x12, 0x43, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x07, 0x73,
	0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x43, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x48, 0x00, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x08, 0x74,
	0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x79, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x74, 0x72, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x79, 0x12, 0x43, 0x0a, 0x07, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52,
	0x07, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x5f, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x49, 0x0a, 0x09, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64,
	0x61, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x64, 0x61, 0x12, 0x6b, 0x0a, 0x15, 0x66, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68,
	0x69, 0x70, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x14, 0x66, 0x65, 0x6c,
	0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x68, 0x0a, 0x14, 0x66, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x5f,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x6c, 0x6c, 0x6f,
	0x77, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x50, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x13, 0x66, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68,
	0x69, 0x70, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x12, 0x49, 0x0a, 0x09, 0x77,
	0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c,
	0x69, 0x73, 0x74, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x09, 0x77, 0x68, 0x69,
	0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x12, 0x46, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52,
	0x08, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x46, 0x0a, 0x08, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x12, 0x46, 0x0a, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x12, 0x7f, 0x0a, 0x1d, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3a, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x50, 0x68, 0x61, 0x73, 0x65, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x1a, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x08, 0x62, 0x6f, 0x75,
	0x6e, 0x74, 0x69, 0x65, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x50,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x56, 0x0a, 0x0e, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69,
	0x65, 0x73, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x10, 0x6e, 0x6f, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x50, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x3a, 0x0a, 0x04, 0x67, 0x65, 0x61, 0x72, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x61, 0x72, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x04, 0x67,
	0x65, 0x61, 0x72, 0x12, 0x59, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0e,
	0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x50,
	0x0a, 0x0c, 0x67, 0x65, 0x61, 0x72, 0x5f, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x61, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x50, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x48, 0x00, 0x52, 0x0b, 0x67, 0x65, 0x61, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72,
	0x42, 0x07, 0x0a, 0x05, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x22, 0x36, 0x0a, 0x1e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f, 0x4f, 0x6e, 0x65, 0x46, 0x65, 0x77, 0x65, 0x72, 0x44,
	0x65, 0x63, 0x69, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x22, 0xc7, 0x07, 0x0a, 0x0e, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x50, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x12, 0x66, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x5f,
	0x62, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x75,
	0x6e, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x42, 0x6f, 0x75,
	0x6e, 0x74, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x66, 0x0a, 0x13,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x48,
	0x00, 0x52, 0x11, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x79,
	0x43, 0x61, 0x6c, 0x6c, 0x12, 0x69, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x5f,
	0x63, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f,
	0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x43, 0x75,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x12, 0x70, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x65, 0x43, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x12,
	0x6c, 0x0a, 0x15, 0x75, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x63, 0x75, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69,
	0x65, 0x73, 0x5f, 0x55, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x43, 0x75, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x13, 0x75, 0x6e, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x43, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x66, 0x0a,
	0x13, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x41,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x43, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x61, 0x6c, 0x6c,
	0x48, 0x00, 0x52, 0x11, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x43, 0x75, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x60, 0x0a, 0x11, 0x61, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x62,
	0x6f, 0x75, 0x6e, 0x74, 0x79, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x75, 0x6e,
	0x74, 0x69, 0x65, 0x73, 0x5f, 0x41, 0x77, 0x61, 0x72, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x79,
	0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0f, 0x61, 0x77, 0x61, 0x72, 0x64, 0x42, 0x6f, 0x75,
	0x6e, 0x74, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x60, 0x0a, 0x11, 0x63, 0x6c, 0x61, 0x69, 0x6d,
	0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f,
	0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x42, 0x6f, 0x75, 0x6e,
	0x74, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x42,
	0x6f, 0x75, 0x6e, 0x74, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x60, 0x0a, 0x11, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x42, 0x6f,
	0x75, 0x6e, 0x74, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x76, 0x0a, 0x19, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x64, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x5f, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x79, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69,
	0x65, 0x73, 0x5f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x45,
	0x78, 0x70, 0x69, 0x72, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x16, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x43,
	0x61, 0x6c, 0x6c, 0x42, 0x06, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x22, 0xe4, 0x02, 0x0a, 0x0b,
	0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x57, 0x68, 0x6f, 0x12, 0x36, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x49, 0x64, 0x48, 0x00, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x48, 0x00, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x39, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x52, 0x61, 0x77, 0x48, 0x00, 0x52, 0x03, 0x72, 0x61, 0x77, 0x12,
	0x4b, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x48,
	0x00, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x12, 0x4b, 0x0a, 0x09,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x48, 0x00, 0x52, 0x09,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xff, 0x01, 0x0a, 0x25, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69,
	0x73, 0x74, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x49, 0x0a, 0x09,
	0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x48, 0x32, 0x35, 0x36, 0x52, 0x08, 0x63,
	0x61, 0x6c, 0x6c, 0x48, 0x61, 0x73, 0x68, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x61, 0x6c, 0x6c, 0x5f,
	0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x63, 0x61, 0x6c, 0x6c, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x4c, 0x65,
	0x6e, 0x12, 0x61, 0x0a, 0x13, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x5f, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x57, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x56, 0x32, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x52, 0x11, 0x63, 0x61, 0x6c, 0x6c, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x57, 0x69, 0x74,
	0x6e, 0x65, 0x73, 0x73, 0x22, 0x95, 0x03, 0x0a, 0x14, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x3e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x49, 0x64, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x47, 0x0a,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x48, 0x00, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x41, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x52,
	0x61, 0x77, 0x48, 0x00, 0x52, 0x03, 0x72, 0x61, 0x77, 0x12, 0x53, 0x0a, 0x09, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33,
	0x32, 0x48, 0x00, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x12, 0x53,
	0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x48, 0x00, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x32, 0x30, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x56, 0x0a, 0x1a,
	0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x64, 0x61, 0x5f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x38, 0x0a, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x30, 0x22, 0x28, 0x0a, 0x0e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x52, 0x61, 0x77, 0x31, 0x33, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0x52,
	0x0a, 0x16, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x53, 0x75, 0x62, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x38, 0x0a, 0x03, 0x73, 0x75, 0x62, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x53, 0x75, 0x62, 0x52, 0x03, 0x73,
	0x75, 0x62, 0x22, 0x5b, 0x0a, 0x20, 0x53, 0x70, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x44, 0x69, 0x67, 0x65,
	0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x37, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x61, 0x62, 0x65, 0x5f, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x22,
	0x6f, 0x0a, 0x1b, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x46, 0x6f, 0x72, 0x63,
	0x65, 0x55, 0x6e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x38,
	0x0a, 0x03, 0x77, 0x68, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f,
	0x57, 0x68, 0x6f, 0x52, 0x03, 0x77, 0x68, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x2b, 0x0a, 0x11, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x33, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0x0f, 0x0a,
	0x0d, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x53, 0x74, 0x61, 0x73, 0x68, 0x22, 0x2e,
	0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x52, 0x61, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0xac,
	0x04, 0x0a, 0x11, 0x47, 0x65, 0x61, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x50, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x12, 0x50, 0x0a, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x61, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x5f,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x09, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x4d, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x61, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72,
	0x5f, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x08, 0x63, 0x61, 0x6c,
	0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x53, 0x0a, 0x0b, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x61, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65,
	0x72, 0x5f, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0a,
	0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x53, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x61, 0x72, 0x56,
	0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c,
	0x6c, 0x48, 0x00, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12,
	0x6c, 0x0a, 0x14, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x61, 0x72, 0x56, 0x6f, 0x75,
	0x63, 0x68, 0x65, 0x72, 0x5f, 0x43, 0x61, 0x6c, 0x6c, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x12, 0x63, 0x61, 0x6c, 0x6c, 0x44,
	0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x56, 0x0a,
	0x0c, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x61, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x44, 0x65, 0x63, 0x6c, 0x69,
	0x6e, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e,
	0x65, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x06, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x22, 0x54, 0x0a,
	0x0d, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x43,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x30, 0x22, 0x0e, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x4e,
	0x6f, 0x6f, 0x70, 0x22, 0x2c, 0x0a, 0x12, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x30, 0x22, 0xed, 0x02, 0x0a, 0x0f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x37, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x49, 0x64, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x3a, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x52, 0x61, 0x77, 0x48, 0x00, 0x52, 0x03, 0x72, 0x61, 0x77, 0x12, 0x4c, 0x0a, 0x09,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x48, 0x00, 0x52,
	0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x12, 0x4c, 0x0a, 0x09, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x48, 0x00, 0x52, 0x09, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x16, 0x0a, 0x14, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x4f, 0x70, 0x65, 0x6e, 0x22, 0xd7, 0x05, 0x0a, 0x20, 0x45, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x7b,
	0x0a, 0x14, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61,
	0x73, 0x65, 0x5f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x12, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x55,
	0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x9b, 0x01, 0x0a, 0x20,
	0x73, 0x65, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x75, 0x6e, 0x74, 0x72,
	0x75, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x53, 0x65, 0x74,
	0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x55, 0x6e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x1c, 0x73, 0x65, 0x74,
	0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x55, 0x6e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0xa1, 0x01, 0x0a, 0x22, 0x73, 0x65,
	0x74, 0x5f, 0x65, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x53, 0x65, 0x74,
	0x45, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x1e, 0x73,
	0x65, 0x74, 0x45, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x45, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x62, 0x0a,
	0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x43,
	0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x43, 0x61, 0x6c,
	0x6c, 0x12, 0x87, 0x01, 0x0a, 0x18, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x47, 0x6f, 0x76, 0x65, 0x72,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x61, 0x6c,
	0x6c, 0x48, 0x00, 0x52, 0x16, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x46,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x06, 0x0a, 0x04, 0x63,
	0x61, 0x6c, 0x6c, 0x22, 0x2d, 0x0a, 0x13, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x52, 0x61, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x30, 0x22, 0x28, 0x0a, 0x26, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x6c, 0x65, 0x73, 0x73, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x22, 0x61, 0x0a, 0x18,
	0x53, 0x70, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x42, 0x61, 0x62, 0x65, 0x41,
	0x70, 0x70, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x45, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x72, 0x32, 0x35, 0x35, 0x31,
	0x39, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22,
	0xb3, 0x01, 0x0a, 0x14, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x5f, 0x45, 0x71, 0x75, 0x69,
	0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x76,
	0x6f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x5f, 0x50, 0x72, 0x65,
	0x76, 0x6f, 0x74, 0x65, 0x48, 0x00, 0x52, 0x07, 0x70, 0x72, 0x65, 0x76, 0x6f, 0x74, 0x65, 0x12,
	0x4b, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72,
	0x61, 0x6e, 0x64, 0x70, 0x61, 0x5f, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48,
	0x00, 0x52, 0x09, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x42, 0x07, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x57, 0x0a, 0x24, 0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73,
	0x68, 0x69, 0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x43, 0x6c,
	0x65, 0x61, 0x6e, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x6f, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x70, 0x6f, 0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x22, 0x68,
	0x0a, 0x1b, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x57, 0x68, 0x69, 0x74,
	0x65, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x49, 0x0a,
	0x09, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x6d,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x48, 0x32, 0x35, 0x36, 0x52, 0x08,
	0x63, 0x61, 0x6c, 0x6c, 0x48, 0x61, 0x73, 0x68, 0x22, 0x85, 0x01, 0x0a, 0x51, 0x45, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x45, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x76, 0x6f, 0x74, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73,
	0x22, 0xb4, 0x01, 0x0a, 0x24, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x55, 0x6e, 0x62,
	0x6f, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x5e, 0x0a, 0x0e, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0d, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x75, 0x6d,
	0x5f, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x70, 0x61, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x69,
	0x6e, 0x67, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x22, 0x81, 0x02, 0x0a, 0x21, 0x4e, 0x6f, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x4d, 0x61, 0x78, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x50, 0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x44, 0x0a,
	0x04, 0x6e, 0x6f, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x4e, 0x6f, 0x6f, 0x70, 0x48, 0x00, 0x52, 0x04, 0x6e,
	0x6f, 0x6f, 0x70, 0x12, 0x41, 0x0a, 0x03, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x53, 0x65, 0x74, 0x48,
	0x00, 0x52, 0x03, 0x73, 0x65, 0x74, 0x12, 0x4a, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c,
	0x73, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x34, 0x0a, 0x1a, 0x43,
	0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x30, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x30, 0x22, 0x2b, 0x0a, 0x19, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x22, 0x28,
	0x0a, 0x0e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x33, 0x32,
	0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0x29, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x30, 0x22, 0xe4, 0x01, 0x0a, 0x4d, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61,
	0x73, 0x65, 0x5f, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x53, 0x70, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x33, 0x32, 0x53,
	0x70, 0x4e, 0x70, 0x6f, 0x73, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x49, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x70, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x33, 0x32, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30,
	0x12, 0x48, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x4e, 0x70,
	0x6f, 0x73, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x22, 0x48, 0x0a, 0x16, 0x42, 0x61,
	0x62, 0x65, 0x5f, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x55, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x31, 0x22, 0x36, 0x0a, 0x1e, 0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68,
	0x69, 0x70, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x5f, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x28, 0x0a, 0x0e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x61, 0x77, 0x32, 0x30, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x22, 0x38, 0x0a, 0x1e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x53, 0x75,
	0x70, 0x70, 0x6c, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x42, 0x4b, 0x5a, 0x49, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x66, 0x61, 0x73, 0x74, 0x2f, 0x66, 0x69, 0x72,
	0x65, 0x68, 0x6f, 0x73, 0x65, 0x2d, 0x67, 0x65, 0x61, 0x72, 0x2f, 0x70, 0x62, 0x2f, 0x73, 0x66,
	0x2f, 0x67, 0x65, 0x61, 0x72, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x70, 0x62, 0x67, 0x65, 0x61, 0x72, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sf_gear_metadata_type_v1_output_proto_rawDescOnce sync.Once
	file_sf_gear_metadata_type_v1_output_proto_rawDescData = file_sf_gear_metadata_type_v1_output_proto_rawDesc
)

func file_sf_gear_metadata_type_v1_output_proto_rawDescGZIP() []byte {
	file_sf_gear_metadata_type_v1_output_proto_rawDescOnce.Do(func() {
		file_sf_gear_metadata_type_v1_output_proto_rawDescData = protoimpl.X.CompressGZIP(file_sf_gear_metadata_type_v1_output_proto_rawDescData)
	})
	return file_sf_gear_metadata_type_v1_output_proto_rawDescData
}

var file_sf_gear_metadata_type_v1_output_proto_msgTypes = make([]protoimpl.MessageInfo, 608)
var file_sf_gear_metadata_type_v1_output_proto_goTypes = []interface{}{
	(*Vesting_Index)(nil),                      // 0: sf.gear.metadata.type.v1.Vesting_Index
	(*Treasury_TupleNull)(nil),                 // 1: sf.gear.metadata.type.v1.Treasury_TupleNull
	(*Identity_Keccak256)(nil),                 // 2: sf.gear.metadata.type.v1.Identity_Keccak256
	(*Identity_SetSubsCall)(nil),               // 3: sf.gear.metadata.type.v1.Identity_SetSubsCall
	(*NominationPools_Set)(nil),                // 4: sf.gear.metadata.type.v1.NominationPools_Set
	(*ConvictionVoting_Locked6X)(nil),          // 5: sf.gear.metadata.type.v1.ConvictionVoting_Locked6X
	(*Identity_Raw24)(nil),                     // 6: sf.gear.metadata.type.v1.Identity_Raw24
	(*Multisig_AsMultiCall)(nil),               // 7: sf.gear.metadata.type.v1.Multisig_AsMultiCall
	(*Vesting_MergeSchedulesCall)(nil),         // 8: sf.gear.metadata.type.v1.Vesting_MergeSchedulesCall
	(*Staking_SetInvulnerablesCall)(nil),       // 9: sf.gear.metadata.type.v1.Staking_SetInvulnerablesCall
	(*Staking_ForceUnstakeCall)(nil),           // 10: sf.gear.metadata.type.v1.Staking_ForceUnstakeCall
	(*Treasury_PayoutCall)(nil),                // 11: sf.gear.metadata.type.v1.Treasury_PayoutCall
	(*ConvictionVoting_Id)(nil),                // 12: sf.gear.metadata.type.v1.ConvictionVoting_Id
	(*ChildBounties_ClaimChildBountyCall)(nil), // 13: sf.gear.metadata.type.v1.ChildBounties_ClaimChildBountyCall
	(*NominationPools_MaxMembers)(nil),         // 14: sf.gear.metadata.type.v1.NominationPools_MaxMembers
	(*System_RemarkWithEventCall)(nil),         // 15: sf.gear.metadata.type.v1.System_RemarkWithEventCall
	(*ConvictionVoting_To)(nil),                // 16: sf.gear.metadata.type.v1.ConvictionVoting_To
	(*ChildBounties_TupleNull)(nil),            // 17: sf.gear.metadata.type.v1.ChildBounties_TupleNull
	(*Proxy_NonTransfer)(nil),                  // 18: sf.gear.metadata.type.v1.Proxy_NonTransfer
	(*Proxy_CancelProxy)(nil),                  // 19: sf.gear.metadata.type.v1.Proxy_CancelProxy
	(*GearVoucher_AppendPrograms)(nil),         // 20: sf.gear.metadata.type.v1.GearVoucher_AppendPrograms
	(*TreasuryPallet)(nil),                     // 21: sf.gear.metadata.type.v1.TreasuryPallet
	(*ConvictionVoting_Split)(nil),             // 22: sf.gear.metadata.type.v1.ConvictionVoting_Split
	(*Proxy_ForceProxyType)(nil),               // 23: sf.gear.metadata.type.v1.Proxy_ForceProxyType
	(*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes8Listuint32)(nil), // 24: sf.gear.metadata.type.v1.ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes8Listuint32
	(*Vesting_TupleNull)(nil),                    // 25: sf.gear.metadata.type.v1.Vesting_TupleNull
	(*Treasury_VoidSpendCall)(nil),               // 26: sf.gear.metadata.type.v1.Treasury_VoidSpendCall
	(*Proxy_AnnounceCall)(nil),                   // 27: sf.gear.metadata.type.v1.Proxy_AnnounceCall
	(*FellowshipReferenda_EnactmentMoment)(nil),  // 28: sf.gear.metadata.type.v1.FellowshipReferenda_EnactmentMoment
	(*PreimagePallet)(nil),                       // 29: sf.gear.metadata.type.v1.PreimagePallet
	(*Identity_None)(nil),                        // 30: sf.gear.metadata.type.v1.Identity_None
	(*Bounties_ProposeBountyCall)(nil),           // 31: sf.gear.metadata.type.v1.Bounties_ProposeBountyCall
	(*SpConsensusGrandpaEquivocationProof)(nil),  // 32: sf.gear.metadata.type.v1.SpConsensusGrandpaEquivocationProof
	(*None)(nil),                                 // 33: sf.gear.metadata.type.v1.None
	(*Identity_Raw22)(nil),                       // 34: sf.gear.metadata.type.v1.Identity_Raw22
	(*Identity_PalletIdentityTypesBitFlags)(nil), // 35: sf.gear.metadata.type.v1.Identity_PalletIdentityTypesBitFlags
	(*Identity_Raw23)(nil),                       // 36: sf.gear.metadata.type.v1.Identity_Raw23
	(*NominationPools_MinCreateBond)(nil),        // 37: sf.gear.metadata.type.v1.NominationPools_MinCreateBond
	(*StakingRewards_RefillCall)(nil),            // 38: sf.gear.metadata.type.v1.StakingRewards_RefillCall
	(*StakingRewards_ForceRefillCall)(nil),       // 39: sf.gear.metadata.type.v1.StakingRewards_ForceRefillCall
	(*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes11Listuint32)(nil), // 40: sf.gear.metadata.type.v1.ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes11Listuint32
	(*NominationPools_Nominator)(nil),                                     // 41: sf.gear.metadata.type.v1.NominationPools_Nominator
	(*Babe_Logs)(nil),                                                     // 42: sf.gear.metadata.type.v1.Babe_Logs
	(*Grandpa_ReportEquivocationCall)(nil),                                // 43: sf.gear.metadata.type.v1.Grandpa_ReportEquivocationCall
	(*ImOnline_PalletImOnlineSr25519AppSr25519Public)(nil),                // 44: sf.gear.metadata.type.v1.ImOnline_PalletImOnlineSr25519AppSr25519Public
	(*Referenda_CancelCall)(nil),                                          // 45: sf.gear.metadata.type.v1.Referenda_CancelCall
	(*Referenda_KillCall)(nil),                                            // 46: sf.gear.metadata.type.v1.Referenda_KillCall
	(*Utility_WithWeightCall)(nil),                                        // 47: sf.gear.metadata.type.v1.Utility_WithWeightCall
	(*Referenda_System)(nil),                                              // 48: sf.gear.metadata.type.v1.Referenda_System
	(*FellowshipCollective_Index)(nil),                                    // 49: sf.gear.metadata.type.v1.FellowshipCollective_Index
	(*Identity_New)(nil),                                                  // 50: sf.gear.metadata.type.v1.Identity_New
	(*System_SetHeapPagesCall)(nil),                                       // 51: sf.gear.metadata.type.v1.System_SetHeapPagesCall
	(*BagsList_Index)(nil),                                                // 52: sf.gear.metadata.type.v1.BagsList_Index
	(*BagsList_PutInFrontOfOtherCall)(nil),                                // 53: sf.gear.metadata.type.v1.BagsList_PutInFrontOfOtherCall
	(*Staking_MaxValidatorCount)(nil),                                     // 54: sf.gear.metadata.type.v1.Staking_MaxValidatorCount
	(*Utility_AsDerivativeCall)(nil),                                      // 55: sf.gear.metadata.type.v1.Utility_AsDerivativeCall
	(*Multisig_ApproveAsMultiCall)(nil),                                   // 56: sf.gear.metadata.type.v1.Multisig_ApproveAsMultiCall
	(*ElectionProviderMultiPhase_TupleSpCoreCryptoAccountId32String)(nil), // 57: sf.gear.metadata.type.v1.ElectionProviderMultiPhase_TupleSpCoreCryptoAccountId32String
	(*NominationPools_CreateWithPoolIdCall)(nil),                          // 58: sf.gear.metadata.type.v1.NominationPools_CreateWithPoolIdCall
	(*ChildBounties_Address20)(nil),                                       // 59: sf.gear.metadata.type.v1.ChildBounties_Address20
	(*Babe_Other)(nil),                                                    // 60: sf.gear.metadata.type.v1.Babe_Other
	(*Babe_ReportEquivocationCall)(nil),                                   // 61: sf.gear.metadata.type.v1.Babe_ReportEquivocationCall
	(*Staking_UnbondCall)(nil),                                            // 62: sf.gear.metadata.type.v1.Staking_UnbondCall
	(*ConvictionVoting_SplitAbstain)(nil),                                 // 63: sf.gear.metadata.type.v1.ConvictionVoting_SplitAbstain
	(*Proxy_AddProxyCall)(nil),                                            // 64: sf.gear.metadata.type.v1.Proxy_AddProxyCall
	(*System_TupleSystemItemsListSystemItemsList)(nil),                    // 65: sf.gear.metadata.type.v1.System_TupleSystemItemsListSystemItemsList
	(*Staking_NominateCall)(nil),                                          // 66: sf.gear.metadata.type.v1.Staking_NominateCall
	(*Identity_Raw29)(nil),                                                // 67: sf.gear.metadata.type.v1.Identity_Raw29
	(*ElectionProviderMultiPhase_TupleUint32Uint32)(nil),                  // 68: sf.gear.metadata.type.v1.ElectionProviderMultiPhase_TupleUint32Uint32
	(*NominationPools_SetConfigsCall)(nil),                                // 69: sf.gear.metadata.type.v1.NominationPools_SetConfigsCall
	(*SpConsensusGrandpaAppPublic)(nil),                                   // 70: sf.gear.metadata.type.v1.SpConsensusGrandpaAppPublic
	(*ConvictionVoting_Standard)(nil),                                     // 71: sf.gear.metadata.type.v1.ConvictionVoting_Standard
	(*Identity_SetIdentityCall)(nil),                                      // 72: sf.gear.metadata.type.v1.Identity_SetIdentityCall
	(*Proxy_ProxyAnnouncedCall)(nil),                                      // 73: sf.gear.metadata.type.v1.Proxy_ProxyAnnouncedCall
	(*ElectionProviderMultiPhase_SubmitUnsignedCall)(nil),                 // 74: sf.gear.metadata.type.v1.ElectionProviderMultiPhase_SubmitUnsignedCall
	(*ChildBounties_Index)(nil),                                           // 75: sf.gear.metadata.type.v1.ChildBounties_Index
	(*Babe_Seal)(nil),                                                     // 76: sf.gear.metadata.type.v1.Babe_Seal
	(*Staking_ScaleValidatorCountCall)(nil),                               // 77: sf.gear.metadata.type.v1.Staking_ScaleValidatorCountCall
	(*ConvictionVoting_Index)(nil),                                        // 78: sf.gear.metadata.type.v1.ConvictionVoting_Index
	(*Identity_Raw21)(nil),                                                // 79: sf.gear.metadata.type.v1.Identity_Raw21
	(*ElectionProviderMultiPhase_TupleUint32TupleUint32SpArithmeticPerThingsPerU16Uint32)(nil), // 80: sf.gear.metadata.type.v1.ElectionProviderMultiPhase_TupleUint32TupleUint32SpArithmeticPerThingsPerU16Uint32
	(*Staking_Targets)(nil),                                   // 81: sf.gear.metadata.type.v1.Staking_Targets
	(*ConvictionVoting_None)(nil),                             // 82: sf.gear.metadata.type.v1.ConvictionVoting_None
	(*Identity_Sha256)(nil),                                   // 83: sf.gear.metadata.type.v1.Identity_Sha256
	(*GrandpaPallet)(nil),                                     // 84: sf.gear.metadata.type.v1.GrandpaPallet
	(*Vesting_Raw)(nil),                                       // 85: sf.gear.metadata.type.v1.Vesting_Raw
	(*Vesting_Source)(nil),                                    // 86: sf.gear.metadata.type.v1.Vesting_Source
	(*TransactionPaymentPallet)(nil),                          // 87: sf.gear.metadata.type.v1.TransactionPaymentPallet
	(*BagsList_PutInFrontOfCall)(nil),                         // 88: sf.gear.metadata.type.v1.BagsList_PutInFrontOfCall
	(*PrimaryAndSecondaryVrfSlots)(nil),                       // 89: sf.gear.metadata.type.v1.PrimaryAndSecondaryVrfSlots
	(*Vesting_ForceVestedTransferCall)(nil),                   // 90: sf.gear.metadata.type.v1.Vesting_ForceVestedTransferCall
	(*Staking_PalletStakingValidatorPrefs)(nil),               // 91: sf.gear.metadata.type.v1.Staking_PalletStakingValidatorPrefs
	(*Vesting_VestedTransferCall)(nil),                        // 92: sf.gear.metadata.type.v1.Vesting_VestedTransferCall
	(*FellowshipReferenda_Lookup)(nil),                        // 93: sf.gear.metadata.type.v1.FellowshipReferenda_Lookup
	(*Bounties_ProposeCuratorCall)(nil),                       // 94: sf.gear.metadata.type.v1.Bounties_ProposeCuratorCall
	(*NominationPools_State)(nil),                             // 95: sf.gear.metadata.type.v1.NominationPools_State
	(*ImOnline_PalletImOnlineSr25519AppSr25519Signature)(nil), // 96: sf.gear.metadata.type.v1.ImOnline_PalletImOnlineSr25519AppSr25519Signature
	(*Staking_ChillCall)(nil),                                 // 97: sf.gear.metadata.type.v1.Staking_ChillCall
	(*Referenda_NudgeReferendumCall)(nil),                     // 98: sf.gear.metadata.type.v1.Referenda_NudgeReferendumCall
	(*Preimage_RequestPreimageCall)(nil),                      // 99: sf.gear.metadata.type.v1.Preimage_RequestPreimageCall
	(*ConvictionVoting_UndelegateCall)(nil),                   // 100: sf.gear.metadata.type.v1.ConvictionVoting_UndelegateCall
	(*FellowshipCollective_Raw)(nil),                          // 101: sf.gear.metadata.type.v1.FellowshipCollective_Raw
	(*GprimitivesCodeId)(nil),                                 // 102: sf.gear.metadata.type.v1.GprimitivesCodeId
	(*Balances_UpgradeAccountsCall)(nil),                      // 103: sf.gear.metadata.type.v1.Balances_UpgradeAccountsCall
	(*Staking_Payee)(nil),                                     // 104: sf.gear.metadata.type.v1.Staking_Payee
	(*Session_PurgeKeysCall)(nil),                             // 105: sf.gear.metadata.type.v1.Session_PurgeKeysCall
	(*Identity_Raw14)(nil),                                    // 106: sf.gear.metadata.type.v1.Identity_Raw14
	(*NominationPools_ClaimPayoutCall)(nil),                   // 107: sf.gear.metadata.type.v1.NominationPools_ClaimPayoutCall
	(*Bounties_UnassignCuratorCall)(nil),                      // 108: sf.gear.metadata.type.v1.Bounties_UnassignCuratorCall
	(*Treasury_ApproveProposalCall)(nil),                      // 109: sf.gear.metadata.type.v1.Treasury_ApproveProposalCall
	(*FellowshipReferenda_RefundSubmissionDepositCall)(nil),   // 110: sf.gear.metadata.type.v1.FellowshipReferenda_RefundSubmissionDepositCall
	(*SchedulerPallet)(nil),                                   // 111: sf.gear.metadata.type.v1.SchedulerPallet
	(*Proxy_Index)(nil),                                       // 112: sf.gear.metadata.type.v1.Proxy_Index
	(*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes13Listuint32)(nil), // 113: sf.gear.metadata.type.v1.ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes13Listuint32
	(*BagsList_Heavier)(nil),                     // 114: sf.gear.metadata.type.v1.BagsList_Heavier
	(*NominationPools_SetCommissionMaxCall)(nil), // 115: sf.gear.metadata.type.v1.NominationPools_SetCommissionMaxCall
	(*Balances_TransferAllowDeathCall)(nil),      // 116: sf.gear.metadata.type.v1.Balances_TransferAllowDeathCall
	(*Identity_Reasonable)(nil),                  // 117: sf.gear.metadata.type.v1.Identity_Reasonable
	(*Value0)(nil),                               // 118: sf.gear.metadata.type.v1.Value0
	(*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes12Listuint32)(nil), // 119: sf.gear.metadata.type.v1.ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes12Listuint32
	(*ElectionProviderMultiPhase_SetMinimumUntrustedScoreCall)(nil),                           // 120: sf.gear.metadata.type.v1.ElectionProviderMultiPhase_SetMinimumUntrustedScoreCall
	(*NominationPools_MinJoinBond)(nil),                                                       // 121: sf.gear.metadata.type.v1.NominationPools_MinJoinBond
	(*GearVoucher_SendMessage)(nil),                                                           // 122: sf.gear.metadata.type.v1.GearVoucher_SendMessage
	(*Grandpa_GrandpaTrieNodesList)(nil),                                                      // 123: sf.gear.metadata.type.v1.Grandpa_GrandpaTrieNodesList
	(*Staking_Address20)(nil),                                                                 // 124: sf.gear.metadata.type.v1.Staking_Address20
	(*Gear_RunCall)(nil),                                                                      // 125: sf.gear.metadata.type.v1.Gear_RunCall
	(*Treasury_CheckStatusCall)(nil),                                                          // 126: sf.gear.metadata.type.v1.Treasury_CheckStatusCall
	(*ConvictionVoting_Locked3X)(nil),                                                         // 127: sf.gear.metadata.type.v1.ConvictionVoting_Locked3X
	(*FellowshipCollective_Who)(nil),                                                          // 128: sf.gear.metadata.type.v1.FellowshipCollective_Who
	(*Identity_Display)(nil),                                                                  // 129: sf.gear.metadata.type.v1.Identity_Display
	(*NominationPools_UpdateRolesCall)(nil),                                                   // 130: sf.gear.metadata.type.v1.NominationPools_UpdateRolesCall
	(*Referenda_RefundSubmissionDepositCall)(nil),                                             // 131: sf.gear.metadata.type.v1.Referenda_RefundSubmissionDepositCall
	(*OriginsPallet)(nil),                                                                     // 132: sf.gear.metadata.type.v1.OriginsPallet
	(*NominationPools_Extra)(nil),                                                             // 133: sf.gear.metadata.type.v1.NominationPools_Extra
	(*GearVoucher_IssueCall)(nil),                                                             // 134: sf.gear.metadata.type.v1.GearVoucher_IssueCall
	(*GearVoucher_None)(nil),                                                                  // 135: sf.gear.metadata.type.v1.GearVoucher_None
	(*SpConsensusGrandpaAppSignature)(nil),                                                    // 136: sf.gear.metadata.type.v1.SpConsensusGrandpaAppSignature
	(*Grandpa_Prevote)(nil),                                                                   // 137: sf.gear.metadata.type.v1.Grandpa_Prevote
	(*Balances_ForceTransferCall)(nil),                                                        // 138: sf.gear.metadata.type.v1.Balances_ForceTransferCall
	(*Preimage_EnsureUpdatedCall)(nil),                                                        // 139: sf.gear.metadata.type.v1.Preimage_EnsureUpdatedCall
	(*Proxy_Address20)(nil),                                                                   // 140: sf.gear.metadata.type.v1.Proxy_Address20
	(*NominationPools_ClaimPayoutOtherCall)(nil),                                              // 141: sf.gear.metadata.type.v1.NominationPools_ClaimPayoutOtherCall
	(*System_SetCodeCall)(nil),                                                                // 142: sf.gear.metadata.type.v1.System_SetCodeCall
	(*Balances_Who)(nil),                                                                      // 143: sf.gear.metadata.type.v1.Balances_Who
	(*WhitelistPallet)(nil),                                                                   // 144: sf.gear.metadata.type.v1.WhitelistPallet
	(*Identity_Raw26)(nil),                                                                    // 145: sf.gear.metadata.type.v1.Identity_Raw26
	(*NominationPools_SetStateCall)(nil),                                                      // 146: sf.gear.metadata.type.v1.NominationPools_SetStateCall
	(*SpCoreEd25519Public)(nil),                                                               // 147: sf.gear.metadata.type.v1.SpCoreEd25519Public
	(*Treasury_RemoveApprovalCall)(nil),                                                       // 148: sf.gear.metadata.type.v1.Treasury_RemoveApprovalCall
	(*BagsList_Address20)(nil),                                                                // 149: sf.gear.metadata.type.v1.BagsList_Address20
	(*Staking_WithdrawUnbondedCall)(nil),                                                      // 150: sf.gear.metadata.type.v1.Staking_WithdrawUnbondedCall
	(*FellowshipReferenda_NudgeReferendumCall)(nil),                                           // 151: sf.gear.metadata.type.v1.FellowshipReferenda_NudgeReferendumCall
	(*Identity_Raw)(nil),                                                                      // 152: sf.gear.metadata.type.v1.Identity_Raw
	(*NominationPools_SetMetadataCall)(nil),                                                   // 153: sf.gear.metadata.type.v1.NominationPools_SetMetadataCall
	(*SpCoreEd25519Signature)(nil),                                                            // 154: sf.gear.metadata.type.v1.SpCoreEd25519Signature
	(*Referenda_Void)(nil),                                                                    // 155: sf.gear.metadata.type.v1.Referenda_Void
	(*Identity_Raw6)(nil),                                                                     // 156: sf.gear.metadata.type.v1.Identity_Raw6
	(*Referenda_RefundDecisionDepositCall)(nil),                                               // 157: sf.gear.metadata.type.v1.Referenda_RefundDecisionDepositCall
	(*Whitelist_RemoveWhitelistedCallCall)(nil),                                               // 158: sf.gear.metadata.type.v1.Whitelist_RemoveWhitelistedCallCall
	(*Identity_Raw17)(nil),                                                                    // 159: sf.gear.metadata.type.v1.Identity_Raw17
	(*Identity_TupleSpCoreCryptoAccountId32PalletIdentityTypesData)(nil),                      // 160: sf.gear.metadata.type.v1.Identity_TupleSpCoreCryptoAccountId32PalletIdentityTypesData
	(*Proxy_RemoveAnnouncementCall)(nil),                                                      // 161: sf.gear.metadata.type.v1.Proxy_RemoveAnnouncementCall
	(*ChildBountiesPallet)(nil),                                                               // 162: sf.gear.metadata.type.v1.ChildBountiesPallet
	(*Referenda_Inline)(nil),                                                                  // 163: sf.gear.metadata.type.v1.Referenda_Inline
	(*Scheduler_ScheduleNamedCall)(nil),                                                       // 164: sf.gear.metadata.type.v1.Scheduler_ScheduleNamedCall
	(*Identity_Raw4)(nil),                                                                     // 165: sf.gear.metadata.type.v1.Identity_Raw4
	(*Identity_ClearIdentityCall)(nil),                                                        // 166: sf.gear.metadata.type.v1.Identity_ClearIdentityCall
	(*ElectionProviderMultiPhase_TupleUint32SpArithmeticPerThingsPerU16)(nil),                 // 167: sf.gear.metadata.type.v1.ElectionProviderMultiPhase_TupleUint32SpArithmeticPerThingsPerU16
	(*Treasury_RejectProposalCall)(nil),                                                       // 168: sf.gear.metadata.type.v1.Treasury_RejectProposalCall
	(*FellowshipReferenda_Void)(nil),                                                          // 169: sf.gear.metadata.type.v1.FellowshipReferenda_Void
	(*NominationPools_Permissioned)(nil),                                                      // 170: sf.gear.metadata.type.v1.NominationPools_Permissioned
	(*GearVoucher_PalletGearVoucherInternalVoucherId)(nil),                                    // 171: sf.gear.metadata.type.v1.GearVoucher_PalletGearVoucherInternalVoucherId
	(*FinalityGrandpaPrevote)(nil),                                                            // 172: sf.gear.metadata.type.v1.FinalityGrandpaPrevote
	(*Referenda_ProposalOrigin)(nil),                                                          // 173: sf.gear.metadata.type.v1.Referenda_ProposalOrigin
	(*Scheduler_CancelCall)(nil),                                                              // 174: sf.gear.metadata.type.v1.Scheduler_CancelCall
	(*Proxy_Delegate)(nil),                                                                    // 175: sf.gear.metadata.type.v1.Proxy_Delegate
	(*GearVoucher_CallDeprecatedCall)(nil),                                                    // 176: sf.gear.metadata.type.v1.GearVoucher_CallDeprecatedCall
	(*GearVoucher_Some)(nil),                                                                  // 177: sf.gear.metadata.type.v1.GearVoucher_Some
	(*Identity_AddRegistrarCall)(nil),                                                         // 178: sf.gear.metadata.type.v1.Identity_AddRegistrarCall
	(*Bounties_ApproveBountyCall)(nil),                                                        // 179: sf.gear.metadata.type.v1.Bounties_ApproveBountyCall
	(*NominationPools_Address20)(nil),                                                         // 180: sf.gear.metadata.type.v1.NominationPools_Address20
	(*GearSchedulerPallet)(nil),                                                               // 181: sf.gear.metadata.type.v1.GearSchedulerPallet
	(*StakingRewards_Raw)(nil),                                                                // 182: sf.gear.metadata.type.v1.StakingRewards_Raw
	(*Identity_Raw12)(nil),                                                                    // 183: sf.gear.metadata.type.v1.Identity_Raw12
	(*Babe_PlanConfigChangeCall)(nil),                                                         // 184: sf.gear.metadata.type.v1.Babe_PlanConfigChangeCall
	(*Staking_IncreaseValidatorCountCall)(nil),                                                // 185: sf.gear.metadata.type.v1.Staking_IncreaseValidatorCountCall
	(*Staking_RebondCall)(nil),                                                                // 186: sf.gear.metadata.type.v1.Staking_RebondCall
	(*ConvictionVoting_Locked2X)(nil),                                                         // 187: sf.gear.metadata.type.v1.ConvictionVoting_Locked2X
	(*Referenda_At)(nil),                                                                      // 188: sf.gear.metadata.type.v1.Referenda_At
	(*System_KillStorageCall)(nil),                                                            // 189: sf.gear.metadata.type.v1.System_KillStorageCall
	(*ImOnline_HeartbeatCall)(nil),                                                            // 190: sf.gear.metadata.type.v1.ImOnline_HeartbeatCall
	(*FellowshipCollective_VoteCall)(nil),                                                     // 191: sf.gear.metadata.type.v1.FellowshipCollective_VoteCall
	(*Bounties_Curator)(nil),                                                                  // 192: sf.gear.metadata.type.v1.Bounties_Curator
	(*Staking_Controller)(nil),                                                                // 193: sf.gear.metadata.type.v1.Staking_Controller
	(*Treasury_Address32)(nil),                                                                // 194: sf.gear.metadata.type.v1.Treasury_Address32
	(*ConvictionVoting_Address32)(nil),                                                        // 195: sf.gear.metadata.type.v1.ConvictionVoting_Address32
	(*FellowshipReferendaPallet)(nil),                                                         // 196: sf.gear.metadata.type.v1.FellowshipReferendaPallet
	(*Identity_SetAccountIdCall)(nil),                                                         // 197: sf.gear.metadata.type.v1.Identity_SetAccountIdCall
	(*Staking_Address32)(nil),                                                                 // 198: sf.gear.metadata.type.v1.Staking_Address32
	(*Staking_SetPayeeCall)(nil),                                                              // 199: sf.gear.metadata.type.v1.Staking_SetPayeeCall
	(*Staking_MinValidatorBond)(nil),                                                          // 200: sf.gear.metadata.type.v1.Staking_MinValidatorBond
	(*Identity_KillIdentityCall)(nil),                                                         // 201: sf.gear.metadata.type.v1.Identity_KillIdentityCall
	(*Gear_SendReplyCall)(nil),                                                                // 202: sf.gear.metadata.type.v1.Gear_SendReplyCall
	(*SpConsensusSlotsSlot)(nil),                                                              // 203: sf.gear.metadata.type.v1.SpConsensusSlotsSlot
	(*PrimitiveTypesH256)(nil),                                                                // 204: sf.gear.metadata.type.v1.PrimitiveTypesH256
	(*Identity_BlakeTwo256)(nil),                                                              // 205: sf.gear.metadata.type.v1.Identity_BlakeTwo256
	(*Bounties_ExtendBountyExpiryCall)(nil),                                                   // 206: sf.gear.metadata.type.v1.Bounties_ExtendBountyExpiryCall
	(*Gear_UploadCodeCall)(nil),                                                               // 207: sf.gear.metadata.type.v1.Gear_UploadCodeCall
	(*Identity_Raw2)(nil),                                                                     // 208: sf.gear.metadata.type.v1.Identity_Raw2
	(*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes16Listuint32)(nil), // 209: sf.gear.metadata.type.v1.ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes16Listuint32
	(*Balances_Source)(nil),                              // 210: sf.gear.metadata.type.v1.Balances_Source
	(*BagsList_RebagCall)(nil),                           // 211: sf.gear.metadata.type.v1.BagsList_RebagCall
	(*Staking_SetValidatorCountCall)(nil),                // 212: sf.gear.metadata.type.v1.Staking_SetValidatorCountCall
	(*Treasury_Index)(nil),                               // 213: sf.gear.metadata.type.v1.Treasury_Index
	(*FellowshipCollectivePallet)(nil),                   // 214: sf.gear.metadata.type.v1.FellowshipCollectivePallet
	(*Staking_SetStakingConfigsCall)(nil),                // 215: sf.gear.metadata.type.v1.Staking_SetStakingConfigsCall
	(*Referenda_Lookup)(nil),                             // 216: sf.gear.metadata.type.v1.Referenda_Lookup
	(*Vesting_VestCall)(nil),                             // 217: sf.gear.metadata.type.v1.Vesting_VestCall
	(*Staking_KickCall)(nil),                             // 218: sf.gear.metadata.type.v1.Staking_KickCall
	(*FellowshipReferenda_PlaceDecisionDepositCall)(nil), // 219: sf.gear.metadata.type.v1.FellowshipReferenda_PlaceDecisionDepositCall
	(*Utility_DispatchAsCall)(nil),                       // 220: sf.gear.metadata.type.v1.Utility_DispatchAsCall
	(*NominationPools_NewNominator)(nil),                 // 221: sf.gear.metadata.type.v1.NominationPools_NewNominator
	(*Identity_Value0)(nil),                              // 222: sf.gear.metadata.type.v1.Identity_Value0
	(*Identity_Twitter)(nil),                             // 223: sf.gear.metadata.type.v1.Identity_Twitter
	(*Identity_OutOfDate)(nil),                           // 224: sf.gear.metadata.type.v1.Identity_OutOfDate
	(*Babe_Config)(nil),                                  // 225: sf.gear.metadata.type.v1.Babe_Config
	(*Treasury_Raw)(nil),                                 // 226: sf.gear.metadata.type.v1.Treasury_Raw
	(*FellowshipCollective_Id)(nil),                      // 227: sf.gear.metadata.type.v1.FellowshipCollective_Id
	(*Scheduler_ScheduleNamedAfterCall)(nil),             // 228: sf.gear.metadata.type.v1.Scheduler_ScheduleNamedAfterCall
	(*Preimage_UnrequestPreimageCall)(nil),               // 229: sf.gear.metadata.type.v1.Preimage_UnrequestPreimageCall
	(*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes3Listuint32)(nil), // 230: sf.gear.metadata.type.v1.ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes3Listuint32
	(*System_SetCodeWithoutChecksCall)(nil),                                                  // 231: sf.gear.metadata.type.v1.System_SetCodeWithoutChecksCall
	(*Balances_Address32)(nil),                                                               // 232: sf.gear.metadata.type.v1.Balances_Address32
	(*ChildBounties_Id)(nil),                                                                 // 233: sf.gear.metadata.type.v1.ChildBounties_Id
	(*StakingRewards_Address20)(nil),                                                         // 234: sf.gear.metadata.type.v1.StakingRewards_Address20
	(*ConvictionVoting_Locked1X)(nil),                                                        // 235: sf.gear.metadata.type.v1.ConvictionVoting_Locked1X
	(*FellowshipCollective_RemoveMemberCall)(nil),                                            // 236: sf.gear.metadata.type.v1.FellowshipCollective_RemoveMemberCall
	(*Identity_Raw16)(nil),                                                                   // 237: sf.gear.metadata.type.v1.Identity_Raw16
	(*Identity_Data)(nil),                                                                    // 238: sf.gear.metadata.type.v1.Identity_Data
	(*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes6Listuint32)(nil), // 239: sf.gear.metadata.type.v1.ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes6Listuint32
	(*SpRuntimeGenericDigestDigest)(nil),                                                     // 240: sf.gear.metadata.type.v1.SpRuntimeGenericDigestDigest
	(*FellowshipReferenda_Inline)(nil),                                                       // 241: sf.gear.metadata.type.v1.FellowshipReferenda_Inline
	(*Identity_ProvideJudgementCall)(nil),                                                    // 242: sf.gear.metadata.type.v1.Identity_ProvideJudgementCall
	(*ChildBounties_Curator)(nil),                                                            // 243: sf.gear.metadata.type.v1.ChildBounties_Curator
	(*Bounties_ClaimBountyCall)(nil),                                                         // 244: sf.gear.metadata.type.v1.Bounties_ClaimBountyCall
	(*Staking_Remove)(nil),                                                                   // 245: sf.gear.metadata.type.v1.Staking_Remove
	(*Staking_MinCommission)(nil),                                                            // 246: sf.gear.metadata.type.v1.Staking_MinCommission
	(*Signed)(nil),                                                                           // 247: sf.gear.metadata.type.v1.Signed
	(*UtilityPallet)(nil),                                                                    // 248: sf.gear.metadata.type.v1.UtilityPallet
	(*Proxy_Id)(nil),                                                                         // 249: sf.gear.metadata.type.v1.Proxy_Id
	(*Gear_SetExecuteInherentCall)(nil),                                                      // 250: sf.gear.metadata.type.v1.Gear_SetExecuteInherentCall
	(*StakingRewardsPallet)(nil),                                                             // 251: sf.gear.metadata.type.v1.StakingRewardsPallet
	(*GearVoucher_Call)(nil),                                                                 // 252: sf.gear.metadata.type.v1.GearVoucher_Call
	(*System_RemarkCall)(nil),                                                                // 253: sf.gear.metadata.type.v1.System_RemarkCall
	(*SpRuntimeGenericHeaderHeader)(nil),                                                     // 254: sf.gear.metadata.type.v1.SpRuntimeGenericHeaderHeader
	(*Scheduler_ScheduleCall)(nil),                                                           // 255: sf.gear.metadata.type.v1.Scheduler_ScheduleCall
	(*ChildBounties_ProposeCuratorCall)(nil),                                                 // 256: sf.gear.metadata.type.v1.ChildBounties_ProposeCuratorCall
	(*NominationPools_AdjustPoolDepositCall)(nil),                                            // 257: sf.gear.metadata.type.v1.NominationPools_AdjustPoolDepositCall
	(*Staking_MaxNominatorCount)(nil),                                                        // 258: sf.gear.metadata.type.v1.Staking_MaxNominatorCount
	(*Referenda_EnactmentMoment)(nil),                                                        // 259: sf.gear.metadata.type.v1.Referenda_EnactmentMoment
	(*NominationPools_PermissionlessCompound)(nil),                                           // 260: sf.gear.metadata.type.v1.NominationPools_PermissionlessCompound
	(*TupleNull)(nil),                                                                        // 261: sf.gear.metadata.type.v1.TupleNull
	(*Staking_ReapStashCall)(nil),                                                            // 262: sf.gear.metadata.type.v1.Staking_ReapStashCall
	(*NominationPools_JoinCall)(nil),                                                         // 263: sf.gear.metadata.type.v1.NominationPools_JoinCall
	(*FellowshipReferenda_RefundDecisionDepositCall)(nil),                                    // 264: sf.gear.metadata.type.v1.FellowshipReferenda_RefundDecisionDepositCall
	(*Identity_Raw27)(nil),                                                                   // 265: sf.gear.metadata.type.v1.Identity_Raw27
	(*Identity_RenameSubCall)(nil),                                                           // 266: sf.gear.metadata.type.v1.Identity_RenameSubCall
	(*Proxy_ProxyCall)(nil),                                                                  // 267: sf.gear.metadata.type.v1.Proxy_ProxyCall
	(*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes15Listuint32)(nil), // 268: sf.gear.metadata.type.v1.ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes15Listuint32
	(*Balances_Address20)(nil),          // 269: sf.gear.metadata.type.v1.Balances_Address20
	(*Vesting_Address20)(nil),           // 270: sf.gear.metadata.type.v1.Vesting_Address20
	(*Bounties_CloseBountyCall)(nil),    // 271: sf.gear.metadata.type.v1.Bounties_CloseBountyCall
	(*Bounties_AcceptCuratorCall)(nil),  // 272: sf.gear.metadata.type.v1.Bounties_AcceptCuratorCall
	(*StakingRewards_Id)(nil),           // 273: sf.gear.metadata.type.v1.StakingRewards_Id
	(*GearVoucher_UpdateCall)(nil),      // 274: sf.gear.metadata.type.v1.GearVoucher_UpdateCall
	(*FinalityGrandpaEquivocation)(nil), // 275: sf.gear.metadata.type.v1.FinalityGrandpaEquivocation
	(*HistoricalPallet)(nil),            // 276: sf.gear.metadata.type.v1.HistoricalPallet
	(*Utility_BatchAllCall)(nil),        // 277: sf.gear.metadata.type.v1.Utility_BatchAllCall
	(*Root)(nil),                        // 278: sf.gear.metadata.type.v1.Root
	(*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes14Listuint32)(nil), // 279: sf.gear.metadata.type.v1.ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes14Listuint32
	(*Staking_TupleNull)(nil),                                            // 280: sf.gear.metadata.type.v1.Staking_TupleNull
	(*SpRuntimeMultiaddressMultiAddress)(nil),                            // 281: sf.gear.metadata.type.v1.SpRuntimeMultiaddressMultiAddress
	(*StakingPallet)(nil),                                                // 282: sf.gear.metadata.type.v1.StakingPallet
	(*ConvictionVoting_Vote)(nil),                                        // 283: sf.gear.metadata.type.v1.ConvictionVoting_Vote
	(*GearVoucher_RevokeCall)(nil),                                       // 284: sf.gear.metadata.type.v1.GearVoucher_RevokeCall
	(*NominationPools_ClaimCommissionCall)(nil),                          // 285: sf.gear.metadata.type.v1.NominationPools_ClaimCommissionCall
	(*Vesting_Id)(nil),                                                   // 286: sf.gear.metadata.type.v1.Vesting_Id
	(*ReferendaPallet)(nil),                                              // 287: sf.gear.metadata.type.v1.ReferendaPallet
	(*FellowshipReferenda_SetMetadataCall)(nil),                          // 288: sf.gear.metadata.type.v1.FellowshipReferenda_SetMetadataCall
	(*Identity_Raw31)(nil),                                               // 289: sf.gear.metadata.type.v1.Identity_Raw31
	(*Identity_TuplePalletIdentityTypesDatapalletIdentityTypesData)(nil), // 290: sf.gear.metadata.type.v1.Identity_TuplePalletIdentityTypesDatapalletIdentityTypesData
	(*System_SystemKeysList)(nil),                                        // 291: sf.gear.metadata.type.v1.System_SystemKeysList
	(*Balances_Dest)(nil),                                                // 292: sf.gear.metadata.type.v1.Balances_Dest
	(*Proxy_Raw)(nil),                                                    // 293: sf.gear.metadata.type.v1.Proxy_Raw
	(*Bounties_TupleNull)(nil),                                           // 294: sf.gear.metadata.type.v1.Bounties_TupleNull
	(*PrimarySlots)(nil),                                                 // 295: sf.gear.metadata.type.v1.PrimarySlots
	(*PrimaryAndSecondaryPlainSlots)(nil),                                // 296: sf.gear.metadata.type.v1.PrimaryAndSecondaryPlainSlots
	(*SessionPallet)(nil),                                                // 297: sf.gear.metadata.type.v1.SessionPallet
	(*Identity_Raw9)(nil),                                                // 298: sf.gear.metadata.type.v1.Identity_Raw9
	(*Proxy_RemoveProxiesCall)(nil),                                      // 299: sf.gear.metadata.type.v1.Proxy_RemoveProxiesCall
	(*Babe_Consensus)(nil),                                               // 300: sf.gear.metadata.type.v1.Babe_Consensus
	(*Identity_KnownGood)(nil),                                           // 301: sf.gear.metadata.type.v1.Identity_KnownGood
	(*Proxy_Real)(nil),                                                   // 302: sf.gear.metadata.type.v1.Proxy_Real
	(*NominationPools_Noop)(nil),                                         // 303: sf.gear.metadata.type.v1.NominationPools_Noop
	(*NominationPools_MaxPools)(nil),                                     // 304: sf.gear.metadata.type.v1.NominationPools_MaxPools
	(*Treasury_ProposeSpendCall)(nil),                                    // 305: sf.gear.metadata.type.v1.Treasury_ProposeSpendCall
	(*ConvictionVoting_TupleNull)(nil),                                   // 306: sf.gear.metadata.type.v1.ConvictionVoting_TupleNull
	(*ConvictionVoting_UnlockCall)(nil),                                  // 307: sf.gear.metadata.type.v1.ConvictionVoting_UnlockCall
	(*Identity_Sub)(nil),                                                 // 308: sf.gear.metadata.type.v1.Identity_Sub
	(*Bounties_Address32)(nil),                                           // 309: sf.gear.metadata.type.v1.Bounties_Address32
	(*Identity_LowQuality)(nil),                                          // 310: sf.gear.metadata.type.v1.Identity_LowQuality
	(*MultisigPallet)(nil),                                               // 311: sf.gear.metadata.type.v1.MultisigPallet
	(*ElectionProviderMultiPhase_GovernanceFallbackCall)(nil),            // 312: sf.gear.metadata.type.v1.ElectionProviderMultiPhase_GovernanceFallbackCall
	(*Babe_V1)(nil),                                                      // 313: sf.gear.metadata.type.v1.Babe_V1
	(*Grandpa_NoteStalledCall)(nil),                                      // 314: sf.gear.metadata.type.v1.Grandpa_NoteStalledCall
	(*Session_SetKeysCall)(nil),                                          // 315: sf.gear.metadata.type.v1.Session_SetKeysCall
	(*Treasury_Id)(nil),                                                  // 316: sf.gear.metadata.type.v1.Treasury_Id
	(*Identity_Raw19)(nil),                                               // 317: sf.gear.metadata.type.v1.Identity_Raw19
	(*NominationPools_Address32)(nil),                                    // 318: sf.gear.metadata.type.v1.NominationPools_Address32
	(*StakingRewards_TupleNull)(nil),                                     // 319: sf.gear.metadata.type.v1.StakingRewards_TupleNull
	(*Identity_CancelRequestCall)(nil),                                   // 320: sf.gear.metadata.type.v1.Identity_CancelRequestCall
	(*Identity_AddSubCall)(nil),                                          // 321: sf.gear.metadata.type.v1.Identity_AddSubCall
	(*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes7Listuint32)(nil), // 322: sf.gear.metadata.type.v1.ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes7Listuint32
	(*NominationPools_GlobalMaxCommission)(nil),                                              // 323: sf.gear.metadata.type.v1.NominationPools_GlobalMaxCommission
	(*SpCoreSr25519Signature)(nil),                                                           // 324: sf.gear.metadata.type.v1.SpCoreSr25519Signature
	(*Preimage_NotePreimageCall)(nil),                                                        // 325: sf.gear.metadata.type.v1.Preimage_NotePreimageCall
	(*Identity_Raw8)(nil),                                                                    // 326: sf.gear.metadata.type.v1.Identity_Raw8
	(*Identity_Image)(nil),                                                                   // 327: sf.gear.metadata.type.v1.Identity_Image
	(*Identity_SetFeeCall)(nil),                                                              // 328: sf.gear.metadata.type.v1.Identity_SetFeeCall
	(*TupleFinalityGrandpaPrecommitspConsensusGrandpaAppSignature)(nil),                      // 329: sf.gear.metadata.type.v1.TupleFinalityGrandpaPrecommitspConsensusGrandpaAppSignature
	(*ConvictionVoting_RemoveOtherVoteCall)(nil),                                             // 330: sf.gear.metadata.type.v1.ConvictionVoting_RemoveOtherVoteCall
	(*Identity_QuitSubCall)(nil),                                                             // 331: sf.gear.metadata.type.v1.Identity_QuitSubCall
	(*Bounties_Index)(nil),                                                                   // 332: sf.gear.metadata.type.v1.Bounties_Index
	(*SpNposElectionsSupport)(nil),                                                           // 333: sf.gear.metadata.type.v1.SpNposElectionsSupport
	(*ChildBounties_AcceptCuratorCall)(nil),                                                  // 334: sf.gear.metadata.type.v1.ChildBounties_AcceptCuratorCall
	(*NominationPools_NewBouncer)(nil),                                                       // 335: sf.gear.metadata.type.v1.NominationPools_NewBouncer
	(*Balances_TransferKeepAliveCall)(nil),                                                   // 336: sf.gear.metadata.type.v1.Balances_TransferKeepAliveCall
	(*Staking_ForceApplyMinCommissionCall)(nil),                                              // 337: sf.gear.metadata.type.v1.Staking_ForceApplyMinCommissionCall
	(*SpWeightsWeightV2Weight)(nil),                                                          // 338: sf.gear.metadata.type.v1.SpWeightsWeightV2Weight
	(*Identity_Raw3)(nil),                                                                    // 339: sf.gear.metadata.type.v1.Identity_Raw3
	(*Identity_Raw30)(nil),                                                                   // 340: sf.gear.metadata.type.v1.Identity_Raw30
	(*Gear_UploadProgramCall)(nil),                                                           // 341: sf.gear.metadata.type.v1.Gear_UploadProgramCall
	(*GearVoucher_UploadCode)(nil),                                                           // 342: sf.gear.metadata.type.v1.GearVoucher_UploadCode
	(*Babe_BabeTrieNodesList)(nil),                                                           // 343: sf.gear.metadata.type.v1.Babe_BabeTrieNodesList
	(*Vesting_VestOtherCall)(nil),                                                            // 344: sf.gear.metadata.type.v1.Vesting_VestOtherCall
	(*Staking_Staked)(nil),                                                                   // 345: sf.gear.metadata.type.v1.Staking_Staked
	(*ConvictionVoting_Locked5X)(nil),                                                        // 346: sf.gear.metadata.type.v1.ConvictionVoting_Locked5X
	(*Identity_Value1)(nil),                                                                  // 347: sf.gear.metadata.type.v1.Identity_Value1
	(*SpCoreSr25519Public)(nil),                                                              // 348: sf.gear.metadata.type.v1.SpCoreSr25519Public
	(*Babe_ReportEquivocationUnsignedCall)(nil),                                              // 349: sf.gear.metadata.type.v1.Babe_ReportEquivocationUnsignedCall
	(*BagsList_TupleNull)(nil),                                                               // 350: sf.gear.metadata.type.v1.BagsList_TupleNull
	(*Referenda_Origins)(nil),                                                                // 351: sf.gear.metadata.type.v1.Referenda_Origins
	(*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes4Listuint32)(nil), // 352: sf.gear.metadata.type.v1.ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes4Listuint32
	(*Vesting_Target)(nil),                                  // 353: sf.gear.metadata.type.v1.Vesting_Target
	(*ConvictionVoting_Target)(nil),                         // 354: sf.gear.metadata.type.v1.ConvictionVoting_Target
	(*FellowshipCollective_Address20)(nil),                  // 355: sf.gear.metadata.type.v1.FellowshipCollective_Address20
	(*Identity_Id)(nil),                                     // 356: sf.gear.metadata.type.v1.Identity_Id
	(*Gear_CreateProgramCall)(nil),                          // 357: sf.gear.metadata.type.v1.Gear_CreateProgramCall
	(*NominationPools_Remove)(nil),                          // 358: sf.gear.metadata.type.v1.NominationPools_Remove
	(*AllowedSlots)(nil),                                    // 359: sf.gear.metadata.type.v1.AllowedSlots
	(*ConvictionVoting_PalletConvictionVotingVoteVote)(nil), // 360: sf.gear.metadata.type.v1.ConvictionVoting_PalletConvictionVotingVoteVote
	(*ConvictionVotingPallet)(nil),                          // 361: sf.gear.metadata.type.v1.ConvictionVotingPallet
	(*Identity_Index)(nil),                                  // 362: sf.gear.metadata.type.v1.Identity_Index
	(*Identity_Account)(nil),                                // 363: sf.gear.metadata.type.v1.Identity_Account
	(*Staking_Raw)(nil),                                     // 364: sf.gear.metadata.type.v1.Staking_Raw
	(*Proxy_KillPureCall)(nil),                              // 365: sf.gear.metadata.type.v1.Proxy_KillPureCall
	(*Multisig_CancelAsMultiCall)(nil),                      // 366: sf.gear.metadata.type.v1.Multisig_CancelAsMultiCall
	(*Bounties_Address20)(nil),                              // 367: sf.gear.metadata.type.v1.Bounties_Address20
	(*GearPallet)(nil),                                      // 368: sf.gear.metadata.type.v1.GearPallet
	(*Balances_TransferAllCall)(nil),                        // 369: sf.gear.metadata.type.v1.Balances_TransferAllCall
	(*NominationPools_FreeBalance)(nil),                     // 370: sf.gear.metadata.type.v1.NominationPools_FreeBalance
	(*GearBuiltinPallet)(nil),                               // 371: sf.gear.metadata.type.v1.GearBuiltinPallet
	(*ChildBounties_CloseChildBountyCall)(nil),              // 372: sf.gear.metadata.type.v1.ChildBounties_CloseChildBountyCall
	(*NominationPools_SetClaimPermissionCall)(nil),          // 373: sf.gear.metadata.type.v1.NominationPools_SetClaimPermissionCall
	(*Balances_Raw)(nil),                                    // 374: sf.gear.metadata.type.v1.Balances_Raw
	(*FellowshipReferenda_Origins)(nil),                     // 375: sf.gear.metadata.type.v1.FellowshipReferenda_Origins
	(*Identity_Raw5)(nil),                                   // 376: sf.gear.metadata.type.v1.Identity_Raw5
	(*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes5Listuint32)(nil), // 377: sf.gear.metadata.type.v1.ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes5Listuint32
	(*Bounties_Id)(nil),                                               // 378: sf.gear.metadata.type.v1.Bounties_Id
	(*Identity_Address20)(nil),                                        // 379: sf.gear.metadata.type.v1.Identity_Address20
	(*GprimitivesActorId)(nil),                                        // 380: sf.gear.metadata.type.v1.GprimitivesActorId
	(*Referenda_After)(nil),                                           // 381: sf.gear.metadata.type.v1.Referenda_After
	(*Referenda_SubmitCall)(nil),                                      // 382: sf.gear.metadata.type.v1.Referenda_SubmitCall
	(*Identity_Email)(nil),                                            // 383: sf.gear.metadata.type.v1.Identity_Email
	(*Identity_Erroneous)(nil),                                        // 384: sf.gear.metadata.type.v1.Identity_Erroneous
	(*BTreeSet)(nil),                                                  // 385: sf.gear.metadata.type.v1.BTreeSet
	(*Treasury_SpendCall)(nil),                                        // 386: sf.gear.metadata.type.v1.Treasury_SpendCall
	(*Identity_Raw28)(nil),                                            // 387: sf.gear.metadata.type.v1.Identity_Raw28
	(*Proxy_Any)(nil),                                                 // 388: sf.gear.metadata.type.v1.Proxy_Any
	(*NominationPools_MemberAccount)(nil),                             // 389: sf.gear.metadata.type.v1.NominationPools_MemberAccount
	(*NominationPools_NominateCall)(nil),                              // 390: sf.gear.metadata.type.v1.NominationPools_NominateCall
	(*BagsListPallet)(nil),                                            // 391: sf.gear.metadata.type.v1.BagsListPallet
	(*Staking_ForceNewEraCall)(nil),                                   // 392: sf.gear.metadata.type.v1.Staking_ForceNewEraCall
	(*SpAuthorityDiscoveryAppPublic)(nil),                             // 393: sf.gear.metadata.type.v1.SpAuthorityDiscoveryAppPublic
	(*IdentityPallet)(nil),                                            // 394: sf.gear.metadata.type.v1.IdentityPallet
	(*GearGasPallet)(nil),                                             // 395: sf.gear.metadata.type.v1.GearGasPallet
	(*BagsList_Dislocated)(nil),                                       // 396: sf.gear.metadata.type.v1.BagsList_Dislocated
	(*Identity_ShaThree256)(nil),                                      // 397: sf.gear.metadata.type.v1.Identity_ShaThree256
	(*NominationPools_PoolWithdrawUnbondedCall)(nil),                  // 398: sf.gear.metadata.type.v1.NominationPools_PoolWithdrawUnbondedCall
	(*StakingRewards_To)(nil),                                         // 399: sf.gear.metadata.type.v1.StakingRewards_To
	(*Identity_Judgement)(nil),                                        // 400: sf.gear.metadata.type.v1.Identity_Judgement
	(*Bounties_Raw)(nil),                                              // 401: sf.gear.metadata.type.v1.Bounties_Raw
	(*StakingRewards_WithdrawCall)(nil),                               // 402: sf.gear.metadata.type.v1.StakingRewards_WithdrawCall
	(*Babe_PreRuntime)(nil),                                           // 403: sf.gear.metadata.type.v1.Babe_PreRuntime
	(*BalancesPallet)(nil),                                            // 404: sf.gear.metadata.type.v1.BalancesPallet
	(*BagsList_Lighter)(nil),                                          // 405: sf.gear.metadata.type.v1.BagsList_Lighter
	(*Treasury_Address20)(nil),                                        // 406: sf.gear.metadata.type.v1.Treasury_Address20
	(*Identity_Legal)(nil),                                            // 407: sf.gear.metadata.type.v1.Identity_Legal
	(*ConvictionVoting_DelegateCall)(nil),                             // 408: sf.gear.metadata.type.v1.ConvictionVoting_DelegateCall
	(*FellowshipReferenda_ProposalOrigin)(nil),                        // 409: sf.gear.metadata.type.v1.FellowshipReferenda_ProposalOrigin
	(*ChildBounties_Address32)(nil),                                   // 410: sf.gear.metadata.type.v1.ChildBounties_Address32
	(*Staking_SetMinCommissionCall)(nil),                              // 411: sf.gear.metadata.type.v1.Staking_SetMinCommissionCall
	(*GearBankPallet)(nil),                                            // 412: sf.gear.metadata.type.v1.GearBankPallet
	(*SystemPallet)(nil),                                              // 413: sf.gear.metadata.type.v1.SystemPallet
	(*BagsList_Address32)(nil),                                        // 414: sf.gear.metadata.type.v1.BagsList_Address32
	(*Identity_Raw10)(nil),                                            // 415: sf.gear.metadata.type.v1.Identity_Raw10
	(*System_SetStorageCall)(nil),                                     // 416: sf.gear.metadata.type.v1.System_SetStorageCall
	(*VaraRuntimeNposSolution16)(nil),                                 // 417: sf.gear.metadata.type.v1.VaraRuntimeNposSolution16
	(*Bounties_AwardBountyCall)(nil),                                  // 418: sf.gear.metadata.type.v1.Bounties_AwardBountyCall
	(*NominationPools_Rewards)(nil),                                   // 419: sf.gear.metadata.type.v1.NominationPools_Rewards
	(*Identity_Web)(nil),                                              // 420: sf.gear.metadata.type.v1.Identity_Web
	(*GearMessengerPallet)(nil),                                       // 421: sf.gear.metadata.type.v1.GearMessengerPallet
	(*Babe_RuntimeEnvironmentUpdated)(nil),                            // 422: sf.gear.metadata.type.v1.Babe_RuntimeEnvironmentUpdated
	(*Staking_CancelDeferredSlashCall)(nil),                           // 423: sf.gear.metadata.type.v1.Staking_CancelDeferredSlashCall
	(*Staking_ChillThreshold)(nil),                                    // 424: sf.gear.metadata.type.v1.Staking_ChillThreshold
	(*ElectionProviderMultiPhase_SubmitCall)(nil),                     // 425: sf.gear.metadata.type.v1.ElectionProviderMultiPhase_SubmitCall
	(*GearVoucher_SendReply)(nil),                                     // 426: sf.gear.metadata.type.v1.GearVoucher_SendReply
	(*Grandpa_ReportEquivocationUnsignedCall)(nil),                    // 427: sf.gear.metadata.type.v1.Grandpa_ReportEquivocationUnsignedCall
	(*Treasury_Beneficiary)(nil),                                      // 428: sf.gear.metadata.type.v1.Treasury_Beneficiary
	(*ConvictionVoting_Conviction)(nil),                               // 429: sf.gear.metadata.type.v1.ConvictionVoting_Conviction
	(*FellowshipReferenda_Proposal)(nil),                              // 430: sf.gear.metadata.type.v1.FellowshipReferenda_Proposal
	(*ElectionProviderMultiPhase_SetEmergencyElectionResultCall)(nil), // 431: sf.gear.metadata.type.v1.ElectionProviderMultiPhase_SetEmergencyElectionResultCall
	(*Grandpa_Precommit)(nil),                                         // 432: sf.gear.metadata.type.v1.Grandpa_Precommit
	(*Identity_Raw1)(nil),                                             // 433: sf.gear.metadata.type.v1.Identity_Raw1
	(*ProxyPallet)(nil),                                               // 434: sf.gear.metadata.type.v1.ProxyPallet
	(*NominationPools_PalletNominationPoolsCommissionChangeRate)(nil), // 435: sf.gear.metadata.type.v1.NominationPools_PalletNominationPoolsCommissionChangeRate
	(*VestingPallet)(nil),                                             // 436: sf.gear.metadata.type.v1.VestingPallet
	(*Referenda_Legacy)(nil),                                          // 437: sf.gear.metadata.type.v1.Referenda_Legacy
	(*Referenda_PlaceDecisionDepositCall)(nil),                        // 438: sf.gear.metadata.type.v1.Referenda_PlaceDecisionDepositCall
	(*ChildBounties_UnassignCuratorCall)(nil),                         // 439: sf.gear.metadata.type.v1.ChildBounties_UnassignCuratorCall
	(*NominationPools_PermissionlessAll)(nil),                         // 440: sf.gear.metadata.type.v1.NominationPools_PermissionlessAll
	(*Utility_System)(nil),                                            // 441: sf.gear.metadata.type.v1.Utility_System
	(*Utility_ForceBatchCall)(nil),                                    // 442: sf.gear.metadata.type.v1.Utility_ForceBatchCall
	(*ConvictionVoting_Locked4X)(nil),                                 // 443: sf.gear.metadata.type.v1.ConvictionVoting_Locked4X
	(*FellowshipCollective_AddMemberCall)(nil),                        // 444: sf.gear.metadata.type.v1.FellowshipCollective_AddMemberCall
	(*NominationPools_Member)(nil),                                    // 445: sf.gear.metadata.type.v1.NominationPools_Member
	(*Utility_BatchCall)(nil),                                         // 446: sf.gear.metadata.type.v1.Utility_BatchCall
	(*Proxy_Spawner)(nil),                                             // 447: sf.gear.metadata.type.v1.Proxy_Spawner
	(*NominationPoolsPallet)(nil),                                     // 448: sf.gear.metadata.type.v1.NominationPoolsPallet
	(*Balances_Id)(nil),                                               // 449: sf.gear.metadata.type.v1.Balances_Id
	(*Staking_None)(nil),                                              // 450: sf.gear.metadata.type.v1.Staking_None
	(*FellowshipReferenda_SubmitCall)(nil),                            // 451: sf.gear.metadata.type.v1.FellowshipReferenda_SubmitCall
	(*Whitelist_DispatchWhitelistedCallWithPreimageCall)(nil),         // 452: sf.gear.metadata.type.v1.Whitelist_DispatchWhitelistedCallWithPreimageCall
	(*Proxy_Staking)(nil),                                             // 453: sf.gear.metadata.type.v1.Proxy_Staking
	(*Staking_Account)(nil),                                           // 454: sf.gear.metadata.type.v1.Staking_Account
	(*Staking_BondCall)(nil),                                          // 455: sf.gear.metadata.type.v1.Staking_BondCall
	(*BagsList_Id)(nil),                                               // 456: sf.gear.metadata.type.v1.BagsList_Id
	(*FellowshipReferenda_After)(nil),                                 // 457: sf.gear.metadata.type.v1.FellowshipReferenda_After
	(*SpArithmeticPerThingsPerU16)(nil),                               // 458: sf.gear.metadata.type.v1.SpArithmeticPerThingsPerU16
	(*GearVoucher_DeclineVoucher)(nil),                                // 459: sf.gear.metadata.type.v1.GearVoucher_DeclineVoucher
	(*FinalityGrandpaPrecommit)(nil),                                  // 460: sf.gear.metadata.type.v1.FinalityGrandpaPrecommit
	(*Proxy_RejectAnnouncementCall)(nil),                              // 461: sf.gear.metadata.type.v1.Proxy_RejectAnnouncementCall
	(*Gear_ClaimValueCall)(nil),                                       // 462: sf.gear.metadata.type.v1.Gear_ClaimValueCall
	(*Identity_Riot)(nil),                                             // 463: sf.gear.metadata.type.v1.Identity_Riot
	(*Proxy_TupleNull)(nil),                                           // 464: sf.gear.metadata.type.v1.Proxy_TupleNull
	(*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes10Listuint32)(nil), // 465: sf.gear.metadata.type.v1.ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes10Listuint32
	(*Balances_TupleNull)(nil),                    // 466: sf.gear.metadata.type.v1.Balances_TupleNull
	(*Staking_ValidateCall)(nil),                  // 467: sf.gear.metadata.type.v1.Staking_ValidateCall
	(*Staking_Set)(nil),                           // 468: sf.gear.metadata.type.v1.Staking_Set
	(*Staking_MinNominatorBond)(nil),              // 469: sf.gear.metadata.type.v1.Staking_MinNominatorBond
	(*FellowshipCollective_DemoteMemberCall)(nil), // 470: sf.gear.metadata.type.v1.FellowshipCollective_DemoteMemberCall
	(*Gear_SendMessageCall)(nil),                  // 471: sf.gear.metadata.type.v1.Gear_SendMessageCall
	(*StakingRewards_Address32)(nil),              // 472: sf.gear.metadata.type.v1.StakingRewards_Address32
	(*ElectionProviderMultiPhase_PalletElectionProviderMultiPhaseRawSolution)(nil),   // 473: sf.gear.metadata.type.v1.ElectionProviderMultiPhase_PalletElectionProviderMultiPhaseRawSolution
	(*SpArithmeticPerThingsPercent)(nil),                                             // 474: sf.gear.metadata.type.v1.SpArithmeticPerThingsPercent
	(*Treasury_SpendLocalCall)(nil),                                                  // 475: sf.gear.metadata.type.v1.Treasury_SpendLocalCall
	(*Utility_Void)(nil),                                                             // 476: sf.gear.metadata.type.v1.Utility_Void
	(*Identity_Raw18)(nil),                                                           // 477: sf.gear.metadata.type.v1.Identity_Raw18
	(*Multisig_AsMultiThreshold1Call)(nil),                                           // 478: sf.gear.metadata.type.v1.Multisig_AsMultiThreshold1Call
	(*Balances_ForceSetBalanceCall)(nil),                                             // 479: sf.gear.metadata.type.v1.Balances_ForceSetBalanceCall
	(*Identity_SetFieldsCall)(nil),                                                   // 480: sf.gear.metadata.type.v1.Identity_SetFieldsCall
	(*GearVoucher_CallCall)(nil),                                                     // 481: sf.gear.metadata.type.v1.GearVoucher_CallCall
	(*TupleFinalityGrandpaPrevotespConsensusGrandpaAppSignature)(nil),                // 482: sf.gear.metadata.type.v1.TupleFinalityGrandpaPrevotespConsensusGrandpaAppSignature
	(*FellowshipReferenda_OneFewerDecidingCall)(nil),                                 // 483: sf.gear.metadata.type.v1.FellowshipReferenda_OneFewerDecidingCall
	(*Proxy_ProxyType)(nil),                                                          // 484: sf.gear.metadata.type.v1.Proxy_ProxyType
	(*NominationPools_ChillCall)(nil),                                                // 485: sf.gear.metadata.type.v1.NominationPools_ChillCall
	(*ChildBounties_AwardChildBountyCall)(nil),                                       // 486: sf.gear.metadata.type.v1.ChildBounties_AwardChildBountyCall
	(*SpArithmeticPerThingsPerbill)(nil),                                             // 487: sf.gear.metadata.type.v1.SpArithmeticPerThingsPerbill
	(*BoundedCollectionsBoundedVecBoundedVec)(nil),                                   // 488: sf.gear.metadata.type.v1.BoundedCollectionsBoundedVecBoundedVec
	(*Referenda_Proposal)(nil),                                                       // 489: sf.gear.metadata.type.v1.Referenda_Proposal
	(*FellowshipCollective_TupleNull)(nil),                                           // 490: sf.gear.metadata.type.v1.FellowshipCollective_TupleNull
	(*Identity_TupleNull)(nil),                                                       // 491: sf.gear.metadata.type.v1.Identity_TupleNull
	(*BagsList_Raw)(nil),                                                             // 492: sf.gear.metadata.type.v1.BagsList_Raw
	(*ImOnline_PalletImOnlineHeartbeat)(nil),                                         // 493: sf.gear.metadata.type.v1.ImOnline_PalletImOnlineHeartbeat
	(*Proxy_RemoveProxyCall)(nil),                                                    // 494: sf.gear.metadata.type.v1.Proxy_RemoveProxyCall
	(*ChildBounties_AddChildBountyCall)(nil),                                         // 495: sf.gear.metadata.type.v1.ChildBounties_AddChildBountyCall
	(*GprimitivesMessageId)(nil),                                                     // 496: sf.gear.metadata.type.v1.GprimitivesMessageId
	(*ConvictionVoting_RemoveVoteCall)(nil),                                          // 497: sf.gear.metadata.type.v1.ConvictionVoting_RemoveVoteCall
	(*Proxy_IdentityJudgement)(nil),                                                  // 498: sf.gear.metadata.type.v1.Proxy_IdentityJudgement
	(*NominationPools_UnbondCall)(nil),                                               // 499: sf.gear.metadata.type.v1.NominationPools_UnbondCall
	(*NominationPools_Blocked)(nil),                                                  // 500: sf.gear.metadata.type.v1.NominationPools_Blocked
	(*NominationPools_TupleSpArithmeticPerThingsPerbillspCoreCryptoAccountId32)(nil), // 501: sf.gear.metadata.type.v1.NominationPools_TupleSpArithmeticPerThingsPerbillspCoreCryptoAccountId32
	(*NominationPools_NewRoot)(nil),                                                  // 502: sf.gear.metadata.type.v1.NominationPools_NewRoot
	(*GearVoucher_DeclineCall)(nil),                                                  // 503: sf.gear.metadata.type.v1.GearVoucher_DeclineCall
	(*System_KillPrefixCall)(nil),                                                    // 504: sf.gear.metadata.type.v1.System_KillPrefixCall
	(*Utility_Origins)(nil),                                                          // 505: sf.gear.metadata.type.v1.Utility_Origins
	(*FellowshipCollective_PromoteMemberCall)(nil),                                   // 506: sf.gear.metadata.type.v1.FellowshipCollective_PromoteMemberCall
	(*FellowshipReferenda_Legacy)(nil),                                               // 507: sf.gear.metadata.type.v1.FellowshipReferenda_Legacy
	(*NominationPools_Destroying)(nil),                                               // 508: sf.gear.metadata.type.v1.NominationPools_Destroying
	(*Multisig_PalletMultisigTimepoint)(nil),                                         // 509: sf.gear.metadata.type.v1.Multisig_PalletMultisigTimepoint
	(*OffencesPallet)(nil),                                                           // 510: sf.gear.metadata.type.v1.OffencesPallet
	(*ChildBounties_Raw)(nil),                                                        // 511: sf.gear.metadata.type.v1.ChildBounties_Raw
	(*AuthorityDiscoveryPallet)(nil),                                                 // 512: sf.gear.metadata.type.v1.AuthorityDiscoveryPallet
	(*SpCoreCryptoAccountId32)(nil),                                                  // 513: sf.gear.metadata.type.v1.SpCoreCryptoAccountId32
	(*ConvictionVoting_VoteCall)(nil),                                                // 514: sf.gear.metadata.type.v1.ConvictionVoting_VoteCall
	(*FellowshipCollective_Address32)(nil),                                           // 515: sf.gear.metadata.type.v1.FellowshipCollective_Address32
	(*Identity_FeePaid)(nil),                                                         // 516: sf.gear.metadata.type.v1.Identity_FeePaid
	(*SpNposElectionsElectionScore)(nil),                                             // 517: sf.gear.metadata.type.v1.SpNposElectionsElectionScore
	(*NominationPools_BondExtraCall)(nil),                                            // 518: sf.gear.metadata.type.v1.NominationPools_BondExtraCall
	(*GearPaymentPallet)(nil),                                                        // 519: sf.gear.metadata.type.v1.GearPaymentPallet
	(*Staking_Id)(nil),                                                               // 520: sf.gear.metadata.type.v1.Staking_Id
	(*Scheduler_TupleUint32Uint32)(nil),                                              // 521: sf.gear.metadata.type.v1.Scheduler_TupleUint32Uint32
	(*Preimage_UnnotePreimageCall)(nil),                                              // 522: sf.gear.metadata.type.v1.Preimage_UnnotePreimageCall
	(*Proxy_Governance)(nil),                                                         // 523: sf.gear.metadata.type.v1.Proxy_Governance
	(*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes9Listuint32)(nil), // 524: sf.gear.metadata.type.v1.ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes9Listuint32
	(*VaraRuntimeSessionKeys)(nil),                      // 525: sf.gear.metadata.type.v1.VaraRuntimeSessionKeys
	(*Utility_AsOrigin)(nil),                            // 526: sf.gear.metadata.type.v1.Utility_AsOrigin
	(*FellowshipReferenda_At)(nil),                      // 527: sf.gear.metadata.type.v1.FellowshipReferenda_At
	(*Timestamp_SetCall)(nil),                           // 528: sf.gear.metadata.type.v1.Timestamp_SetCall
	(*AuthorshipPallet)(nil),                            // 529: sf.gear.metadata.type.v1.AuthorshipPallet
	(*BabePallet)(nil),                                  // 530: sf.gear.metadata.type.v1.BabePallet
	(*ImOnlinePallet)(nil),                              // 531: sf.gear.metadata.type.v1.ImOnlinePallet
	(*Staking_ChillOtherCall)(nil),                      // 532: sf.gear.metadata.type.v1.Staking_ChillOtherCall
	(*StakingRewards_Index)(nil),                        // 533: sf.gear.metadata.type.v1.StakingRewards_Index
	(*FellowshipReferenda_KillCall)(nil),                // 534: sf.gear.metadata.type.v1.FellowshipReferenda_KillCall
	(*Scheduler_ScheduleAfterCall)(nil),                 // 535: sf.gear.metadata.type.v1.Scheduler_ScheduleAfterCall
	(*Identity_PalletIdentitySimpleIdentityInfo)(nil),   // 536: sf.gear.metadata.type.v1.Identity_PalletIdentitySimpleIdentityInfo
	(*Identity_RequestJudgementCall)(nil),               // 537: sf.gear.metadata.type.v1.Identity_RequestJudgementCall
	(*NominationPools_TupleNull)(nil),                   // 538: sf.gear.metadata.type.v1.NominationPools_TupleNull
	(*Identity_Unknown)(nil),                            // 539: sf.gear.metadata.type.v1.Identity_Unknown
	(*Proxy_CreatePureCall)(nil),                        // 540: sf.gear.metadata.type.v1.Proxy_CreatePureCall
	(*GearProgramPallet)(nil),                           // 541: sf.gear.metadata.type.v1.GearProgramPallet
	(*Identity_Raw25)(nil),                              // 542: sf.gear.metadata.type.v1.Identity_Raw25
	(*NominationPools_SetCommissionCall)(nil),           // 543: sf.gear.metadata.type.v1.NominationPools_SetCommissionCall
	(*StakingRewards_From)(nil),                         // 544: sf.gear.metadata.type.v1.StakingRewards_From
	(*Staking_BondExtraCall)(nil),                       // 545: sf.gear.metadata.type.v1.Staking_BondExtraCall
	(*Staking_PayoutStakersCall)(nil),                   // 546: sf.gear.metadata.type.v1.Staking_PayoutStakersCall
	(*Referenda_SetMetadataCall)(nil),                   // 547: sf.gear.metadata.type.v1.Referenda_SetMetadataCall
	(*Identity_Raw0)(nil),                               // 548: sf.gear.metadata.type.v1.Identity_Raw0
	(*Identity_Raw11)(nil),                              // 549: sf.gear.metadata.type.v1.Identity_Raw11
	(*NominationPools_BondExtraOtherCall)(nil),          // 550: sf.gear.metadata.type.v1.NominationPools_BondExtraOtherCall
	(*NominationPools_SetCommissionChangeRateCall)(nil), // 551: sf.gear.metadata.type.v1.NominationPools_SetCommissionChangeRateCall
	(*SpConsensusSlotsEquivocationProof)(nil),           // 552: sf.gear.metadata.type.v1.SpConsensusSlotsEquivocationProof
	(*Vesting_PalletVestingVestingInfoVestingInfo)(nil), // 553: sf.gear.metadata.type.v1.Vesting_PalletVestingVestingInfoVestingInfo
	(*Staking_ForceNoErasCall)(nil),                     // 554: sf.gear.metadata.type.v1.Staking_ForceNoErasCall
	(*Identity_Raw7)(nil),                               // 555: sf.gear.metadata.type.v1.Identity_Raw7
	(*NominationPools_Index)(nil),                       // 556: sf.gear.metadata.type.v1.NominationPools_Index
	(*Balances_Index)(nil),                              // 557: sf.gear.metadata.type.v1.Balances_Index
	(*Staking_SetControllerCall)(nil),                   // 558: sf.gear.metadata.type.v1.Staking_SetControllerCall
	(*Bounties_Beneficiary)(nil),                        // 559: sf.gear.metadata.type.v1.Bounties_Beneficiary
	(*NominationPools_Permission)(nil),                  // 560: sf.gear.metadata.type.v1.NominationPools_Permission
	(*Identity_Raw15)(nil),                              // 561: sf.gear.metadata.type.v1.Identity_Raw15
	(*ChildBounties_Beneficiary)(nil),                   // 562: sf.gear.metadata.type.v1.ChildBounties_Beneficiary
	(*TimestampPallet)(nil),                             // 563: sf.gear.metadata.type.v1.TimestampPallet
	(*NominationPools_Bouncer)(nil),                     // 564: sf.gear.metadata.type.v1.NominationPools_Bouncer
	(*NominationPools_CreateCall)(nil),                  // 565: sf.gear.metadata.type.v1.NominationPools_CreateCall
	(*NominationPools_Id)(nil),                          // 566: sf.gear.metadata.type.v1.NominationPools_Id
	(*SpSessionMembershipProof)(nil),                    // 567: sf.gear.metadata.type.v1.SpSessionMembershipProof
	(*Staking_ForceNewEraAlwaysCall)(nil),               // 568: sf.gear.metadata.type.v1.Staking_ForceNewEraAlwaysCall
	(*VaraRuntimeRuntimeCall)(nil),                      // 569: sf.gear.metadata.type.v1.VaraRuntimeRuntimeCall
	(*Referenda_OneFewerDecidingCall)(nil),              // 570: sf.gear.metadata.type.v1.Referenda_OneFewerDecidingCall
	(*BountiesPallet)(nil),                              // 571: sf.gear.metadata.type.v1.BountiesPallet
	(*Staking_Who)(nil),                                 // 572: sf.gear.metadata.type.v1.Staking_Who
	(*Whitelist_DispatchWhitelistedCallCall)(nil),       // 573: sf.gear.metadata.type.v1.Whitelist_DispatchWhitelistedCallCall
	(*NominationPools_Root)(nil),                        // 574: sf.gear.metadata.type.v1.NominationPools_Root
	(*FellowshipReferenda_System)(nil),                  // 575: sf.gear.metadata.type.v1.FellowshipReferenda_System
	(*Identity_Raw13)(nil),                              // 576: sf.gear.metadata.type.v1.Identity_Raw13
	(*Identity_RemoveSubCall)(nil),                      // 577: sf.gear.metadata.type.v1.Identity_RemoveSubCall
	(*SpRuntimeGenericDigestDigestItem)(nil),            // 578: sf.gear.metadata.type.v1.SpRuntimeGenericDigestDigestItem
	(*Balances_ForceUnreserveCall)(nil),                 // 579: sf.gear.metadata.type.v1.Balances_ForceUnreserveCall
	(*Vesting_Address32)(nil),                           // 580: sf.gear.metadata.type.v1.Vesting_Address32
	(*Staking_Stash)(nil),                               // 581: sf.gear.metadata.type.v1.Staking_Stash
	(*ConvictionVoting_Raw)(nil),                        // 582: sf.gear.metadata.type.v1.ConvictionVoting_Raw
	(*GearVoucherPallet)(nil),                           // 583: sf.gear.metadata.type.v1.GearVoucherPallet
	(*Staking_Index)(nil),                               // 584: sf.gear.metadata.type.v1.Staking_Index
	(*Staking_Noop)(nil),                                // 585: sf.gear.metadata.type.v1.Staking_Noop
	(*Identity_Address32)(nil),                          // 586: sf.gear.metadata.type.v1.Identity_Address32
	(*Identity_Target)(nil),                             // 587: sf.gear.metadata.type.v1.Identity_Target
	(*NominationPools_Open)(nil),                        // 588: sf.gear.metadata.type.v1.NominationPools_Open
	(*ElectionProviderMultiPhasePallet)(nil),            // 589: sf.gear.metadata.type.v1.ElectionProviderMultiPhasePallet
	(*NominationPools_Raw)(nil),                         // 590: sf.gear.metadata.type.v1.NominationPools_Raw
	(*NominationPools_PermissionlessWithdraw)(nil),      // 591: sf.gear.metadata.type.v1.NominationPools_PermissionlessWithdraw
	(*SpConsensusBabeAppPublic)(nil),                    // 592: sf.gear.metadata.type.v1.SpConsensusBabeAppPublic
	(*Grandpa_Equivocation)(nil),                        // 593: sf.gear.metadata.type.v1.Grandpa_Equivocation
	(*FellowshipCollective_CleanupPollCall)(nil),        // 594: sf.gear.metadata.type.v1.FellowshipCollective_CleanupPollCall
	(*Whitelist_WhitelistCallCall)(nil),                 // 595: sf.gear.metadata.type.v1.Whitelist_WhitelistCallCall
	(*ElectionProviderMultiPhase_PalletElectionProviderMultiPhaseSolutionOrSnapshotSize)(nil), // 596: sf.gear.metadata.type.v1.ElectionProviderMultiPhase_PalletElectionProviderMultiPhaseSolutionOrSnapshotSize
	(*NominationPools_WithdrawUnbondedCall)(nil),                                              // 597: sf.gear.metadata.type.v1.NominationPools_WithdrawUnbondedCall
	(*NominationPools_MaxMembersPerPool)(nil),                                                 // 598: sf.gear.metadata.type.v1.NominationPools_MaxMembersPerPool
	(*ConvictionVoting_Address20)(nil),                                                        // 599: sf.gear.metadata.type.v1.ConvictionVoting_Address20
	(*Scheduler_CancelNamedCall)(nil),                                                         // 600: sf.gear.metadata.type.v1.Scheduler_CancelNamedCall
	(*Identity_Raw32)(nil),                                                                    // 601: sf.gear.metadata.type.v1.Identity_Raw32
	(*Proxy_Address32)(nil),                                                                   // 602: sf.gear.metadata.type.v1.Proxy_Address32
	(*ElectionProviderMultiPhase_TupleSpCoreCryptoAccountId32SpNposElectionsSupport)(nil),     // 603: sf.gear.metadata.type.v1.ElectionProviderMultiPhase_TupleSpCoreCryptoAccountId32SpNposElectionsSupport
	(*Babe_TupleUint64Uint64)(nil),                                                            // 604: sf.gear.metadata.type.v1.Babe_TupleUint64Uint64
	(*FellowshipReferenda_CancelCall)(nil),                                                    // 605: sf.gear.metadata.type.v1.FellowshipReferenda_CancelCall
	(*Identity_Raw20)(nil),                                                                    // 606: sf.gear.metadata.type.v1.Identity_Raw20
	(*StakingRewards_AlignSupplyCall)(nil),                                                    // 607: sf.gear.metadata.type.v1.StakingRewards_AlignSupplyCall
}
var file_sf_gear_metadata_type_v1_output_proto_depIdxs = []int32{
	25,   // 0: sf.gear.metadata.type.v1.Vesting_Index.value0:type_name -> sf.gear.metadata.type.v1.Vesting_TupleNull
	261,  // 1: sf.gear.metadata.type.v1.Treasury_TupleNull.value:type_name -> sf.gear.metadata.type.v1.TupleNull
	160,  // 2: sf.gear.metadata.type.v1.Identity_SetSubsCall.subs:type_name -> sf.gear.metadata.type.v1.Identity_TupleSpCoreCryptoAccountId32PalletIdentityTypesData
	513,  // 3: sf.gear.metadata.type.v1.Multisig_AsMultiCall.other_signatories:type_name -> sf.gear.metadata.type.v1.SpCoreCryptoAccountId32
	509,  // 4: sf.gear.metadata.type.v1.Multisig_AsMultiCall.maybe_timepoint:type_name -> sf.gear.metadata.type.v1.Multisig_PalletMultisigTimepoint
	413,  // 5: sf.gear.metadata.type.v1.Multisig_AsMultiCall.system:type_name -> sf.gear.metadata.type.v1.SystemPallet
	563,  // 6: sf.gear.metadata.type.v1.Multisig_AsMultiCall.timestamp:type_name -> sf.gear.metadata.type.v1.TimestampPallet
	530,  // 7: sf.gear.metadata.type.v1.Multisig_AsMultiCall.babe:type_name -> sf.gear.metadata.type.v1.BabePallet
	84,   // 8: sf.gear.metadata.type.v1.Multisig_AsMultiCall.grandpa:type_name -> sf.gear.metadata.type.v1.GrandpaPallet
	404,  // 9: sf.gear.metadata.type.v1.Multisig_AsMultiCall.balances:type_name -> sf.gear.metadata.type.v1.BalancesPallet
	436,  // 10: sf.gear.metadata.type.v1.Multisig_AsMultiCall.vesting:type_name -> sf.gear.metadata.type.v1.VestingPallet
	391,  // 11: sf.gear.metadata.type.v1.Multisig_AsMultiCall.bags_list:type_name -> sf.gear.metadata.type.v1.BagsListPallet
	531,  // 12: sf.gear.metadata.type.v1.Multisig_AsMultiCall.im_online:type_name -> sf.gear.metadata.type.v1.ImOnlinePallet
	282,  // 13: sf.gear.metadata.type.v1.Multisig_AsMultiCall.staking:type_name -> sf.gear.metadata.type.v1.StakingPallet
	297,  // 14: sf.gear.metadata.type.v1.Multisig_AsMultiCall.session:type_name -> sf.gear.metadata.type.v1.SessionPallet
	21,   // 15: sf.gear.metadata.type.v1.Multisig_AsMultiCall.treasury:type_name -> sf.gear.metadata.type.v1.TreasuryPallet
	248,  // 16: sf.gear.metadata.type.v1.Multisig_AsMultiCall.utility:type_name -> sf.gear.metadata.type.v1.UtilityPallet
	361,  // 17: sf.gear.metadata.type.v1.Multisig_AsMultiCall.conviction_voting:type_name -> sf.gear.metadata.type.v1.ConvictionVotingPallet
	287,  // 18: sf.gear.metadata.type.v1.Multisig_AsMultiCall.referenda:type_name -> sf.gear.metadata.type.v1.ReferendaPallet
	214,  // 19: sf.gear.metadata.type.v1.Multisig_AsMultiCall.fellowship_collective:type_name -> sf.gear.metadata.type.v1.FellowshipCollectivePallet
	196,  // 20: sf.gear.metadata.type.v1.Multisig_AsMultiCall.fellowship_referenda:type_name -> sf.gear.metadata.type.v1.FellowshipReferendaPallet
	144,  // 21: sf.gear.metadata.type.v1.Multisig_AsMultiCall.whitelist:type_name -> sf.gear.metadata.type.v1.WhitelistPallet
	111,  // 22: sf.gear.metadata.type.v1.Multisig_AsMultiCall.scheduler:type_name -> sf.gear.metadata.type.v1.SchedulerPallet
	29,   // 23: sf.gear.metadata.type.v1.Multisig_AsMultiCall.preimage:type_name -> sf.gear.metadata.type.v1.PreimagePallet
	394,  // 24: sf.gear.metadata.type.v1.Multisig_AsMultiCall.identity:type_name -> sf.gear.metadata.type.v1.IdentityPallet
	434,  // 25: sf.gear.metadata.type.v1.Multisig_AsMultiCall.proxy:type_name -> sf.gear.metadata.type.v1.ProxyPallet
	311,  // 26: sf.gear.metadata.type.v1.Multisig_AsMultiCall.multisig:type_name -> sf.gear.metadata.type.v1.MultisigPallet
	589,  // 27: sf.gear.metadata.type.v1.Multisig_AsMultiCall.election_provider_multi_phase:type_name -> sf.gear.metadata.type.v1.ElectionProviderMultiPhasePallet
	571,  // 28: sf.gear.metadata.type.v1.Multisig_AsMultiCall.bounties:type_name -> sf.gear.metadata.type.v1.BountiesPallet
	162,  // 29: sf.gear.metadata.type.v1.Multisig_AsMultiCall.child_bounties:type_name -> sf.gear.metadata.type.v1.ChildBountiesPallet
	448,  // 30: sf.gear.metadata.type.v1.Multisig_AsMultiCall.nomination_pools:type_name -> sf.gear.metadata.type.v1.NominationPoolsPallet
	368,  // 31: sf.gear.metadata.type.v1.Multisig_AsMultiCall.gear:type_name -> sf.gear.metadata.type.v1.GearPallet
	251,  // 32: sf.gear.metadata.type.v1.Multisig_AsMultiCall.staking_rewards:type_name -> sf.gear.metadata.type.v1.StakingRewardsPallet
	583,  // 33: sf.gear.metadata.type.v1.Multisig_AsMultiCall.gear_voucher:type_name -> sf.gear.metadata.type.v1.GearVoucherPallet
	338,  // 34: sf.gear.metadata.type.v1.Multisig_AsMultiCall.max_weight:type_name -> sf.gear.metadata.type.v1.SpWeightsWeightV2Weight
	513,  // 35: sf.gear.metadata.type.v1.Staking_SetInvulnerablesCall.invulnerables:type_name -> sf.gear.metadata.type.v1.SpCoreCryptoAccountId32
	513,  // 36: sf.gear.metadata.type.v1.Staking_ForceUnstakeCall.stash:type_name -> sf.gear.metadata.type.v1.SpCoreCryptoAccountId32
	513,  // 37: sf.gear.metadata.type.v1.ConvictionVoting_Id.value0:type_name -> sf.gear.metadata.type.v1.SpCoreCryptoAccountId32
	303,  // 38: sf.gear.metadata.type.v1.NominationPools_MaxMembers.noop:type_name -> sf.gear.metadata.type.v1.NominationPools_Noop
	4,    // 39: sf.gear.metadata.type.v1.NominationPools_MaxMembers.set:type_name -> sf.gear.metadata.type.v1.NominationPools_Set
	358,  // 40: sf.gear.metadata.type.v1.NominationPools_MaxMembers.remove:type_name -> sf.gear.metadata.type.v1.NominationPools_Remove
	12,   // 41: sf.gear.metadata.type.v1.ConvictionVoting_To.id:type_name -> sf.gear.metadata.type.v1.ConvictionVoting_Id
	78,   // 42: sf.gear.metadata.type.v1.ConvictionVoting_To.index:type_name -> sf.gear.metadata.type.v1.ConvictionVoting_Index
	582,  // 43: sf.gear.metadata.type.v1.ConvictionVoting_To.raw:type_name -> sf.gear.metadata.type.v1.ConvictionVoting_Raw
	195,  // 44: sf.gear.metadata.type.v1.ConvictionVoting_To.address32:type_name -> sf.gear.metadata.type.v1.ConvictionVoting_Address32
	599,  // 45: sf.gear.metadata.type.v1.ConvictionVoting_To.address20:type_name -> sf.gear.metadata.type.v1.ConvictionVoting_Address20
	261,  // 46: sf.gear.metadata.type.v1.ChildBounties_TupleNull.value:type_name -> sf.gear.metadata.type.v1.TupleNull
	135,  // 47: sf.gear.metadata.type.v1.GearVoucher_AppendPrograms.none:type_name -> sf.gear.metadata.type.v1.GearVoucher_None
	177,  // 48: sf.gear.metadata.type.v1.GearVoucher_AppendPrograms.some:type_name -> sf.gear.metadata.type.v1.GearVoucher_Some
	305,  // 49: sf.gear.metadata.type.v1.TreasuryPallet.propose_spend_call:type_name -> sf.gear.metadata.type.v1.Treasury_ProposeSpendCall
	168,  // 50: sf.gear.metadata.type.v1.TreasuryPallet.reject_proposal_call:type_name -> sf.gear.metadata.type.v1.Treasury_RejectProposalCall
	109,  // 51: sf.gear.metadata.type.v1.TreasuryPallet.approve_proposal_call:type_name -> sf.gear.metadata.type.v1.Treasury_ApproveProposalCall
	475,  // 52: sf.gear.metadata.type.v1.TreasuryPallet.spend_local_call:type_name -> sf.gear.metadata.type.v1.Treasury_SpendLocalCall
	148,  // 53: sf.gear.metadata.type.v1.TreasuryPallet.remove_approval_call:type_name -> sf.gear.metadata.type.v1.Treasury_RemoveApprovalCall
	386,  // 54: sf.gear.metadata.type.v1.TreasuryPallet.spend_call:type_name -> sf.gear.metadata.type.v1.Treasury_SpendCall
	11,   // 55: sf.gear.metadata.type.v1.TreasuryPallet.payout_call:type_name -> sf.gear.metadata.type.v1.Treasury_PayoutCall
	126,  // 56: sf.gear.metadata.type.v1.TreasuryPallet.check_status_call:type_name -> sf.gear.metadata.type.v1.Treasury_CheckStatusCall
	26,   // 57: sf.gear.metadata.type.v1.TreasuryPallet.void_spend_call:type_name -> sf.gear.metadata.type.v1.Treasury_VoidSpendCall
	388,  // 58: sf.gear.metadata.type.v1.Proxy_ForceProxyType.any:type_name -> sf.gear.metadata.type.v1.Proxy_Any
	18,   // 59: sf.gear.metadata.type.v1.Proxy_ForceProxyType.non_transfer:type_name -> sf.gear.metadata.type.v1.Proxy_NonTransfer
	523,  // 60: sf.gear.metadata.type.v1.Proxy_ForceProxyType.governance:type_name -> sf.gear.metadata.type.v1.Proxy_Governance
	453,  // 61: sf.gear.metadata.type.v1.Proxy_ForceProxyType.staking:type_name -> sf.gear.metadata.type.v1.Proxy_Staking
	498,  // 62: sf.gear.metadata.type.v1.Proxy_ForceProxyType.identity_judgement:type_name -> sf.gear.metadata.type.v1.Proxy_IdentityJudgement
	19,   // 63: sf.gear.metadata.type.v1.Proxy_ForceProxyType.cancel_proxy:type_name -> sf.gear.metadata.type.v1.Proxy_CancelProxy
	167,  // 64: sf.gear.metadata.type.v1.ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes8Listuint32.value1:type_name -> sf.gear.metadata.type.v1.ElectionProviderMultiPhase_TupleUint32SpArithmeticPerThingsPerU16
	261,  // 65: sf.gear.metadata.type.v1.Vesting_TupleNull.value:type_name -> sf.gear.metadata.type.v1.TupleNull
	302,  // 66: sf.gear.metadata.type.v1.Proxy_AnnounceCall.real:type_name -> sf.gear.metadata.type.v1.Proxy_Real
	204,  // 67: sf.gear.metadata.type.v1.Proxy_AnnounceCall.call_hash:type_name -> sf.gear.metadata.type.v1.PrimitiveTypesH256
	527,  // 68: sf.gear.metadata.type.v1.FellowshipReferenda_EnactmentMoment.at:type_name -> sf.gear.metadata.type.v1.FellowshipReferenda_At
	457,  // 69: sf.gear.metadata.type.v1.FellowshipReferenda_EnactmentMoment.after:type_name -> sf.gear.metadata.type.v1.FellowshipReferenda_After
	325,  // 70: sf.gear.metadata.type.v1.PreimagePallet.note_preimage_call:type_name -> sf.gear.metadata.type.v1.Preimage_NotePreimageCall
	522,  // 71: sf.gear.metadata.type.v1.PreimagePallet.unnote_preimage_call:type_name -> sf.gear.metadata.type.v1.Preimage_UnnotePreimageCall
	99,   // 72: sf.gear.metadata.type.v1.PreimagePallet.request_preimage_call:type_name -> sf.gear.metadata.type.v1.Preimage_RequestPreimageCall
	229,  // 73: sf.gear.metadata.type.v1.PreimagePallet.unrequest_preimage_call:type_name -> sf.gear.metadata.type.v1.Preimage_UnrequestPreimageCall
	139,  // 74: sf.gear.metadata.type.v1.PreimagePallet.ensure_updated_call:type_name -> sf.gear.metadata.type.v1.Preimage_EnsureUpdatedCall
	593,  // 75: sf.gear.metadata.type.v1.SpConsensusGrandpaEquivocationProof.equivocation:type_name -> sf.gear.metadata.type.v1.Grandpa_Equivocation
	303,  // 76: sf.gear.metadata.type.v1.NominationPools_MinCreateBond.noop:type_name -> sf.gear.metadata.type.v1.NominationPools_Noop
	4,    // 77: sf.gear.metadata.type.v1.NominationPools_MinCreateBond.set:type_name -> sf.gear.metadata.type.v1.NominationPools_Set
	358,  // 78: sf.gear.metadata.type.v1.NominationPools_MinCreateBond.remove:type_name -> sf.gear.metadata.type.v1.NominationPools_Remove
	544,  // 79: sf.gear.metadata.type.v1.StakingRewards_ForceRefillCall.from:type_name -> sf.gear.metadata.type.v1.StakingRewards_From
	167,  // 80: sf.gear.metadata.type.v1.ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes11Listuint32.value1:type_name -> sf.gear.metadata.type.v1.ElectionProviderMultiPhase_TupleUint32SpArithmeticPerThingsPerU16
	566,  // 81: sf.gear.metadata.type.v1.NominationPools_Nominator.id:type_name -> sf.gear.metadata.type.v1.NominationPools_Id
	556,  // 82: sf.gear.metadata.type.v1.NominationPools_Nominator.index:type_name -> sf.gear.metadata.type.v1.NominationPools_Index
	590,  // 83: sf.gear.metadata.type.v1.NominationPools_Nominator.raw:type_name -> sf.gear.metadata.type.v1.NominationPools_Raw
	318,  // 84: sf.gear.metadata.type.v1.NominationPools_Nominator.address32:type_name -> sf.gear.metadata.type.v1.NominationPools_Address32
	180,  // 85: sf.gear.metadata.type.v1.NominationPools_Nominator.address20:type_name -> sf.gear.metadata.type.v1.NominationPools_Address20
	403,  // 86: sf.gear.metadata.type.v1.Babe_Logs.pre_runtime:type_name -> sf.gear.metadata.type.v1.Babe_PreRuntime
	300,  // 87: sf.gear.metadata.type.v1.Babe_Logs.consensus:type_name -> sf.gear.metadata.type.v1.Babe_Consensus
	76,   // 88: sf.gear.metadata.type.v1.Babe_Logs.seal:type_name -> sf.gear.metadata.type.v1.Babe_Seal
	60,   // 89: sf.gear.metadata.type.v1.Babe_Logs.other:type_name -> sf.gear.metadata.type.v1.Babe_Other
	422,  // 90: sf.gear.metadata.type.v1.Babe_Logs.runtime_environment_updated:type_name -> sf.gear.metadata.type.v1.Babe_RuntimeEnvironmentUpdated
	32,   // 91: sf.gear.metadata.type.v1.Grandpa_ReportEquivocationCall.equivocation_proof:type_name -> sf.gear.metadata.type.v1.SpConsensusGrandpaEquivocationProof
	567,  // 92: sf.gear.metadata.type.v1.Grandpa_ReportEquivocationCall.key_owner_proof:type_name -> sf.gear.metadata.type.v1.SpSessionMembershipProof
	348,  // 93: sf.gear.metadata.type.v1.ImOnline_PalletImOnlineSr25519AppSr25519Public.value0:type_name -> sf.gear.metadata.type.v1.SpCoreSr25519Public
	413,  // 94: sf.gear.metadata.type.v1.Utility_WithWeightCall.system:type_name -> sf.gear.metadata.type.v1.SystemPallet
	563,  // 95: sf.gear.metadata.type.v1.Utility_WithWeightCall.timestamp:type_name -> sf.gear.metadata.type.v1.TimestampPallet
	530,  // 96: sf.gear.metadata.type.v1.Utility_WithWeightCall.babe:type_name -> sf.gear.metadata.type.v1.BabePallet
	84,   // 97: sf.gear.metadata.type.v1.Utility_WithWeightCall.grandpa:type_name -> sf.gear.metadata.type.v1.GrandpaPallet
	404,  // 98: sf.gear.metadata.type.v1.Utility_WithWeightCall.balances:type_name -> sf.gear.metadata.type.v1.BalancesPallet
	436,  // 99: sf.gear.metadata.type.v1.Utility_WithWeightCall.vesting:type_name -> sf.gear.metadata.type.v1.VestingPallet
	391,  // 100: sf.gear.metadata.type.v1.Utility_WithWeightCall.bags_list:type_name -> sf.gear.metadata.type.v1.BagsListPallet
	531,  // 101: sf.gear.metadata.type.v1.Utility_WithWeightCall.im_online:type_name -> sf.gear.metadata.type.v1.ImOnlinePallet
	282,  // 102: sf.gear.metadata.type.v1.Utility_WithWeightCall.staking:type_name -> sf.gear.metadata.type.v1.StakingPallet
	297,  // 103: sf.gear.metadata.type.v1.Utility_WithWeightCall.session:type_name -> sf.gear.metadata.type.v1.SessionPallet
	21,   // 104: sf.gear.metadata.type.v1.Utility_WithWeightCall.treasury:type_name -> sf.gear.metadata.type.v1.TreasuryPallet
	248,  // 105: sf.gear.metadata.type.v1.Utility_WithWeightCall.utility:type_name -> sf.gear.metadata.type.v1.UtilityPallet
	361,  // 106: sf.gear.metadata.type.v1.Utility_WithWeightCall.conviction_voting:type_name -> sf.gear.metadata.type.v1.ConvictionVotingPallet
	287,  // 107: sf.gear.metadata.type.v1.Utility_WithWeightCall.referenda:type_name -> sf.gear.metadata.type.v1.ReferendaPallet
	214,  // 108: sf.gear.metadata.type.v1.Utility_WithWeightCall.fellowship_collective:type_name -> sf.gear.metadata.type.v1.FellowshipCollectivePallet
	196,  // 109: sf.gear.metadata.type.v1.Utility_WithWeightCall.fellowship_referenda:type_name -> sf.gear.metadata.type.v1.FellowshipReferendaPallet
	144,  // 110: sf.gear.metadata.type.v1.Utility_WithWeightCall.whitelist:type_name -> sf.gear.metadata.type.v1.WhitelistPallet
	111,  // 111: sf.gear.metadata.type.v1.Utility_WithWeightCall.scheduler:type_name -> sf.gear.metadata.type.v1.SchedulerPallet
	29,   // 112: sf.gear.metadata.type.v1.Utility_WithWeightCall.preimage:type_name -> sf.gear.metadata.type.v1.PreimagePallet
	394,  // 113: sf.gear.metadata.type.v1.Utility_WithWeightCall.identity:type_name -> sf.gear.metadata.type.v1.IdentityPallet
	434,  // 114: sf.gear.metadata.type.v1.Utility_WithWeightCall.proxy:type_name -> sf.gear.metadata.type.v1.ProxyPallet
	311,  // 115: sf.gear.metadata.type.v1.Utility_WithWeightCall.multisig:type_name -> sf.gear.metadata.type.v1.MultisigPallet
	589,  // 116: sf.gear.metadata.type.v1.Utility_WithWeightCall.election_provider_multi_phase:type_name -> sf.gear.metadata.type.v1.ElectionProviderMultiPhasePallet
	571,  // 117: sf.gear.metadata.type.v1.Utility_WithWeightCall.bounties:type_name -> sf.gear.metadata.type.v1.BountiesPallet
	162,  // 118: sf.gear.metadata.type.v1.Utility_WithWeightCall.child_bounties:type_name -> sf.gear.metadata.type.v1.ChildBountiesPallet
	448,  // 119: sf.gear.metadata.type.v1.Utility_WithWeightCall.nomination_pools:type_name -> sf.gear.metadata.type.v1.NominationPoolsPallet
	368,  // 120: sf.gear.metadata.type.v1.Utility_WithWeightCall.gear:type_name -> sf.gear.metadata.type.v1.GearPallet
	251,  // 121: sf.gear.metadata.type.v1.Utility_WithWeightCall.staking_rewards:type_name -> sf.gear.metadata.type.v1.StakingRewardsPallet
	583,  // 122: sf.gear.metadata.type.v1.Utility_WithWeightCall.gear_voucher:type_name -> sf.gear.metadata.type.v1.GearVoucherPallet
	338,  // 123: sf.gear.metadata.type.v1.Utility_WithWeightCall.weight:type_name -> sf.gear.metadata.type.v1.SpWeightsWeightV2Weight
	118,  // 124: sf.gear.metadata.type.v1.Referenda_System.value0:type_name -> sf.gear.metadata.type.v1.Value0
	490,  // 125: sf.gear.metadata.type.v1.FellowshipCollective_Index.value0:type_name -> sf.gear.metadata.type.v1.FellowshipCollective_TupleNull
	356,  // 126: sf.gear.metadata.type.v1.Identity_New.id:type_name -> sf.gear.metadata.type.v1.Identity_Id
	362,  // 127: sf.gear.metadata.type.v1.Identity_New.index:type_name -> sf.gear.metadata.type.v1.Identity_Index
	152,  // 128: sf.gear.metadata.type.v1.Identity_New.raw:type_name -> sf.gear.metadata.type.v1.Identity_Raw
	586,  // 129: sf.gear.metadata.type.v1.Identity_New.address32:type_name -> sf.gear.metadata.type.v1.Identity_Address32
	379,  // 130: sf.gear.metadata.type.v1.Identity_New.address20:type_name -> sf.gear.metadata.type.v1.Identity_Address20
	350,  // 131: sf.gear.metadata.type.v1.BagsList_Index.value0:type_name -> sf.gear.metadata.type.v1.BagsList_TupleNull
	114,  // 132: sf.gear.metadata.type.v1.BagsList_PutInFrontOfOtherCall.heavier:type_name -> sf.gear.metadata.type.v1.BagsList_Heavier
	405,  // 133: sf.gear.metadata.type.v1.BagsList_PutInFrontOfOtherCall.lighter:type_name -> sf.gear.metadata.type.v1.BagsList_Lighter
	585,  // 134: sf.gear.metadata.type.v1.Staking_MaxValidatorCount.noop:type_name -> sf.gear.metadata.type.v1.Staking_Noop
	468,  // 135: sf.gear.metadata.type.v1.Staking_MaxValidatorCount.set:type_name -> sf.gear.metadata.type.v1.Staking_Set
	245,  // 136: sf.gear.metadata.type.v1.Staking_MaxValidatorCount.remove:type_name -> sf.gear.metadata.type.v1.Staking_Remove
	413,  // 137: sf.gear.metadata.type.v1.Utility_AsDerivativeCall.system:type_name -> sf.gear.metadata.type.v1.SystemPallet
	563,  // 138: sf.gear.metadata.type.v1.Utility_AsDerivativeCall.timestamp:type_name -> sf.gear.metadata.type.v1.TimestampPallet
	530,  // 139: sf.gear.metadata.type.v1.Utility_AsDerivativeCall.babe:type_name -> sf.gear.metadata.type.v1.BabePallet
	84,   // 140: sf.gear.metadata.type.v1.Utility_AsDerivativeCall.grandpa:type_name -> sf.gear.metadata.type.v1.GrandpaPallet
	404,  // 141: sf.gear.metadata.type.v1.Utility_AsDerivativeCall.balances:type_name -> sf.gear.metadata.type.v1.BalancesPallet
	436,  // 142: sf.gear.metadata.type.v1.Utility_AsDerivativeCall.vesting:type_name -> sf.gear.metadata.type.v1.VestingPallet
	391,  // 143: sf.gear.metadata.type.v1.Utility_AsDerivativeCall.bags_list:type_name -> sf.gear.metadata.type.v1.BagsListPallet
	531,  // 144: sf.gear.metadata.type.v1.Utility_AsDerivativeCall.im_online:type_name -> sf.gear.metadata.type.v1.ImOnlinePallet
	282,  // 145: sf.gear.metadata.type.v1.Utility_AsDerivativeCall.staking:type_name -> sf.gear.metadata.type.v1.StakingPallet
	297,  // 146: sf.gear.metadata.type.v1.Utility_AsDerivativeCall.session:type_name -> sf.gear.metadata.type.v1.SessionPallet
	21,   // 147: sf.gear.metadata.type.v1.Utility_AsDerivativeCall.treasury:type_name -> sf.gear.metadata.type.v1.TreasuryPallet
	248,  // 148: sf.gear.metadata.type.v1.Utility_AsDerivativeCall.utility:type_name -> sf.gear.metadata.type.v1.UtilityPallet
	361,  // 149: sf.gear.metadata.type.v1.Utility_AsDerivativeCall.conviction_voting:type_name -> sf.gear.metadata.type.v1.ConvictionVotingPallet
	287,  // 150: sf.gear.metadata.type.v1.Utility_AsDerivativeCall.referenda:type_name -> sf.gear.metadata.type.v1.ReferendaPallet
	214,  // 151: sf.gear.metadata.type.v1.Utility_AsDerivativeCall.fellowship_collective:type_name -> sf.gear.metadata.type.v1.FellowshipCollectivePallet
	196,  // 152: sf.gear.metadata.type.v1.Utility_AsDerivativeCall.fellowship_referenda:type_name -> sf.gear.metadata.type.v1.FellowshipReferendaPallet
	144,  // 153: sf.gear.metadata.type.v1.Utility_AsDerivativeCall.whitelist:type_name -> sf.gear.metadata.type.v1.WhitelistPallet
	111,  // 154: sf.gear.metadata.type.v1.Utility_AsDerivativeCall.scheduler:type_name -> sf.gear.metadata.type.v1.SchedulerPallet
	29,   // 155: sf.gear.metadata.type.v1.Utility_AsDerivativeCall.preimage:type_name -> sf.gear.metadata.type.v1.PreimagePallet
	394,  // 156: sf.gear.metadata.type.v1.Utility_AsDerivativeCall.identity:type_name -> sf.gear.metadata.type.v1.IdentityPallet
	434,  // 157: sf.gear.metadata.type.v1.Utility_AsDerivativeCall.proxy:type_name -> sf.gear.metadata.type.v1.ProxyPallet
	311,  // 158: sf.gear.metadata.type.v1.Utility_AsDerivativeCall.multisig:type_name -> sf.gear.metadata.type.v1.MultisigPallet
	589,  // 159: sf.gear.metadata.type.v1.Utility_AsDerivativeCall.election_provider_multi_phase:type_name -> sf.gear.metadata.type.v1.ElectionProviderMultiPhasePallet
	571,  // 160: sf.gear.metadata.type.v1.Utility_AsDerivativeCall.bounties:type_name -> sf.gear.metadata.type.v1.BountiesPallet
	162,  // 161: sf.gear.metadata.type.v1.Utility_AsDerivativeCall.child_bounties:type_name -> sf.gear.metadata.type.v1.ChildBountiesPallet
	448,  // 162: sf.gear.metadata.type.v1.Utility_AsDerivativeCall.nomination_pools:type_name -> sf.gear.metadata.type.v1.NominationPoolsPallet
	368,  // 163: sf.gear.metadata.type.v1.Utility_AsDerivativeCall.gear:type_name -> sf.gear.metadata.type.v1.GearPallet
	251,  // 164: sf.gear.metadata.type.v1.Utility_AsDerivativeCall.staking_rewards:type_name -> sf.gear.metadata.type.v1.StakingRewardsPallet
	583,  // 165: sf.gear.metadata.type.v1.Utility_AsDerivativeCall.gear_voucher:type_name -> sf.gear.metadata.type.v1.GearVoucherPallet
	513,  // 166: sf.gear.metadata.type.v1.Multisig_ApproveAsMultiCall.other_signatories:type_name -> sf.gear.metadata.type.v1.SpCoreCryptoAccountId32
	509,  // 167: sf.gear.metadata.type.v1.Multisig_ApproveAsMultiCall.maybe_timepoint:type_name -> sf.gear.metadata.type.v1.Multisig_PalletMultisigTimepoint
	338,  // 168: sf.gear.metadata.type.v1.Multisig_ApproveAsMultiCall.max_weight:type_name -> sf.gear.metadata.type.v1.SpWeightsWeightV2Weight
	513,  // 169: sf.gear.metadata.type.v1.ElectionProviderMultiPhase_TupleSpCoreCryptoAccountId32String.value0:type_name -> sf.gear.metadata.type.v1.SpCoreCryptoAccountId32
	574,  // 170: sf.gear.metadata.type.v1.NominationPools_CreateWithPoolIdCall.root:type_name -> sf.gear.metadata.type.v1.NominationPools_Root
	41,   // 171: sf.gear.metadata.type.v1.NominationPools_CreateWithPoolIdCall.nominator:type_name -> sf.gear.metadata.type.v1.NominationPools_Nominator
	564,  // 172: sf.gear.metadata.type.v1.NominationPools_CreateWithPoolIdCall.bouncer:type_name -> sf.gear.metadata.type.v1.NominationPools_Bouncer
	552,  // 173: sf.gear.metadata.type.v1.Babe_ReportEquivocationCall.equivocation_proof:type_name -> sf.gear.metadata.type.v1.SpConsensusSlotsEquivocationProof
	567,  // 174: sf.gear.metadata.type.v1.Babe_ReportEquivocationCall.key_owner_proof:type_name -> sf.gear.metadata.type.v1.SpSessionMembershipProof
	175,  // 175: sf.gear.metadata.type.v1.Proxy_AddProxyCall.delegate:type_name -> sf.gear.metadata.type.v1.Proxy_Delegate
	484,  // 176: sf.gear.metadata.type.v1.Proxy_AddProxyCall.proxy_type:type_name -> sf.gear.metadata.type.v1.Proxy_ProxyType
	281,  // 177: sf.gear.metadata.type.v1.Staking_NominateCall.targets:type_name -> sf.gear.metadata.type.v1.SpRuntimeMultiaddressMultiAddress
	121,  // 178: sf.gear.metadata.type.v1.NominationPools_SetConfigsCall.min_join_bond:type_name -> sf.gear.metadata.type.v1.NominationPools_MinJoinBond
	37,   // 179: sf.gear.metadata.type.v1.NominationPools_SetConfigsCall.min_create_bond:type_name -> sf.gear.metadata.type.v1.NominationPools_MinCreateBond
	304,  // 180: sf.gear.metadata.type.v1.NominationPools_SetConfigsCall.max_pools:type_name -> sf.gear.metadata.type.v1.NominationPools_MaxPools
	14,   // 181: sf.gear.metadata.type.v1.NominationPools_SetConfigsCall.max_members:type_name -> sf.gear.metadata.type.v1.NominationPools_MaxMembers
	598,  // 182: sf.gear.metadata.type.v1.NominationPools_SetConfigsCall.max_members_per_pool:type_name -> sf.gear.metadata.type.v1.NominationPools_MaxMembersPerPool
	323,  // 183: sf.gear.metadata.type.v1.NominationPools_SetConfigsCall.global_max_commission:type_name -> sf.gear.metadata.type.v1.NominationPools_GlobalMaxCommission
	147,  // 184: sf.gear.metadata.type.v1.SpConsensusGrandpaAppPublic.value0:type_name -> sf.gear.metadata.type.v1.SpCoreEd25519Public
	360,  // 185: sf.gear.metadata.type.v1.ConvictionVoting_Standard.vote:type_name -> sf.gear.metadata.type.v1.ConvictionVoting_PalletConvictionVotingVoteVote
	536,  // 186: sf.gear.metadata.type.v1.Identity_SetIdentityCall.info:type_name -> sf.gear.metadata.type.v1.Identity_PalletIdentitySimpleIdentityInfo
	175,  // 187: sf.gear.metadata.type.v1.Proxy_ProxyAnnouncedCall.delegate:type_name -> sf.gear.metadata.type.v1.Proxy_Delegate
	302,  // 188: sf.gear.metadata.type.v1.Proxy_ProxyAnnouncedCall.real:type_name -> sf.gear.metadata.type.v1.Proxy_Real
	23,   // 189: sf.gear.metadata.type.v1.Proxy_ProxyAnnouncedCall.force_proxy_type:type_name -> sf.gear.metadata.type.v1.Proxy_ForceProxyType
	413,  // 190: sf.gear.metadata.type.v1.Proxy_ProxyAnnouncedCall.system:type_name -> sf.gear.metadata.type.v1.SystemPallet
	563,  // 191: sf.gear.metadata.type.v1.Proxy_ProxyAnnouncedCall.timestamp:type_name -> sf.gear.metadata.type.v1.TimestampPallet
	530,  // 192: sf.gear.metadata.type.v1.Proxy_ProxyAnnouncedCall.babe:type_name -> sf.gear.metadata.type.v1.BabePallet
	84,   // 193: sf.gear.metadata.type.v1.Proxy_ProxyAnnouncedCall.grandpa:type_name -> sf.gear.metadata.type.v1.GrandpaPallet
	404,  // 194: sf.gear.metadata.type.v1.Proxy_ProxyAnnouncedCall.balances:type_name -> sf.gear.metadata.type.v1.BalancesPallet
	436,  // 195: sf.gear.metadata.type.v1.Proxy_ProxyAnnouncedCall.vesting:type_name -> sf.gear.metadata.type.v1.VestingPallet
	391,  // 196: sf.gear.metadata.type.v1.Proxy_ProxyAnnouncedCall.bags_list:type_name -> sf.gear.metadata.type.v1.BagsListPallet
	531,  // 197: sf.gear.metadata.type.v1.Proxy_ProxyAnnouncedCall.im_online:type_name -> sf.gear.metadata.type.v1.ImOnlinePallet
	282,  // 198: sf.gear.metadata.type.v1.Proxy_ProxyAnnouncedCall.staking:type_name -> sf.gear.metadata.type.v1.StakingPallet
	297,  // 199: sf.gear.metadata.type.v1.Proxy_ProxyAnnouncedCall.session:type_name -> sf.gear.metadata.type.v1.SessionPallet
	21,   // 200: sf.gear.metadata.type.v1.Proxy_ProxyAnnouncedCall.treasury:type_name -> sf.gear.metadata.type.v1.TreasuryPallet
	248,  // 201: sf.gear.metadata.type.v1.Proxy_ProxyAnnouncedCall.utility:type_name -> sf.gear.metadata.type.v1.UtilityPallet
	361,  // 202: sf.gear.metadata.type.v1.Proxy_ProxyAnnouncedCall.conviction_voting:type_name -> sf.gear.metadata.type.v1.ConvictionVotingPallet
	287,  // 203: sf.gear.metadata.type.v1.Proxy_ProxyAnnouncedCall.referenda:type_name -> sf.gear.metadata.type.v1.ReferendaPallet
	214,  // 204: sf.gear.metadata.type.v1.Proxy_ProxyAnnouncedCall.fellowship_collective:type_name -> sf.gear.metadata.type.v1.FellowshipCollectivePallet
	196,  // 205: sf.gear.metadata.type.v1.Proxy_ProxyAnnouncedCall.fellowship_referenda:type_name -> sf.gear.metadata.type.v1.FellowshipReferendaPallet
	144,  // 206: sf.gear.metadata.type.v1.Proxy_ProxyAnnouncedCall.whitelist:type_name -> sf.gear.metadata.type.v1.WhitelistPallet
	111,  // 207: sf.gear.metadata.type.v1.Proxy_ProxyAnnouncedCall.scheduler:type_name -> sf.gear.metadata.type.v1.SchedulerPallet
	29,   // 208: sf.gear.metadata.type.v1.Proxy_ProxyAnnouncedCall.preimage:type_name -> sf.gear.metadata.type.v1.PreimagePallet
	394,  // 209: sf.gear.metadata.type.v1.Proxy_ProxyAnnouncedCall.identity:type_name -> sf.gear.metadata.type.v1.IdentityPallet
	434,  // 210: sf.gear.metadata.type.v1.Proxy_ProxyAnnouncedCall.proxy:type_name -> sf.gear.metadata.type.v1.ProxyPallet
	311,  // 211: sf.gear.metadata.type.v1.Proxy_ProxyAnnouncedCall.multisig:type_name -> sf.gear.metadata.type.v1.MultisigPallet
	589,  // 212: sf.gear.metadata.type.v1.Proxy_ProxyAnnouncedCall.election_provider_multi_phase:type_name -> sf.gear.metadata.type.v1.ElectionProviderMultiPhasePallet
	571,  // 213: sf.gear.metadata.type.v1.Proxy_ProxyAnnouncedCall.bounties:type_name -> sf.gear.metadata.type.v1.BountiesPallet
	162,  // 214: sf.gear.metadata.type.v1.Proxy_ProxyAnnouncedCall.child_bounties:type_name -> sf.gear.metadata.type.v1.ChildBountiesPallet
	448,  // 215: sf.gear.metadata.type.v1.Proxy_ProxyAnnouncedCall.nomination_pools:type_name -> sf.gear.metadata.type.v1.NominationPoolsPallet
	368,  // 216: sf.gear.metadata.type.v1.Proxy_ProxyAnnouncedCall.gear:type_name -> sf.gear.metadata.type.v1.GearPallet
	251,  // 217: sf.gear.metadata.type.v1.Proxy_ProxyAnnouncedCall.staking_rewards:type_name -> sf.gear.metadata.type.v1.StakingRewardsPallet
	583,  // 218: sf.gear.metadata.type.v1.Proxy_ProxyAnnouncedCall.gear_voucher:type_name -> sf.gear.metadata.type.v1.GearVoucherPallet
	473,  // 219: sf.gear.metadata.type.v1.ElectionProviderMultiPhase_SubmitUnsignedCall.raw_solution:type_name -> sf.gear.metadata.type.v1.ElectionProviderMultiPhase_PalletElectionProviderMultiPhaseRawSolution
	596,  // 220: sf.gear.metadata.type.v1.ElectionProviderMultiPhase_SubmitUnsignedCall.witness:type_name -> sf.gear.metadata.type.v1.ElectionProviderMultiPhase_PalletElectionProviderMultiPhaseSolutionOrSnapshotSize
	17,   // 221: sf.gear.metadata.type.v1.ChildBounties_Index.value0:type_name -> sf.gear.metadata.type.v1.ChildBounties_TupleNull
	474,  // 222: sf.gear.metadata.type.v1.Staking_ScaleValidatorCountCall.factor:type_name -> sf.gear.metadata.type.v1.SpArithmeticPerThingsPercent
	306,  // 223: sf.gear.metadata.type.v1.ConvictionVoting_Index.value0:type_name -> sf.gear.metadata.type.v1.ConvictionVoting_TupleNull
	167,  // 224: sf.gear.metadata.type.v1.ElectionProviderMultiPhase_TupleUint32TupleUint32SpArithmeticPerThingsPerU16Uint32.value1:type_name -> sf.gear.metadata.type.v1.ElectionProviderMultiPhase_TupleUint32SpArithmeticPerThingsPerU16
	520,  // 225: sf.gear.metadata.type.v1.Staking_Targets.id:type_name -> sf.gear.metadata.type.v1.Staking_Id
	584,  // 226: sf.gear.metadata.type.v1.Staking_Targets.index:type_name -> sf.gear.metadata.type.v1.Staking_Index
	364,  // 227: sf.gear.metadata.type.v1.Staking_Targets.raw:type_name -> sf.gear.metadata.type.v1.Staking_Raw
	198,  // 228: sf.gear.metadata.type.v1.Staking_Targets.address32:type_name -> sf.gear.metadata.type.v1.Staking_Address32
	124,  // 229: sf.gear.metadata.type.v1.Staking_Targets.address20:type_name -> sf.gear.metadata.type.v1.Staking_Address20
	43,   // 230: sf.gear.metadata.type.v1.GrandpaPallet.report_equivocation_call:type_name -> sf.gear.metadata.type.v1.Grandpa_ReportEquivocationCall
	427,  // 231: sf.gear.metadata.type.v1.GrandpaPallet.report_equivocation_unsigned_call:type_name -> sf.gear.metadata.type.v1.Grandpa_ReportEquivocationUnsignedCall
	314,  // 232: sf.gear.metadata.type.v1.GrandpaPallet.note_stalled_call:type_name -> sf.gear.metadata.type.v1.Grandpa_NoteStalledCall
	286,  // 233: sf.gear.metadata.type.v1.Vesting_Source.id:type_name -> sf.gear.metadata.type.v1.Vesting_Id
	0,    // 234: sf.gear.metadata.type.v1.Vesting_Source.index:type_name -> sf.gear.metadata.type.v1.Vesting_Index
	85,   // 235: sf.gear.metadata.type.v1.Vesting_Source.raw:type_name -> sf.gear.metadata.type.v1.Vesting_Raw
	580,  // 236: sf.gear.metadata.type.v1.Vesting_Source.address32:type_name -> sf.gear.metadata.type.v1.Vesting_Address32
	270,  // 237: sf.gear.metadata.type.v1.Vesting_Source.address20:type_name -> sf.gear.metadata.type.v1.Vesting_Address20
	405,  // 238: sf.gear.metadata.type.v1.BagsList_PutInFrontOfCall.lighter:type_name -> sf.gear.metadata.type.v1.BagsList_Lighter
	86,   // 239: sf.gear.metadata.type.v1.Vesting_ForceVestedTransferCall.source:type_name -> sf.gear.metadata.type.v1.Vesting_Source
	353,  // 240: sf.gear.metadata.type.v1.Vesting_ForceVestedTransferCall.target:type_name -> sf.gear.metadata.type.v1.Vesting_Target
	553,  // 241: sf.gear.metadata.type.v1.Vesting_ForceVestedTransferCall.schedule:type_name -> sf.gear.metadata.type.v1.Vesting_PalletVestingVestingInfoVestingInfo
	487,  // 242: sf.gear.metadata.type.v1.Staking_PalletStakingValidatorPrefs.commission:type_name -> sf.gear.metadata.type.v1.SpArithmeticPerThingsPerbill
	353,  // 243: sf.gear.metadata.type.v1.Vesting_VestedTransferCall.target:type_name -> sf.gear.metadata.type.v1.Vesting_Target
	553,  // 244: sf.gear.metadata.type.v1.Vesting_VestedTransferCall.schedule:type_name -> sf.gear.metadata.type.v1.Vesting_PalletVestingVestingInfoVestingInfo
	204,  // 245: sf.gear.metadata.type.v1.FellowshipReferenda_Lookup.hash:type_name -> sf.gear.metadata.type.v1.PrimitiveTypesH256
	192,  // 246: sf.gear.metadata.type.v1.Bounties_ProposeCuratorCall.curator:type_name -> sf.gear.metadata.type.v1.Bounties_Curator
	588,  // 247: sf.gear.metadata.type.v1.NominationPools_State.open:type_name -> sf.gear.metadata.type.v1.NominationPools_Open
	500,  // 248: sf.gear.metadata.type.v1.NominationPools_State.blocked:type_name -> sf.gear.metadata.type.v1.NominationPools_Blocked
	508,  // 249: sf.gear.metadata.type.v1.NominationPools_State.destroying:type_name -> sf.gear.metadata.type.v1.NominationPools_Destroying
	324,  // 250: sf.gear.metadata.type.v1.ImOnline_PalletImOnlineSr25519AppSr25519Signature.value0:type_name -> sf.gear.metadata.type.v1.SpCoreSr25519Signature
	204,  // 251: sf.gear.metadata.type.v1.Preimage_RequestPreimageCall.hash:type_name -> sf.gear.metadata.type.v1.PrimitiveTypesH256
	513,  // 252: sf.gear.metadata.type.v1.Balances_UpgradeAccountsCall.who:type_name -> sf.gear.metadata.type.v1.SpCoreCryptoAccountId32
	345,  // 253: sf.gear.metadata.type.v1.Staking_Payee.staked:type_name -> sf.gear.metadata.type.v1.Staking_Staked
	581,  // 254: sf.gear.metadata.type.v1.Staking_Payee.stash:type_name -> sf.gear.metadata.type.v1.Staking_Stash
	193,  // 255: sf.gear.metadata.type.v1.Staking_Payee.controller:type_name -> sf.gear.metadata.type.v1.Staking_Controller
	454,  // 256: sf.gear.metadata.type.v1.Staking_Payee.account:type_name -> sf.gear.metadata.type.v1.Staking_Account
	450,  // 257: sf.gear.metadata.type.v1.Staking_Payee.none:type_name -> sf.gear.metadata.type.v1.Staking_None
	255,  // 258: sf.gear.metadata.type.v1.SchedulerPallet.schedule_call:type_name -> sf.gear.metadata.type.v1.Scheduler_ScheduleCall
	174,  // 259: sf.gear.metadata.type.v1.SchedulerPallet.cancel_call:type_name -> sf.gear.metadata.type.v1.Scheduler_CancelCall
	164,  // 260: sf.gear.metadata.type.v1.SchedulerPallet.schedule_named_call:type_name -> sf.gear.metadata.type.v1.Scheduler_ScheduleNamedCall
	600,  // 261: sf.gear.metadata.type.v1.SchedulerPallet.cancel_named_call:type_name -> sf.gear.metadata.type.v1.Scheduler_CancelNamedCall
	535,  // 262: sf.gear.metadata.type.v1.SchedulerPallet.schedule_after_call:type_name -> sf.gear.metadata.type.v1.Scheduler_ScheduleAfterCall
	228,  // 263: sf.gear.metadata.type.v1.SchedulerPallet.schedule_named_after_call:type_name -> sf.gear.metadata.type.v1.Scheduler_ScheduleNamedAfterCall
	464,  // 264: sf.gear.metadata.type.v1.Proxy_Index.value0:type_name -> sf.gear.metadata.type.v1.Proxy_TupleNull
	167,  // 265: sf.gear.metadata.type.v1.ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes13Listuint32.value1:type_name -> sf.gear.metadata.type.v1.ElectionProviderMultiPhase_TupleUint32SpArithmeticPerThingsPerU16
	456,  // 266: sf.gear.metadata.type.v1.BagsList_Heavier.id:type_name -> sf.gear.metadata.type.v1.BagsList_Id
	52,   // 267: sf.gear.metadata.type.v1.BagsList_Heavier.index:type_name -> sf.gear.metadata.type.v1.BagsList_Index
	492,  // 268: sf.gear.metadata.type.v1.BagsList_Heavier.raw:type_name -> sf.gear.metadata.type.v1.BagsList_Raw
	414,  // 269: sf.gear.metadata.type.v1.BagsList_Heavier.address32:type_name -> sf.gear.metadata.type.v1.BagsList_Address32
	149,  // 270: sf.gear.metadata.type.v1.BagsList_Heavier.address20:type_name -> sf.gear.metadata.type.v1.BagsList_Address20
	487,  // 271: sf.gear.metadata.type.v1.NominationPools_SetCommissionMaxCall.max_commission:type_name -> sf.gear.metadata.type.v1.SpArithmeticPerThingsPerbill
	292,  // 272: sf.gear.metadata.type.v1.Balances_TransferAllowDeathCall.dest:type_name -> sf.gear.metadata.type.v1.Balances_Dest
	278,  // 273: sf.gear.metadata.type.v1.Value0.root:type_name -> sf.gear.metadata.type.v1.Root
	247,  // 274: sf.gear.metadata.type.v1.Value0.signed:type_name -> sf.gear.metadata.type.v1.Signed
	33,   // 275: sf.gear.metadata.type.v1.Value0.none:type_name -> sf.gear.metadata.type.v1.None
	167,  // 276: sf.gear.metadata.type.v1.ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes12Listuint32.value1:type_name -> sf.gear.metadata.type.v1.ElectionProviderMultiPhase_TupleUint32SpArithmeticPerThingsPerU16
	517,  // 277: sf.gear.metadata.type.v1.ElectionProviderMultiPhase_SetMinimumUntrustedScoreCall.maybe_next_score:type_name -> sf.gear.metadata.type.v1.SpNposElectionsElectionScore
	303,  // 278: sf.gear.metadata.type.v1.NominationPools_MinJoinBond.noop:type_name -> sf.gear.metadata.type.v1.NominationPools_Noop
	4,    // 279: sf.gear.metadata.type.v1.NominationPools_MinJoinBond.set:type_name -> sf.gear.metadata.type.v1.NominationPools_Set
	358,  // 280: sf.gear.metadata.type.v1.NominationPools_MinJoinBond.remove:type_name -> sf.gear.metadata.type.v1.NominationPools_Remove
	380,  // 281: sf.gear.metadata.type.v1.GearVoucher_SendMessage.destination:type_name -> sf.gear.metadata.type.v1.GprimitivesActorId
	227,  // 282: sf.gear.metadata.type.v1.FellowshipCollective_Who.id:type_name -> sf.gear.metadata.type.v1.FellowshipCollective_Id
	49,   // 283: sf.gear.metadata.type.v1.FellowshipCollective_Who.index:type_name -> sf.gear.metadata.type.v1.FellowshipCollective_Index
	101,  // 284: sf.gear.metadata.type.v1.FellowshipCollective_Who.raw:type_name -> sf.gear.metadata.type.v1.FellowshipCollective_Raw
	515,  // 285: sf.gear.metadata.type.v1.FellowshipCollective_Who.address32:type_name -> sf.gear.metadata.type.v1.FellowshipCollective_Address32
	355,  // 286: sf.gear.metadata.type.v1.FellowshipCollective_Who.address20:type_name -> sf.gear.metadata.type.v1.FellowshipCollective_Address20
	30,   // 287: sf.gear.metadata.type.v1.Identity_Display.none:type_name -> sf.gear.metadata.type.v1.Identity_None
	548,  // 288: sf.gear.metadata.type.v1.Identity_Display.raw0:type_name -> sf.gear.metadata.type.v1.Identity_Raw0
	433,  // 289: sf.gear.metadata.type.v1.Identity_Display.raw1:type_name -> sf.gear.metadata.type.v1.Identity_Raw1
	208,  // 290: sf.gear.metadata.type.v1.Identity_Display.raw2:type_name -> sf.gear.metadata.type.v1.Identity_Raw2
	339,  // 291: sf.gear.metadata.type.v1.Identity_Display.raw3:type_name -> sf.gear.metadata.type.v1.Identity_Raw3
	165,  // 292: sf.gear.metadata.type.v1.Identity_Display.raw4:type_name -> sf.gear.metadata.type.v1.Identity_Raw4
	376,  // 293: sf.gear.metadata.type.v1.Identity_Display.raw5:type_name -> sf.gear.metadata.type.v1.Identity_Raw5
	156,  // 294: sf.gear.metadata.type.v1.Identity_Display.raw6:type_name -> sf.gear.metadata.type.v1.Identity_Raw6
	555,  // 295: sf.gear.metadata.type.v1.Identity_Display.raw7:type_name -> sf.gear.metadata.type.v1.Identity_Raw7
	326,  // 296: sf.gear.metadata.type.v1.Identity_Display.raw8:type_name -> sf.gear.metadata.type.v1.Identity_Raw8
	298,  // 297: sf.gear.metadata.type.v1.Identity_Display.raw9:type_name -> sf.gear.metadata.type.v1.Identity_Raw9
	415,  // 298: sf.gear.metadata.type.v1.Identity_Display.raw10:type_name -> sf.gear.metadata.type.v1.Identity_Raw10
	549,  // 299: sf.gear.metadata.type.v1.Identity_Display.raw11:type_name -> sf.gear.metadata.type.v1.Identity_Raw11
	183,  // 300: sf.gear.metadata.type.v1.Identity_Display.raw12:type_name -> sf.gear.metadata.type.v1.Identity_Raw12
	576,  // 301: sf.gear.metadata.type.v1.Identity_Display.raw13:type_name -> sf.gear.metadata.type.v1.Identity_Raw13
	106,  // 302: sf.gear.metadata.type.v1.Identity_Display.raw14:type_name -> sf.gear.metadata.type.v1.Identity_Raw14
	561,  // 303: sf.gear.metadata.type.v1.Identity_Display.raw15:type_name -> sf.gear.metadata.type.v1.Identity_Raw15
	237,  // 304: sf.gear.metadata.type.v1.Identity_Display.raw16:type_name -> sf.gear.metadata.type.v1.Identity_Raw16
	159,  // 305: sf.gear.metadata.type.v1.Identity_Display.raw17:type_name -> sf.gear.metadata.type.v1.Identity_Raw17
	477,  // 306: sf.gear.metadata.type.v1.Identity_Display.raw18:type_name -> sf.gear.metadata.type.v1.Identity_Raw18
	317,  // 307: sf.gear.metadata.type.v1.Identity_Display.raw19:type_name -> sf.gear.metadata.type.v1.Identity_Raw19
	606,  // 308: sf.gear.metadata.type.v1.Identity_Display.raw20:type_name -> sf.gear.metadata.type.v1.Identity_Raw20
	79,   // 309: sf.gear.metadata.type.v1.Identity_Display.raw21:type_name -> sf.gear.metadata.type.v1.Identity_Raw21
	34,   // 310: sf.gear.metadata.type.v1.Identity_Display.raw22:type_name -> sf.gear.metadata.type.v1.Identity_Raw22
	36,   // 311: sf.gear.metadata.type.v1.Identity_Display.raw23:type_name -> sf.gear.metadata.type.v1.Identity_Raw23
	6,    // 312: sf.gear.metadata.type.v1.Identity_Display.raw24:type_name -> sf.gear.metadata.type.v1.Identity_Raw24
	542,  // 313: sf.gear.metadata.type.v1.Identity_Display.raw25:type_name -> sf.gear.metadata.type.v1.Identity_Raw25
	145,  // 314: sf.gear.metadata.type.v1.Identity_Display.raw26:type_name -> sf.gear.metadata.type.v1.Identity_Raw26
	265,  // 315: sf.gear.metadata.type.v1.Identity_Display.raw27:type_name -> sf.gear.metadata.type.v1.Identity_Raw27
	387,  // 316: sf.gear.metadata.type.v1.Identity_Display.raw28:type_name -> sf.gear.metadata.type.v1.Identity_Raw28
	67,   // 317: sf.gear.metadata.type.v1.Identity_Display.raw29:type_name -> sf.gear.metadata.type.v1.Identity_Raw29
	340,  // 318: sf.gear.metadata.type.v1.Identity_Display.raw30:type_name -> sf.gear.metadata.type.v1.Identity_Raw30
	289,  // 319: sf.gear.metadata.type.v1.Identity_Display.raw31:type_name -> sf.gear.metadata.type.v1.Identity_Raw31
	601,  // 320: sf.gear.metadata.type.v1.Identity_Display.raw32:type_name -> sf.gear.metadata.type.v1.Identity_Raw32
	205,  // 321: sf.gear.metadata.type.v1.Identity_Display.blake_two256:type_name -> sf.gear.metadata.type.v1.Identity_BlakeTwo256
	83,   // 322: sf.gear.metadata.type.v1.Identity_Display.sha256:type_name -> sf.gear.metadata.type.v1.Identity_Sha256
	2,    // 323: sf.gear.metadata.type.v1.Identity_Display.keccak256:type_name -> sf.gear.metadata.type.v1.Identity_Keccak256
	397,  // 324: sf.gear.metadata.type.v1.Identity_Display.sha_three256:type_name -> sf.gear.metadata.type.v1.Identity_ShaThree256
	502,  // 325: sf.gear.metadata.type.v1.NominationPools_UpdateRolesCall.new_root:type_name -> sf.gear.metadata.type.v1.NominationPools_NewRoot
	221,  // 326: sf.gear.metadata.type.v1.NominationPools_UpdateRolesCall.new_nominator:type_name -> sf.gear.metadata.type.v1.NominationPools_NewNominator
	335,  // 327: sf.gear.metadata.type.v1.NominationPools_UpdateRolesCall.new_bouncer:type_name -> sf.gear.metadata.type.v1.NominationPools_NewBouncer
	370,  // 328: sf.gear.metadata.type.v1.NominationPools_Extra.free_balance:type_name -> sf.gear.metadata.type.v1.NominationPools_FreeBalance
	419,  // 329: sf.gear.metadata.type.v1.NominationPools_Extra.rewards:type_name -> sf.gear.metadata.type.v1.NominationPools_Rewards
	513,  // 330: sf.gear.metadata.type.v1.GearVoucher_IssueCall.spender:type_name -> sf.gear.metadata.type.v1.SpCoreCryptoAccountId32
	385,  // 331: sf.gear.metadata.type.v1.GearVoucher_IssueCall.programs:type_name -> sf.gear.metadata.type.v1.BTreeSet
	154,  // 332: sf.gear.metadata.type.v1.SpConsensusGrandpaAppSignature.value0:type_name -> sf.gear.metadata.type.v1.SpCoreEd25519Signature
	275,  // 333: sf.gear.metadata.type.v1.Grandpa_Prevote.value0:type_name -> sf.gear.metadata.type.v1.FinalityGrandpaEquivocation
	210,  // 334: sf.gear.metadata.type.v1.Balances_ForceTransferCall.source:type_name -> sf.gear.metadata.type.v1.Balances_Source
	292,  // 335: sf.gear.metadata.type.v1.Balances_ForceTransferCall.dest:type_name -> sf.gear.metadata.type.v1.Balances_Dest
	204,  // 336: sf.gear.metadata.type.v1.Preimage_EnsureUpdatedCall.hashes:type_name -> sf.gear.metadata.type.v1.PrimitiveTypesH256
	513,  // 337: sf.gear.metadata.type.v1.NominationPools_ClaimPayoutOtherCall.other:type_name -> sf.gear.metadata.type.v1.SpCoreCryptoAccountId32
	449,  // 338: sf.gear.metadata.type.v1.Balances_Who.id:type_name -> sf.gear.metadata.type.v1.Balances_Id
	557,  // 339: sf.gear.metadata.type.v1.Balances_Who.index:type_name -> sf.gear.metadata.type.v1.Balances_Index
	374,  // 340: sf.gear.metadata.type.v1.Balances_Who.raw:type_name -> sf.gear.metadata.type.v1.Balances_Raw
	232,  // 341: sf.gear.metadata.type.v1.Balances_Who.address32:type_name -> sf.gear.metadata.type.v1.Balances_Address32
	269,  // 342: sf.gear.metadata.type.v1.Balances_Who.address20:type_name -> sf.gear.metadata.type.v1.Balances_Address20
	595,  // 343: sf.gear.metadata.type.v1.WhitelistPallet.whitelist_call_call:type_name -> sf.gear.metadata.type.v1.Whitelist_WhitelistCallCall
	158,  // 344: sf.gear.metadata.type.v1.WhitelistPallet.remove_whitelisted_call_call:type_name -> sf.gear.metadata.type.v1.Whitelist_RemoveWhitelistedCallCall
	573,  // 345: sf.gear.metadata.type.v1.WhitelistPallet.dispatch_whitelisted_call_call:type_name -> sf.gear.metadata.type.v1.Whitelist_DispatchWhitelistedCallCall
	452,  // 346: sf.gear.metadata.type.v1.WhitelistPallet.dispatch_whitelisted_call_with_preimage_call:type_name -> sf.gear.metadata.type.v1.Whitelist_DispatchWhitelistedCallWithPreimageCall
	95,   // 347: sf.gear.metadata.type.v1.NominationPools_SetStateCall.state:type_name -> sf.gear.metadata.type.v1.NominationPools_State
	118,  // 348: sf.gear.metadata.type.v1.Referenda_Void.value0:type_name -> sf.gear.metadata.type.v1.Value0
	204,  // 349: sf.gear.metadata.type.v1.Whitelist_RemoveWhitelistedCallCall.call_hash:type_name -> sf.gear.metadata.type.v1.PrimitiveTypesH256
	513,  // 350: sf.gear.metadata.type.v1.Identity_TupleSpCoreCryptoAccountId32PalletIdentityTypesData.value0:type_name -> sf.gear.metadata.type.v1.SpCoreCryptoAccountId32
	347,  // 351: sf.gear.metadata.type.v1.Identity_TupleSpCoreCryptoAccountId32PalletIdentityTypesData.value1:type_name -> sf.gear.metadata.type.v1.Identity_Value1
	302,  // 352: sf.gear.metadata.type.v1.Proxy_RemoveAnnouncementCall.real:type_name -> sf.gear.metadata.type.v1.Proxy_Real
	204,  // 353: sf.gear.metadata.type.v1.Proxy_RemoveAnnouncementCall.call_hash:type_name -> sf.gear.metadata.type.v1.PrimitiveTypesH256
	495,  // 354: sf.gear.metadata.type.v1.ChildBountiesPallet.add_child_bounty_call:type_name -> sf.gear.metadata.type.v1.ChildBounties_AddChildBountyCall
	256,  // 355: sf.gear.metadata.type.v1.ChildBountiesPallet.propose_curator_call:type_name -> sf.gear.metadata.type.v1.ChildBounties_ProposeCuratorCall
	334,  // 356: sf.gear.metadata.type.v1.ChildBountiesPallet.accept_curator_call:type_name -> sf.gear.metadata.type.v1.ChildBounties_AcceptCuratorCall
	439,  // 357: sf.gear.metadata.type.v1.ChildBountiesPallet.unassign_curator_call:type_name -> sf.gear.metadata.type.v1.ChildBounties_UnassignCuratorCall
	486,  // 358: sf.gear.metadata.type.v1.ChildBountiesPallet.award_child_bounty_call:type_name -> sf.gear.metadata.type.v1.ChildBounties_AwardChildBountyCall
	13,   // 359: sf.gear.metadata.type.v1.ChildBountiesPallet.claim_child_bounty_call:type_name -> sf.gear.metadata.type.v1.ChildBounties_ClaimChildBountyCall
	372,  // 360: sf.gear.metadata.type.v1.ChildBountiesPallet.close_child_bounty_call:type_name -> sf.gear.metadata.type.v1.ChildBounties_CloseChildBountyCall
	488,  // 361: sf.gear.metadata.type.v1.Referenda_Inline.value0:type_name -> sf.gear.metadata.type.v1.BoundedCollectionsBoundedVecBoundedVec
	521,  // 362: sf.gear.metadata.type.v1.Scheduler_ScheduleNamedCall.maybe_periodic:type_name -> sf.gear.metadata.type.v1.Scheduler_TupleUint32Uint32
	413,  // 363: sf.gear.metadata.type.v1.Scheduler_ScheduleNamedCall.system:type_name -> sf.gear.metadata.type.v1.SystemPallet
	563,  // 364: sf.gear.metadata.type.v1.Scheduler_ScheduleNamedCall.timestamp:type_name -> sf.gear.metadata.type.v1.TimestampPallet
	530,  // 365: sf.gear.metadata.type.v1.Scheduler_ScheduleNamedCall.babe:type_name -> sf.gear.metadata.type.v1.BabePallet
	84,   // 366: sf.gear.metadata.type.v1.Scheduler_ScheduleNamedCall.grandpa:type_name -> sf.gear.metadata.type.v1.GrandpaPallet
	404,  // 367: sf.gear.metadata.type.v1.Scheduler_ScheduleNamedCall.balances:type_name -> sf.gear.metadata.type.v1.BalancesPallet
	436,  // 368: sf.gear.metadata.type.v1.Scheduler_ScheduleNamedCall.vesting:type_name -> sf.gear.metadata.type.v1.VestingPallet
	391,  // 369: sf.gear.metadata.type.v1.Scheduler_ScheduleNamedCall.bags_list:type_name -> sf.gear.metadata.type.v1.BagsListPallet
	531,  // 370: sf.gear.metadata.type.v1.Scheduler_ScheduleNamedCall.im_online:type_name -> sf.gear.metadata.type.v1.ImOnlinePallet
	282,  // 371: sf.gear.metadata.type.v1.Scheduler_ScheduleNamedCall.staking:type_name -> sf.gear.metadata.type.v1.StakingPallet
	297,  // 372: sf.gear.metadata.type.v1.Scheduler_ScheduleNamedCall.session:type_name -> sf.gear.metadata.type.v1.SessionPallet
	21,   // 373: sf.gear.metadata.type.v1.Scheduler_ScheduleNamedCall.treasury:type_name -> sf.gear.metadata.type.v1.TreasuryPallet
	248,  // 374: sf.gear.metadata.type.v1.Scheduler_ScheduleNamedCall.utility:type_name -> sf.gear.metadata.type.v1.UtilityPallet
	361,  // 375: sf.gear.metadata.type.v1.Scheduler_ScheduleNamedCall.conviction_voting:type_name -> sf.gear.metadata.type.v1.ConvictionVotingPallet
	287,  // 376: sf.gear.metadata.type.v1.Scheduler_ScheduleNamedCall.referenda:type_name -> sf.gear.metadata.type.v1.ReferendaPallet
	214,  // 377: sf.gear.metadata.type.v1.Scheduler_ScheduleNamedCall.fellowship_collective:type_name -> sf.gear.metadata.type.v1.FellowshipCollectivePallet
	196,  // 378: sf.gear.metadata.type.v1.Scheduler_ScheduleNamedCall.fellowship_referenda:type_name -> sf.gear.metadata.type.v1.FellowshipReferendaPallet
	144,  // 379: sf.gear.metadata.type.v1.Scheduler_ScheduleNamedCall.whitelist:type_name -> sf.gear.metadata.type.v1.WhitelistPallet
	111,  // 380: sf.gear.metadata.type.v1.Scheduler_ScheduleNamedCall.scheduler:type_name -> sf.gear.metadata.type.v1.SchedulerPallet
	29,   // 381: sf.gear.metadata.type.v1.Scheduler_ScheduleNamedCall.preimage:type_name -> sf.gear.metadata.type.v1.PreimagePallet
	394,  // 382: sf.gear.metadata.type.v1.Scheduler_ScheduleNamedCall.identity:type_name -> sf.gear.metadata.type.v1.IdentityPallet
	434,  // 383: sf.gear.metadata.type.v1.Scheduler_ScheduleNamedCall.proxy:type_name -> sf.gear.metadata.type.v1.ProxyPallet
	311,  // 384: sf.gear.metadata.type.v1.Scheduler_ScheduleNamedCall.multisig:type_name -> sf.gear.metadata.type.v1.MultisigPallet
	589,  // 385: sf.gear.metadata.type.v1.Scheduler_ScheduleNamedCall.election_provider_multi_phase:type_name -> sf.gear.metadata.type.v1.ElectionProviderMultiPhasePallet
	571,  // 386: sf.gear.metadata.type.v1.Scheduler_ScheduleNamedCall.bounties:type_name -> sf.gear.metadata.type.v1.BountiesPallet
	162,  // 387: sf.gear.metadata.type.v1.Scheduler_ScheduleNamedCall.child_bounties:type_name -> sf.gear.metadata.type.v1.ChildBountiesPallet
	448,  // 388: sf.gear.metadata.type.v1.Scheduler_ScheduleNamedCall.nomination_pools:type_name -> sf.gear.metadata.type.v1.NominationPoolsPallet
	368,  // 389: sf.gear.metadata.type.v1.Scheduler_ScheduleNamedCall.gear:type_name -> sf.gear.metadata.type.v1.GearPallet
	251,  // 390: sf.gear.metadata.type.v1.Scheduler_ScheduleNamedCall.staking_rewards:type_name -> sf.gear.metadata.type.v1.StakingRewardsPallet
	583,  // 391: sf.gear.metadata.type.v1.Scheduler_ScheduleNamedCall.gear_voucher:type_name -> sf.gear.metadata.type.v1.GearVoucherPallet
	458,  // 392: sf.gear.metadata.type.v1.ElectionProviderMultiPhase_TupleUint32SpArithmeticPerThingsPerU16.value1:type_name -> sf.gear.metadata.type.v1.SpArithmeticPerThingsPerU16
	118,  // 393: sf.gear.metadata.type.v1.FellowshipReferenda_Void.value0:type_name -> sf.gear.metadata.type.v1.Value0
	204,  // 394: sf.gear.metadata.type.v1.FinalityGrandpaPrevote.target_hash:type_name -> sf.gear.metadata.type.v1.PrimitiveTypesH256
	48,   // 395: sf.gear.metadata.type.v1.Referenda_ProposalOrigin.system:type_name -> sf.gear.metadata.type.v1.Referenda_System
	351,  // 396: sf.gear.metadata.type.v1.Referenda_ProposalOrigin.origins:type_name -> sf.gear.metadata.type.v1.Referenda_Origins
	155,  // 397: sf.gear.metadata.type.v1.Referenda_ProposalOrigin.void:type_name -> sf.gear.metadata.type.v1.Referenda_Void
	249,  // 398: sf.gear.metadata.type.v1.Proxy_Delegate.id:type_name -> sf.gear.metadata.type.v1.Proxy_Id
	112,  // 399: sf.gear.metadata.type.v1.Proxy_Delegate.index:type_name -> sf.gear.metadata.type.v1.Proxy_Index
	293,  // 400: sf.gear.metadata.type.v1.Proxy_Delegate.raw:type_name -> sf.gear.metadata.type.v1.Proxy_Raw
	602,  // 401: sf.gear.metadata.type.v1.Proxy_Delegate.address32:type_name -> sf.gear.metadata.type.v1.Proxy_Address32
	140,  // 402: sf.gear.metadata.type.v1.Proxy_Delegate.address20:type_name -> sf.gear.metadata.type.v1.Proxy_Address20
	252,  // 403: sf.gear.metadata.type.v1.GearVoucher_CallDeprecatedCall.call:type_name -> sf.gear.metadata.type.v1.GearVoucher_Call
	385,  // 404: sf.gear.metadata.type.v1.GearVoucher_Some.value0:type_name -> sf.gear.metadata.type.v1.BTreeSet
	363,  // 405: sf.gear.metadata.type.v1.Identity_AddRegistrarCall.account:type_name -> sf.gear.metadata.type.v1.Identity_Account
	225,  // 406: sf.gear.metadata.type.v1.Babe_PlanConfigChangeCall.config:type_name -> sf.gear.metadata.type.v1.Babe_Config
	291,  // 407: sf.gear.metadata.type.v1.System_KillStorageCall.keys:type_name -> sf.gear.metadata.type.v1.System_SystemKeysList
	493,  // 408: sf.gear.metadata.type.v1.ImOnline_HeartbeatCall.heartbeat:type_name -> sf.gear.metadata.type.v1.ImOnline_PalletImOnlineHeartbeat
	96,   // 409: sf.gear.metadata.type.v1.ImOnline_HeartbeatCall.signature:type_name -> sf.gear.metadata.type.v1.ImOnline_PalletImOnlineSr25519AppSr25519Signature
	378,  // 410: sf.gear.metadata.type.v1.Bounties_Curator.id:type_name -> sf.gear.metadata.type.v1.Bounties_Id
	332,  // 411: sf.gear.metadata.type.v1.Bounties_Curator.index:type_name -> sf.gear.metadata.type.v1.Bounties_Index
	401,  // 412: sf.gear.metadata.type.v1.Bounties_Curator.raw:type_name -> sf.gear.metadata.type.v1.Bounties_Raw
	309,  // 413: sf.gear.metadata.type.v1.Bounties_Curator.address32:type_name -> sf.gear.metadata.type.v1.Bounties_Address32
	367,  // 414: sf.gear.metadata.type.v1.Bounties_Curator.address20:type_name -> sf.gear.metadata.type.v1.Bounties_Address20
	451,  // 415: sf.gear.metadata.type.v1.FellowshipReferendaPallet.submit_call:type_name -> sf.gear.metadata.type.v1.FellowshipReferenda_SubmitCall
	219,  // 416: sf.gear.metadata.type.v1.FellowshipReferendaPallet.place_decision_deposit_call:type_name -> sf.gear.metadata.type.v1.FellowshipReferenda_PlaceDecisionDepositCall
	264,  // 417: sf.gear.metadata.type.v1.FellowshipReferendaPallet.refund_decision_deposit_call:type_name -> sf.gear.metadata.type.v1.FellowshipReferenda_RefundDecisionDepositCall
	605,  // 418: sf.gear.metadata.type.v1.FellowshipReferendaPallet.cancel_call:type_name -> sf.gear.metadata.type.v1.FellowshipReferenda_CancelCall
	534,  // 419: sf.gear.metadata.type.v1.FellowshipReferendaPallet.kill_call:type_name -> sf.gear.metadata.type.v1.FellowshipReferenda_KillCall
	151,  // 420: sf.gear.metadata.type.v1.FellowshipReferendaPallet.nudge_referendum_call:type_name -> sf.gear.metadata.type.v1.FellowshipReferenda_NudgeReferendumCall
	483,  // 421: sf.gear.metadata.type.v1.FellowshipReferendaPallet.one_fewer_deciding_call:type_name -> sf.gear.metadata.type.v1.FellowshipReferenda_OneFewerDecidingCall
	110,  // 422: sf.gear.metadata.type.v1.FellowshipReferendaPallet.refund_submission_deposit_call:type_name -> sf.gear.metadata.type.v1.FellowshipReferenda_RefundSubmissionDepositCall
	288,  // 423: sf.gear.metadata.type.v1.FellowshipReferendaPallet.set_metadata_call:type_name -> sf.gear.metadata.type.v1.FellowshipReferenda_SetMetadataCall
	50,   // 424: sf.gear.metadata.type.v1.Identity_SetAccountIdCall.new:type_name -> sf.gear.metadata.type.v1.Identity_New
	104,  // 425: sf.gear.metadata.type.v1.Staking_SetPayeeCall.payee:type_name -> sf.gear.metadata.type.v1.Staking_Payee
	585,  // 426: sf.gear.metadata.type.v1.Staking_MinValidatorBond.noop:type_name -> sf.gear.metadata.type.v1.Staking_Noop
	468,  // 427: sf.gear.metadata.type.v1.Staking_MinValidatorBond.set:type_name -> sf.gear.metadata.type.v1.Staking_Set
	245,  // 428: sf.gear.metadata.type.v1.Staking_MinValidatorBond.remove:type_name -> sf.gear.metadata.type.v1.Staking_Remove
	587,  // 429: sf.gear.metadata.type.v1.Identity_KillIdentityCall.target:type_name -> sf.gear.metadata.type.v1.Identity_Target
	496,  // 430: sf.gear.metadata.type.v1.Gear_SendReplyCall.reply_to_id:type_name -> sf.gear.metadata.type.v1.GprimitivesMessageId
	167,  // 431: sf.gear.metadata.type.v1.ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes16Listuint32.value1:type_name -> sf.gear.metadata.type.v1.ElectionProviderMultiPhase_TupleUint32SpArithmeticPerThingsPerU16
	449,  // 432: sf.gear.metadata.type.v1.Balances_Source.id:type_name -> sf.gear.metadata.type.v1.Balances_Id
	557,  // 433: sf.gear.metadata.type.v1.Balances_Source.index:type_name -> sf.gear.metadata.type.v1.Balances_Index
	374,  // 434: sf.gear.metadata.type.v1.Balances_Source.raw:type_name -> sf.gear.metadata.type.v1.Balances_Raw
	232,  // 435: sf.gear.metadata.type.v1.Balances_Source.address32:type_name -> sf.gear.metadata.type.v1.Balances_Address32
	269,  // 436: sf.gear.metadata.type.v1.Balances_Source.address20:type_name -> sf.gear.metadata.type.v1.Balances_Address20
	396,  // 437: sf.gear.metadata.type.v1.BagsList_RebagCall.dislocated:type_name -> sf.gear.metadata.type.v1.BagsList_Dislocated
	1,    // 438: sf.gear.metadata.type.v1.Treasury_Index.value0:type_name -> sf.gear.metadata.type.v1.Treasury_TupleNull
	444,  // 439: sf.gear.metadata.type.v1.FellowshipCollectivePallet.add_member_call:type_name -> sf.gear.metadata.type.v1.FellowshipCollective_AddMemberCall
	506,  // 440: sf.gear.metadata.type.v1.FellowshipCollectivePallet.promote_member_call:type_name -> sf.gear.metadata.type.v1.FellowshipCollective_PromoteMemberCall
	470,  // 441: sf.gear.metadata.type.v1.FellowshipCollectivePallet.demote_member_call:type_name -> sf.gear.metadata.type.v1.FellowshipCollective_DemoteMemberCall
	236,  // 442: sf.gear.metadata.type.v1.FellowshipCollectivePallet.remove_member_call:type_name -> sf.gear.metadata.type.v1.FellowshipCollective_RemoveMemberCall
	191,  // 443: sf.gear.metadata.type.v1.FellowshipCollectivePallet.vote_call:type_name -> sf.gear.metadata.type.v1.FellowshipCollective_VoteCall
	594,  // 444: sf.gear.metadata.type.v1.FellowshipCollectivePallet.cleanup_poll_call:type_name -> sf.gear.metadata.type.v1.FellowshipCollective_CleanupPollCall
	469,  // 445: sf.gear.metadata.type.v1.Staking_SetStakingConfigsCall.min_nominator_bond:type_name -> sf.gear.metadata.type.v1.Staking_MinNominatorBond
	200,  // 446: sf.gear.metadata.type.v1.Staking_SetStakingConfigsCall.min_validator_bond:type_name -> sf.gear.metadata.type.v1.Staking_MinValidatorBond
	258,  // 447: sf.gear.metadata.type.v1.Staking_SetStakingConfigsCall.max_nominator_count:type_name -> sf.gear.metadata.type.v1.Staking_MaxNominatorCount
	54,   // 448: sf.gear.metadata.type.v1.Staking_SetStakingConfigsCall.max_validator_count:type_name -> sf.gear.metadata.type.v1.Staking_MaxValidatorCount
	424,  // 449: sf.gear.metadata.type.v1.Staking_SetStakingConfigsCall.chill_threshold:type_name -> sf.gear.metadata.type.v1.Staking_ChillThreshold
	246,  // 450: sf.gear.metadata.type.v1.Staking_SetStakingConfigsCall.min_commission:type_name -> sf.gear.metadata.type.v1.Staking_MinCommission
	204,  // 451: sf.gear.metadata.type.v1.Referenda_Lookup.hash:type_name -> sf.gear.metadata.type.v1.PrimitiveTypesH256
	281,  // 452: sf.gear.metadata.type.v1.Staking_KickCall.who:type_name -> sf.gear.metadata.type.v1.SpRuntimeMultiaddressMultiAddress
	526,  // 453: sf.gear.metadata.type.v1.Utility_DispatchAsCall.as_origin:type_name -> sf.gear.metadata.type.v1.Utility_AsOrigin
	413,  // 454: sf.gear.metadata.type.v1.Utility_DispatchAsCall.system:type_name -> sf.gear.metadata.type.v1.SystemPallet
	563,  // 455: sf.gear.metadata.type.v1.Utility_DispatchAsCall.timestamp:type_name -> sf.gear.metadata.type.v1.TimestampPallet
	530,  // 456: sf.gear.metadata.type.v1.Utility_DispatchAsCall.babe:type_name -> sf.gear.metadata.type.v1.BabePallet
	84,   // 457: sf.gear.metadata.type.v1.Utility_DispatchAsCall.grandpa:type_name -> sf.gear.metadata.type.v1.GrandpaPallet
	404,  // 458: sf.gear.metadata.type.v1.Utility_DispatchAsCall.balances:type_name -> sf.gear.metadata.type.v1.BalancesPallet
	436,  // 459: sf.gear.metadata.type.v1.Utility_DispatchAsCall.vesting:type_name -> sf.gear.metadata.type.v1.VestingPallet
	391,  // 460: sf.gear.metadata.type.v1.Utility_DispatchAsCall.bags_list:type_name -> sf.gear.metadata.type.v1.BagsListPallet
	531,  // 461: sf.gear.metadata.type.v1.Utility_DispatchAsCall.im_online:type_name -> sf.gear.metadata.type.v1.ImOnlinePallet
	282,  // 462: sf.gear.metadata.type.v1.Utility_DispatchAsCall.staking:type_name -> sf.gear.metadata.type.v1.StakingPallet
	297,  // 463: sf.gear.metadata.type.v1.Utility_DispatchAsCall.session:type_name -> sf.gear.metadata.type.v1.SessionPallet
	21,   // 464: sf.gear.metadata.type.v1.Utility_DispatchAsCall.treasury:type_name -> sf.gear.metadata.type.v1.TreasuryPallet
	248,  // 465: sf.gear.metadata.type.v1.Utility_DispatchAsCall.utility:type_name -> sf.gear.metadata.type.v1.UtilityPallet
	361,  // 466: sf.gear.metadata.type.v1.Utility_DispatchAsCall.conviction_voting:type_name -> sf.gear.metadata.type.v1.ConvictionVotingPallet
	287,  // 467: sf.gear.metadata.type.v1.Utility_DispatchAsCall.referenda:type_name -> sf.gear.metadata.type.v1.ReferendaPallet
	214,  // 468: sf.gear.metadata.type.v1.Utility_DispatchAsCall.fellowship_collective:type_name -> sf.gear.metadata.type.v1.FellowshipCollectivePallet
	196,  // 469: sf.gear.metadata.type.v1.Utility_DispatchAsCall.fellowship_referenda:type_name -> sf.gear.metadata.type.v1.FellowshipReferendaPallet
	144,  // 470: sf.gear.metadata.type.v1.Utility_DispatchAsCall.whitelist:type_name -> sf.gear.metadata.type.v1.WhitelistPallet
	111,  // 471: sf.gear.metadata.type.v1.Utility_DispatchAsCall.scheduler:type_name -> sf.gear.metadata.type.v1.SchedulerPallet
	29,   // 472: sf.gear.metadata.type.v1.Utility_DispatchAsCall.preimage:type_name -> sf.gear.metadata.type.v1.PreimagePallet
	394,  // 473: sf.gear.metadata.type.v1.Utility_DispatchAsCall.identity:type_name -> sf.gear.metadata.type.v1.IdentityPallet
	434,  // 474: sf.gear.metadata.type.v1.Utility_DispatchAsCall.proxy:type_name -> sf.gear.metadata.type.v1.ProxyPallet
	311,  // 475: sf.gear.metadata.type.v1.Utility_DispatchAsCall.multisig:type_name -> sf.gear.metadata.type.v1.MultisigPallet
	589,  // 476: sf.gear.metadata.type.v1.Utility_DispatchAsCall.election_provider_multi_phase:type_name -> sf.gear.metadata.type.v1.ElectionProviderMultiPhasePallet
	571,  // 477: sf.gear.metadata.type.v1.Utility_DispatchAsCall.bounties:type_name -> sf.gear.metadata.type.v1.BountiesPallet
	162,  // 478: sf.gear.metadata.type.v1.Utility_DispatchAsCall.child_bounties:type_name -> sf.gear.metadata.type.v1.ChildBountiesPallet
	448,  // 479: sf.gear.metadata.type.v1.Utility_DispatchAsCall.nomination_pools:type_name -> sf.gear.metadata.type.v1.NominationPoolsPallet
	368,  // 480: sf.gear.metadata.type.v1.Utility_DispatchAsCall.gear:type_name -> sf.gear.metadata.type.v1.GearPallet
	251,  // 481: sf.gear.metadata.type.v1.Utility_DispatchAsCall.staking_rewards:type_name -> sf.gear.metadata.type.v1.StakingRewardsPallet
	583,  // 482: sf.gear.metadata.type.v1.Utility_DispatchAsCall.gear_voucher:type_name -> sf.gear.metadata.type.v1.GearVoucherPallet
	303,  // 483: sf.gear.metadata.type.v1.NominationPools_NewNominator.noop:type_name -> sf.gear.metadata.type.v1.NominationPools_Noop
	4,    // 484: sf.gear.metadata.type.v1.NominationPools_NewNominator.set:type_name -> sf.gear.metadata.type.v1.NominationPools_Set
	358,  // 485: sf.gear.metadata.type.v1.NominationPools_NewNominator.remove:type_name -> sf.gear.metadata.type.v1.NominationPools_Remove
	30,   // 486: sf.gear.metadata.type.v1.Identity_Value0.none:type_name -> sf.gear.metadata.type.v1.Identity_None
	548,  // 487: sf.gear.metadata.type.v1.Identity_Value0.raw0:type_name -> sf.gear.metadata.type.v1.Identity_Raw0
	433,  // 488: sf.gear.metadata.type.v1.Identity_Value0.raw1:type_name -> sf.gear.metadata.type.v1.Identity_Raw1
	208,  // 489: sf.gear.metadata.type.v1.Identity_Value0.raw2:type_name -> sf.gear.metadata.type.v1.Identity_Raw2
	339,  // 490: sf.gear.metadata.type.v1.Identity_Value0.raw3:type_name -> sf.gear.metadata.type.v1.Identity_Raw3
	165,  // 491: sf.gear.metadata.type.v1.Identity_Value0.raw4:type_name -> sf.gear.metadata.type.v1.Identity_Raw4
	376,  // 492: sf.gear.metadata.type.v1.Identity_Value0.raw5:type_name -> sf.gear.metadata.type.v1.Identity_Raw5
	156,  // 493: sf.gear.metadata.type.v1.Identity_Value0.raw6:type_name -> sf.gear.metadata.type.v1.Identity_Raw6
	555,  // 494: sf.gear.metadata.type.v1.Identity_Value0.raw7:type_name -> sf.gear.metadata.type.v1.Identity_Raw7
	326,  // 495: sf.gear.metadata.type.v1.Identity_Value0.raw8:type_name -> sf.gear.metadata.type.v1.Identity_Raw8
	298,  // 496: sf.gear.metadata.type.v1.Identity_Value0.raw9:type_name -> sf.gear.metadata.type.v1.Identity_Raw9
	415,  // 497: sf.gear.metadata.type.v1.Identity_Value0.raw10:type_name -> sf.gear.metadata.type.v1.Identity_Raw10
	549,  // 498: sf.gear.metadata.type.v1.Identity_Value0.raw11:type_name -> sf.gear.metadata.type.v1.Identity_Raw11
	183,  // 499: sf.gear.metadata.type.v1.Identity_Value0.raw12:type_name -> sf.gear.metadata.type.v1.Identity_Raw12
	576,  // 500: sf.gear.metadata.type.v1.Identity_Value0.raw13:type_name -> sf.gear.metadata.type.v1.Identity_Raw13
	106,  // 501: sf.gear.metadata.type.v1.Identity_Value0.raw14:type_name -> sf.gear.metadata.type.v1.Identity_Raw14
	561,  // 502: sf.gear.metadata.type.v1.Identity_Value0.raw15:type_name -> sf.gear.metadata.type.v1.Identity_Raw15
	237,  // 503: sf.gear.metadata.type.v1.Identity_Value0.raw16:type_name -> sf.gear.metadata.type.v1.Identity_Raw16
	159,  // 504: sf.gear.metadata.type.v1.Identity_Value0.raw17:type_name -> sf.gear.metadata.type.v1.Identity_Raw17
	477,  // 505: sf.gear.metadata.type.v1.Identity_Value0.raw18:type_name -> sf.gear.metadata.type.v1.Identity_Raw18
	317,  // 506: sf.gear.metadata.type.v1.Identity_Value0.raw19:type_name -> sf.gear.metadata.type.v1.Identity_Raw19
	606,  // 507: sf.gear.metadata.type.v1.Identity_Value0.raw20:type_name -> sf.gear.metadata.type.v1.Identity_Raw20
	79,   // 508: sf.gear.metadata.type.v1.Identity_Value0.raw21:type_name -> sf.gear.metadata.type.v1.Identity_Raw21
	34,   // 509: sf.gear.metadata.type.v1.Identity_Value0.raw22:type_name -> sf.gear.metadata.type.v1.Identity_Raw22
	36,   // 510: sf.gear.metadata.type.v1.Identity_Value0.raw23:type_name -> sf.gear.metadata.type.v1.Identity_Raw23
	6,    // 511: sf.gear.metadata.type.v1.Identity_Value0.raw24:type_name -> sf.gear.metadata.type.v1.Identity_Raw24
	542,  // 512: sf.gear.metadata.type.v1.Identity_Value0.raw25:type_name -> sf.gear.metadata.type.v1.Identity_Raw25
	145,  // 513: sf.gear.metadata.type.v1.Identity_Value0.raw26:type_name -> sf.gear.metadata.type.v1.Identity_Raw26
	265,  // 514: sf.gear.metadata.type.v1.Identity_Value0.raw27:type_name -> sf.gear.metadata.type.v1.Identity_Raw27
	387,  // 515: sf.gear.metadata.type.v1.Identity_Value0.raw28:type_name -> sf.gear.metadata.type.v1.Identity_Raw28
	67,   // 516: sf.gear.metadata.type.v1.Identity_Value0.raw29:type_name -> sf.gear.metadata.type.v1.Identity_Raw29
	340,  // 517: sf.gear.metadata.type.v1.Identity_Value0.raw30:type_name -> sf.gear.metadata.type.v1.Identity_Raw30
	289,  // 518: sf.gear.metadata.type.v1.Identity_Value0.raw31:type_name -> sf.gear.metadata.type.v1.Identity_Raw31
	601,  // 519: sf.gear.metadata.type.v1.Identity_Value0.raw32:type_name -> sf.gear.metadata.type.v1.Identity_Raw32
	205,  // 520: sf.gear.metadata.type.v1.Identity_Value0.blake_two256:type_name -> sf.gear.metadata.type.v1.Identity_BlakeTwo256
	83,   // 521: sf.gear.metadata.type.v1.Identity_Value0.sha256:type_name -> sf.gear.metadata.type.v1.Identity_Sha256
	2,    // 522: sf.gear.metadata.type.v1.Identity_Value0.keccak256:type_name -> sf.gear.metadata.type.v1.Identity_Keccak256
	397,  // 523: sf.gear.metadata.type.v1.Identity_Value0.sha_three256:type_name -> sf.gear.metadata.type.v1.Identity_ShaThree256
	30,   // 524: sf.gear.metadata.type.v1.Identity_Twitter.none:type_name -> sf.gear.metadata.type.v1.Identity_None
	548,  // 525: sf.gear.metadata.type.v1.Identity_Twitter.raw0:type_name -> sf.gear.metadata.type.v1.Identity_Raw0
	433,  // 526: sf.gear.metadata.type.v1.Identity_Twitter.raw1:type_name -> sf.gear.metadata.type.v1.Identity_Raw1
	208,  // 527: sf.gear.metadata.type.v1.Identity_Twitter.raw2:type_name -> sf.gear.metadata.type.v1.Identity_Raw2
	339,  // 528: sf.gear.metadata.type.v1.Identity_Twitter.raw3:type_name -> sf.gear.metadata.type.v1.Identity_Raw3
	165,  // 529: sf.gear.metadata.type.v1.Identity_Twitter.raw4:type_name -> sf.gear.metadata.type.v1.Identity_Raw4
	376,  // 530: sf.gear.metadata.type.v1.Identity_Twitter.raw5:type_name -> sf.gear.metadata.type.v1.Identity_Raw5
	156,  // 531: sf.gear.metadata.type.v1.Identity_Twitter.raw6:type_name -> sf.gear.metadata.type.v1.Identity_Raw6
	555,  // 532: sf.gear.metadata.type.v1.Identity_Twitter.raw7:type_name -> sf.gear.metadata.type.v1.Identity_Raw7
	326,  // 533: sf.gear.metadata.type.v1.Identity_Twitter.raw8:type_name -> sf.gear.metadata.type.v1.Identity_Raw8
	298,  // 534: sf.gear.metadata.type.v1.Identity_Twitter.raw9:type_name -> sf.gear.metadata.type.v1.Identity_Raw9
	415,  // 535: sf.gear.metadata.type.v1.Identity_Twitter.raw10:type_name -> sf.gear.metadata.type.v1.Identity_Raw10
	549,  // 536: sf.gear.metadata.type.v1.Identity_Twitter.raw11:type_name -> sf.gear.metadata.type.v1.Identity_Raw11
	183,  // 537: sf.gear.metadata.type.v1.Identity_Twitter.raw12:type_name -> sf.gear.metadata.type.v1.Identity_Raw12
	576,  // 538: sf.gear.metadata.type.v1.Identity_Twitter.raw13:type_name -> sf.gear.metadata.type.v1.Identity_Raw13
	106,  // 539: sf.gear.metadata.type.v1.Identity_Twitter.raw14:type_name -> sf.gear.metadata.type.v1.Identity_Raw14
	561,  // 540: sf.gear.metadata.type.v1.Identity_Twitter.raw15:type_name -> sf.gear.metadata.type.v1.Identity_Raw15
	237,  // 541: sf.gear.metadata.type.v1.Identity_Twitter.raw16:type_name -> sf.gear.metadata.type.v1.Identity_Raw16
	159,  // 542: sf.gear.metadata.type.v1.Identity_Twitter.raw17:type_name -> sf.gear.metadata.type.v1.Identity_Raw17
	477,  // 543: sf.gear.metadata.type.v1.Identity_Twitter.raw18:type_name -> sf.gear.metadata.type.v1.Identity_Raw18
	317,  // 544: sf.gear.metadata.type.v1.Identity_Twitter.raw19:type_name -> sf.gear.metadata.type.v1.Identity_Raw19
	606,  // 545: sf.gear.metadata.type.v1.Identity_Twitter.raw20:type_name -> sf.gear.metadata.type.v1.Identity_Raw20
	79,   // 546: sf.gear.metadata.type.v1.Identity_Twitter.raw21:type_name -> sf.gear.metadata.type.v1.Identity_Raw21
	34,   // 547: sf.gear.metadata.type.v1.Identity_Twitter.raw22:type_name -> sf.gear.metadata.type.v1.Identity_Raw22
	36,   // 548: sf.gear.metadata.type.v1.Identity_Twitter.raw23:type_name -> sf.gear.metadata.type.v1.Identity_Raw23
	6,    // 549: sf.gear.metadata.type.v1.Identity_Twitter.raw24:type_name -> sf.gear.metadata.type.v1.Identity_Raw24
	542,  // 550: sf.gear.metadata.type.v1.Identity_Twitter.raw25:type_name -> sf.gear.metadata.type.v1.Identity_Raw25
	145,  // 551: sf.gear.metadata.type.v1.Identity_Twitter.raw26:type_name -> sf.gear.metadata.type.v1.Identity_Raw26
	265,  // 552: sf.gear.metadata.type.v1.Identity_Twitter.raw27:type_name -> sf.gear.metadata.type.v1.Identity_Raw27
	387,  // 553: sf.gear.metadata.type.v1.Identity_Twitter.raw28:type_name -> sf.gear.metadata.type.v1.Identity_Raw28
	67,   // 554: sf.gear.metadata.type.v1.Identity_Twitter.raw29:type_name -> sf.gear.metadata.type.v1.Identity_Raw29
	340,  // 555: sf.gear.metadata.type.v1.Identity_Twitter.raw30:type_name -> sf.gear.metadata.type.v1.Identity_Raw30
	289,  // 556: sf.gear.metadata.type.v1.Identity_Twitter.raw31:type_name -> sf.gear.metadata.type.v1.Identity_Raw31
	601,  // 557: sf.gear.metadata.type.v1.Identity_Twitter.raw32:type_name -> sf.gear.metadata.type.v1.Identity_Raw32
	205,  // 558: sf.gear.metadata.type.v1.Identity_Twitter.blake_two256:type_name -> sf.gear.metadata.type.v1.Identity_BlakeTwo256
	83,   // 559: sf.gear.metadata.type.v1.Identity_Twitter.sha256:type_name -> sf.gear.metadata.type.v1.Identity_Sha256
	2,    // 560: sf.gear.metadata.type.v1.Identity_Twitter.keccak256:type_name -> sf.gear.metadata.type.v1.Identity_Keccak256
	397,  // 561: sf.gear.metadata.type.v1.Identity_Twitter.sha_three256:type_name -> sf.gear.metadata.type.v1.Identity_ShaThree256
	313,  // 562: sf.gear.metadata.type.v1.Babe_Config.v1:type_name -> sf.gear.metadata.type.v1.Babe_V1
	513,  // 563: sf.gear.metadata.type.v1.FellowshipCollective_Id.value0:type_name -> sf.gear.metadata.type.v1.SpCoreCryptoAccountId32
	521,  // 564: sf.gear.metadata.type.v1.Scheduler_ScheduleNamedAfterCall.maybe_periodic:type_name -> sf.gear.metadata.type.v1.Scheduler_TupleUint32Uint32
	413,  // 565: sf.gear.metadata.type.v1.Scheduler_ScheduleNamedAfterCall.system:type_name -> sf.gear.metadata.type.v1.SystemPallet
	563,  // 566: sf.gear.metadata.type.v1.Scheduler_ScheduleNamedAfterCall.timestamp:type_name -> sf.gear.metadata.type.v1.TimestampPallet
	530,  // 567: sf.gear.metadata.type.v1.Scheduler_ScheduleNamedAfterCall.babe:type_name -> sf.gear.metadata.type.v1.BabePallet
	84,   // 568: sf.gear.metadata.type.v1.Scheduler_ScheduleNamedAfterCall.grandpa:type_name -> sf.gear.metadata.type.v1.GrandpaPallet
	404,  // 569: sf.gear.metadata.type.v1.Scheduler_ScheduleNamedAfterCall.balances:type_name -> sf.gear.metadata.type.v1.BalancesPallet
	436,  // 570: sf.gear.metadata.type.v1.Scheduler_ScheduleNamedAfterCall.vesting:type_name -> sf.gear.metadata.type.v1.VestingPallet
	391,  // 571: sf.gear.metadata.type.v1.Scheduler_ScheduleNamedAfterCall.bags_list:type_name -> sf.gear.metadata.type.v1.BagsListPallet
	531,  // 572: sf.gear.metadata.type.v1.Scheduler_ScheduleNamedAfterCall.im_online:type_name -> sf.gear.metadata.type.v1.ImOnlinePallet
	282,  // 573: sf.gear.metadata.type.v1.Scheduler_ScheduleNamedAfterCall.staking:type_name -> sf.gear.metadata.type.v1.StakingPallet
	297,  // 574: sf.gear.metadata.type.v1.Scheduler_ScheduleNamedAfterCall.session:type_name -> sf.gear.metadata.type.v1.SessionPallet
	21,   // 575: sf.gear.metadata.type.v1.Scheduler_ScheduleNamedAfterCall.treasury:type_name -> sf.gear.metadata.type.v1.TreasuryPallet
	248,  // 576: sf.gear.metadata.type.v1.Scheduler_ScheduleNamedAfterCall.utility:type_name -> sf.gear.metadata.type.v1.UtilityPallet
	361,  // 577: sf.gear.metadata.type.v1.Scheduler_ScheduleNamedAfterCall.conviction_voting:type_name -> sf.gear.metadata.type.v1.ConvictionVotingPallet
	287,  // 578: sf.gear.metadata.type.v1.Scheduler_ScheduleNamedAfterCall.referenda:type_name -> sf.gear.metadata.type.v1.ReferendaPallet
	214,  // 579: sf.gear.metadata.type.v1.Scheduler_ScheduleNamedAfterCall.fellowship_collective:type_name -> sf.gear.metadata.type.v1.FellowshipCollectivePallet
	196,  // 580: sf.gear.metadata.type.v1.Scheduler_ScheduleNamedAfterCall.fellowship_referenda:type_name -> sf.gear.metadata.type.v1.FellowshipReferendaPallet
	144,  // 581: sf.gear.metadata.type.v1.Scheduler_ScheduleNamedAfterCall.whitelist:type_name -> sf.gear.metadata.type.v1.WhitelistPallet
	111,  // 582: sf.gear.metadata.type.v1.Scheduler_ScheduleNamedAfterCall.scheduler:type_name -> sf.gear.metadata.type.v1.SchedulerPallet
	29,   // 583: sf.gear.metadata.type.v1.Scheduler_ScheduleNamedAfterCall.preimage:type_name -> sf.gear.metadata.type.v1.PreimagePallet
	394,  // 584: sf.gear.metadata.type.v1.Scheduler_ScheduleNamedAfterCall.identity:type_name -> sf.gear.metadata.type.v1.IdentityPallet
	434,  // 585: sf.gear.metadata.type.v1.Scheduler_ScheduleNamedAfterCall.proxy:type_name -> sf.gear.metadata.type.v1.ProxyPallet
	311,  // 586: sf.gear.metadata.type.v1.Scheduler_ScheduleNamedAfterCall.multisig:type_name -> sf.gear.metadata.type.v1.MultisigPallet
	589,  // 587: sf.gear.metadata.type.v1.Scheduler_ScheduleNamedAfterCall.election_provider_multi_phase:type_name -> sf.gear.metadata.type.v1.ElectionProviderMultiPhasePallet
	571,  // 588: sf.gear.metadata.type.v1.Scheduler_ScheduleNamedAfterCall.bounties:type_name -> sf.gear.metadata.type.v1.BountiesPallet
	162,  // 589: sf.gear.metadata.type.v1.Scheduler_ScheduleNamedAfterCall.child_bounties:type_name -> sf.gear.metadata.type.v1.ChildBountiesPallet
	448,  // 590: sf.gear.metadata.type.v1.Scheduler_ScheduleNamedAfterCall.nomination_pools:type_name -> sf.gear.metadata.type.v1.NominationPoolsPallet
	368,  // 591: sf.gear.metadata.type.v1.Scheduler_ScheduleNamedAfterCall.gear:type_name -> sf.gear.metadata.type.v1.GearPallet
	251,  // 592: sf.gear.metadata.type.v1.Scheduler_ScheduleNamedAfterCall.staking_rewards:type_name -> sf.gear.metadata.type.v1.StakingRewardsPallet
	583,  // 593: sf.gear.metadata.type.v1.Scheduler_ScheduleNamedAfterCall.gear_voucher:type_name -> sf.gear.metadata.type.v1.GearVoucherPallet
	204,  // 594: sf.gear.metadata.type.v1.Preimage_UnrequestPreimageCall.hash:type_name -> sf.gear.metadata.type.v1.PrimitiveTypesH256
	167,  // 595: sf.gear.metadata.type.v1.ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes3Listuint32.value1:type_name -> sf.gear.metadata.type.v1.ElectionProviderMultiPhase_TupleUint32SpArithmeticPerThingsPerU16
	513,  // 596: sf.gear.metadata.type.v1.ChildBounties_Id.value0:type_name -> sf.gear.metadata.type.v1.SpCoreCryptoAccountId32
	128,  // 597: sf.gear.metadata.type.v1.FellowshipCollective_RemoveMemberCall.who:type_name -> sf.gear.metadata.type.v1.FellowshipCollective_Who
	30,   // 598: sf.gear.metadata.type.v1.Identity_Data.none:type_name -> sf.gear.metadata.type.v1.Identity_None
	548,  // 599: sf.gear.metadata.type.v1.Identity_Data.raw0:type_name -> sf.gear.metadata.type.v1.Identity_Raw0
	433,  // 600: sf.gear.metadata.type.v1.Identity_Data.raw1:type_name -> sf.gear.metadata.type.v1.Identity_Raw1
	208,  // 601: sf.gear.metadata.type.v1.Identity_Data.raw2:type_name -> sf.gear.metadata.type.v1.Identity_Raw2
	339,  // 602: sf.gear.metadata.type.v1.Identity_Data.raw3:type_name -> sf.gear.metadata.type.v1.Identity_Raw3
	165,  // 603: sf.gear.metadata.type.v1.Identity_Data.raw4:type_name -> sf.gear.metadata.type.v1.Identity_Raw4
	376,  // 604: sf.gear.metadata.type.v1.Identity_Data.raw5:type_name -> sf.gear.metadata.type.v1.Identity_Raw5
	156,  // 605: sf.gear.metadata.type.v1.Identity_Data.raw6:type_name -> sf.gear.metadata.type.v1.Identity_Raw6
	555,  // 606: sf.gear.metadata.type.v1.Identity_Data.raw7:type_name -> sf.gear.metadata.type.v1.Identity_Raw7
	326,  // 607: sf.gear.metadata.type.v1.Identity_Data.raw8:type_name -> sf.gear.metadata.type.v1.Identity_Raw8
	298,  // 608: sf.gear.metadata.type.v1.Identity_Data.raw9:type_name -> sf.gear.metadata.type.v1.Identity_Raw9
	415,  // 609: sf.gear.metadata.type.v1.Identity_Data.raw10:type_name -> sf.gear.metadata.type.v1.Identity_Raw10
	549,  // 610: sf.gear.metadata.type.v1.Identity_Data.raw11:type_name -> sf.gear.metadata.type.v1.Identity_Raw11
	183,  // 611: sf.gear.metadata.type.v1.Identity_Data.raw12:type_name -> sf.gear.metadata.type.v1.Identity_Raw12
	576,  // 612: sf.gear.metadata.type.v1.Identity_Data.raw13:type_name -> sf.gear.metadata.type.v1.Identity_Raw13
	106,  // 613: sf.gear.metadata.type.v1.Identity_Data.raw14:type_name -> sf.gear.metadata.type.v1.Identity_Raw14
	561,  // 614: sf.gear.metadata.type.v1.Identity_Data.raw15:type_name -> sf.gear.metadata.type.v1.Identity_Raw15
	237,  // 615: sf.gear.metadata.type.v1.Identity_Data.raw16:type_name -> sf.gear.metadata.type.v1.Identity_Raw16
	159,  // 616: sf.gear.metadata.type.v1.Identity_Data.raw17:type_name -> sf.gear.metadata.type.v1.Identity_Raw17
	477,  // 617: sf.gear.metadata.type.v1.Identity_Data.raw18:type_name -> sf.gear.metadata.type.v1.Identity_Raw18
	317,  // 618: sf.gear.metadata.type.v1.Identity_Data.raw19:type_name -> sf.gear.metadata.type.v1.Identity_Raw19
	606,  // 619: sf.gear.metadata.type.v1.Identity_Data.raw20:type_name -> sf.gear.metadata.type.v1.Identity_Raw20
	79,   // 620: sf.gear.metadata.type.v1.Identity_Data.raw21:type_name -> sf.gear.metadata.type.v1.Identity_Raw21
	34,   // 621: sf.gear.metadata.type.v1.Identity_Data.raw22:type_name -> sf.gear.metadata.type.v1.Identity_Raw22
	36,   // 622: sf.gear.metadata.type.v1.Identity_Data.raw23:type_name -> sf.gear.metadata.type.v1.Identity_Raw23
	6,    // 623: sf.gear.metadata.type.v1.Identity_Data.raw24:type_name -> sf.gear.metadata.type.v1.Identity_Raw24
	542,  // 624: sf.gear.metadata.type.v1.Identity_Data.raw25:type_name -> sf.gear.metadata.type.v1.Identity_Raw25
	145,  // 625: sf.gear.metadata.type.v1.Identity_Data.raw26:type_name -> sf.gear.metadata.type.v1.Identity_Raw26
	265,  // 626: sf.gear.metadata.type.v1.Identity_Data.raw27:type_name -> sf.gear.metadata.type.v1.Identity_Raw27
	387,  // 627: sf.gear.metadata.type.v1.Identity_Data.raw28:type_name -> sf.gear.metadata.type.v1.Identity_Raw28
	67,   // 628: sf.gear.metadata.type.v1.Identity_Data.raw29:type_name -> sf.gear.metadata.type.v1.Identity_Raw29
	340,  // 629: sf.gear.metadata.type.v1.Identity_Data.raw30:type_name -> sf.gear.metadata.type.v1.Identity_Raw30
	289,  // 630: sf.gear.metadata.type.v1.Identity_Data.raw31:type_name -> sf.gear.metadata.type.v1.Identity_Raw31
	601,  // 631: sf.gear.metadata.type.v1.Identity_Data.raw32:type_name -> sf.gear.metadata.type.v1.Identity_Raw32
	205,  // 632: sf.gear.metadata.type.v1.Identity_Data.blake_two256:type_name -> sf.gear.metadata.type.v1.Identity_BlakeTwo256
	83,   // 633: sf.gear.metadata.type.v1.Identity_Data.sha256:type_name -> sf.gear.metadata.type.v1.Identity_Sha256
	2,    // 634: sf.gear.metadata.type.v1.Identity_Data.keccak256:type_name -> sf.gear.metadata.type.v1.Identity_Keccak256
	397,  // 635: sf.gear.metadata.type.v1.Identity_Data.sha_three256:type_name -> sf.gear.metadata.type.v1.Identity_ShaThree256
	167,  // 636: sf.gear.metadata.type.v1.ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes6Listuint32.value1:type_name -> sf.gear.metadata.type.v1.ElectionProviderMultiPhase_TupleUint32SpArithmeticPerThingsPerU16
	578,  // 637: sf.gear.metadata.type.v1.SpRuntimeGenericDigestDigest.logs:type_name -> sf.gear.metadata.type.v1.SpRuntimeGenericDigestDigestItem
	488,  // 638: sf.gear.metadata.type.v1.FellowshipReferenda_Inline.value0:type_name -> sf.gear.metadata.type.v1.BoundedCollectionsBoundedVecBoundedVec
	587,  // 639: sf.gear.metadata.type.v1.Identity_ProvideJudgementCall.target:type_name -> sf.gear.metadata.type.v1.Identity_Target
	400,  // 640: sf.gear.metadata.type.v1.Identity_ProvideJudgementCall.judgement:type_name -> sf.gear.metadata.type.v1.Identity_Judgement
	204,  // 641: sf.gear.metadata.type.v1.Identity_ProvideJudgementCall.identity:type_name -> sf.gear.metadata.type.v1.PrimitiveTypesH256
	233,  // 642: sf.gear.metadata.type.v1.ChildBounties_Curator.id:type_name -> sf.gear.metadata.type.v1.ChildBounties_Id
	75,   // 643: sf.gear.metadata.type.v1.ChildBounties_Curator.index:type_name -> sf.gear.metadata.type.v1.ChildBounties_Index
	511,  // 644: sf.gear.metadata.type.v1.ChildBounties_Curator.raw:type_name -> sf.gear.metadata.type.v1.ChildBounties_Raw
	410,  // 645: sf.gear.metadata.type.v1.ChildBounties_Curator.address32:type_name -> sf.gear.metadata.type.v1.ChildBounties_Address32
	59,   // 646: sf.gear.metadata.type.v1.ChildBounties_Curator.address20:type_name -> sf.gear.metadata.type.v1.ChildBounties_Address20
	585,  // 647: sf.gear.metadata.type.v1.Staking_MinCommission.noop:type_name -> sf.gear.metadata.type.v1.Staking_Noop
	468,  // 648: sf.gear.metadata.type.v1.Staking_MinCommission.set:type_name -> sf.gear.metadata.type.v1.Staking_Set
	245,  // 649: sf.gear.metadata.type.v1.Staking_MinCommission.remove:type_name -> sf.gear.metadata.type.v1.Staking_Remove
	513,  // 650: sf.gear.metadata.type.v1.Signed.value0:type_name -> sf.gear.metadata.type.v1.SpCoreCryptoAccountId32
	446,  // 651: sf.gear.metadata.type.v1.UtilityPallet.batch_call:type_name -> sf.gear.metadata.type.v1.Utility_BatchCall
	55,   // 652: sf.gear.metadata.type.v1.UtilityPallet.as_derivative_call:type_name -> sf.gear.metadata.type.v1.Utility_AsDerivativeCall
	277,  // 653: sf.gear.metadata.type.v1.UtilityPallet.batch_all_call:type_name -> sf.gear.metadata.type.v1.Utility_BatchAllCall
	220,  // 654: sf.gear.metadata.type.v1.UtilityPallet.dispatch_as_call:type_name -> sf.gear.metadata.type.v1.Utility_DispatchAsCall
	442,  // 655: sf.gear.metadata.type.v1.UtilityPallet.force_batch_call:type_name -> sf.gear.metadata.type.v1.Utility_ForceBatchCall
	47,   // 656: sf.gear.metadata.type.v1.UtilityPallet.with_weight_call:type_name -> sf.gear.metadata.type.v1.Utility_WithWeightCall
	513,  // 657: sf.gear.metadata.type.v1.Proxy_Id.value0:type_name -> sf.gear.metadata.type.v1.SpCoreCryptoAccountId32
	38,   // 658: sf.gear.metadata.type.v1.StakingRewardsPallet.refill_call:type_name -> sf.gear.metadata.type.v1.StakingRewards_RefillCall
	39,   // 659: sf.gear.metadata.type.v1.StakingRewardsPallet.force_refill_call:type_name -> sf.gear.metadata.type.v1.StakingRewards_ForceRefillCall
	402,  // 660: sf.gear.metadata.type.v1.StakingRewardsPallet.withdraw_call:type_name -> sf.gear.metadata.type.v1.StakingRewards_WithdrawCall
	607,  // 661: sf.gear.metadata.type.v1.StakingRewardsPallet.align_supply_call:type_name -> sf.gear.metadata.type.v1.StakingRewards_AlignSupplyCall
	122,  // 662: sf.gear.metadata.type.v1.GearVoucher_Call.send_message:type_name -> sf.gear.metadata.type.v1.GearVoucher_SendMessage
	426,  // 663: sf.gear.metadata.type.v1.GearVoucher_Call.send_reply:type_name -> sf.gear.metadata.type.v1.GearVoucher_SendReply
	342,  // 664: sf.gear.metadata.type.v1.GearVoucher_Call.upload_code:type_name -> sf.gear.metadata.type.v1.GearVoucher_UploadCode
	459,  // 665: sf.gear.metadata.type.v1.GearVoucher_Call.decline_voucher:type_name -> sf.gear.metadata.type.v1.GearVoucher_DeclineVoucher
	204,  // 666: sf.gear.metadata.type.v1.SpRuntimeGenericHeaderHeader.parent_hash:type_name -> sf.gear.metadata.type.v1.PrimitiveTypesH256
	204,  // 667: sf.gear.metadata.type.v1.SpRuntimeGenericHeaderHeader.state_root:type_name -> sf.gear.metadata.type.v1.PrimitiveTypesH256
	204,  // 668: sf.gear.metadata.type.v1.SpRuntimeGenericHeaderHeader.extrinsics_root:type_name -> sf.gear.metadata.type.v1.PrimitiveTypesH256
	240,  // 669: sf.gear.metadata.type.v1.SpRuntimeGenericHeaderHeader.digest:type_name -> sf.gear.metadata.type.v1.SpRuntimeGenericDigestDigest
	521,  // 670: sf.gear.metadata.type.v1.Scheduler_ScheduleCall.maybe_periodic:type_name -> sf.gear.metadata.type.v1.Scheduler_TupleUint32Uint32
	413,  // 671: sf.gear.metadata.type.v1.Scheduler_ScheduleCall.system:type_name -> sf.gear.metadata.type.v1.SystemPallet
	563,  // 672: sf.gear.metadata.type.v1.Scheduler_ScheduleCall.timestamp:type_name -> sf.gear.metadata.type.v1.TimestampPallet
	530,  // 673: sf.gear.metadata.type.v1.Scheduler_ScheduleCall.babe:type_name -> sf.gear.metadata.type.v1.BabePallet
	84,   // 674: sf.gear.metadata.type.v1.Scheduler_ScheduleCall.grandpa:type_name -> sf.gear.metadata.type.v1.GrandpaPallet
	404,  // 675: sf.gear.metadata.type.v1.Scheduler_ScheduleCall.balances:type_name -> sf.gear.metadata.type.v1.BalancesPallet
	436,  // 676: sf.gear.metadata.type.v1.Scheduler_ScheduleCall.vesting:type_name -> sf.gear.metadata.type.v1.VestingPallet
	391,  // 677: sf.gear.metadata.type.v1.Scheduler_ScheduleCall.bags_list:type_name -> sf.gear.metadata.type.v1.BagsListPallet
	531,  // 678: sf.gear.metadata.type.v1.Scheduler_ScheduleCall.im_online:type_name -> sf.gear.metadata.type.v1.ImOnlinePallet
	282,  // 679: sf.gear.metadata.type.v1.Scheduler_ScheduleCall.staking:type_name -> sf.gear.metadata.type.v1.StakingPallet
	297,  // 680: sf.gear.metadata.type.v1.Scheduler_ScheduleCall.session:type_name -> sf.gear.metadata.type.v1.SessionPallet
	21,   // 681: sf.gear.metadata.type.v1.Scheduler_ScheduleCall.treasury:type_name -> sf.gear.metadata.type.v1.TreasuryPallet
	248,  // 682: sf.gear.metadata.type.v1.Scheduler_ScheduleCall.utility:type_name -> sf.gear.metadata.type.v1.UtilityPallet
	361,  // 683: sf.gear.metadata.type.v1.Scheduler_ScheduleCall.conviction_voting:type_name -> sf.gear.metadata.type.v1.ConvictionVotingPallet
	287,  // 684: sf.gear.metadata.type.v1.Scheduler_ScheduleCall.referenda:type_name -> sf.gear.metadata.type.v1.ReferendaPallet
	214,  // 685: sf.gear.metadata.type.v1.Scheduler_ScheduleCall.fellowship_collective:type_name -> sf.gear.metadata.type.v1.FellowshipCollectivePallet
	196,  // 686: sf.gear.metadata.type.v1.Scheduler_ScheduleCall.fellowship_referenda:type_name -> sf.gear.metadata.type.v1.FellowshipReferendaPallet
	144,  // 687: sf.gear.metadata.type.v1.Scheduler_ScheduleCall.whitelist:type_name -> sf.gear.metadata.type.v1.WhitelistPallet
	111,  // 688: sf.gear.metadata.type.v1.Scheduler_ScheduleCall.scheduler:type_name -> sf.gear.metadata.type.v1.SchedulerPallet
	29,   // 689: sf.gear.metadata.type.v1.Scheduler_ScheduleCall.preimage:type_name -> sf.gear.metadata.type.v1.PreimagePallet
	394,  // 690: sf.gear.metadata.type.v1.Scheduler_ScheduleCall.identity:type_name -> sf.gear.metadata.type.v1.IdentityPallet
	434,  // 691: sf.gear.metadata.type.v1.Scheduler_ScheduleCall.proxy:type_name -> sf.gear.metadata.type.v1.ProxyPallet
	311,  // 692: sf.gear.metadata.type.v1.Scheduler_ScheduleCall.multisig:type_name -> sf.gear.metadata.type.v1.MultisigPallet
	589,  // 693: sf.gear.metadata.type.v1.Scheduler_ScheduleCall.election_provider_multi_phase:type_name -> sf.gear.metadata.type.v1.ElectionProviderMultiPhasePallet
	571,  // 694: sf.gear.metadata.type.v1.Scheduler_ScheduleCall.bounties:type_name -> sf.gear.metadata.type.v1.BountiesPallet
	162,  // 695: sf.gear.metadata.type.v1.Scheduler_ScheduleCall.child_bounties:type_name -> sf.gear.metadata.type.v1.ChildBountiesPallet
	448,  // 696: sf.gear.metadata.type.v1.Scheduler_ScheduleCall.nomination_pools:type_name -> sf.gear.metadata.type.v1.NominationPoolsPallet
	368,  // 697: sf.gear.metadata.type.v1.Scheduler_ScheduleCall.gear:type_name -> sf.gear.metadata.type.v1.GearPallet
	251,  // 698: sf.gear.metadata.type.v1.Scheduler_ScheduleCall.staking_rewards:type_name -> sf.gear.metadata.type.v1.StakingRewardsPallet
	583,  // 699: sf.gear.metadata.type.v1.Scheduler_ScheduleCall.gear_voucher:type_name -> sf.gear.metadata.type.v1.GearVoucherPallet
	243,  // 700: sf.gear.metadata.type.v1.ChildBounties_ProposeCuratorCall.curator:type_name -> sf.gear.metadata.type.v1.ChildBounties_Curator
	585,  // 701: sf.gear.metadata.type.v1.Staking_MaxNominatorCount.noop:type_name -> sf.gear.metadata.type.v1.Staking_Noop
	468,  // 702: sf.gear.metadata.type.v1.Staking_MaxNominatorCount.set:type_name -> sf.gear.metadata.type.v1.Staking_Set
	245,  // 703: sf.gear.metadata.type.v1.Staking_MaxNominatorCount.remove:type_name -> sf.gear.metadata.type.v1.Staking_Remove
	188,  // 704: sf.gear.metadata.type.v1.Referenda_EnactmentMoment.at:type_name -> sf.gear.metadata.type.v1.Referenda_At
	381,  // 705: sf.gear.metadata.type.v1.Referenda_EnactmentMoment.after:type_name -> sf.gear.metadata.type.v1.Referenda_After
	513,  // 706: sf.gear.metadata.type.v1.Staking_ReapStashCall.stash:type_name -> sf.gear.metadata.type.v1.SpCoreCryptoAccountId32
	308,  // 707: sf.gear.metadata.type.v1.Identity_RenameSubCall.sub:type_name -> sf.gear.metadata.type.v1.Identity_Sub
	238,  // 708: sf.gear.metadata.type.v1.Identity_RenameSubCall.data:type_name -> sf.gear.metadata.type.v1.Identity_Data
	302,  // 709: sf.gear.metadata.type.v1.Proxy_ProxyCall.real:type_name -> sf.gear.metadata.type.v1.Proxy_Real
	23,   // 710: sf.gear.metadata.type.v1.Proxy_ProxyCall.force_proxy_type:type_name -> sf.gear.metadata.type.v1.Proxy_ForceProxyType
	413,  // 711: sf.gear.metadata.type.v1.Proxy_ProxyCall.system:type_name -> sf.gear.metadata.type.v1.SystemPallet
	563,  // 712: sf.gear.metadata.type.v1.Proxy_ProxyCall.timestamp:type_name -> sf.gear.metadata.type.v1.TimestampPallet
	530,  // 713: sf.gear.metadata.type.v1.Proxy_ProxyCall.babe:type_name -> sf.gear.metadata.type.v1.BabePallet
	84,   // 714: sf.gear.metadata.type.v1.Proxy_ProxyCall.grandpa:type_name -> sf.gear.metadata.type.v1.GrandpaPallet
	404,  // 715: sf.gear.metadata.type.v1.Proxy_ProxyCall.balances:type_name -> sf.gear.metadata.type.v1.BalancesPallet
	436,  // 716: sf.gear.metadata.type.v1.Proxy_ProxyCall.vesting:type_name -> sf.gear.metadata.type.v1.VestingPallet
	391,  // 717: sf.gear.metadata.type.v1.Proxy_ProxyCall.bags_list:type_name -> sf.gear.metadata.type.v1.BagsListPallet
	531,  // 718: sf.gear.metadata.type.v1.Proxy_ProxyCall.im_online:type_name -> sf.gear.metadata.type.v1.ImOnlinePallet
	282,  // 719: sf.gear.metadata.type.v1.Proxy_ProxyCall.staking:type_name -> sf.gear.metadata.type.v1.StakingPallet
	297,  // 720: sf.gear.metadata.type.v1.Proxy_ProxyCall.session:type_name -> sf.gear.metadata.type.v1.SessionPallet
	21,   // 721: sf.gear.metadata.type.v1.Proxy_ProxyCall.treasury:type_name -> sf.gear.metadata.type.v1.TreasuryPallet
	248,  // 722: sf.gear.metadata.type.v1.Proxy_ProxyCall.utility:type_name -> sf.gear.metadata.type.v1.UtilityPallet
	361,  // 723: sf.gear.metadata.type.v1.Proxy_ProxyCall.conviction_voting:type_name -> sf.gear.metadata.type.v1.ConvictionVotingPallet
	287,  // 724: sf.gear.metadata.type.v1.Proxy_ProxyCall.referenda:type_name -> sf.gear.metadata.type.v1.ReferendaPallet
	214,  // 725: sf.gear.metadata.type.v1.Proxy_ProxyCall.fellowship_collective:type_name -> sf.gear.metadata.type.v1.FellowshipCollectivePallet
	196,  // 726: sf.gear.metadata.type.v1.Proxy_ProxyCall.fellowship_referenda:type_name -> sf.gear.metadata.type.v1.FellowshipReferendaPallet
	144,  // 727: sf.gear.metadata.type.v1.Proxy_ProxyCall.whitelist:type_name -> sf.gear.metadata.type.v1.WhitelistPallet
	111,  // 728: sf.gear.metadata.type.v1.Proxy_ProxyCall.scheduler:type_name -> sf.gear.metadata.type.v1.SchedulerPallet
	29,   // 729: sf.gear.metadata.type.v1.Proxy_ProxyCall.preimage:type_name -> sf.gear.metadata.type.v1.PreimagePallet
	394,  // 730: sf.gear.metadata.type.v1.Proxy_ProxyCall.identity:type_name -> sf.gear.metadata.type.v1.IdentityPallet
	434,  // 731: sf.gear.metadata.type.v1.Proxy_ProxyCall.proxy:type_name -> sf.gear.metadata.type.v1.ProxyPallet
	311,  // 732: sf.gear.metadata.type.v1.Proxy_ProxyCall.multisig:type_name -> sf.gear.metadata.type.v1.MultisigPallet
	589,  // 733: sf.gear.metadata.type.v1.Proxy_ProxyCall.election_provider_multi_phase:type_name -> sf.gear.metadata.type.v1.ElectionProviderMultiPhasePallet
	571,  // 734: sf.gear.metadata.type.v1.Proxy_ProxyCall.bounties:type_name -> sf.gear.metadata.type.v1.BountiesPallet
	162,  // 735: sf.gear.metadata.type.v1.Proxy_ProxyCall.child_bounties:type_name -> sf.gear.metadata.type.v1.ChildBountiesPallet
	448,  // 736: sf.gear.metadata.type.v1.Proxy_ProxyCall.nomination_pools:type_name -> sf.gear.metadata.type.v1.NominationPoolsPallet
	368,  // 737: sf.gear.metadata.type.v1.Proxy_ProxyCall.gear:type_name -> sf.gear.metadata.type.v1.GearPallet
	251,  // 738: sf.gear.metadata.type.v1.Proxy_ProxyCall.staking_rewards:type_name -> sf.gear.metadata.type.v1.StakingRewardsPallet
	583,  // 739: sf.gear.metadata.type.v1.Proxy_ProxyCall.gear_voucher:type_name -> sf.gear.metadata.type.v1.GearVoucherPallet
	167,  // 740: sf.gear.metadata.type.v1.ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes15Listuint32.value1:type_name -> sf.gear.metadata.type.v1.ElectionProviderMultiPhase_TupleUint32SpArithmeticPerThingsPerU16
	513,  // 741: sf.gear.metadata.type.v1.StakingRewards_Id.value0:type_name -> sf.gear.metadata.type.v1.SpCoreCryptoAccountId32
	513,  // 742: sf.gear.metadata.type.v1.GearVoucher_UpdateCall.spender:type_name -> sf.gear.metadata.type.v1.SpCoreCryptoAccountId32
	171,  // 743: sf.gear.metadata.type.v1.GearVoucher_UpdateCall.voucher_id:type_name -> sf.gear.metadata.type.v1.GearVoucher_PalletGearVoucherInternalVoucherId
	513,  // 744: sf.gear.metadata.type.v1.GearVoucher_UpdateCall.move_ownership:type_name -> sf.gear.metadata.type.v1.SpCoreCryptoAccountId32
	20,   // 745: sf.gear.metadata.type.v1.GearVoucher_UpdateCall.append_programs:type_name -> sf.gear.metadata.type.v1.GearVoucher_AppendPrograms
	70,   // 746: sf.gear.metadata.type.v1.FinalityGrandpaEquivocation.identity:type_name -> sf.gear.metadata.type.v1.SpConsensusGrandpaAppPublic
	482,  // 747: sf.gear.metadata.type.v1.FinalityGrandpaEquivocation.first:type_name -> sf.gear.metadata.type.v1.TupleFinalityGrandpaPrevotespConsensusGrandpaAppSignature
	482,  // 748: sf.gear.metadata.type.v1.FinalityGrandpaEquivocation.second:type_name -> sf.gear.metadata.type.v1.TupleFinalityGrandpaPrevotespConsensusGrandpaAppSignature
	569,  // 749: sf.gear.metadata.type.v1.Utility_BatchAllCall.calls:type_name -> sf.gear.metadata.type.v1.VaraRuntimeRuntimeCall
	167,  // 750: sf.gear.metadata.type.v1.ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes14Listuint32.value1:type_name -> sf.gear.metadata.type.v1.ElectionProviderMultiPhase_TupleUint32SpArithmeticPerThingsPerU16
	261,  // 751: sf.gear.metadata.type.v1.Staking_TupleNull.value:type_name -> sf.gear.metadata.type.v1.TupleNull
	81,   // 752: sf.gear.metadata.type.v1.SpRuntimeMultiaddressMultiAddress.targets:type_name -> sf.gear.metadata.type.v1.Staking_Targets
	455,  // 753: sf.gear.metadata.type.v1.StakingPallet.bond_call:type_name -> sf.gear.metadata.type.v1.Staking_BondCall
	545,  // 754: sf.gear.metadata.type.v1.StakingPallet.bond_extra_call:type_name -> sf.gear.metadata.type.v1.Staking_BondExtraCall
	62,   // 755: sf.gear.metadata.type.v1.StakingPallet.unbond_call:type_name -> sf.gear.metadata.type.v1.Staking_UnbondCall
	150,  // 756: sf.gear.metadata.type.v1.StakingPallet.withdraw_unbonded_call:type_name -> sf.gear.metadata.type.v1.Staking_WithdrawUnbondedCall
	467,  // 757: sf.gear.metadata.type.v1.StakingPallet.validate_call:type_name -> sf.gear.metadata.type.v1.Staking_ValidateCall
	66,   // 758: sf.gear.metadata.type.v1.StakingPallet.nominate_call:type_name -> sf.gear.metadata.type.v1.Staking_NominateCall
	97,   // 759: sf.gear.metadata.type.v1.StakingPallet.chill_call:type_name -> sf.gear.metadata.type.v1.Staking_ChillCall
	199,  // 760: sf.gear.metadata.type.v1.StakingPallet.set_payee_call:type_name -> sf.gear.metadata.type.v1.Staking_SetPayeeCall
	558,  // 761: sf.gear.metadata.type.v1.StakingPallet.set_controller_call:type_name -> sf.gear.metadata.type.v1.Staking_SetControllerCall
	212,  // 762: sf.gear.metadata.type.v1.StakingPallet.set_validator_count_call:type_name -> sf.gear.metadata.type.v1.Staking_SetValidatorCountCall
	185,  // 763: sf.gear.metadata.type.v1.StakingPallet.increase_validator_count_call:type_name -> sf.gear.metadata.type.v1.Staking_IncreaseValidatorCountCall
	77,   // 764: sf.gear.metadata.type.v1.StakingPallet.scale_validator_count_call:type_name -> sf.gear.metadata.type.v1.Staking_ScaleValidatorCountCall
	554,  // 765: sf.gear.metadata.type.v1.StakingPallet.force_no_eras_call:type_name -> sf.gear.metadata.type.v1.Staking_ForceNoErasCall
	392,  // 766: sf.gear.metadata.type.v1.StakingPallet.force_new_era_call:type_name -> sf.gear.metadata.type.v1.Staking_ForceNewEraCall
	9,    // 767: sf.gear.metadata.type.v1.StakingPallet.set_invulnerables_call:type_name -> sf.gear.metadata.type.v1.Staking_SetInvulnerablesCall
	10,   // 768: sf.gear.metadata.type.v1.StakingPallet.force_unstake_call:type_name -> sf.gear.metadata.type.v1.Staking_ForceUnstakeCall
	568,  // 769: sf.gear.metadata.type.v1.StakingPallet.force_new_era_always_call:type_name -> sf.gear.metadata.type.v1.Staking_ForceNewEraAlwaysCall
	423,  // 770: sf.gear.metadata.type.v1.StakingPallet.cancel_deferred_slash_call:type_name -> sf.gear.metadata.type.v1.Staking_CancelDeferredSlashCall
	546,  // 771: sf.gear.metadata.type.v1.StakingPallet.payout_stakers_call:type_name -> sf.gear.metadata.type.v1.Staking_PayoutStakersCall
	186,  // 772: sf.gear.metadata.type.v1.StakingPallet.rebond_call:type_name -> sf.gear.metadata.type.v1.Staking_RebondCall
	262,  // 773: sf.gear.metadata.type.v1.StakingPallet.reap_stash_call:type_name -> sf.gear.metadata.type.v1.Staking_ReapStashCall
	218,  // 774: sf.gear.metadata.type.v1.StakingPallet.kick_call:type_name -> sf.gear.metadata.type.v1.Staking_KickCall
	215,  // 775: sf.gear.metadata.type.v1.StakingPallet.set_staking_configs_call:type_name -> sf.gear.metadata.type.v1.Staking_SetStakingConfigsCall
	532,  // 776: sf.gear.metadata.type.v1.StakingPallet.chill_other_call:type_name -> sf.gear.metadata.type.v1.Staking_ChillOtherCall
	337,  // 777: sf.gear.metadata.type.v1.StakingPallet.force_apply_min_commission_call:type_name -> sf.gear.metadata.type.v1.Staking_ForceApplyMinCommissionCall
	411,  // 778: sf.gear.metadata.type.v1.StakingPallet.set_min_commission_call:type_name -> sf.gear.metadata.type.v1.Staking_SetMinCommissionCall
	71,   // 779: sf.gear.metadata.type.v1.ConvictionVoting_Vote.standard:type_name -> sf.gear.metadata.type.v1.ConvictionVoting_Standard
	22,   // 780: sf.gear.metadata.type.v1.ConvictionVoting_Vote.split:type_name -> sf.gear.metadata.type.v1.ConvictionVoting_Split
	63,   // 781: sf.gear.metadata.type.v1.ConvictionVoting_Vote.split_abstain:type_name -> sf.gear.metadata.type.v1.ConvictionVoting_SplitAbstain
	513,  // 782: sf.gear.metadata.type.v1.GearVoucher_RevokeCall.spender:type_name -> sf.gear.metadata.type.v1.SpCoreCryptoAccountId32
	171,  // 783: sf.gear.metadata.type.v1.GearVoucher_RevokeCall.voucher_id:type_name -> sf.gear.metadata.type.v1.GearVoucher_PalletGearVoucherInternalVoucherId
	513,  // 784: sf.gear.metadata.type.v1.Vesting_Id.value0:type_name -> sf.gear.metadata.type.v1.SpCoreCryptoAccountId32
	382,  // 785: sf.gear.metadata.type.v1.ReferendaPallet.submit_call:type_name -> sf.gear.metadata.type.v1.Referenda_SubmitCall
	438,  // 786: sf.gear.metadata.type.v1.ReferendaPallet.place_decision_deposit_call:type_name -> sf.gear.metadata.type.v1.Referenda_PlaceDecisionDepositCall
	157,  // 787: sf.gear.metadata.type.v1.ReferendaPallet.refund_decision_deposit_call:type_name -> sf.gear.metadata.type.v1.Referenda_RefundDecisionDepositCall
	45,   // 788: sf.gear.metadata.type.v1.ReferendaPallet.cancel_call:type_name -> sf.gear.metadata.type.v1.Referenda_CancelCall
	46,   // 789: sf.gear.metadata.type.v1.ReferendaPallet.kill_call:type_name -> sf.gear.metadata.type.v1.Referenda_KillCall
	98,   // 790: sf.gear.metadata.type.v1.ReferendaPallet.nudge_referendum_call:type_name -> sf.gear.metadata.type.v1.Referenda_NudgeReferendumCall
	570,  // 791: sf.gear.metadata.type.v1.ReferendaPallet.one_fewer_deciding_call:type_name -> sf.gear.metadata.type.v1.Referenda_OneFewerDecidingCall
	131,  // 792: sf.gear.metadata.type.v1.ReferendaPallet.refund_submission_deposit_call:type_name -> sf.gear.metadata.type.v1.Referenda_RefundSubmissionDepositCall
	547,  // 793: sf.gear.metadata.type.v1.ReferendaPallet.set_metadata_call:type_name -> sf.gear.metadata.type.v1.Referenda_SetMetadataCall
	204,  // 794: sf.gear.metadata.type.v1.FellowshipReferenda_SetMetadataCall.maybe_hash:type_name -> sf.gear.metadata.type.v1.PrimitiveTypesH256
	222,  // 795: sf.gear.metadata.type.v1.Identity_TuplePalletIdentityTypesDatapalletIdentityTypesData.value0:type_name -> sf.gear.metadata.type.v1.Identity_Value0
	347,  // 796: sf.gear.metadata.type.v1.Identity_TuplePalletIdentityTypesDatapalletIdentityTypesData.value1:type_name -> sf.gear.metadata.type.v1.Identity_Value1
	449,  // 797: sf.gear.metadata.type.v1.Balances_Dest.id:type_name -> sf.gear.metadata.type.v1.Balances_Id
	557,  // 798: sf.gear.metadata.type.v1.Balances_Dest.index:type_name -> sf.gear.metadata.type.v1.Balances_Index
	374,  // 799: sf.gear.metadata.type.v1.Balances_Dest.raw:type_name -> sf.gear.metadata.type.v1.Balances_Raw
	232,  // 800: sf.gear.metadata.type.v1.Balances_Dest.address32:type_name -> sf.gear.metadata.type.v1.Balances_Address32
	269,  // 801: sf.gear.metadata.type.v1.Balances_Dest.address20:type_name -> sf.gear.metadata.type.v1.Balances_Address20
	261,  // 802: sf.gear.metadata.type.v1.Bounties_TupleNull.value:type_name -> sf.gear.metadata.type.v1.TupleNull
	315,  // 803: sf.gear.metadata.type.v1.SessionPallet.set_keys_call:type_name -> sf.gear.metadata.type.v1.Session_SetKeysCall
	105,  // 804: sf.gear.metadata.type.v1.SessionPallet.purge_keys_call:type_name -> sf.gear.metadata.type.v1.Session_PurgeKeysCall
	249,  // 805: sf.gear.metadata.type.v1.Proxy_Real.id:type_name -> sf.gear.metadata.type.v1.Proxy_Id
	112,  // 806: sf.gear.metadata.type.v1.Proxy_Real.index:type_name -> sf.gear.metadata.type.v1.Proxy_Index
	293,  // 807: sf.gear.metadata.type.v1.Proxy_Real.raw:type_name -> sf.gear.metadata.type.v1.Proxy_Raw
	602,  // 808: sf.gear.metadata.type.v1.Proxy_Real.address32:type_name -> sf.gear.metadata.type.v1.Proxy_Address32
	140,  // 809: sf.gear.metadata.type.v1.Proxy_Real.address20:type_name -> sf.gear.metadata.type.v1.Proxy_Address20
	303,  // 810: sf.gear.metadata.type.v1.NominationPools_MaxPools.noop:type_name -> sf.gear.metadata.type.v1.NominationPools_Noop
	4,    // 811: sf.gear.metadata.type.v1.NominationPools_MaxPools.set:type_name -> sf.gear.metadata.type.v1.NominationPools_Set
	358,  // 812: sf.gear.metadata.type.v1.NominationPools_MaxPools.remove:type_name -> sf.gear.metadata.type.v1.NominationPools_Remove
	428,  // 813: sf.gear.metadata.type.v1.Treasury_ProposeSpendCall.beneficiary:type_name -> sf.gear.metadata.type.v1.Treasury_Beneficiary
	261,  // 814: sf.gear.metadata.type.v1.ConvictionVoting_TupleNull.value:type_name -> sf.gear.metadata.type.v1.TupleNull
	354,  // 815: sf.gear.metadata.type.v1.ConvictionVoting_UnlockCall.target:type_name -> sf.gear.metadata.type.v1.ConvictionVoting_Target
	356,  // 816: sf.gear.metadata.type.v1.Identity_Sub.id:type_name -> sf.gear.metadata.type.v1.Identity_Id
	362,  // 817: sf.gear.metadata.type.v1.Identity_Sub.index:type_name -> sf.gear.metadata.type.v1.Identity_Index
	152,  // 818: sf.gear.metadata.type.v1.Identity_Sub.raw:type_name -> sf.gear.metadata.type.v1.Identity_Raw
	586,  // 819: sf.gear.metadata.type.v1.Identity_Sub.address32:type_name -> sf.gear.metadata.type.v1.Identity_Address32
	379,  // 820: sf.gear.metadata.type.v1.Identity_Sub.address20:type_name -> sf.gear.metadata.type.v1.Identity_Address20
	478,  // 821: sf.gear.metadata.type.v1.MultisigPallet.as_multi_threshold1_call:type_name -> sf.gear.metadata.type.v1.Multisig_AsMultiThreshold1Call
	7,    // 822: sf.gear.metadata.type.v1.MultisigPallet.as_multi_call:type_name -> sf.gear.metadata.type.v1.Multisig_AsMultiCall
	56,   // 823: sf.gear.metadata.type.v1.MultisigPallet.approve_as_multi_call:type_name -> sf.gear.metadata.type.v1.Multisig_ApproveAsMultiCall
	366,  // 824: sf.gear.metadata.type.v1.MultisigPallet.cancel_as_multi_call:type_name -> sf.gear.metadata.type.v1.Multisig_CancelAsMultiCall
	604,  // 825: sf.gear.metadata.type.v1.Babe_V1.c:type_name -> sf.gear.metadata.type.v1.Babe_TupleUint64Uint64
	359,  // 826: sf.gear.metadata.type.v1.Babe_V1.allowed_slots:type_name -> sf.gear.metadata.type.v1.AllowedSlots
	525,  // 827: sf.gear.metadata.type.v1.Session_SetKeysCall.keys:type_name -> sf.gear.metadata.type.v1.VaraRuntimeSessionKeys
	513,  // 828: sf.gear.metadata.type.v1.Treasury_Id.value0:type_name -> sf.gear.metadata.type.v1.SpCoreCryptoAccountId32
	261,  // 829: sf.gear.metadata.type.v1.StakingRewards_TupleNull.value:type_name -> sf.gear.metadata.type.v1.TupleNull
	308,  // 830: sf.gear.metadata.type.v1.Identity_AddSubCall.sub:type_name -> sf.gear.metadata.type.v1.Identity_Sub
	238,  // 831: sf.gear.metadata.type.v1.Identity_AddSubCall.data:type_name -> sf.gear.metadata.type.v1.Identity_Data
	167,  // 832: sf.gear.metadata.type.v1.ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes7Listuint32.value1:type_name -> sf.gear.metadata.type.v1.ElectionProviderMultiPhase_TupleUint32SpArithmeticPerThingsPerU16
	303,  // 833: sf.gear.metadata.type.v1.NominationPools_GlobalMaxCommission.noop:type_name -> sf.gear.metadata.type.v1.NominationPools_Noop
	4,    // 834: sf.gear.metadata.type.v1.NominationPools_GlobalMaxCommission.set:type_name -> sf.gear.metadata.type.v1.NominationPools_Set
	358,  // 835: sf.gear.metadata.type.v1.NominationPools_GlobalMaxCommission.remove:type_name -> sf.gear.metadata.type.v1.NominationPools_Remove
	30,   // 836: sf.gear.metadata.type.v1.Identity_Image.none:type_name -> sf.gear.metadata.type.v1.Identity_None
	548,  // 837: sf.gear.metadata.type.v1.Identity_Image.raw0:type_name -> sf.gear.metadata.type.v1.Identity_Raw0
	433,  // 838: sf.gear.metadata.type.v1.Identity_Image.raw1:type_name -> sf.gear.metadata.type.v1.Identity_Raw1
	208,  // 839: sf.gear.metadata.type.v1.Identity_Image.raw2:type_name -> sf.gear.metadata.type.v1.Identity_Raw2
	339,  // 840: sf.gear.metadata.type.v1.Identity_Image.raw3:type_name -> sf.gear.metadata.type.v1.Identity_Raw3
	165,  // 841: sf.gear.metadata.type.v1.Identity_Image.raw4:type_name -> sf.gear.metadata.type.v1.Identity_Raw4
	376,  // 842: sf.gear.metadata.type.v1.Identity_Image.raw5:type_name -> sf.gear.metadata.type.v1.Identity_Raw5
	156,  // 843: sf.gear.metadata.type.v1.Identity_Image.raw6:type_name -> sf.gear.metadata.type.v1.Identity_Raw6
	555,  // 844: sf.gear.metadata.type.v1.Identity_Image.raw7:type_name -> sf.gear.metadata.type.v1.Identity_Raw7
	326,  // 845: sf.gear.metadata.type.v1.Identity_Image.raw8:type_name -> sf.gear.metadata.type.v1.Identity_Raw8
	298,  // 846: sf.gear.metadata.type.v1.Identity_Image.raw9:type_name -> sf.gear.metadata.type.v1.Identity_Raw9
	415,  // 847: sf.gear.metadata.type.v1.Identity_Image.raw10:type_name -> sf.gear.metadata.type.v1.Identity_Raw10
	549,  // 848: sf.gear.metadata.type.v1.Identity_Image.raw11:type_name -> sf.gear.metadata.type.v1.Identity_Raw11
	183,  // 849: sf.gear.metadata.type.v1.Identity_Image.raw12:type_name -> sf.gear.metadata.type.v1.Identity_Raw12
	576,  // 850: sf.gear.metadata.type.v1.Identity_Image.raw13:type_name -> sf.gear.metadata.type.v1.Identity_Raw13
	106,  // 851: sf.gear.metadata.type.v1.Identity_Image.raw14:type_name -> sf.gear.metadata.type.v1.Identity_Raw14
	561,  // 852: sf.gear.metadata.type.v1.Identity_Image.raw15:type_name -> sf.gear.metadata.type.v1.Identity_Raw15
	237,  // 853: sf.gear.metadata.type.v1.Identity_Image.raw16:type_name -> sf.gear.metadata.type.v1.Identity_Raw16
	159,  // 854: sf.gear.metadata.type.v1.Identity_Image.raw17:type_name -> sf.gear.metadata.type.v1.Identity_Raw17
	477,  // 855: sf.gear.metadata.type.v1.Identity_Image.raw18:type_name -> sf.gear.metadata.type.v1.Identity_Raw18
	317,  // 856: sf.gear.metadata.type.v1.Identity_Image.raw19:type_name -> sf.gear.metadata.type.v1.Identity_Raw19
	606,  // 857: sf.gear.metadata.type.v1.Identity_Image.raw20:type_name -> sf.gear.metadata.type.v1.Identity_Raw20
	79,   // 858: sf.gear.metadata.type.v1.Identity_Image.raw21:type_name -> sf.gear.metadata.type.v1.Identity_Raw21
	34,   // 859: sf.gear.metadata.type.v1.Identity_Image.raw22:type_name -> sf.gear.metadata.type.v1.Identity_Raw22
	36,   // 860: sf.gear.metadata.type.v1.Identity_Image.raw23:type_name -> sf.gear.metadata.type.v1.Identity_Raw23
	6,    // 861: sf.gear.metadata.type.v1.Identity_Image.raw24:type_name -> sf.gear.metadata.type.v1.Identity_Raw24
	542,  // 862: sf.gear.metadata.type.v1.Identity_Image.raw25:type_name -> sf.gear.metadata.type.v1.Identity_Raw25
	145,  // 863: sf.gear.metadata.type.v1.Identity_Image.raw26:type_name -> sf.gear.metadata.type.v1.Identity_Raw26
	265,  // 864: sf.gear.metadata.type.v1.Identity_Image.raw27:type_name -> sf.gear.metadata.type.v1.Identity_Raw27
	387,  // 865: sf.gear.metadata.type.v1.Identity_Image.raw28:type_name -> sf.gear.metadata.type.v1.Identity_Raw28
	67,   // 866: sf.gear.metadata.type.v1.Identity_Image.raw29:type_name -> sf.gear.metadata.type.v1.Identity_Raw29
	340,  // 867: sf.gear.metadata.type.v1.Identity_Image.raw30:type_name -> sf.gear.metadata.type.v1.Identity_Raw30
	289,  // 868: sf.gear.metadata.type.v1.Identity_Image.raw31:type_name -> sf.gear.metadata.type.v1.Identity_Raw31
	601,  // 869: sf.gear.metadata.type.v1.Identity_Image.raw32:type_name -> sf.gear.metadata.type.v1.Identity_Raw32
	205,  // 870: sf.gear.metadata.type.v1.Identity_Image.blake_two256:type_name -> sf.gear.metadata.type.v1.Identity_BlakeTwo256
	83,   // 871: sf.gear.metadata.type.v1.Identity_Image.sha256:type_name -> sf.gear.metadata.type.v1.Identity_Sha256
	2,    // 872: sf.gear.metadata.type.v1.Identity_Image.keccak256:type_name -> sf.gear.metadata.type.v1.Identity_Keccak256
	397,  // 873: sf.gear.metadata.type.v1.Identity_Image.sha_three256:type_name -> sf.gear.metadata.type.v1.Identity_ShaThree256
	460,  // 874: sf.gear.metadata.type.v1.TupleFinalityGrandpaPrecommitspConsensusGrandpaAppSignature.value0:type_name -> sf.gear.metadata.type.v1.FinalityGrandpaPrecommit
	136,  // 875: sf.gear.metadata.type.v1.TupleFinalityGrandpaPrecommitspConsensusGrandpaAppSignature.value1:type_name -> sf.gear.metadata.type.v1.SpConsensusGrandpaAppSignature
	354,  // 876: sf.gear.metadata.type.v1.ConvictionVoting_RemoveOtherVoteCall.target:type_name -> sf.gear.metadata.type.v1.ConvictionVoting_Target
	294,  // 877: sf.gear.metadata.type.v1.Bounties_Index.value0:type_name -> sf.gear.metadata.type.v1.Bounties_TupleNull
	57,   // 878: sf.gear.metadata.type.v1.SpNposElectionsSupport.voters:type_name -> sf.gear.metadata.type.v1.ElectionProviderMultiPhase_TupleSpCoreCryptoAccountId32String
	303,  // 879: sf.gear.metadata.type.v1.NominationPools_NewBouncer.noop:type_name -> sf.gear.metadata.type.v1.NominationPools_Noop
	4,    // 880: sf.gear.metadata.type.v1.NominationPools_NewBouncer.set:type_name -> sf.gear.metadata.type.v1.NominationPools_Set
	358,  // 881: sf.gear.metadata.type.v1.NominationPools_NewBouncer.remove:type_name -> sf.gear.metadata.type.v1.NominationPools_Remove
	292,  // 882: sf.gear.metadata.type.v1.Balances_TransferKeepAliveCall.dest:type_name -> sf.gear.metadata.type.v1.Balances_Dest
	513,  // 883: sf.gear.metadata.type.v1.Staking_ForceApplyMinCommissionCall.validator_stash:type_name -> sf.gear.metadata.type.v1.SpCoreCryptoAccountId32
	353,  // 884: sf.gear.metadata.type.v1.Vesting_VestOtherCall.target:type_name -> sf.gear.metadata.type.v1.Vesting_Target
	30,   // 885: sf.gear.metadata.type.v1.Identity_Value1.none:type_name -> sf.gear.metadata.type.v1.Identity_None
	548,  // 886: sf.gear.metadata.type.v1.Identity_Value1.raw0:type_name -> sf.gear.metadata.type.v1.Identity_Raw0
	433,  // 887: sf.gear.metadata.type.v1.Identity_Value1.raw1:type_name -> sf.gear.metadata.type.v1.Identity_Raw1
	208,  // 888: sf.gear.metadata.type.v1.Identity_Value1.raw2:type_name -> sf.gear.metadata.type.v1.Identity_Raw2
	339,  // 889: sf.gear.metadata.type.v1.Identity_Value1.raw3:type_name -> sf.gear.metadata.type.v1.Identity_Raw3
	165,  // 890: sf.gear.metadata.type.v1.Identity_Value1.raw4:type_name -> sf.gear.metadata.type.v1.Identity_Raw4
	376,  // 891: sf.gear.metadata.type.v1.Identity_Value1.raw5:type_name -> sf.gear.metadata.type.v1.Identity_Raw5
	156,  // 892: sf.gear.metadata.type.v1.Identity_Value1.raw6:type_name -> sf.gear.metadata.type.v1.Identity_Raw6
	555,  // 893: sf.gear.metadata.type.v1.Identity_Value1.raw7:type_name -> sf.gear.metadata.type.v1.Identity_Raw7
	326,  // 894: sf.gear.metadata.type.v1.Identity_Value1.raw8:type_name -> sf.gear.metadata.type.v1.Identity_Raw8
	298,  // 895: sf.gear.metadata.type.v1.Identity_Value1.raw9:type_name -> sf.gear.metadata.type.v1.Identity_Raw9
	415,  // 896: sf.gear.metadata.type.v1.Identity_Value1.raw10:type_name -> sf.gear.metadata.type.v1.Identity_Raw10
	549,  // 897: sf.gear.metadata.type.v1.Identity_Value1.raw11:type_name -> sf.gear.metadata.type.v1.Identity_Raw11
	183,  // 898: sf.gear.metadata.type.v1.Identity_Value1.raw12:type_name -> sf.gear.metadata.type.v1.Identity_Raw12
	576,  // 899: sf.gear.metadata.type.v1.Identity_Value1.raw13:type_name -> sf.gear.metadata.type.v1.Identity_Raw13
	106,  // 900: sf.gear.metadata.type.v1.Identity_Value1.raw14:type_name -> sf.gear.metadata.type.v1.Identity_Raw14
	561,  // 901: sf.gear.metadata.type.v1.Identity_Value1.raw15:type_name -> sf.gear.metadata.type.v1.Identity_Raw15
	237,  // 902: sf.gear.metadata.type.v1.Identity_Value1.raw16:type_name -> sf.gear.metadata.type.v1.Identity_Raw16
	159,  // 903: sf.gear.metadata.type.v1.Identity_Value1.raw17:type_name -> sf.gear.metadata.type.v1.Identity_Raw17
	477,  // 904: sf.gear.metadata.type.v1.Identity_Value1.raw18:type_name -> sf.gear.metadata.type.v1.Identity_Raw18
	317,  // 905: sf.gear.metadata.type.v1.Identity_Value1.raw19:type_name -> sf.gear.metadata.type.v1.Identity_Raw19
	606,  // 906: sf.gear.metadata.type.v1.Identity_Value1.raw20:type_name -> sf.gear.metadata.type.v1.Identity_Raw20
	79,   // 907: sf.gear.metadata.type.v1.Identity_Value1.raw21:type_name -> sf.gear.metadata.type.v1.Identity_Raw21
	34,   // 908: sf.gear.metadata.type.v1.Identity_Value1.raw22:type_name -> sf.gear.metadata.type.v1.Identity_Raw22
	36,   // 909: sf.gear.metadata.type.v1.Identity_Value1.raw23:type_name -> sf.gear.metadata.type.v1.Identity_Raw23
	6,    // 910: sf.gear.metadata.type.v1.Identity_Value1.raw24:type_name -> sf.gear.metadata.type.v1.Identity_Raw24
	542,  // 911: sf.gear.metadata.type.v1.Identity_Value1.raw25:type_name -> sf.gear.metadata.type.v1.Identity_Raw25
	145,  // 912: sf.gear.metadata.type.v1.Identity_Value1.raw26:type_name -> sf.gear.metadata.type.v1.Identity_Raw26
	265,  // 913: sf.gear.metadata.type.v1.Identity_Value1.raw27:type_name -> sf.gear.metadata.type.v1.Identity_Raw27
	387,  // 914: sf.gear.metadata.type.v1.Identity_Value1.raw28:type_name -> sf.gear.metadata.type.v1.Identity_Raw28
	67,   // 915: sf.gear.metadata.type.v1.Identity_Value1.raw29:type_name -> sf.gear.metadata.type.v1.Identity_Raw29
	340,  // 916: sf.gear.metadata.type.v1.Identity_Value1.raw30:type_name -> sf.gear.metadata.type.v1.Identity_Raw30
	289,  // 917: sf.gear.metadata.type.v1.Identity_Value1.raw31:type_name -> sf.gear.metadata.type.v1.Identity_Raw31
	601,  // 918: sf.gear.metadata.type.v1.Identity_Value1.raw32:type_name -> sf.gear.metadata.type.v1.Identity_Raw32
	205,  // 919: sf.gear.metadata.type.v1.Identity_Value1.blake_two256:type_name -> sf.gear.metadata.type.v1.Identity_BlakeTwo256
	83,   // 920: sf.gear.metadata.type.v1.Identity_Value1.sha256:type_name -> sf.gear.metadata.type.v1.Identity_Sha256
	2,    // 921: sf.gear.metadata.type.v1.Identity_Value1.keccak256:type_name -> sf.gear.metadata.type.v1.Identity_Keccak256
	397,  // 922: sf.gear.metadata.type.v1.Identity_Value1.sha_three256:type_name -> sf.gear.metadata.type.v1.Identity_ShaThree256
	552,  // 923: sf.gear.metadata.type.v1.Babe_ReportEquivocationUnsignedCall.equivocation_proof:type_name -> sf.gear.metadata.type.v1.SpConsensusSlotsEquivocationProof
	567,  // 924: sf.gear.metadata.type.v1.Babe_ReportEquivocationUnsignedCall.key_owner_proof:type_name -> sf.gear.metadata.type.v1.SpSessionMembershipProof
	261,  // 925: sf.gear.metadata.type.v1.BagsList_TupleNull.value:type_name -> sf.gear.metadata.type.v1.TupleNull
	118,  // 926: sf.gear.metadata.type.v1.Referenda_Origins.value0:type_name -> sf.gear.metadata.type.v1.Value0
	167,  // 927: sf.gear.metadata.type.v1.ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes4Listuint32.value1:type_name -> sf.gear.metadata.type.v1.ElectionProviderMultiPhase_TupleUint32SpArithmeticPerThingsPerU16
	286,  // 928: sf.gear.metadata.type.v1.Vesting_Target.id:type_name -> sf.gear.metadata.type.v1.Vesting_Id
	0,    // 929: sf.gear.metadata.type.v1.Vesting_Target.index:type_name -> sf.gear.metadata.type.v1.Vesting_Index
	85,   // 930: sf.gear.metadata.type.v1.Vesting_Target.raw:type_name -> sf.gear.metadata.type.v1.Vesting_Raw
	580,  // 931: sf.gear.metadata.type.v1.Vesting_Target.address32:type_name -> sf.gear.metadata.type.v1.Vesting_Address32
	270,  // 932: sf.gear.metadata.type.v1.Vesting_Target.address20:type_name -> sf.gear.metadata.type.v1.Vesting_Address20
	12,   // 933: sf.gear.metadata.type.v1.ConvictionVoting_Target.id:type_name -> sf.gear.metadata.type.v1.ConvictionVoting_Id
	78,   // 934: sf.gear.metadata.type.v1.ConvictionVoting_Target.index:type_name -> sf.gear.metadata.type.v1.ConvictionVoting_Index
	582,  // 935: sf.gear.metadata.type.v1.ConvictionVoting_Target.raw:type_name -> sf.gear.metadata.type.v1.ConvictionVoting_Raw
	195,  // 936: sf.gear.metadata.type.v1.ConvictionVoting_Target.address32:type_name -> sf.gear.metadata.type.v1.ConvictionVoting_Address32
	599,  // 937: sf.gear.metadata.type.v1.ConvictionVoting_Target.address20:type_name -> sf.gear.metadata.type.v1.ConvictionVoting_Address20
	513,  // 938: sf.gear.metadata.type.v1.Identity_Id.value0:type_name -> sf.gear.metadata.type.v1.SpCoreCryptoAccountId32
	102,  // 939: sf.gear.metadata.type.v1.Gear_CreateProgramCall.code_id:type_name -> sf.gear.metadata.type.v1.GprimitivesCodeId
	295,  // 940: sf.gear.metadata.type.v1.AllowedSlots.primary_slots:type_name -> sf.gear.metadata.type.v1.PrimarySlots
	296,  // 941: sf.gear.metadata.type.v1.AllowedSlots.primary_and_secondary_plain_slots:type_name -> sf.gear.metadata.type.v1.PrimaryAndSecondaryPlainSlots
	89,   // 942: sf.gear.metadata.type.v1.AllowedSlots.primary_and_secondary_vrf_slots:type_name -> sf.gear.metadata.type.v1.PrimaryAndSecondaryVrfSlots
	514,  // 943: sf.gear.metadata.type.v1.ConvictionVotingPallet.vote_call:type_name -> sf.gear.metadata.type.v1.ConvictionVoting_VoteCall
	408,  // 944: sf.gear.metadata.type.v1.ConvictionVotingPallet.delegate_call:type_name -> sf.gear.metadata.type.v1.ConvictionVoting_DelegateCall
	100,  // 945: sf.gear.metadata.type.v1.ConvictionVotingPallet.undelegate_call:type_name -> sf.gear.metadata.type.v1.ConvictionVoting_UndelegateCall
	307,  // 946: sf.gear.metadata.type.v1.ConvictionVotingPallet.unlock_call:type_name -> sf.gear.metadata.type.v1.ConvictionVoting_UnlockCall
	497,  // 947: sf.gear.metadata.type.v1.ConvictionVotingPallet.remove_vote_call:type_name -> sf.gear.metadata.type.v1.ConvictionVoting_RemoveVoteCall
	330,  // 948: sf.gear.metadata.type.v1.ConvictionVotingPallet.remove_other_vote_call:type_name -> sf.gear.metadata.type.v1.ConvictionVoting_RemoveOtherVoteCall
	491,  // 949: sf.gear.metadata.type.v1.Identity_Index.value0:type_name -> sf.gear.metadata.type.v1.Identity_TupleNull
	356,  // 950: sf.gear.metadata.type.v1.Identity_Account.id:type_name -> sf.gear.metadata.type.v1.Identity_Id
	362,  // 951: sf.gear.metadata.type.v1.Identity_Account.index:type_name -> sf.gear.metadata.type.v1.Identity_Index
	152,  // 952: sf.gear.metadata.type.v1.Identity_Account.raw:type_name -> sf.gear.metadata.type.v1.Identity_Raw
	586,  // 953: sf.gear.metadata.type.v1.Identity_Account.address32:type_name -> sf.gear.metadata.type.v1.Identity_Address32
	379,  // 954: sf.gear.metadata.type.v1.Identity_Account.address20:type_name -> sf.gear.metadata.type.v1.Identity_Address20
	447,  // 955: sf.gear.metadata.type.v1.Proxy_KillPureCall.spawner:type_name -> sf.gear.metadata.type.v1.Proxy_Spawner
	484,  // 956: sf.gear.metadata.type.v1.Proxy_KillPureCall.proxy_type:type_name -> sf.gear.metadata.type.v1.Proxy_ProxyType
	513,  // 957: sf.gear.metadata.type.v1.Multisig_CancelAsMultiCall.other_signatories:type_name -> sf.gear.metadata.type.v1.SpCoreCryptoAccountId32
	509,  // 958: sf.gear.metadata.type.v1.Multisig_CancelAsMultiCall.timepoint:type_name -> sf.gear.metadata.type.v1.Multisig_PalletMultisigTimepoint
	207,  // 959: sf.gear.metadata.type.v1.GearPallet.upload_code_call:type_name -> sf.gear.metadata.type.v1.Gear_UploadCodeCall
	341,  // 960: sf.gear.metadata.type.v1.GearPallet.upload_program_call:type_name -> sf.gear.metadata.type.v1.Gear_UploadProgramCall
	357,  // 961: sf.gear.metadata.type.v1.GearPallet.create_program_call:type_name -> sf.gear.metadata.type.v1.Gear_CreateProgramCall
	471,  // 962: sf.gear.metadata.type.v1.GearPallet.send_message_call:type_name -> sf.gear.metadata.type.v1.Gear_SendMessageCall
	202,  // 963: sf.gear.metadata.type.v1.GearPallet.send_reply_call:type_name -> sf.gear.metadata.type.v1.Gear_SendReplyCall
	462,  // 964: sf.gear.metadata.type.v1.GearPallet.claim_value_call:type_name -> sf.gear.metadata.type.v1.Gear_ClaimValueCall
	125,  // 965: sf.gear.metadata.type.v1.GearPallet.run_call:type_name -> sf.gear.metadata.type.v1.Gear_RunCall
	250,  // 966: sf.gear.metadata.type.v1.GearPallet.set_execute_inherent_call:type_name -> sf.gear.metadata.type.v1.Gear_SetExecuteInherentCall
	292,  // 967: sf.gear.metadata.type.v1.Balances_TransferAllCall.dest:type_name -> sf.gear.metadata.type.v1.Balances_Dest
	560,  // 968: sf.gear.metadata.type.v1.NominationPools_SetClaimPermissionCall.permission:type_name -> sf.gear.metadata.type.v1.NominationPools_Permission
	118,  // 969: sf.gear.metadata.type.v1.FellowshipReferenda_Origins.value0:type_name -> sf.gear.metadata.type.v1.Value0
	167,  // 970: sf.gear.metadata.type.v1.ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes5Listuint32.value1:type_name -> sf.gear.metadata.type.v1.ElectionProviderMultiPhase_TupleUint32SpArithmeticPerThingsPerU16
	513,  // 971: sf.gear.metadata.type.v1.Bounties_Id.value0:type_name -> sf.gear.metadata.type.v1.SpCoreCryptoAccountId32
	173,  // 972: sf.gear.metadata.type.v1.Referenda_SubmitCall.proposal_origin:type_name -> sf.gear.metadata.type.v1.Referenda_ProposalOrigin
	489,  // 973: sf.gear.metadata.type.v1.Referenda_SubmitCall.proposal:type_name -> sf.gear.metadata.type.v1.Referenda_Proposal
	259,  // 974: sf.gear.metadata.type.v1.Referenda_SubmitCall.enactment_moment:type_name -> sf.gear.metadata.type.v1.Referenda_EnactmentMoment
	30,   // 975: sf.gear.metadata.type.v1.Identity_Email.none:type_name -> sf.gear.metadata.type.v1.Identity_None
	548,  // 976: sf.gear.metadata.type.v1.Identity_Email.raw0:type_name -> sf.gear.metadata.type.v1.Identity_Raw0
	433,  // 977: sf.gear.metadata.type.v1.Identity_Email.raw1:type_name -> sf.gear.metadata.type.v1.Identity_Raw1
	208,  // 978: sf.gear.metadata.type.v1.Identity_Email.raw2:type_name -> sf.gear.metadata.type.v1.Identity_Raw2
	339,  // 979: sf.gear.metadata.type.v1.Identity_Email.raw3:type_name -> sf.gear.metadata.type.v1.Identity_Raw3
	165,  // 980: sf.gear.metadata.type.v1.Identity_Email.raw4:type_name -> sf.gear.metadata.type.v1.Identity_Raw4
	376,  // 981: sf.gear.metadata.type.v1.Identity_Email.raw5:type_name -> sf.gear.metadata.type.v1.Identity_Raw5
	156,  // 982: sf.gear.metadata.type.v1.Identity_Email.raw6:type_name -> sf.gear.metadata.type.v1.Identity_Raw6
	555,  // 983: sf.gear.metadata.type.v1.Identity_Email.raw7:type_name -> sf.gear.metadata.type.v1.Identity_Raw7
	326,  // 984: sf.gear.metadata.type.v1.Identity_Email.raw8:type_name -> sf.gear.metadata.type.v1.Identity_Raw8
	298,  // 985: sf.gear.metadata.type.v1.Identity_Email.raw9:type_name -> sf.gear.metadata.type.v1.Identity_Raw9
	415,  // 986: sf.gear.metadata.type.v1.Identity_Email.raw10:type_name -> sf.gear.metadata.type.v1.Identity_Raw10
	549,  // 987: sf.gear.metadata.type.v1.Identity_Email.raw11:type_name -> sf.gear.metadata.type.v1.Identity_Raw11
	183,  // 988: sf.gear.metadata.type.v1.Identity_Email.raw12:type_name -> sf.gear.metadata.type.v1.Identity_Raw12
	576,  // 989: sf.gear.metadata.type.v1.Identity_Email.raw13:type_name -> sf.gear.metadata.type.v1.Identity_Raw13
	106,  // 990: sf.gear.metadata.type.v1.Identity_Email.raw14:type_name -> sf.gear.metadata.type.v1.Identity_Raw14
	561,  // 991: sf.gear.metadata.type.v1.Identity_Email.raw15:type_name -> sf.gear.metadata.type.v1.Identity_Raw15
	237,  // 992: sf.gear.metadata.type.v1.Identity_Email.raw16:type_name -> sf.gear.metadata.type.v1.Identity_Raw16
	159,  // 993: sf.gear.metadata.type.v1.Identity_Email.raw17:type_name -> sf.gear.metadata.type.v1.Identity_Raw17
	477,  // 994: sf.gear.metadata.type.v1.Identity_Email.raw18:type_name -> sf.gear.metadata.type.v1.Identity_Raw18
	317,  // 995: sf.gear.metadata.type.v1.Identity_Email.raw19:type_name -> sf.gear.metadata.type.v1.Identity_Raw19
	606,  // 996: sf.gear.metadata.type.v1.Identity_Email.raw20:type_name -> sf.gear.metadata.type.v1.Identity_Raw20
	79,   // 997: sf.gear.metadata.type.v1.Identity_Email.raw21:type_name -> sf.gear.metadata.type.v1.Identity_Raw21
	34,   // 998: sf.gear.metadata.type.v1.Identity_Email.raw22:type_name -> sf.gear.metadata.type.v1.Identity_Raw22
	36,   // 999: sf.gear.metadata.type.v1.Identity_Email.raw23:type_name -> sf.gear.metadata.type.v1.Identity_Raw23
	6,    // 1000: sf.gear.metadata.type.v1.Identity_Email.raw24:type_name -> sf.gear.metadata.type.v1.Identity_Raw24
	542,  // 1001: sf.gear.metadata.type.v1.Identity_Email.raw25:type_name -> sf.gear.metadata.type.v1.Identity_Raw25
	145,  // 1002: sf.gear.metadata.type.v1.Identity_Email.raw26:type_name -> sf.gear.metadata.type.v1.Identity_Raw26
	265,  // 1003: sf.gear.metadata.type.v1.Identity_Email.raw27:type_name -> sf.gear.metadata.type.v1.Identity_Raw27
	387,  // 1004: sf.gear.metadata.type.v1.Identity_Email.raw28:type_name -> sf.gear.metadata.type.v1.Identity_Raw28
	67,   // 1005: sf.gear.metadata.type.v1.Identity_Email.raw29:type_name -> sf.gear.metadata.type.v1.Identity_Raw29
	340,  // 1006: sf.gear.metadata.type.v1.Identity_Email.raw30:type_name -> sf.gear.metadata.type.v1.Identity_Raw30
	289,  // 1007: sf.gear.metadata.type.v1.Identity_Email.raw31:type_name -> sf.gear.metadata.type.v1.Identity_Raw31
	601,  // 1008: sf.gear.metadata.type.v1.Identity_Email.raw32:type_name -> sf.gear.metadata.type.v1.Identity_Raw32
	205,  // 1009: sf.gear.metadata.type.v1.Identity_Email.blake_two256:type_name -> sf.gear.metadata.type.v1.Identity_BlakeTwo256
	83,   // 1010: sf.gear.metadata.type.v1.Identity_Email.sha256:type_name -> sf.gear.metadata.type.v1.Identity_Sha256
	2,    // 1011: sf.gear.metadata.type.v1.Identity_Email.keccak256:type_name -> sf.gear.metadata.type.v1.Identity_Keccak256
	397,  // 1012: sf.gear.metadata.type.v1.Identity_Email.sha_three256:type_name -> sf.gear.metadata.type.v1.Identity_ShaThree256
	380,  // 1013: sf.gear.metadata.type.v1.BTreeSet.value0:type_name -> sf.gear.metadata.type.v1.GprimitivesActorId
	1,    // 1014: sf.gear.metadata.type.v1.Treasury_SpendCall.asset_kind:type_name -> sf.gear.metadata.type.v1.Treasury_TupleNull
	513,  // 1015: sf.gear.metadata.type.v1.Treasury_SpendCall.beneficiary:type_name -> sf.gear.metadata.type.v1.SpCoreCryptoAccountId32
	566,  // 1016: sf.gear.metadata.type.v1.NominationPools_MemberAccount.id:type_name -> sf.gear.metadata.type.v1.NominationPools_Id
	556,  // 1017: sf.gear.metadata.type.v1.NominationPools_MemberAccount.index:type_name -> sf.gear.metadata.type.v1.NominationPools_Index
	590,  // 1018: sf.gear.metadata.type.v1.NominationPools_MemberAccount.raw:type_name -> sf.gear.metadata.type.v1.NominationPools_Raw
	318,  // 1019: sf.gear.metadata.type.v1.NominationPools_MemberAccount.address32:type_name -> sf.gear.metadata.type.v1.NominationPools_Address32
	180,  // 1020: sf.gear.metadata.type.v1.NominationPools_MemberAccount.address20:type_name -> sf.gear.metadata.type.v1.NominationPools_Address20
	513,  // 1021: sf.gear.metadata.type.v1.NominationPools_NominateCall.validators:type_name -> sf.gear.metadata.type.v1.SpCoreCryptoAccountId32
	211,  // 1022: sf.gear.metadata.type.v1.BagsListPallet.rebag_call:type_name -> sf.gear.metadata.type.v1.BagsList_RebagCall
	88,   // 1023: sf.gear.metadata.type.v1.BagsListPallet.put_in_front_of_call:type_name -> sf.gear.metadata.type.v1.BagsList_PutInFrontOfCall
	53,   // 1024: sf.gear.metadata.type.v1.BagsListPallet.put_in_front_of_other_call:type_name -> sf.gear.metadata.type.v1.BagsList_PutInFrontOfOtherCall
	348,  // 1025: sf.gear.metadata.type.v1.SpAuthorityDiscoveryAppPublic.value0:type_name -> sf.gear.metadata.type.v1.SpCoreSr25519Public
	178,  // 1026: sf.gear.metadata.type.v1.IdentityPallet.add_registrar_call:type_name -> sf.gear.metadata.type.v1.Identity_AddRegistrarCall
	72,   // 1027: sf.gear.metadata.type.v1.IdentityPallet.set_identity_call:type_name -> sf.gear.metadata.type.v1.Identity_SetIdentityCall
	3,    // 1028: sf.gear.metadata.type.v1.IdentityPallet.set_subs_call:type_name -> sf.gear.metadata.type.v1.Identity_SetSubsCall
	166,  // 1029: sf.gear.metadata.type.v1.IdentityPallet.clear_identity_call:type_name -> sf.gear.metadata.type.v1.Identity_ClearIdentityCall
	537,  // 1030: sf.gear.metadata.type.v1.IdentityPallet.request_judgement_call:type_name -> sf.gear.metadata.type.v1.Identity_RequestJudgementCall
	320,  // 1031: sf.gear.metadata.type.v1.IdentityPallet.cancel_request_call:type_name -> sf.gear.metadata.type.v1.Identity_CancelRequestCall
	328,  // 1032: sf.gear.metadata.type.v1.IdentityPallet.set_fee_call:type_name -> sf.gear.metadata.type.v1.Identity_SetFeeCall
	197,  // 1033: sf.gear.metadata.type.v1.IdentityPallet.set_account_id_call:type_name -> sf.gear.metadata.type.v1.Identity_SetAccountIdCall
	480,  // 1034: sf.gear.metadata.type.v1.IdentityPallet.set_fields_call:type_name -> sf.gear.metadata.type.v1.Identity_SetFieldsCall
	242,  // 1035: sf.gear.metadata.type.v1.IdentityPallet.provide_judgement_call:type_name -> sf.gear.metadata.type.v1.Identity_ProvideJudgementCall
	201,  // 1036: sf.gear.metadata.type.v1.IdentityPallet.kill_identity_call:type_name -> sf.gear.metadata.type.v1.Identity_KillIdentityCall
	321,  // 1037: sf.gear.metadata.type.v1.IdentityPallet.add_sub_call:type_name -> sf.gear.metadata.type.v1.Identity_AddSubCall
	266,  // 1038: sf.gear.metadata.type.v1.IdentityPallet.rename_sub_call:type_name -> sf.gear.metadata.type.v1.Identity_RenameSubCall
	577,  // 1039: sf.gear.metadata.type.v1.IdentityPallet.remove_sub_call:type_name -> sf.gear.metadata.type.v1.Identity_RemoveSubCall
	331,  // 1040: sf.gear.metadata.type.v1.IdentityPallet.quit_sub_call:type_name -> sf.gear.metadata.type.v1.Identity_QuitSubCall
	456,  // 1041: sf.gear.metadata.type.v1.BagsList_Dislocated.id:type_name -> sf.gear.metadata.type.v1.BagsList_Id
	52,   // 1042: sf.gear.metadata.type.v1.BagsList_Dislocated.index:type_name -> sf.gear.metadata.type.v1.BagsList_Index
	492,  // 1043: sf.gear.metadata.type.v1.BagsList_Dislocated.raw:type_name -> sf.gear.metadata.type.v1.BagsList_Raw
	414,  // 1044: sf.gear.metadata.type.v1.BagsList_Dislocated.address32:type_name -> sf.gear.metadata.type.v1.BagsList_Address32
	149,  // 1045: sf.gear.metadata.type.v1.BagsList_Dislocated.address20:type_name -> sf.gear.metadata.type.v1.BagsList_Address20
	273,  // 1046: sf.gear.metadata.type.v1.StakingRewards_To.id:type_name -> sf.gear.metadata.type.v1.StakingRewards_Id
	533,  // 1047: sf.gear.metadata.type.v1.StakingRewards_To.index:type_name -> sf.gear.metadata.type.v1.StakingRewards_Index
	182,  // 1048: sf.gear.metadata.type.v1.StakingRewards_To.raw:type_name -> sf.gear.metadata.type.v1.StakingRewards_Raw
	472,  // 1049: sf.gear.metadata.type.v1.StakingRewards_To.address32:type_name -> sf.gear.metadata.type.v1.StakingRewards_Address32
	234,  // 1050: sf.gear.metadata.type.v1.StakingRewards_To.address20:type_name -> sf.gear.metadata.type.v1.StakingRewards_Address20
	539,  // 1051: sf.gear.metadata.type.v1.Identity_Judgement.unknown:type_name -> sf.gear.metadata.type.v1.Identity_Unknown
	516,  // 1052: sf.gear.metadata.type.v1.Identity_Judgement.fee_paid:type_name -> sf.gear.metadata.type.v1.Identity_FeePaid
	117,  // 1053: sf.gear.metadata.type.v1.Identity_Judgement.reasonable:type_name -> sf.gear.metadata.type.v1.Identity_Reasonable
	301,  // 1054: sf.gear.metadata.type.v1.Identity_Judgement.known_good:type_name -> sf.gear.metadata.type.v1.Identity_KnownGood
	224,  // 1055: sf.gear.metadata.type.v1.Identity_Judgement.out_of_date:type_name -> sf.gear.metadata.type.v1.Identity_OutOfDate
	310,  // 1056: sf.gear.metadata.type.v1.Identity_Judgement.low_quality:type_name -> sf.gear.metadata.type.v1.Identity_LowQuality
	384,  // 1057: sf.gear.metadata.type.v1.Identity_Judgement.erroneous:type_name -> sf.gear.metadata.type.v1.Identity_Erroneous
	399,  // 1058: sf.gear.metadata.type.v1.StakingRewards_WithdrawCall.to:type_name -> sf.gear.metadata.type.v1.StakingRewards_To
	116,  // 1059: sf.gear.metadata.type.v1.BalancesPallet.transfer_allow_death_call:type_name -> sf.gear.metadata.type.v1.Balances_TransferAllowDeathCall
	138,  // 1060: sf.gear.metadata.type.v1.BalancesPallet.force_transfer_call:type_name -> sf.gear.metadata.type.v1.Balances_ForceTransferCall
	336,  // 1061: sf.gear.metadata.type.v1.BalancesPallet.transfer_keep_alive_call:type_name -> sf.gear.metadata.type.v1.Balances_TransferKeepAliveCall
	369,  // 1062: sf.gear.metadata.type.v1.BalancesPallet.transfer_all_call:type_name -> sf.gear.metadata.type.v1.Balances_TransferAllCall
	579,  // 1063: sf.gear.metadata.type.v1.BalancesPallet.force_unreserve_call:type_name -> sf.gear.metadata.type.v1.Balances_ForceUnreserveCall
	103,  // 1064: sf.gear.metadata.type.v1.BalancesPallet.upgrade_accounts_call:type_name -> sf.gear.metadata.type.v1.Balances_UpgradeAccountsCall
	479,  // 1065: sf.gear.metadata.type.v1.BalancesPallet.force_set_balance_call:type_name -> sf.gear.metadata.type.v1.Balances_ForceSetBalanceCall
	456,  // 1066: sf.gear.metadata.type.v1.BagsList_Lighter.id:type_name -> sf.gear.metadata.type.v1.BagsList_Id
	52,   // 1067: sf.gear.metadata.type.v1.BagsList_Lighter.index:type_name -> sf.gear.metadata.type.v1.BagsList_Index
	492,  // 1068: sf.gear.metadata.type.v1.BagsList_Lighter.raw:type_name -> sf.gear.metadata.type.v1.BagsList_Raw
	414,  // 1069: sf.gear.metadata.type.v1.BagsList_Lighter.address32:type_name -> sf.gear.metadata.type.v1.BagsList_Address32
	149,  // 1070: sf.gear.metadata.type.v1.BagsList_Lighter.address20:type_name -> sf.gear.metadata.type.v1.BagsList_Address20
	30,   // 1071: sf.gear.metadata.type.v1.Identity_Legal.none:type_name -> sf.gear.metadata.type.v1.Identity_None
	548,  // 1072: sf.gear.metadata.type.v1.Identity_Legal.raw0:type_name -> sf.gear.metadata.type.v1.Identity_Raw0
	433,  // 1073: sf.gear.metadata.type.v1.Identity_Legal.raw1:type_name -> sf.gear.metadata.type.v1.Identity_Raw1
	208,  // 1074: sf.gear.metadata.type.v1.Identity_Legal.raw2:type_name -> sf.gear.metadata.type.v1.Identity_Raw2
	339,  // 1075: sf.gear.metadata.type.v1.Identity_Legal.raw3:type_name -> sf.gear.metadata.type.v1.Identity_Raw3
	165,  // 1076: sf.gear.metadata.type.v1.Identity_Legal.raw4:type_name -> sf.gear.metadata.type.v1.Identity_Raw4
	376,  // 1077: sf.gear.metadata.type.v1.Identity_Legal.raw5:type_name -> sf.gear.metadata.type.v1.Identity_Raw5
	156,  // 1078: sf.gear.metadata.type.v1.Identity_Legal.raw6:type_name -> sf.gear.metadata.type.v1.Identity_Raw6
	555,  // 1079: sf.gear.metadata.type.v1.Identity_Legal.raw7:type_name -> sf.gear.metadata.type.v1.Identity_Raw7
	326,  // 1080: sf.gear.metadata.type.v1.Identity_Legal.raw8:type_name -> sf.gear.metadata.type.v1.Identity_Raw8
	298,  // 1081: sf.gear.metadata.type.v1.Identity_Legal.raw9:type_name -> sf.gear.metadata.type.v1.Identity_Raw9
	415,  // 1082: sf.gear.metadata.type.v1.Identity_Legal.raw10:type_name -> sf.gear.metadata.type.v1.Identity_Raw10
	549,  // 1083: sf.gear.metadata.type.v1.Identity_Legal.raw11:type_name -> sf.gear.metadata.type.v1.Identity_Raw11
	183,  // 1084: sf.gear.metadata.type.v1.Identity_Legal.raw12:type_name -> sf.gear.metadata.type.v1.Identity_Raw12
	576,  // 1085: sf.gear.metadata.type.v1.Identity_Legal.raw13:type_name -> sf.gear.metadata.type.v1.Identity_Raw13
	106,  // 1086: sf.gear.metadata.type.v1.Identity_Legal.raw14:type_name -> sf.gear.metadata.type.v1.Identity_Raw14
	561,  // 1087: sf.gear.metadata.type.v1.Identity_Legal.raw15:type_name -> sf.gear.metadata.type.v1.Identity_Raw15
	237,  // 1088: sf.gear.metadata.type.v1.Identity_Legal.raw16:type_name -> sf.gear.metadata.type.v1.Identity_Raw16
	159,  // 1089: sf.gear.metadata.type.v1.Identity_Legal.raw17:type_name -> sf.gear.metadata.type.v1.Identity_Raw17
	477,  // 1090: sf.gear.metadata.type.v1.Identity_Legal.raw18:type_name -> sf.gear.metadata.type.v1.Identity_Raw18
	317,  // 1091: sf.gear.metadata.type.v1.Identity_Legal.raw19:type_name -> sf.gear.metadata.type.v1.Identity_Raw19
	606,  // 1092: sf.gear.metadata.type.v1.Identity_Legal.raw20:type_name -> sf.gear.metadata.type.v1.Identity_Raw20
	79,   // 1093: sf.gear.metadata.type.v1.Identity_Legal.raw21:type_name -> sf.gear.metadata.type.v1.Identity_Raw21
	34,   // 1094: sf.gear.metadata.type.v1.Identity_Legal.raw22:type_name -> sf.gear.metadata.type.v1.Identity_Raw22
	36,   // 1095: sf.gear.metadata.type.v1.Identity_Legal.raw23:type_name -> sf.gear.metadata.type.v1.Identity_Raw23
	6,    // 1096: sf.gear.metadata.type.v1.Identity_Legal.raw24:type_name -> sf.gear.metadata.type.v1.Identity_Raw24
	542,  // 1097: sf.gear.metadata.type.v1.Identity_Legal.raw25:type_name -> sf.gear.metadata.type.v1.Identity_Raw25
	145,  // 1098: sf.gear.metadata.type.v1.Identity_Legal.raw26:type_name -> sf.gear.metadata.type.v1.Identity_Raw26
	265,  // 1099: sf.gear.metadata.type.v1.Identity_Legal.raw27:type_name -> sf.gear.metadata.type.v1.Identity_Raw27
	387,  // 1100: sf.gear.metadata.type.v1.Identity_Legal.raw28:type_name -> sf.gear.metadata.type.v1.Identity_Raw28
	67,   // 1101: sf.gear.metadata.type.v1.Identity_Legal.raw29:type_name -> sf.gear.metadata.type.v1.Identity_Raw29
	340,  // 1102: sf.gear.metadata.type.v1.Identity_Legal.raw30:type_name -> sf.gear.metadata.type.v1.Identity_Raw30
	289,  // 1103: sf.gear.metadata.type.v1.Identity_Legal.raw31:type_name -> sf.gear.metadata.type.v1.Identity_Raw31
	601,  // 1104: sf.gear.metadata.type.v1.Identity_Legal.raw32:type_name -> sf.gear.metadata.type.v1.Identity_Raw32
	205,  // 1105: sf.gear.metadata.type.v1.Identity_Legal.blake_two256:type_name -> sf.gear.metadata.type.v1.Identity_BlakeTwo256
	83,   // 1106: sf.gear.metadata.type.v1.Identity_Legal.sha256:type_name -> sf.gear.metadata.type.v1.Identity_Sha256
	2,    // 1107: sf.gear.metadata.type.v1.Identity_Legal.keccak256:type_name -> sf.gear.metadata.type.v1.Identity_Keccak256
	397,  // 1108: sf.gear.metadata.type.v1.Identity_Legal.sha_three256:type_name -> sf.gear.metadata.type.v1.Identity_ShaThree256
	16,   // 1109: sf.gear.metadata.type.v1.ConvictionVoting_DelegateCall.to:type_name -> sf.gear.metadata.type.v1.ConvictionVoting_To
	429,  // 1110: sf.gear.metadata.type.v1.ConvictionVoting_DelegateCall.conviction:type_name -> sf.gear.metadata.type.v1.ConvictionVoting_Conviction
	575,  // 1111: sf.gear.metadata.type.v1.FellowshipReferenda_ProposalOrigin.system:type_name -> sf.gear.metadata.type.v1.FellowshipReferenda_System
	375,  // 1112: sf.gear.metadata.type.v1.FellowshipReferenda_ProposalOrigin.origins:type_name -> sf.gear.metadata.type.v1.FellowshipReferenda_Origins
	169,  // 1113: sf.gear.metadata.type.v1.FellowshipReferenda_ProposalOrigin.void:type_name -> sf.gear.metadata.type.v1.FellowshipReferenda_Void
	487,  // 1114: sf.gear.metadata.type.v1.Staking_SetMinCommissionCall.new:type_name -> sf.gear.metadata.type.v1.SpArithmeticPerThingsPerbill
	253,  // 1115: sf.gear.metadata.type.v1.SystemPallet.remark_call:type_name -> sf.gear.metadata.type.v1.System_RemarkCall
	51,   // 1116: sf.gear.metadata.type.v1.SystemPallet.set_heap_pages_call:type_name -> sf.gear.metadata.type.v1.System_SetHeapPagesCall
	142,  // 1117: sf.gear.metadata.type.v1.SystemPallet.set_code_call:type_name -> sf.gear.metadata.type.v1.System_SetCodeCall
	231,  // 1118: sf.gear.metadata.type.v1.SystemPallet.set_code_without_checks_call:type_name -> sf.gear.metadata.type.v1.System_SetCodeWithoutChecksCall
	416,  // 1119: sf.gear.metadata.type.v1.SystemPallet.set_storage_call:type_name -> sf.gear.metadata.type.v1.System_SetStorageCall
	189,  // 1120: sf.gear.metadata.type.v1.SystemPallet.kill_storage_call:type_name -> sf.gear.metadata.type.v1.System_KillStorageCall
	504,  // 1121: sf.gear.metadata.type.v1.SystemPallet.kill_prefix_call:type_name -> sf.gear.metadata.type.v1.System_KillPrefixCall
	15,   // 1122: sf.gear.metadata.type.v1.SystemPallet.remark_with_event_call:type_name -> sf.gear.metadata.type.v1.System_RemarkWithEventCall
	65,   // 1123: sf.gear.metadata.type.v1.System_SetStorageCall.items:type_name -> sf.gear.metadata.type.v1.System_TupleSystemItemsListSystemItemsList
	68,   // 1124: sf.gear.metadata.type.v1.VaraRuntimeNposSolution16.votes1:type_name -> sf.gear.metadata.type.v1.ElectionProviderMultiPhase_TupleUint32Uint32
	80,   // 1125: sf.gear.metadata.type.v1.VaraRuntimeNposSolution16.votes2:type_name -> sf.gear.metadata.type.v1.ElectionProviderMultiPhase_TupleUint32TupleUint32SpArithmeticPerThingsPerU16Uint32
	230,  // 1126: sf.gear.metadata.type.v1.VaraRuntimeNposSolution16.votes3:type_name -> sf.gear.metadata.type.v1.ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes3Listuint32
	352,  // 1127: sf.gear.metadata.type.v1.VaraRuntimeNposSolution16.votes4:type_name -> sf.gear.metadata.type.v1.ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes4Listuint32
	377,  // 1128: sf.gear.metadata.type.v1.VaraRuntimeNposSolution16.votes5:type_name -> sf.gear.metadata.type.v1.ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes5Listuint32
	239,  // 1129: sf.gear.metadata.type.v1.VaraRuntimeNposSolution16.votes6:type_name -> sf.gear.metadata.type.v1.ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes6Listuint32
	322,  // 1130: sf.gear.metadata.type.v1.VaraRuntimeNposSolution16.votes7:type_name -> sf.gear.metadata.type.v1.ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes7Listuint32
	24,   // 1131: sf.gear.metadata.type.v1.VaraRuntimeNposSolution16.votes8:type_name -> sf.gear.metadata.type.v1.ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes8Listuint32
	524,  // 1132: sf.gear.metadata.type.v1.VaraRuntimeNposSolution16.votes9:type_name -> sf.gear.metadata.type.v1.ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes9Listuint32
	465,  // 1133: sf.gear.metadata.type.v1.VaraRuntimeNposSolution16.votes10:type_name -> sf.gear.metadata.type.v1.ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes10Listuint32
	40,   // 1134: sf.gear.metadata.type.v1.VaraRuntimeNposSolution16.votes11:type_name -> sf.gear.metadata.type.v1.ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes11Listuint32
	119,  // 1135: sf.gear.metadata.type.v1.VaraRuntimeNposSolution16.votes12:type_name -> sf.gear.metadata.type.v1.ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes12Listuint32
	113,  // 1136: sf.gear.metadata.type.v1.VaraRuntimeNposSolution16.votes13:type_name -> sf.gear.metadata.type.v1.ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes13Listuint32
	279,  // 1137: sf.gear.metadata.type.v1.VaraRuntimeNposSolution16.votes14:type_name -> sf.gear.metadata.type.v1.ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes14Listuint32
	268,  // 1138: sf.gear.metadata.type.v1.VaraRuntimeNposSolution16.votes15:type_name -> sf.gear.metadata.type.v1.ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes15Listuint32
	209,  // 1139: sf.gear.metadata.type.v1.VaraRuntimeNposSolution16.votes16:type_name -> sf.gear.metadata.type.v1.ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes16Listuint32
	559,  // 1140: sf.gear.metadata.type.v1.Bounties_AwardBountyCall.beneficiary:type_name -> sf.gear.metadata.type.v1.Bounties_Beneficiary
	30,   // 1141: sf.gear.metadata.type.v1.Identity_Web.none:type_name -> sf.gear.metadata.type.v1.Identity_None
	548,  // 1142: sf.gear.metadata.type.v1.Identity_Web.raw0:type_name -> sf.gear.metadata.type.v1.Identity_Raw0
	433,  // 1143: sf.gear.metadata.type.v1.Identity_Web.raw1:type_name -> sf.gear.metadata.type.v1.Identity_Raw1
	208,  // 1144: sf.gear.metadata.type.v1.Identity_Web.raw2:type_name -> sf.gear.metadata.type.v1.Identity_Raw2
	339,  // 1145: sf.gear.metadata.type.v1.Identity_Web.raw3:type_name -> sf.gear.metadata.type.v1.Identity_Raw3
	165,  // 1146: sf.gear.metadata.type.v1.Identity_Web.raw4:type_name -> sf.gear.metadata.type.v1.Identity_Raw4
	376,  // 1147: sf.gear.metadata.type.v1.Identity_Web.raw5:type_name -> sf.gear.metadata.type.v1.Identity_Raw5
	156,  // 1148: sf.gear.metadata.type.v1.Identity_Web.raw6:type_name -> sf.gear.metadata.type.v1.Identity_Raw6
	555,  // 1149: sf.gear.metadata.type.v1.Identity_Web.raw7:type_name -> sf.gear.metadata.type.v1.Identity_Raw7
	326,  // 1150: sf.gear.metadata.type.v1.Identity_Web.raw8:type_name -> sf.gear.metadata.type.v1.Identity_Raw8
	298,  // 1151: sf.gear.metadata.type.v1.Identity_Web.raw9:type_name -> sf.gear.metadata.type.v1.Identity_Raw9
	415,  // 1152: sf.gear.metadata.type.v1.Identity_Web.raw10:type_name -> sf.gear.metadata.type.v1.Identity_Raw10
	549,  // 1153: sf.gear.metadata.type.v1.Identity_Web.raw11:type_name -> sf.gear.metadata.type.v1.Identity_Raw11
	183,  // 1154: sf.gear.metadata.type.v1.Identity_Web.raw12:type_name -> sf.gear.metadata.type.v1.Identity_Raw12
	576,  // 1155: sf.gear.metadata.type.v1.Identity_Web.raw13:type_name -> sf.gear.metadata.type.v1.Identity_Raw13
	106,  // 1156: sf.gear.metadata.type.v1.Identity_Web.raw14:type_name -> sf.gear.metadata.type.v1.Identity_Raw14
	561,  // 1157: sf.gear.metadata.type.v1.Identity_Web.raw15:type_name -> sf.gear.metadata.type.v1.Identity_Raw15
	237,  // 1158: sf.gear.metadata.type.v1.Identity_Web.raw16:type_name -> sf.gear.metadata.type.v1.Identity_Raw16
	159,  // 1159: sf.gear.metadata.type.v1.Identity_Web.raw17:type_name -> sf.gear.metadata.type.v1.Identity_Raw17
	477,  // 1160: sf.gear.metadata.type.v1.Identity_Web.raw18:type_name -> sf.gear.metadata.type.v1.Identity_Raw18
	317,  // 1161: sf.gear.metadata.type.v1.Identity_Web.raw19:type_name -> sf.gear.metadata.type.v1.Identity_Raw19
	606,  // 1162: sf.gear.metadata.type.v1.Identity_Web.raw20:type_name -> sf.gear.metadata.type.v1.Identity_Raw20
	79,   // 1163: sf.gear.metadata.type.v1.Identity_Web.raw21:type_name -> sf.gear.metadata.type.v1.Identity_Raw21
	34,   // 1164: sf.gear.metadata.type.v1.Identity_Web.raw22:type_name -> sf.gear.metadata.type.v1.Identity_Raw22
	36,   // 1165: sf.gear.metadata.type.v1.Identity_Web.raw23:type_name -> sf.gear.metadata.type.v1.Identity_Raw23
	6,    // 1166: sf.gear.metadata.type.v1.Identity_Web.raw24:type_name -> sf.gear.metadata.type.v1.Identity_Raw24
	542,  // 1167: sf.gear.metadata.type.v1.Identity_Web.raw25:type_name -> sf.gear.metadata.type.v1.Identity_Raw25
	145,  // 1168: sf.gear.metadata.type.v1.Identity_Web.raw26:type_name -> sf.gear.metadata.type.v1.Identity_Raw26
	265,  // 1169: sf.gear.metadata.type.v1.Identity_Web.raw27:type_name -> sf.gear.metadata.type.v1.Identity_Raw27
	387,  // 1170: sf.gear.metadata.type.v1.Identity_Web.raw28:type_name -> sf.gear.metadata.type.v1.Identity_Raw28
	67,   // 1171: sf.gear.metadata.type.v1.Identity_Web.raw29:type_name -> sf.gear.metadata.type.v1.Identity_Raw29
	340,  // 1172: sf.gear.metadata.type.v1.Identity_Web.raw30:type_name -> sf.gear.metadata.type.v1.Identity_Raw30
	289,  // 1173: sf.gear.metadata.type.v1.Identity_Web.raw31:type_name -> sf.gear.metadata.type.v1.Identity_Raw31
	601,  // 1174: sf.gear.metadata.type.v1.Identity_Web.raw32:type_name -> sf.gear.metadata.type.v1.Identity_Raw32
	205,  // 1175: sf.gear.metadata.type.v1.Identity_Web.blake_two256:type_name -> sf.gear.metadata.type.v1.Identity_BlakeTwo256
	83,   // 1176: sf.gear.metadata.type.v1.Identity_Web.sha256:type_name -> sf.gear.metadata.type.v1.Identity_Sha256
	2,    // 1177: sf.gear.metadata.type.v1.Identity_Web.keccak256:type_name -> sf.gear.metadata.type.v1.Identity_Keccak256
	397,  // 1178: sf.gear.metadata.type.v1.Identity_Web.sha_three256:type_name -> sf.gear.metadata.type.v1.Identity_ShaThree256
	585,  // 1179: sf.gear.metadata.type.v1.Staking_ChillThreshold.noop:type_name -> sf.gear.metadata.type.v1.Staking_Noop
	468,  // 1180: sf.gear.metadata.type.v1.Staking_ChillThreshold.set:type_name -> sf.gear.metadata.type.v1.Staking_Set
	245,  // 1181: sf.gear.metadata.type.v1.Staking_ChillThreshold.remove:type_name -> sf.gear.metadata.type.v1.Staking_Remove
	473,  // 1182: sf.gear.metadata.type.v1.ElectionProviderMultiPhase_SubmitCall.raw_solution:type_name -> sf.gear.metadata.type.v1.ElectionProviderMultiPhase_PalletElectionProviderMultiPhaseRawSolution
	496,  // 1183: sf.gear.metadata.type.v1.GearVoucher_SendReply.reply_to_id:type_name -> sf.gear.metadata.type.v1.GprimitivesMessageId
	32,   // 1184: sf.gear.metadata.type.v1.Grandpa_ReportEquivocationUnsignedCall.equivocation_proof:type_name -> sf.gear.metadata.type.v1.SpConsensusGrandpaEquivocationProof
	567,  // 1185: sf.gear.metadata.type.v1.Grandpa_ReportEquivocationUnsignedCall.key_owner_proof:type_name -> sf.gear.metadata.type.v1.SpSessionMembershipProof
	316,  // 1186: sf.gear.metadata.type.v1.Treasury_Beneficiary.id:type_name -> sf.gear.metadata.type.v1.Treasury_Id
	213,  // 1187: sf.gear.metadata.type.v1.Treasury_Beneficiary.index:type_name -> sf.gear.metadata.type.v1.Treasury_Index
	226,  // 1188: sf.gear.metadata.type.v1.Treasury_Beneficiary.raw:type_name -> sf.gear.metadata.type.v1.Treasury_Raw
	194,  // 1189: sf.gear.metadata.type.v1.Treasury_Beneficiary.address32:type_name -> sf.gear.metadata.type.v1.Treasury_Address32
	406,  // 1190: sf.gear.metadata.type.v1.Treasury_Beneficiary.address20:type_name -> sf.gear.metadata.type.v1.Treasury_Address20
	82,   // 1191: sf.gear.metadata.type.v1.ConvictionVoting_Conviction.none:type_name -> sf.gear.metadata.type.v1.ConvictionVoting_None
	235,  // 1192: sf.gear.metadata.type.v1.ConvictionVoting_Conviction.locked1x:type_name -> sf.gear.metadata.type.v1.ConvictionVoting_Locked1X
	187,  // 1193: sf.gear.metadata.type.v1.ConvictionVoting_Conviction.locked2x:type_name -> sf.gear.metadata.type.v1.ConvictionVoting_Locked2X
	127,  // 1194: sf.gear.metadata.type.v1.ConvictionVoting_Conviction.locked3x:type_name -> sf.gear.metadata.type.v1.ConvictionVoting_Locked3X
	443,  // 1195: sf.gear.metadata.type.v1.ConvictionVoting_Conviction.locked4x:type_name -> sf.gear.metadata.type.v1.ConvictionVoting_Locked4X
	346,  // 1196: sf.gear.metadata.type.v1.ConvictionVoting_Conviction.locked5x:type_name -> sf.gear.metadata.type.v1.ConvictionVoting_Locked5X
	5,    // 1197: sf.gear.metadata.type.v1.ConvictionVoting_Conviction.locked6x:type_name -> sf.gear.metadata.type.v1.ConvictionVoting_Locked6X
	507,  // 1198: sf.gear.metadata.type.v1.FellowshipReferenda_Proposal.legacy:type_name -> sf.gear.metadata.type.v1.FellowshipReferenda_Legacy
	241,  // 1199: sf.gear.metadata.type.v1.FellowshipReferenda_Proposal.inline:type_name -> sf.gear.metadata.type.v1.FellowshipReferenda_Inline
	93,   // 1200: sf.gear.metadata.type.v1.FellowshipReferenda_Proposal.lookup:type_name -> sf.gear.metadata.type.v1.FellowshipReferenda_Lookup
	603,  // 1201: sf.gear.metadata.type.v1.ElectionProviderMultiPhase_SetEmergencyElectionResultCall.supports:type_name -> sf.gear.metadata.type.v1.ElectionProviderMultiPhase_TupleSpCoreCryptoAccountId32SpNposElectionsSupport
	275,  // 1202: sf.gear.metadata.type.v1.Grandpa_Precommit.value0:type_name -> sf.gear.metadata.type.v1.FinalityGrandpaEquivocation
	267,  // 1203: sf.gear.metadata.type.v1.ProxyPallet.proxy_call:type_name -> sf.gear.metadata.type.v1.Proxy_ProxyCall
	64,   // 1204: sf.gear.metadata.type.v1.ProxyPallet.add_proxy_call:type_name -> sf.gear.metadata.type.v1.Proxy_AddProxyCall
	494,  // 1205: sf.gear.metadata.type.v1.ProxyPallet.remove_proxy_call:type_name -> sf.gear.metadata.type.v1.Proxy_RemoveProxyCall
	299,  // 1206: sf.gear.metadata.type.v1.ProxyPallet.remove_proxies_call:type_name -> sf.gear.metadata.type.v1.Proxy_RemoveProxiesCall
	540,  // 1207: sf.gear.metadata.type.v1.ProxyPallet.create_pure_call:type_name -> sf.gear.metadata.type.v1.Proxy_CreatePureCall
	365,  // 1208: sf.gear.metadata.type.v1.ProxyPallet.kill_pure_call:type_name -> sf.gear.metadata.type.v1.Proxy_KillPureCall
	27,   // 1209: sf.gear.metadata.type.v1.ProxyPallet.announce_call:type_name -> sf.gear.metadata.type.v1.Proxy_AnnounceCall
	161,  // 1210: sf.gear.metadata.type.v1.ProxyPallet.remove_announcement_call:type_name -> sf.gear.metadata.type.v1.Proxy_RemoveAnnouncementCall
	461,  // 1211: sf.gear.metadata.type.v1.ProxyPallet.reject_announcement_call:type_name -> sf.gear.metadata.type.v1.Proxy_RejectAnnouncementCall
	73,   // 1212: sf.gear.metadata.type.v1.ProxyPallet.proxy_announced_call:type_name -> sf.gear.metadata.type.v1.Proxy_ProxyAnnouncedCall
	487,  // 1213: sf.gear.metadata.type.v1.NominationPools_PalletNominationPoolsCommissionChangeRate.max_increase:type_name -> sf.gear.metadata.type.v1.SpArithmeticPerThingsPerbill
	217,  // 1214: sf.gear.metadata.type.v1.VestingPallet.vest_call:type_name -> sf.gear.metadata.type.v1.Vesting_VestCall
	344,  // 1215: sf.gear.metadata.type.v1.VestingPallet.vest_other_call:type_name -> sf.gear.metadata.type.v1.Vesting_VestOtherCall
	92,   // 1216: sf.gear.metadata.type.v1.VestingPallet.vested_transfer_call:type_name -> sf.gear.metadata.type.v1.Vesting_VestedTransferCall
	90,   // 1217: sf.gear.metadata.type.v1.VestingPallet.force_vested_transfer_call:type_name -> sf.gear.metadata.type.v1.Vesting_ForceVestedTransferCall
	8,    // 1218: sf.gear.metadata.type.v1.VestingPallet.merge_schedules_call:type_name -> sf.gear.metadata.type.v1.Vesting_MergeSchedulesCall
	204,  // 1219: sf.gear.metadata.type.v1.Referenda_Legacy.hash:type_name -> sf.gear.metadata.type.v1.PrimitiveTypesH256
	118,  // 1220: sf.gear.metadata.type.v1.Utility_System.value0:type_name -> sf.gear.metadata.type.v1.Value0
	569,  // 1221: sf.gear.metadata.type.v1.Utility_ForceBatchCall.calls:type_name -> sf.gear.metadata.type.v1.VaraRuntimeRuntimeCall
	128,  // 1222: sf.gear.metadata.type.v1.FellowshipCollective_AddMemberCall.who:type_name -> sf.gear.metadata.type.v1.FellowshipCollective_Who
	566,  // 1223: sf.gear.metadata.type.v1.NominationPools_Member.id:type_name -> sf.gear.metadata.type.v1.NominationPools_Id
	556,  // 1224: sf.gear.metadata.type.v1.NominationPools_Member.index:type_name -> sf.gear.metadata.type.v1.NominationPools_Index
	590,  // 1225: sf.gear.metadata.type.v1.NominationPools_Member.raw:type_name -> sf.gear.metadata.type.v1.NominationPools_Raw
	318,  // 1226: sf.gear.metadata.type.v1.NominationPools_Member.address32:type_name -> sf.gear.metadata.type.v1.NominationPools_Address32
	180,  // 1227: sf.gear.metadata.type.v1.NominationPools_Member.address20:type_name -> sf.gear.metadata.type.v1.NominationPools_Address20
	569,  // 1228: sf.gear.metadata.type.v1.Utility_BatchCall.calls:type_name -> sf.gear.metadata.type.v1.VaraRuntimeRuntimeCall
	249,  // 1229: sf.gear.metadata.type.v1.Proxy_Spawner.id:type_name -> sf.gear.metadata.type.v1.Proxy_Id
	112,  // 1230: sf.gear.metadata.type.v1.Proxy_Spawner.index:type_name -> sf.gear.metadata.type.v1.Proxy_Index
	293,  // 1231: sf.gear.metadata.type.v1.Proxy_Spawner.raw:type_name -> sf.gear.metadata.type.v1.Proxy_Raw
	602,  // 1232: sf.gear.metadata.type.v1.Proxy_Spawner.address32:type_name -> sf.gear.metadata.type.v1.Proxy_Address32
	140,  // 1233: sf.gear.metadata.type.v1.Proxy_Spawner.address20:type_name -> sf.gear.metadata.type.v1.Proxy_Address20
	263,  // 1234: sf.gear.metadata.type.v1.NominationPoolsPallet.join_call:type_name -> sf.gear.metadata.type.v1.NominationPools_JoinCall
	518,  // 1235: sf.gear.metadata.type.v1.NominationPoolsPallet.bond_extra_call:type_name -> sf.gear.metadata.type.v1.NominationPools_BondExtraCall
	107,  // 1236: sf.gear.metadata.type.v1.NominationPoolsPallet.claim_payout_call:type_name -> sf.gear.metadata.type.v1.NominationPools_ClaimPayoutCall
	499,  // 1237: sf.gear.metadata.type.v1.NominationPoolsPallet.unbond_call:type_name -> sf.gear.metadata.type.v1.NominationPools_UnbondCall
	398,  // 1238: sf.gear.metadata.type.v1.NominationPoolsPallet.pool_withdraw_unbonded_call:type_name -> sf.gear.metadata.type.v1.NominationPools_PoolWithdrawUnbondedCall
	597,  // 1239: sf.gear.metadata.type.v1.NominationPoolsPallet.withdraw_unbonded_call:type_name -> sf.gear.metadata.type.v1.NominationPools_WithdrawUnbondedCall
	565,  // 1240: sf.gear.metadata.type.v1.NominationPoolsPallet.create_call:type_name -> sf.gear.metadata.type.v1.NominationPools_CreateCall
	58,   // 1241: sf.gear.metadata.type.v1.NominationPoolsPallet.create_with_pool_id_call:type_name -> sf.gear.metadata.type.v1.NominationPools_CreateWithPoolIdCall
	390,  // 1242: sf.gear.metadata.type.v1.NominationPoolsPallet.nominate_call:type_name -> sf.gear.metadata.type.v1.NominationPools_NominateCall
	146,  // 1243: sf.gear.metadata.type.v1.NominationPoolsPallet.set_state_call:type_name -> sf.gear.metadata.type.v1.NominationPools_SetStateCall
	153,  // 1244: sf.gear.metadata.type.v1.NominationPoolsPallet.set_metadata_call:type_name -> sf.gear.metadata.type.v1.NominationPools_SetMetadataCall
	69,   // 1245: sf.gear.metadata.type.v1.NominationPoolsPallet.set_configs_call:type_name -> sf.gear.metadata.type.v1.NominationPools_SetConfigsCall
	130,  // 1246: sf.gear.metadata.type.v1.NominationPoolsPallet.update_roles_call:type_name -> sf.gear.metadata.type.v1.NominationPools_UpdateRolesCall
	485,  // 1247: sf.gear.metadata.type.v1.NominationPoolsPallet.chill_call:type_name -> sf.gear.metadata.type.v1.NominationPools_ChillCall
	550,  // 1248: sf.gear.metadata.type.v1.NominationPoolsPallet.bond_extra_other_call:type_name -> sf.gear.metadata.type.v1.NominationPools_BondExtraOtherCall
	373,  // 1249: sf.gear.metadata.type.v1.NominationPoolsPallet.set_claim_permission_call:type_name -> sf.gear.metadata.type.v1.NominationPools_SetClaimPermissionCall
	141,  // 1250: sf.gear.metadata.type.v1.NominationPoolsPallet.claim_payout_other_call:type_name -> sf.gear.metadata.type.v1.NominationPools_ClaimPayoutOtherCall
	543,  // 1251: sf.gear.metadata.type.v1.NominationPoolsPallet.set_commission_call:type_name -> sf.gear.metadata.type.v1.NominationPools_SetCommissionCall
	115,  // 1252: sf.gear.metadata.type.v1.NominationPoolsPallet.set_commission_max_call:type_name -> sf.gear.metadata.type.v1.NominationPools_SetCommissionMaxCall
	551,  // 1253: sf.gear.metadata.type.v1.NominationPoolsPallet.set_commission_change_rate_call:type_name -> sf.gear.metadata.type.v1.NominationPools_SetCommissionChangeRateCall
	285,  // 1254: sf.gear.metadata.type.v1.NominationPoolsPallet.claim_commission_call:type_name -> sf.gear.metadata.type.v1.NominationPools_ClaimCommissionCall
	257,  // 1255: sf.gear.metadata.type.v1.NominationPoolsPallet.adjust_pool_deposit_call:type_name -> sf.gear.metadata.type.v1.NominationPools_AdjustPoolDepositCall
	513,  // 1256: sf.gear.metadata.type.v1.Balances_Id.value0:type_name -> sf.gear.metadata.type.v1.SpCoreCryptoAccountId32
	409,  // 1257: sf.gear.metadata.type.v1.FellowshipReferenda_SubmitCall.proposal_origin:type_name -> sf.gear.metadata.type.v1.FellowshipReferenda_ProposalOrigin
	430,  // 1258: sf.gear.metadata.type.v1.FellowshipReferenda_SubmitCall.proposal:type_name -> sf.gear.metadata.type.v1.FellowshipReferenda_Proposal
	28,   // 1259: sf.gear.metadata.type.v1.FellowshipReferenda_SubmitCall.enactment_moment:type_name -> sf.gear.metadata.type.v1.FellowshipReferenda_EnactmentMoment
	413,  // 1260: sf.gear.metadata.type.v1.Whitelist_DispatchWhitelistedCallWithPreimageCall.system:type_name -> sf.gear.metadata.type.v1.SystemPallet
	563,  // 1261: sf.gear.metadata.type.v1.Whitelist_DispatchWhitelistedCallWithPreimageCall.timestamp:type_name -> sf.gear.metadata.type.v1.TimestampPallet
	530,  // 1262: sf.gear.metadata.type.v1.Whitelist_DispatchWhitelistedCallWithPreimageCall.babe:type_name -> sf.gear.metadata.type.v1.BabePallet
	84,   // 1263: sf.gear.metadata.type.v1.Whitelist_DispatchWhitelistedCallWithPreimageCall.grandpa:type_name -> sf.gear.metadata.type.v1.GrandpaPallet
	404,  // 1264: sf.gear.metadata.type.v1.Whitelist_DispatchWhitelistedCallWithPreimageCall.balances:type_name -> sf.gear.metadata.type.v1.BalancesPallet
	436,  // 1265: sf.gear.metadata.type.v1.Whitelist_DispatchWhitelistedCallWithPreimageCall.vesting:type_name -> sf.gear.metadata.type.v1.VestingPallet
	391,  // 1266: sf.gear.metadata.type.v1.Whitelist_DispatchWhitelistedCallWithPreimageCall.bags_list:type_name -> sf.gear.metadata.type.v1.BagsListPallet
	531,  // 1267: sf.gear.metadata.type.v1.Whitelist_DispatchWhitelistedCallWithPreimageCall.im_online:type_name -> sf.gear.metadata.type.v1.ImOnlinePallet
	282,  // 1268: sf.gear.metadata.type.v1.Whitelist_DispatchWhitelistedCallWithPreimageCall.staking:type_name -> sf.gear.metadata.type.v1.StakingPallet
	297,  // 1269: sf.gear.metadata.type.v1.Whitelist_DispatchWhitelistedCallWithPreimageCall.session:type_name -> sf.gear.metadata.type.v1.SessionPallet
	21,   // 1270: sf.gear.metadata.type.v1.Whitelist_DispatchWhitelistedCallWithPreimageCall.treasury:type_name -> sf.gear.metadata.type.v1.TreasuryPallet
	248,  // 1271: sf.gear.metadata.type.v1.Whitelist_DispatchWhitelistedCallWithPreimageCall.utility:type_name -> sf.gear.metadata.type.v1.UtilityPallet
	361,  // 1272: sf.gear.metadata.type.v1.Whitelist_DispatchWhitelistedCallWithPreimageCall.conviction_voting:type_name -> sf.gear.metadata.type.v1.ConvictionVotingPallet
	287,  // 1273: sf.gear.metadata.type.v1.Whitelist_DispatchWhitelistedCallWithPreimageCall.referenda:type_name -> sf.gear.metadata.type.v1.ReferendaPallet
	214,  // 1274: sf.gear.metadata.type.v1.Whitelist_DispatchWhitelistedCallWithPreimageCall.fellowship_collective:type_name -> sf.gear.metadata.type.v1.FellowshipCollectivePallet
	196,  // 1275: sf.gear.metadata.type.v1.Whitelist_DispatchWhitelistedCallWithPreimageCall.fellowship_referenda:type_name -> sf.gear.metadata.type.v1.FellowshipReferendaPallet
	144,  // 1276: sf.gear.metadata.type.v1.Whitelist_DispatchWhitelistedCallWithPreimageCall.whitelist:type_name -> sf.gear.metadata.type.v1.WhitelistPallet
	111,  // 1277: sf.gear.metadata.type.v1.Whitelist_DispatchWhitelistedCallWithPreimageCall.scheduler:type_name -> sf.gear.metadata.type.v1.SchedulerPallet
	29,   // 1278: sf.gear.metadata.type.v1.Whitelist_DispatchWhitelistedCallWithPreimageCall.preimage:type_name -> sf.gear.metadata.type.v1.PreimagePallet
	394,  // 1279: sf.gear.metadata.type.v1.Whitelist_DispatchWhitelistedCallWithPreimageCall.identity:type_name -> sf.gear.metadata.type.v1.IdentityPallet
	434,  // 1280: sf.gear.metadata.type.v1.Whitelist_DispatchWhitelistedCallWithPreimageCall.proxy:type_name -> sf.gear.metadata.type.v1.ProxyPallet
	311,  // 1281: sf.gear.metadata.type.v1.Whitelist_DispatchWhitelistedCallWithPreimageCall.multisig:type_name -> sf.gear.metadata.type.v1.MultisigPallet
	589,  // 1282: sf.gear.metadata.type.v1.Whitelist_DispatchWhitelistedCallWithPreimageCall.election_provider_multi_phase:type_name -> sf.gear.metadata.type.v1.ElectionProviderMultiPhasePallet
	571,  // 1283: sf.gear.metadata.type.v1.Whitelist_DispatchWhitelistedCallWithPreimageCall.bounties:type_name -> sf.gear.metadata.type.v1.BountiesPallet
	162,  // 1284: sf.gear.metadata.type.v1.Whitelist_DispatchWhitelistedCallWithPreimageCall.child_bounties:type_name -> sf.gear.metadata.type.v1.ChildBountiesPallet
	448,  // 1285: sf.gear.metadata.type.v1.Whitelist_DispatchWhitelistedCallWithPreimageCall.nomination_pools:type_name -> sf.gear.metadata.type.v1.NominationPoolsPallet
	368,  // 1286: sf.gear.metadata.type.v1.Whitelist_DispatchWhitelistedCallWithPreimageCall.gear:type_name -> sf.gear.metadata.type.v1.GearPallet
	251,  // 1287: sf.gear.metadata.type.v1.Whitelist_DispatchWhitelistedCallWithPreimageCall.staking_rewards:type_name -> sf.gear.metadata.type.v1.StakingRewardsPallet
	583,  // 1288: sf.gear.metadata.type.v1.Whitelist_DispatchWhitelistedCallWithPreimageCall.gear_voucher:type_name -> sf.gear.metadata.type.v1.GearVoucherPallet
	513,  // 1289: sf.gear.metadata.type.v1.Staking_Account.value0:type_name -> sf.gear.metadata.type.v1.SpCoreCryptoAccountId32
	104,  // 1290: sf.gear.metadata.type.v1.Staking_BondCall.payee:type_name -> sf.gear.metadata.type.v1.Staking_Payee
	513,  // 1291: sf.gear.metadata.type.v1.BagsList_Id.value0:type_name -> sf.gear.metadata.type.v1.SpCoreCryptoAccountId32
	204,  // 1292: sf.gear.metadata.type.v1.FinalityGrandpaPrecommit.target_hash:type_name -> sf.gear.metadata.type.v1.PrimitiveTypesH256
	175,  // 1293: sf.gear.metadata.type.v1.Proxy_RejectAnnouncementCall.delegate:type_name -> sf.gear.metadata.type.v1.Proxy_Delegate
	204,  // 1294: sf.gear.metadata.type.v1.Proxy_RejectAnnouncementCall.call_hash:type_name -> sf.gear.metadata.type.v1.PrimitiveTypesH256
	496,  // 1295: sf.gear.metadata.type.v1.Gear_ClaimValueCall.message_id:type_name -> sf.gear.metadata.type.v1.GprimitivesMessageId
	30,   // 1296: sf.gear.metadata.type.v1.Identity_Riot.none:type_name -> sf.gear.metadata.type.v1.Identity_None
	548,  // 1297: sf.gear.metadata.type.v1.Identity_Riot.raw0:type_name -> sf.gear.metadata.type.v1.Identity_Raw0
	433,  // 1298: sf.gear.metadata.type.v1.Identity_Riot.raw1:type_name -> sf.gear.metadata.type.v1.Identity_Raw1
	208,  // 1299: sf.gear.metadata.type.v1.Identity_Riot.raw2:type_name -> sf.gear.metadata.type.v1.Identity_Raw2
	339,  // 1300: sf.gear.metadata.type.v1.Identity_Riot.raw3:type_name -> sf.gear.metadata.type.v1.Identity_Raw3
	165,  // 1301: sf.gear.metadata.type.v1.Identity_Riot.raw4:type_name -> sf.gear.metadata.type.v1.Identity_Raw4
	376,  // 1302: sf.gear.metadata.type.v1.Identity_Riot.raw5:type_name -> sf.gear.metadata.type.v1.Identity_Raw5
	156,  // 1303: sf.gear.metadata.type.v1.Identity_Riot.raw6:type_name -> sf.gear.metadata.type.v1.Identity_Raw6
	555,  // 1304: sf.gear.metadata.type.v1.Identity_Riot.raw7:type_name -> sf.gear.metadata.type.v1.Identity_Raw7
	326,  // 1305: sf.gear.metadata.type.v1.Identity_Riot.raw8:type_name -> sf.gear.metadata.type.v1.Identity_Raw8
	298,  // 1306: sf.gear.metadata.type.v1.Identity_Riot.raw9:type_name -> sf.gear.metadata.type.v1.Identity_Raw9
	415,  // 1307: sf.gear.metadata.type.v1.Identity_Riot.raw10:type_name -> sf.gear.metadata.type.v1.Identity_Raw10
	549,  // 1308: sf.gear.metadata.type.v1.Identity_Riot.raw11:type_name -> sf.gear.metadata.type.v1.Identity_Raw11
	183,  // 1309: sf.gear.metadata.type.v1.Identity_Riot.raw12:type_name -> sf.gear.metadata.type.v1.Identity_Raw12
	576,  // 1310: sf.gear.metadata.type.v1.Identity_Riot.raw13:type_name -> sf.gear.metadata.type.v1.Identity_Raw13
	106,  // 1311: sf.gear.metadata.type.v1.Identity_Riot.raw14:type_name -> sf.gear.metadata.type.v1.Identity_Raw14
	561,  // 1312: sf.gear.metadata.type.v1.Identity_Riot.raw15:type_name -> sf.gear.metadata.type.v1.Identity_Raw15
	237,  // 1313: sf.gear.metadata.type.v1.Identity_Riot.raw16:type_name -> sf.gear.metadata.type.v1.Identity_Raw16
	159,  // 1314: sf.gear.metadata.type.v1.Identity_Riot.raw17:type_name -> sf.gear.metadata.type.v1.Identity_Raw17
	477,  // 1315: sf.gear.metadata.type.v1.Identity_Riot.raw18:type_name -> sf.gear.metadata.type.v1.Identity_Raw18
	317,  // 1316: sf.gear.metadata.type.v1.Identity_Riot.raw19:type_name -> sf.gear.metadata.type.v1.Identity_Raw19
	606,  // 1317: sf.gear.metadata.type.v1.Identity_Riot.raw20:type_name -> sf.gear.metadata.type.v1.Identity_Raw20
	79,   // 1318: sf.gear.metadata.type.v1.Identity_Riot.raw21:type_name -> sf.gear.metadata.type.v1.Identity_Raw21
	34,   // 1319: sf.gear.metadata.type.v1.Identity_Riot.raw22:type_name -> sf.gear.metadata.type.v1.Identity_Raw22
	36,   // 1320: sf.gear.metadata.type.v1.Identity_Riot.raw23:type_name -> sf.gear.metadata.type.v1.Identity_Raw23
	6,    // 1321: sf.gear.metadata.type.v1.Identity_Riot.raw24:type_name -> sf.gear.metadata.type.v1.Identity_Raw24
	542,  // 1322: sf.gear.metadata.type.v1.Identity_Riot.raw25:type_name -> sf.gear.metadata.type.v1.Identity_Raw25
	145,  // 1323: sf.gear.metadata.type.v1.Identity_Riot.raw26:type_name -> sf.gear.metadata.type.v1.Identity_Raw26
	265,  // 1324: sf.gear.metadata.type.v1.Identity_Riot.raw27:type_name -> sf.gear.metadata.type.v1.Identity_Raw27
	387,  // 1325: sf.gear.metadata.type.v1.Identity_Riot.raw28:type_name -> sf.gear.metadata.type.v1.Identity_Raw28
	67,   // 1326: sf.gear.metadata.type.v1.Identity_Riot.raw29:type_name -> sf.gear.metadata.type.v1.Identity_Raw29
	340,  // 1327: sf.gear.metadata.type.v1.Identity_Riot.raw30:type_name -> sf.gear.metadata.type.v1.Identity_Raw30
	289,  // 1328: sf.gear.metadata.type.v1.Identity_Riot.raw31:type_name -> sf.gear.metadata.type.v1.Identity_Raw31
	601,  // 1329: sf.gear.metadata.type.v1.Identity_Riot.raw32:type_name -> sf.gear.metadata.type.v1.Identity_Raw32
	205,  // 1330: sf.gear.metadata.type.v1.Identity_Riot.blake_two256:type_name -> sf.gear.metadata.type.v1.Identity_BlakeTwo256
	83,   // 1331: sf.gear.metadata.type.v1.Identity_Riot.sha256:type_name -> sf.gear.metadata.type.v1.Identity_Sha256
	2,    // 1332: sf.gear.metadata.type.v1.Identity_Riot.keccak256:type_name -> sf.gear.metadata.type.v1.Identity_Keccak256
	397,  // 1333: sf.gear.metadata.type.v1.Identity_Riot.sha_three256:type_name -> sf.gear.metadata.type.v1.Identity_ShaThree256
	261,  // 1334: sf.gear.metadata.type.v1.Proxy_TupleNull.value:type_name -> sf.gear.metadata.type.v1.TupleNull
	167,  // 1335: sf.gear.metadata.type.v1.ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes10Listuint32.value1:type_name -> sf.gear.metadata.type.v1.ElectionProviderMultiPhase_TupleUint32SpArithmeticPerThingsPerU16
	261,  // 1336: sf.gear.metadata.type.v1.Balances_TupleNull.value:type_name -> sf.gear.metadata.type.v1.TupleNull
	91,   // 1337: sf.gear.metadata.type.v1.Staking_ValidateCall.prefs:type_name -> sf.gear.metadata.type.v1.Staking_PalletStakingValidatorPrefs
	585,  // 1338: sf.gear.metadata.type.v1.Staking_MinNominatorBond.noop:type_name -> sf.gear.metadata.type.v1.Staking_Noop
	468,  // 1339: sf.gear.metadata.type.v1.Staking_MinNominatorBond.set:type_name -> sf.gear.metadata.type.v1.Staking_Set
	245,  // 1340: sf.gear.metadata.type.v1.Staking_MinNominatorBond.remove:type_name -> sf.gear.metadata.type.v1.Staking_Remove
	128,  // 1341: sf.gear.metadata.type.v1.FellowshipCollective_DemoteMemberCall.who:type_name -> sf.gear.metadata.type.v1.FellowshipCollective_Who
	380,  // 1342: sf.gear.metadata.type.v1.Gear_SendMessageCall.destination:type_name -> sf.gear.metadata.type.v1.GprimitivesActorId
	417,  // 1343: sf.gear.metadata.type.v1.ElectionProviderMultiPhase_PalletElectionProviderMultiPhaseRawSolution.solution:type_name -> sf.gear.metadata.type.v1.VaraRuntimeNposSolution16
	517,  // 1344: sf.gear.metadata.type.v1.ElectionProviderMultiPhase_PalletElectionProviderMultiPhaseRawSolution.score:type_name -> sf.gear.metadata.type.v1.SpNposElectionsElectionScore
	428,  // 1345: sf.gear.metadata.type.v1.Treasury_SpendLocalCall.beneficiary:type_name -> sf.gear.metadata.type.v1.Treasury_Beneficiary
	118,  // 1346: sf.gear.metadata.type.v1.Utility_Void.value0:type_name -> sf.gear.metadata.type.v1.Value0
	513,  // 1347: sf.gear.metadata.type.v1.Multisig_AsMultiThreshold1Call.other_signatories:type_name -> sf.gear.metadata.type.v1.SpCoreCryptoAccountId32
	413,  // 1348: sf.gear.metadata.type.v1.Multisig_AsMultiThreshold1Call.system:type_name -> sf.gear.metadata.type.v1.SystemPallet
	563,  // 1349: sf.gear.metadata.type.v1.Multisig_AsMultiThreshold1Call.timestamp:type_name -> sf.gear.metadata.type.v1.TimestampPallet
	530,  // 1350: sf.gear.metadata.type.v1.Multisig_AsMultiThreshold1Call.babe:type_name -> sf.gear.metadata.type.v1.BabePallet
	84,   // 1351: sf.gear.metadata.type.v1.Multisig_AsMultiThreshold1Call.grandpa:type_name -> sf.gear.metadata.type.v1.GrandpaPallet
	404,  // 1352: sf.gear.metadata.type.v1.Multisig_AsMultiThreshold1Call.balances:type_name -> sf.gear.metadata.type.v1.BalancesPallet
	436,  // 1353: sf.gear.metadata.type.v1.Multisig_AsMultiThreshold1Call.vesting:type_name -> sf.gear.metadata.type.v1.VestingPallet
	391,  // 1354: sf.gear.metadata.type.v1.Multisig_AsMultiThreshold1Call.bags_list:type_name -> sf.gear.metadata.type.v1.BagsListPallet
	531,  // 1355: sf.gear.metadata.type.v1.Multisig_AsMultiThreshold1Call.im_online:type_name -> sf.gear.metadata.type.v1.ImOnlinePallet
	282,  // 1356: sf.gear.metadata.type.v1.Multisig_AsMultiThreshold1Call.staking:type_name -> sf.gear.metadata.type.v1.StakingPallet
	297,  // 1357: sf.gear.metadata.type.v1.Multisig_AsMultiThreshold1Call.session:type_name -> sf.gear.metadata.type.v1.SessionPallet
	21,   // 1358: sf.gear.metadata.type.v1.Multisig_AsMultiThreshold1Call.treasury:type_name -> sf.gear.metadata.type.v1.TreasuryPallet
	248,  // 1359: sf.gear.metadata.type.v1.Multisig_AsMultiThreshold1Call.utility:type_name -> sf.gear.metadata.type.v1.UtilityPallet
	361,  // 1360: sf.gear.metadata.type.v1.Multisig_AsMultiThreshold1Call.conviction_voting:type_name -> sf.gear.metadata.type.v1.ConvictionVotingPallet
	287,  // 1361: sf.gear.metadata.type.v1.Multisig_AsMultiThreshold1Call.referenda:type_name -> sf.gear.metadata.type.v1.ReferendaPallet
	214,  // 1362: sf.gear.metadata.type.v1.Multisig_AsMultiThreshold1Call.fellowship_collective:type_name -> sf.gear.metadata.type.v1.FellowshipCollectivePallet
	196,  // 1363: sf.gear.metadata.type.v1.Multisig_AsMultiThreshold1Call.fellowship_referenda:type_name -> sf.gear.metadata.type.v1.FellowshipReferendaPallet
	144,  // 1364: sf.gear.metadata.type.v1.Multisig_AsMultiThreshold1Call.whitelist:type_name -> sf.gear.metadata.type.v1.WhitelistPallet
	111,  // 1365: sf.gear.metadata.type.v1.Multisig_AsMultiThreshold1Call.scheduler:type_name -> sf.gear.metadata.type.v1.SchedulerPallet
	29,   // 1366: sf.gear.metadata.type.v1.Multisig_AsMultiThreshold1Call.preimage:type_name -> sf.gear.metadata.type.v1.PreimagePallet
	394,  // 1367: sf.gear.metadata.type.v1.Multisig_AsMultiThreshold1Call.identity:type_name -> sf.gear.metadata.type.v1.IdentityPallet
	434,  // 1368: sf.gear.metadata.type.v1.Multisig_AsMultiThreshold1Call.proxy:type_name -> sf.gear.metadata.type.v1.ProxyPallet
	311,  // 1369: sf.gear.metadata.type.v1.Multisig_AsMultiThreshold1Call.multisig:type_name -> sf.gear.metadata.type.v1.MultisigPallet
	589,  // 1370: sf.gear.metadata.type.v1.Multisig_AsMultiThreshold1Call.election_provider_multi_phase:type_name -> sf.gear.metadata.type.v1.ElectionProviderMultiPhasePallet
	571,  // 1371: sf.gear.metadata.type.v1.Multisig_AsMultiThreshold1Call.bounties:type_name -> sf.gear.metadata.type.v1.BountiesPallet
	162,  // 1372: sf.gear.metadata.type.v1.Multisig_AsMultiThreshold1Call.child_bounties:type_name -> sf.gear.metadata.type.v1.ChildBountiesPallet
	448,  // 1373: sf.gear.metadata.type.v1.Multisig_AsMultiThreshold1Call.nomination_pools:type_name -> sf.gear.metadata.type.v1.NominationPoolsPallet
	368,  // 1374: sf.gear.metadata.type.v1.Multisig_AsMultiThreshold1Call.gear:type_name -> sf.gear.metadata.type.v1.GearPallet
	251,  // 1375: sf.gear.metadata.type.v1.Multisig_AsMultiThreshold1Call.staking_rewards:type_name -> sf.gear.metadata.type.v1.StakingRewardsPallet
	583,  // 1376: sf.gear.metadata.type.v1.Multisig_AsMultiThreshold1Call.gear_voucher:type_name -> sf.gear.metadata.type.v1.GearVoucherPallet
	143,  // 1377: sf.gear.metadata.type.v1.Balances_ForceSetBalanceCall.who:type_name -> sf.gear.metadata.type.v1.Balances_Who
	35,   // 1378: sf.gear.metadata.type.v1.Identity_SetFieldsCall.fields:type_name -> sf.gear.metadata.type.v1.Identity_PalletIdentityTypesBitFlags
	171,  // 1379: sf.gear.metadata.type.v1.GearVoucher_CallCall.voucher_id:type_name -> sf.gear.metadata.type.v1.GearVoucher_PalletGearVoucherInternalVoucherId
	252,  // 1380: sf.gear.metadata.type.v1.GearVoucher_CallCall.call:type_name -> sf.gear.metadata.type.v1.GearVoucher_Call
	172,  // 1381: sf.gear.metadata.type.v1.TupleFinalityGrandpaPrevotespConsensusGrandpaAppSignature.value0:type_name -> sf.gear.metadata.type.v1.FinalityGrandpaPrevote
	136,  // 1382: sf.gear.metadata.type.v1.TupleFinalityGrandpaPrevotespConsensusGrandpaAppSignature.value1:type_name -> sf.gear.metadata.type.v1.SpConsensusGrandpaAppSignature
	388,  // 1383: sf.gear.metadata.type.v1.Proxy_ProxyType.any:type_name -> sf.gear.metadata.type.v1.Proxy_Any
	18,   // 1384: sf.gear.metadata.type.v1.Proxy_ProxyType.non_transfer:type_name -> sf.gear.metadata.type.v1.Proxy_NonTransfer
	523,  // 1385: sf.gear.metadata.type.v1.Proxy_ProxyType.governance:type_name -> sf.gear.metadata.type.v1.Proxy_Governance
	453,  // 1386: sf.gear.metadata.type.v1.Proxy_ProxyType.staking:type_name -> sf.gear.metadata.type.v1.Proxy_Staking
	498,  // 1387: sf.gear.metadata.type.v1.Proxy_ProxyType.identity_judgement:type_name -> sf.gear.metadata.type.v1.Proxy_IdentityJudgement
	19,   // 1388: sf.gear.metadata.type.v1.Proxy_ProxyType.cancel_proxy:type_name -> sf.gear.metadata.type.v1.Proxy_CancelProxy
	562,  // 1389: sf.gear.metadata.type.v1.ChildBounties_AwardChildBountyCall.beneficiary:type_name -> sf.gear.metadata.type.v1.ChildBounties_Beneficiary
	437,  // 1390: sf.gear.metadata.type.v1.Referenda_Proposal.legacy:type_name -> sf.gear.metadata.type.v1.Referenda_Legacy
	163,  // 1391: sf.gear.metadata.type.v1.Referenda_Proposal.inline:type_name -> sf.gear.metadata.type.v1.Referenda_Inline
	216,  // 1392: sf.gear.metadata.type.v1.Referenda_Proposal.lookup:type_name -> sf.gear.metadata.type.v1.Referenda_Lookup
	261,  // 1393: sf.gear.metadata.type.v1.FellowshipCollective_TupleNull.value:type_name -> sf.gear.metadata.type.v1.TupleNull
	261,  // 1394: sf.gear.metadata.type.v1.Identity_TupleNull.value:type_name -> sf.gear.metadata.type.v1.TupleNull
	175,  // 1395: sf.gear.metadata.type.v1.Proxy_RemoveProxyCall.delegate:type_name -> sf.gear.metadata.type.v1.Proxy_Delegate
	484,  // 1396: sf.gear.metadata.type.v1.Proxy_RemoveProxyCall.proxy_type:type_name -> sf.gear.metadata.type.v1.Proxy_ProxyType
	389,  // 1397: sf.gear.metadata.type.v1.NominationPools_UnbondCall.member_account:type_name -> sf.gear.metadata.type.v1.NominationPools_MemberAccount
	487,  // 1398: sf.gear.metadata.type.v1.NominationPools_TupleSpArithmeticPerThingsPerbillspCoreCryptoAccountId32.value0:type_name -> sf.gear.metadata.type.v1.SpArithmeticPerThingsPerbill
	513,  // 1399: sf.gear.metadata.type.v1.NominationPools_TupleSpArithmeticPerThingsPerbillspCoreCryptoAccountId32.value1:type_name -> sf.gear.metadata.type.v1.SpCoreCryptoAccountId32
	303,  // 1400: sf.gear.metadata.type.v1.NominationPools_NewRoot.noop:type_name -> sf.gear.metadata.type.v1.NominationPools_Noop
	4,    // 1401: sf.gear.metadata.type.v1.NominationPools_NewRoot.set:type_name -> sf.gear.metadata.type.v1.NominationPools_Set
	358,  // 1402: sf.gear.metadata.type.v1.NominationPools_NewRoot.remove:type_name -> sf.gear.metadata.type.v1.NominationPools_Remove
	171,  // 1403: sf.gear.metadata.type.v1.GearVoucher_DeclineCall.voucher_id:type_name -> sf.gear.metadata.type.v1.GearVoucher_PalletGearVoucherInternalVoucherId
	118,  // 1404: sf.gear.metadata.type.v1.Utility_Origins.value0:type_name -> sf.gear.metadata.type.v1.Value0
	128,  // 1405: sf.gear.metadata.type.v1.FellowshipCollective_PromoteMemberCall.who:type_name -> sf.gear.metadata.type.v1.FellowshipCollective_Who
	204,  // 1406: sf.gear.metadata.type.v1.FellowshipReferenda_Legacy.hash:type_name -> sf.gear.metadata.type.v1.PrimitiveTypesH256
	283,  // 1407: sf.gear.metadata.type.v1.ConvictionVoting_VoteCall.vote:type_name -> sf.gear.metadata.type.v1.ConvictionVoting_Vote
	133,  // 1408: sf.gear.metadata.type.v1.NominationPools_BondExtraCall.extra:type_name -> sf.gear.metadata.type.v1.NominationPools_Extra
	513,  // 1409: sf.gear.metadata.type.v1.Staking_Id.value0:type_name -> sf.gear.metadata.type.v1.SpCoreCryptoAccountId32
	204,  // 1410: sf.gear.metadata.type.v1.Preimage_UnnotePreimageCall.hash:type_name -> sf.gear.metadata.type.v1.PrimitiveTypesH256
	167,  // 1411: sf.gear.metadata.type.v1.ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes9Listuint32.value1:type_name -> sf.gear.metadata.type.v1.ElectionProviderMultiPhase_TupleUint32SpArithmeticPerThingsPerU16
	592,  // 1412: sf.gear.metadata.type.v1.VaraRuntimeSessionKeys.babe:type_name -> sf.gear.metadata.type.v1.SpConsensusBabeAppPublic
	70,   // 1413: sf.gear.metadata.type.v1.VaraRuntimeSessionKeys.grandpa:type_name -> sf.gear.metadata.type.v1.SpConsensusGrandpaAppPublic
	44,   // 1414: sf.gear.metadata.type.v1.VaraRuntimeSessionKeys.im_online:type_name -> sf.gear.metadata.type.v1.ImOnline_PalletImOnlineSr25519AppSr25519Public
	393,  // 1415: sf.gear.metadata.type.v1.VaraRuntimeSessionKeys.authority_discovery:type_name -> sf.gear.metadata.type.v1.SpAuthorityDiscoveryAppPublic
	441,  // 1416: sf.gear.metadata.type.v1.Utility_AsOrigin.system:type_name -> sf.gear.metadata.type.v1.Utility_System
	505,  // 1417: sf.gear.metadata.type.v1.Utility_AsOrigin.origins:type_name -> sf.gear.metadata.type.v1.Utility_Origins
	476,  // 1418: sf.gear.metadata.type.v1.Utility_AsOrigin.void:type_name -> sf.gear.metadata.type.v1.Utility_Void
	61,   // 1419: sf.gear.metadata.type.v1.BabePallet.report_equivocation_call:type_name -> sf.gear.metadata.type.v1.Babe_ReportEquivocationCall
	349,  // 1420: sf.gear.metadata.type.v1.BabePallet.report_equivocation_unsigned_call:type_name -> sf.gear.metadata.type.v1.Babe_ReportEquivocationUnsignedCall
	184,  // 1421: sf.gear.metadata.type.v1.BabePallet.plan_config_change_call:type_name -> sf.gear.metadata.type.v1.Babe_PlanConfigChangeCall
	190,  // 1422: sf.gear.metadata.type.v1.ImOnlinePallet.heartbeat_call:type_name -> sf.gear.metadata.type.v1.ImOnline_HeartbeatCall
	513,  // 1423: sf.gear.metadata.type.v1.Staking_ChillOtherCall.controller:type_name -> sf.gear.metadata.type.v1.SpCoreCryptoAccountId32
	319,  // 1424: sf.gear.metadata.type.v1.StakingRewards_Index.value0:type_name -> sf.gear.metadata.type.v1.StakingRewards_TupleNull
	521,  // 1425: sf.gear.metadata.type.v1.Scheduler_ScheduleAfterCall.maybe_periodic:type_name -> sf.gear.metadata.type.v1.Scheduler_TupleUint32Uint32
	413,  // 1426: sf.gear.metadata.type.v1.Scheduler_ScheduleAfterCall.system:type_name -> sf.gear.metadata.type.v1.SystemPallet
	563,  // 1427: sf.gear.metadata.type.v1.Scheduler_ScheduleAfterCall.timestamp:type_name -> sf.gear.metadata.type.v1.TimestampPallet
	530,  // 1428: sf.gear.metadata.type.v1.Scheduler_ScheduleAfterCall.babe:type_name -> sf.gear.metadata.type.v1.BabePallet
	84,   // 1429: sf.gear.metadata.type.v1.Scheduler_ScheduleAfterCall.grandpa:type_name -> sf.gear.metadata.type.v1.GrandpaPallet
	404,  // 1430: sf.gear.metadata.type.v1.Scheduler_ScheduleAfterCall.balances:type_name -> sf.gear.metadata.type.v1.BalancesPallet
	436,  // 1431: sf.gear.metadata.type.v1.Scheduler_ScheduleAfterCall.vesting:type_name -> sf.gear.metadata.type.v1.VestingPallet
	391,  // 1432: sf.gear.metadata.type.v1.Scheduler_ScheduleAfterCall.bags_list:type_name -> sf.gear.metadata.type.v1.BagsListPallet
	531,  // 1433: sf.gear.metadata.type.v1.Scheduler_ScheduleAfterCall.im_online:type_name -> sf.gear.metadata.type.v1.ImOnlinePallet
	282,  // 1434: sf.gear.metadata.type.v1.Scheduler_ScheduleAfterCall.staking:type_name -> sf.gear.metadata.type.v1.StakingPallet
	297,  // 1435: sf.gear.metadata.type.v1.Scheduler_ScheduleAfterCall.session:type_name -> sf.gear.metadata.type.v1.SessionPallet
	21,   // 1436: sf.gear.metadata.type.v1.Scheduler_ScheduleAfterCall.treasury:type_name -> sf.gear.metadata.type.v1.TreasuryPallet
	248,  // 1437: sf.gear.metadata.type.v1.Scheduler_ScheduleAfterCall.utility:type_name -> sf.gear.metadata.type.v1.UtilityPallet
	361,  // 1438: sf.gear.metadata.type.v1.Scheduler_ScheduleAfterCall.conviction_voting:type_name -> sf.gear.metadata.type.v1.ConvictionVotingPallet
	287,  // 1439: sf.gear.metadata.type.v1.Scheduler_ScheduleAfterCall.referenda:type_name -> sf.gear.metadata.type.v1.ReferendaPallet
	214,  // 1440: sf.gear.metadata.type.v1.Scheduler_ScheduleAfterCall.fellowship_collective:type_name -> sf.gear.metadata.type.v1.FellowshipCollectivePallet
	196,  // 1441: sf.gear.metadata.type.v1.Scheduler_ScheduleAfterCall.fellowship_referenda:type_name -> sf.gear.metadata.type.v1.FellowshipReferendaPallet
	144,  // 1442: sf.gear.metadata.type.v1.Scheduler_ScheduleAfterCall.whitelist:type_name -> sf.gear.metadata.type.v1.WhitelistPallet
	111,  // 1443: sf.gear.metadata.type.v1.Scheduler_ScheduleAfterCall.scheduler:type_name -> sf.gear.metadata.type.v1.SchedulerPallet
	29,   // 1444: sf.gear.metadata.type.v1.Scheduler_ScheduleAfterCall.preimage:type_name -> sf.gear.metadata.type.v1.PreimagePallet
	394,  // 1445: sf.gear.metadata.type.v1.Scheduler_ScheduleAfterCall.identity:type_name -> sf.gear.metadata.type.v1.IdentityPallet
	434,  // 1446: sf.gear.metadata.type.v1.Scheduler_ScheduleAfterCall.proxy:type_name -> sf.gear.metadata.type.v1.ProxyPallet
	311,  // 1447: sf.gear.metadata.type.v1.Scheduler_ScheduleAfterCall.multisig:type_name -> sf.gear.metadata.type.v1.MultisigPallet
	589,  // 1448: sf.gear.metadata.type.v1.Scheduler_ScheduleAfterCall.election_provider_multi_phase:type_name -> sf.gear.metadata.type.v1.ElectionProviderMultiPhasePallet
	571,  // 1449: sf.gear.metadata.type.v1.Scheduler_ScheduleAfterCall.bounties:type_name -> sf.gear.metadata.type.v1.BountiesPallet
	162,  // 1450: sf.gear.metadata.type.v1.Scheduler_ScheduleAfterCall.child_bounties:type_name -> sf.gear.metadata.type.v1.ChildBountiesPallet
	448,  // 1451: sf.gear.metadata.type.v1.Scheduler_ScheduleAfterCall.nomination_pools:type_name -> sf.gear.metadata.type.v1.NominationPoolsPallet
	368,  // 1452: sf.gear.metadata.type.v1.Scheduler_ScheduleAfterCall.gear:type_name -> sf.gear.metadata.type.v1.GearPallet
	251,  // 1453: sf.gear.metadata.type.v1.Scheduler_ScheduleAfterCall.staking_rewards:type_name -> sf.gear.metadata.type.v1.StakingRewardsPallet
	583,  // 1454: sf.gear.metadata.type.v1.Scheduler_ScheduleAfterCall.gear_voucher:type_name -> sf.gear.metadata.type.v1.GearVoucherPallet
	488,  // 1455: sf.gear.metadata.type.v1.Identity_PalletIdentitySimpleIdentityInfo.additional:type_name -> sf.gear.metadata.type.v1.BoundedCollectionsBoundedVecBoundedVec
	129,  // 1456: sf.gear.metadata.type.v1.Identity_PalletIdentitySimpleIdentityInfo.display:type_name -> sf.gear.metadata.type.v1.Identity_Display
	407,  // 1457: sf.gear.metadata.type.v1.Identity_PalletIdentitySimpleIdentityInfo.legal:type_name -> sf.gear.metadata.type.v1.Identity_Legal
	420,  // 1458: sf.gear.metadata.type.v1.Identity_PalletIdentitySimpleIdentityInfo.web:type_name -> sf.gear.metadata.type.v1.Identity_Web
	463,  // 1459: sf.gear.metadata.type.v1.Identity_PalletIdentitySimpleIdentityInfo.riot:type_name -> sf.gear.metadata.type.v1.Identity_Riot
	383,  // 1460: sf.gear.metadata.type.v1.Identity_PalletIdentitySimpleIdentityInfo.email:type_name -> sf.gear.metadata.type.v1.Identity_Email
	327,  // 1461: sf.gear.metadata.type.v1.Identity_PalletIdentitySimpleIdentityInfo.image:type_name -> sf.gear.metadata.type.v1.Identity_Image
	223,  // 1462: sf.gear.metadata.type.v1.Identity_PalletIdentitySimpleIdentityInfo.twitter:type_name -> sf.gear.metadata.type.v1.Identity_Twitter
	261,  // 1463: sf.gear.metadata.type.v1.NominationPools_TupleNull.value:type_name -> sf.gear.metadata.type.v1.TupleNull
	484,  // 1464: sf.gear.metadata.type.v1.Proxy_CreatePureCall.proxy_type:type_name -> sf.gear.metadata.type.v1.Proxy_ProxyType
	501,  // 1465: sf.gear.metadata.type.v1.NominationPools_SetCommissionCall.new_commission:type_name -> sf.gear.metadata.type.v1.NominationPools_TupleSpArithmeticPerThingsPerbillspCoreCryptoAccountId32
	273,  // 1466: sf.gear.metadata.type.v1.StakingRewards_From.id:type_name -> sf.gear.metadata.type.v1.StakingRewards_Id
	533,  // 1467: sf.gear.metadata.type.v1.StakingRewards_From.index:type_name -> sf.gear.metadata.type.v1.StakingRewards_Index
	182,  // 1468: sf.gear.metadata.type.v1.StakingRewards_From.raw:type_name -> sf.gear.metadata.type.v1.StakingRewards_Raw
	472,  // 1469: sf.gear.metadata.type.v1.StakingRewards_From.address32:type_name -> sf.gear.metadata.type.v1.StakingRewards_Address32
	234,  // 1470: sf.gear.metadata.type.v1.StakingRewards_From.address20:type_name -> sf.gear.metadata.type.v1.StakingRewards_Address20
	513,  // 1471: sf.gear.metadata.type.v1.Staking_PayoutStakersCall.validator_stash:type_name -> sf.gear.metadata.type.v1.SpCoreCryptoAccountId32
	204,  // 1472: sf.gear.metadata.type.v1.Referenda_SetMetadataCall.maybe_hash:type_name -> sf.gear.metadata.type.v1.PrimitiveTypesH256
	445,  // 1473: sf.gear.metadata.type.v1.NominationPools_BondExtraOtherCall.member:type_name -> sf.gear.metadata.type.v1.NominationPools_Member
	133,  // 1474: sf.gear.metadata.type.v1.NominationPools_BondExtraOtherCall.extra:type_name -> sf.gear.metadata.type.v1.NominationPools_Extra
	435,  // 1475: sf.gear.metadata.type.v1.NominationPools_SetCommissionChangeRateCall.change_rate:type_name -> sf.gear.metadata.type.v1.NominationPools_PalletNominationPoolsCommissionChangeRate
	592,  // 1476: sf.gear.metadata.type.v1.SpConsensusSlotsEquivocationProof.offender:type_name -> sf.gear.metadata.type.v1.SpConsensusBabeAppPublic
	203,  // 1477: sf.gear.metadata.type.v1.SpConsensusSlotsEquivocationProof.slot:type_name -> sf.gear.metadata.type.v1.SpConsensusSlotsSlot
	254,  // 1478: sf.gear.metadata.type.v1.SpConsensusSlotsEquivocationProof.first_header:type_name -> sf.gear.metadata.type.v1.SpRuntimeGenericHeaderHeader
	254,  // 1479: sf.gear.metadata.type.v1.SpConsensusSlotsEquivocationProof.second_header:type_name -> sf.gear.metadata.type.v1.SpRuntimeGenericHeaderHeader
	538,  // 1480: sf.gear.metadata.type.v1.NominationPools_Index.value0:type_name -> sf.gear.metadata.type.v1.NominationPools_TupleNull
	466,  // 1481: sf.gear.metadata.type.v1.Balances_Index.value0:type_name -> sf.gear.metadata.type.v1.Balances_TupleNull
	378,  // 1482: sf.gear.metadata.type.v1.Bounties_Beneficiary.id:type_name -> sf.gear.metadata.type.v1.Bounties_Id
	332,  // 1483: sf.gear.metadata.type.v1.Bounties_Beneficiary.index:type_name -> sf.gear.metadata.type.v1.Bounties_Index
	401,  // 1484: sf.gear.metadata.type.v1.Bounties_Beneficiary.raw:type_name -> sf.gear.metadata.type.v1.Bounties_Raw
	309,  // 1485: sf.gear.metadata.type.v1.Bounties_Beneficiary.address32:type_name -> sf.gear.metadata.type.v1.Bounties_Address32
	367,  // 1486: sf.gear.metadata.type.v1.Bounties_Beneficiary.address20:type_name -> sf.gear.metadata.type.v1.Bounties_Address20
	170,  // 1487: sf.gear.metadata.type.v1.NominationPools_Permission.permissioned:type_name -> sf.gear.metadata.type.v1.NominationPools_Permissioned
	260,  // 1488: sf.gear.metadata.type.v1.NominationPools_Permission.permissionless_compound:type_name -> sf.gear.metadata.type.v1.NominationPools_PermissionlessCompound
	591,  // 1489: sf.gear.metadata.type.v1.NominationPools_Permission.permissionless_withdraw:type_name -> sf.gear.metadata.type.v1.NominationPools_PermissionlessWithdraw
	440,  // 1490: sf.gear.metadata.type.v1.NominationPools_Permission.permissionless_all:type_name -> sf.gear.metadata.type.v1.NominationPools_PermissionlessAll
	233,  // 1491: sf.gear.metadata.type.v1.ChildBounties_Beneficiary.id:type_name -> sf.gear.metadata.type.v1.ChildBounties_Id
	75,   // 1492: sf.gear.metadata.type.v1.ChildBounties_Beneficiary.index:type_name -> sf.gear.metadata.type.v1.ChildBounties_Index
	511,  // 1493: sf.gear.metadata.type.v1.ChildBounties_Beneficiary.raw:type_name -> sf.gear.metadata.type.v1.ChildBounties_Raw
	410,  // 1494: sf.gear.metadata.type.v1.ChildBounties_Beneficiary.address32:type_name -> sf.gear.metadata.type.v1.ChildBounties_Address32
	59,   // 1495: sf.gear.metadata.type.v1.ChildBounties_Beneficiary.address20:type_name -> sf.gear.metadata.type.v1.ChildBounties_Address20
	528,  // 1496: sf.gear.metadata.type.v1.TimestampPallet.set_call:type_name -> sf.gear.metadata.type.v1.Timestamp_SetCall
	566,  // 1497: sf.gear.metadata.type.v1.NominationPools_Bouncer.id:type_name -> sf.gear.metadata.type.v1.NominationPools_Id
	556,  // 1498: sf.gear.metadata.type.v1.NominationPools_Bouncer.index:type_name -> sf.gear.metadata.type.v1.NominationPools_Index
	590,  // 1499: sf.gear.metadata.type.v1.NominationPools_Bouncer.raw:type_name -> sf.gear.metadata.type.v1.NominationPools_Raw
	318,  // 1500: sf.gear.metadata.type.v1.NominationPools_Bouncer.address32:type_name -> sf.gear.metadata.type.v1.NominationPools_Address32
	180,  // 1501: sf.gear.metadata.type.v1.NominationPools_Bouncer.address20:type_name -> sf.gear.metadata.type.v1.NominationPools_Address20
	574,  // 1502: sf.gear.metadata.type.v1.NominationPools_CreateCall.root:type_name -> sf.gear.metadata.type.v1.NominationPools_Root
	41,   // 1503: sf.gear.metadata.type.v1.NominationPools_CreateCall.nominator:type_name -> sf.gear.metadata.type.v1.NominationPools_Nominator
	564,  // 1504: sf.gear.metadata.type.v1.NominationPools_CreateCall.bouncer:type_name -> sf.gear.metadata.type.v1.NominationPools_Bouncer
	513,  // 1505: sf.gear.metadata.type.v1.NominationPools_Id.value0:type_name -> sf.gear.metadata.type.v1.SpCoreCryptoAccountId32
	343,  // 1506: sf.gear.metadata.type.v1.SpSessionMembershipProof.trie_nodes:type_name -> sf.gear.metadata.type.v1.Babe_BabeTrieNodesList
	413,  // 1507: sf.gear.metadata.type.v1.VaraRuntimeRuntimeCall.system:type_name -> sf.gear.metadata.type.v1.SystemPallet
	563,  // 1508: sf.gear.metadata.type.v1.VaraRuntimeRuntimeCall.timestamp:type_name -> sf.gear.metadata.type.v1.TimestampPallet
	530,  // 1509: sf.gear.metadata.type.v1.VaraRuntimeRuntimeCall.babe:type_name -> sf.gear.metadata.type.v1.BabePallet
	84,   // 1510: sf.gear.metadata.type.v1.VaraRuntimeRuntimeCall.grandpa:type_name -> sf.gear.metadata.type.v1.GrandpaPallet
	404,  // 1511: sf.gear.metadata.type.v1.VaraRuntimeRuntimeCall.balances:type_name -> sf.gear.metadata.type.v1.BalancesPallet
	436,  // 1512: sf.gear.metadata.type.v1.VaraRuntimeRuntimeCall.vesting:type_name -> sf.gear.metadata.type.v1.VestingPallet
	391,  // 1513: sf.gear.metadata.type.v1.VaraRuntimeRuntimeCall.bags_list:type_name -> sf.gear.metadata.type.v1.BagsListPallet
	531,  // 1514: sf.gear.metadata.type.v1.VaraRuntimeRuntimeCall.im_online:type_name -> sf.gear.metadata.type.v1.ImOnlinePallet
	282,  // 1515: sf.gear.metadata.type.v1.VaraRuntimeRuntimeCall.staking:type_name -> sf.gear.metadata.type.v1.StakingPallet
	297,  // 1516: sf.gear.metadata.type.v1.VaraRuntimeRuntimeCall.session:type_name -> sf.gear.metadata.type.v1.SessionPallet
	21,   // 1517: sf.gear.metadata.type.v1.VaraRuntimeRuntimeCall.treasury:type_name -> sf.gear.metadata.type.v1.TreasuryPallet
	248,  // 1518: sf.gear.metadata.type.v1.VaraRuntimeRuntimeCall.utility:type_name -> sf.gear.metadata.type.v1.UtilityPallet
	361,  // 1519: sf.gear.metadata.type.v1.VaraRuntimeRuntimeCall.conviction_voting:type_name -> sf.gear.metadata.type.v1.ConvictionVotingPallet
	287,  // 1520: sf.gear.metadata.type.v1.VaraRuntimeRuntimeCall.referenda:type_name -> sf.gear.metadata.type.v1.ReferendaPallet
	214,  // 1521: sf.gear.metadata.type.v1.VaraRuntimeRuntimeCall.fellowship_collective:type_name -> sf.gear.metadata.type.v1.FellowshipCollectivePallet
	196,  // 1522: sf.gear.metadata.type.v1.VaraRuntimeRuntimeCall.fellowship_referenda:type_name -> sf.gear.metadata.type.v1.FellowshipReferendaPallet
	144,  // 1523: sf.gear.metadata.type.v1.VaraRuntimeRuntimeCall.whitelist:type_name -> sf.gear.metadata.type.v1.WhitelistPallet
	111,  // 1524: sf.gear.metadata.type.v1.VaraRuntimeRuntimeCall.scheduler:type_name -> sf.gear.metadata.type.v1.SchedulerPallet
	29,   // 1525: sf.gear.metadata.type.v1.VaraRuntimeRuntimeCall.preimage:type_name -> sf.gear.metadata.type.v1.PreimagePallet
	394,  // 1526: sf.gear.metadata.type.v1.VaraRuntimeRuntimeCall.identity:type_name -> sf.gear.metadata.type.v1.IdentityPallet
	434,  // 1527: sf.gear.metadata.type.v1.VaraRuntimeRuntimeCall.proxy:type_name -> sf.gear.metadata.type.v1.ProxyPallet
	311,  // 1528: sf.gear.metadata.type.v1.VaraRuntimeRuntimeCall.multisig:type_name -> sf.gear.metadata.type.v1.MultisigPallet
	589,  // 1529: sf.gear.metadata.type.v1.VaraRuntimeRuntimeCall.election_provider_multi_phase:type_name -> sf.gear.metadata.type.v1.ElectionProviderMultiPhasePallet
	571,  // 1530: sf.gear.metadata.type.v1.VaraRuntimeRuntimeCall.bounties:type_name -> sf.gear.metadata.type.v1.BountiesPallet
	162,  // 1531: sf.gear.metadata.type.v1.VaraRuntimeRuntimeCall.child_bounties:type_name -> sf.gear.metadata.type.v1.ChildBountiesPallet
	448,  // 1532: sf.gear.metadata.type.v1.VaraRuntimeRuntimeCall.nomination_pools:type_name -> sf.gear.metadata.type.v1.NominationPoolsPallet
	368,  // 1533: sf.gear.metadata.type.v1.VaraRuntimeRuntimeCall.gear:type_name -> sf.gear.metadata.type.v1.GearPallet
	251,  // 1534: sf.gear.metadata.type.v1.VaraRuntimeRuntimeCall.staking_rewards:type_name -> sf.gear.metadata.type.v1.StakingRewardsPallet
	583,  // 1535: sf.gear.metadata.type.v1.VaraRuntimeRuntimeCall.gear_voucher:type_name -> sf.gear.metadata.type.v1.GearVoucherPallet
	31,   // 1536: sf.gear.metadata.type.v1.BountiesPallet.propose_bounty_call:type_name -> sf.gear.metadata.type.v1.Bounties_ProposeBountyCall
	179,  // 1537: sf.gear.metadata.type.v1.BountiesPallet.approve_bounty_call:type_name -> sf.gear.metadata.type.v1.Bounties_ApproveBountyCall
	94,   // 1538: sf.gear.metadata.type.v1.BountiesPallet.propose_curator_call:type_name -> sf.gear.metadata.type.v1.Bounties_ProposeCuratorCall
	108,  // 1539: sf.gear.metadata.type.v1.BountiesPallet.unassign_curator_call:type_name -> sf.gear.metadata.type.v1.Bounties_UnassignCuratorCall
	272,  // 1540: sf.gear.metadata.type.v1.BountiesPallet.accept_curator_call:type_name -> sf.gear.metadata.type.v1.Bounties_AcceptCuratorCall
	418,  // 1541: sf.gear.metadata.type.v1.BountiesPallet.award_bounty_call:type_name -> sf.gear.metadata.type.v1.Bounties_AwardBountyCall
	244,  // 1542: sf.gear.metadata.type.v1.BountiesPallet.claim_bounty_call:type_name -> sf.gear.metadata.type.v1.Bounties_ClaimBountyCall
	271,  // 1543: sf.gear.metadata.type.v1.BountiesPallet.close_bounty_call:type_name -> sf.gear.metadata.type.v1.Bounties_CloseBountyCall
	206,  // 1544: sf.gear.metadata.type.v1.BountiesPallet.extend_bounty_expiry_call:type_name -> sf.gear.metadata.type.v1.Bounties_ExtendBountyExpiryCall
	520,  // 1545: sf.gear.metadata.type.v1.Staking_Who.id:type_name -> sf.gear.metadata.type.v1.Staking_Id
	584,  // 1546: sf.gear.metadata.type.v1.Staking_Who.index:type_name -> sf.gear.metadata.type.v1.Staking_Index
	364,  // 1547: sf.gear.metadata.type.v1.Staking_Who.raw:type_name -> sf.gear.metadata.type.v1.Staking_Raw
	198,  // 1548: sf.gear.metadata.type.v1.Staking_Who.address32:type_name -> sf.gear.metadata.type.v1.Staking_Address32
	124,  // 1549: sf.gear.metadata.type.v1.Staking_Who.address20:type_name -> sf.gear.metadata.type.v1.Staking_Address20
	204,  // 1550: sf.gear.metadata.type.v1.Whitelist_DispatchWhitelistedCallCall.call_hash:type_name -> sf.gear.metadata.type.v1.PrimitiveTypesH256
	338,  // 1551: sf.gear.metadata.type.v1.Whitelist_DispatchWhitelistedCallCall.call_weight_witness:type_name -> sf.gear.metadata.type.v1.SpWeightsWeightV2Weight
	566,  // 1552: sf.gear.metadata.type.v1.NominationPools_Root.id:type_name -> sf.gear.metadata.type.v1.NominationPools_Id
	556,  // 1553: sf.gear.metadata.type.v1.NominationPools_Root.index:type_name -> sf.gear.metadata.type.v1.NominationPools_Index
	590,  // 1554: sf.gear.metadata.type.v1.NominationPools_Root.raw:type_name -> sf.gear.metadata.type.v1.NominationPools_Raw
	318,  // 1555: sf.gear.metadata.type.v1.NominationPools_Root.address32:type_name -> sf.gear.metadata.type.v1.NominationPools_Address32
	180,  // 1556: sf.gear.metadata.type.v1.NominationPools_Root.address20:type_name -> sf.gear.metadata.type.v1.NominationPools_Address20
	118,  // 1557: sf.gear.metadata.type.v1.FellowshipReferenda_System.value0:type_name -> sf.gear.metadata.type.v1.Value0
	308,  // 1558: sf.gear.metadata.type.v1.Identity_RemoveSubCall.sub:type_name -> sf.gear.metadata.type.v1.Identity_Sub
	42,   // 1559: sf.gear.metadata.type.v1.SpRuntimeGenericDigestDigestItem.logs:type_name -> sf.gear.metadata.type.v1.Babe_Logs
	143,  // 1560: sf.gear.metadata.type.v1.Balances_ForceUnreserveCall.who:type_name -> sf.gear.metadata.type.v1.Balances_Who
	134,  // 1561: sf.gear.metadata.type.v1.GearVoucherPallet.issue_call:type_name -> sf.gear.metadata.type.v1.GearVoucher_IssueCall
	481,  // 1562: sf.gear.metadata.type.v1.GearVoucherPallet.call_call:type_name -> sf.gear.metadata.type.v1.GearVoucher_CallCall
	284,  // 1563: sf.gear.metadata.type.v1.GearVoucherPallet.revoke_call:type_name -> sf.gear.metadata.type.v1.GearVoucher_RevokeCall
	274,  // 1564: sf.gear.metadata.type.v1.GearVoucherPallet.update_call:type_name -> sf.gear.metadata.type.v1.GearVoucher_UpdateCall
	176,  // 1565: sf.gear.metadata.type.v1.GearVoucherPallet.call_deprecated_call:type_name -> sf.gear.metadata.type.v1.GearVoucher_CallDeprecatedCall
	503,  // 1566: sf.gear.metadata.type.v1.GearVoucherPallet.decline_call:type_name -> sf.gear.metadata.type.v1.GearVoucher_DeclineCall
	280,  // 1567: sf.gear.metadata.type.v1.Staking_Index.value0:type_name -> sf.gear.metadata.type.v1.Staking_TupleNull
	356,  // 1568: sf.gear.metadata.type.v1.Identity_Target.id:type_name -> sf.gear.metadata.type.v1.Identity_Id
	362,  // 1569: sf.gear.metadata.type.v1.Identity_Target.index:type_name -> sf.gear.metadata.type.v1.Identity_Index
	152,  // 1570: sf.gear.metadata.type.v1.Identity_Target.raw:type_name -> sf.gear.metadata.type.v1.Identity_Raw
	586,  // 1571: sf.gear.metadata.type.v1.Identity_Target.address32:type_name -> sf.gear.metadata.type.v1.Identity_Address32
	379,  // 1572: sf.gear.metadata.type.v1.Identity_Target.address20:type_name -> sf.gear.metadata.type.v1.Identity_Address20
	74,   // 1573: sf.gear.metadata.type.v1.ElectionProviderMultiPhasePallet.submit_unsigned_call:type_name -> sf.gear.metadata.type.v1.ElectionProviderMultiPhase_SubmitUnsignedCall
	120,  // 1574: sf.gear.metadata.type.v1.ElectionProviderMultiPhasePallet.set_minimum_untrusted_score_call:type_name -> sf.gear.metadata.type.v1.ElectionProviderMultiPhase_SetMinimumUntrustedScoreCall
	431,  // 1575: sf.gear.metadata.type.v1.ElectionProviderMultiPhasePallet.set_emergency_election_result_call:type_name -> sf.gear.metadata.type.v1.ElectionProviderMultiPhase_SetEmergencyElectionResultCall
	425,  // 1576: sf.gear.metadata.type.v1.ElectionProviderMultiPhasePallet.submit_call:type_name -> sf.gear.metadata.type.v1.ElectionProviderMultiPhase_SubmitCall
	312,  // 1577: sf.gear.metadata.type.v1.ElectionProviderMultiPhasePallet.governance_fallback_call:type_name -> sf.gear.metadata.type.v1.ElectionProviderMultiPhase_GovernanceFallbackCall
	348,  // 1578: sf.gear.metadata.type.v1.SpConsensusBabeAppPublic.value0:type_name -> sf.gear.metadata.type.v1.SpCoreSr25519Public
	137,  // 1579: sf.gear.metadata.type.v1.Grandpa_Equivocation.prevote:type_name -> sf.gear.metadata.type.v1.Grandpa_Prevote
	432,  // 1580: sf.gear.metadata.type.v1.Grandpa_Equivocation.precommit:type_name -> sf.gear.metadata.type.v1.Grandpa_Precommit
	204,  // 1581: sf.gear.metadata.type.v1.Whitelist_WhitelistCallCall.call_hash:type_name -> sf.gear.metadata.type.v1.PrimitiveTypesH256
	389,  // 1582: sf.gear.metadata.type.v1.NominationPools_WithdrawUnbondedCall.member_account:type_name -> sf.gear.metadata.type.v1.NominationPools_MemberAccount
	303,  // 1583: sf.gear.metadata.type.v1.NominationPools_MaxMembersPerPool.noop:type_name -> sf.gear.metadata.type.v1.NominationPools_Noop
	4,    // 1584: sf.gear.metadata.type.v1.NominationPools_MaxMembersPerPool.set:type_name -> sf.gear.metadata.type.v1.NominationPools_Set
	358,  // 1585: sf.gear.metadata.type.v1.NominationPools_MaxMembersPerPool.remove:type_name -> sf.gear.metadata.type.v1.NominationPools_Remove
	513,  // 1586: sf.gear.metadata.type.v1.ElectionProviderMultiPhase_TupleSpCoreCryptoAccountId32SpNposElectionsSupport.value0:type_name -> sf.gear.metadata.type.v1.SpCoreCryptoAccountId32
	333,  // 1587: sf.gear.metadata.type.v1.ElectionProviderMultiPhase_TupleSpCoreCryptoAccountId32SpNposElectionsSupport.value1:type_name -> sf.gear.metadata.type.v1.SpNposElectionsSupport
	1588, // [1588:1588] is the sub-list for method output_type
	1588, // [1588:1588] is the sub-list for method input_type
	1588, // [1588:1588] is the sub-list for extension type_name
	1588, // [1588:1588] is the sub-list for extension extendee
	0,    // [0:1588] is the sub-list for field type_name
}

func init() { file_sf_gear_metadata_type_v1_output_proto_init() }
func file_sf_gear_metadata_type_v1_output_proto_init() {
	if File_sf_gear_metadata_type_v1_output_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vesting_Index); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Treasury_TupleNull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_Keccak256); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_SetSubsCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NominationPools_Set); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConvictionVoting_Locked6X); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_Raw24); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Multisig_AsMultiCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vesting_MergeSchedulesCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staking_SetInvulnerablesCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staking_ForceUnstakeCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Treasury_PayoutCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConvictionVoting_Id); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChildBounties_ClaimChildBountyCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NominationPools_MaxMembers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_RemarkWithEventCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConvictionVoting_To); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChildBounties_TupleNull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proxy_NonTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proxy_CancelProxy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GearVoucher_AppendPrograms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreasuryPallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConvictionVoting_Split); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proxy_ForceProxyType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes8Listuint32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vesting_TupleNull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Treasury_VoidSpendCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proxy_AnnounceCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FellowshipReferenda_EnactmentMoment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreimagePallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_None); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bounties_ProposeBountyCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpConsensusGrandpaEquivocationProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*None); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_Raw22); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_PalletIdentityTypesBitFlags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_Raw23); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NominationPools_MinCreateBond); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakingRewards_RefillCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakingRewards_ForceRefillCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes11Listuint32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NominationPools_Nominator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Babe_Logs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Grandpa_ReportEquivocationCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImOnline_PalletImOnlineSr25519AppSr25519Public); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Referenda_CancelCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Referenda_KillCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Utility_WithWeightCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Referenda_System); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FellowshipCollective_Index); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_New); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_SetHeapPagesCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BagsList_Index); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BagsList_PutInFrontOfOtherCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staking_MaxValidatorCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Utility_AsDerivativeCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Multisig_ApproveAsMultiCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElectionProviderMultiPhase_TupleSpCoreCryptoAccountId32String); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NominationPools_CreateWithPoolIdCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChildBounties_Address20); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Babe_Other); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Babe_ReportEquivocationCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staking_UnbondCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConvictionVoting_SplitAbstain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proxy_AddProxyCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_TupleSystemItemsListSystemItemsList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staking_NominateCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_Raw29); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElectionProviderMultiPhase_TupleUint32Uint32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NominationPools_SetConfigsCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpConsensusGrandpaAppPublic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConvictionVoting_Standard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_SetIdentityCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proxy_ProxyAnnouncedCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElectionProviderMultiPhase_SubmitUnsignedCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChildBounties_Index); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Babe_Seal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staking_ScaleValidatorCountCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConvictionVoting_Index); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_Raw21); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElectionProviderMultiPhase_TupleUint32TupleUint32SpArithmeticPerThingsPerU16Uint32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staking_Targets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConvictionVoting_None); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_Sha256); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrandpaPallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vesting_Raw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vesting_Source); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionPaymentPallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BagsList_PutInFrontOfCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrimaryAndSecondaryVrfSlots); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vesting_ForceVestedTransferCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staking_PalletStakingValidatorPrefs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vesting_VestedTransferCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FellowshipReferenda_Lookup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bounties_ProposeCuratorCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NominationPools_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImOnline_PalletImOnlineSr25519AppSr25519Signature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staking_ChillCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Referenda_NudgeReferendumCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Preimage_RequestPreimageCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConvictionVoting_UndelegateCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FellowshipCollective_Raw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GprimitivesCodeId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Balances_UpgradeAccountsCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staking_Payee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Session_PurgeKeysCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_Raw14); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NominationPools_ClaimPayoutCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bounties_UnassignCuratorCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Treasury_ApproveProposalCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FellowshipReferenda_RefundSubmissionDepositCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchedulerPallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proxy_Index); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes13Listuint32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BagsList_Heavier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NominationPools_SetCommissionMaxCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Balances_TransferAllowDeathCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_Reasonable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Value0); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes12Listuint32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElectionProviderMultiPhase_SetMinimumUntrustedScoreCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NominationPools_MinJoinBond); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GearVoucher_SendMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Grandpa_GrandpaTrieNodesList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staking_Address20); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Gear_RunCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Treasury_CheckStatusCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConvictionVoting_Locked3X); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FellowshipCollective_Who); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_Display); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NominationPools_UpdateRolesCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Referenda_RefundSubmissionDepositCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OriginsPallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NominationPools_Extra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GearVoucher_IssueCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GearVoucher_None); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpConsensusGrandpaAppSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Grandpa_Prevote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Balances_ForceTransferCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Preimage_EnsureUpdatedCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proxy_Address20); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NominationPools_ClaimPayoutOtherCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_SetCodeCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Balances_Who); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WhitelistPallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_Raw26); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NominationPools_SetStateCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpCoreEd25519Public); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Treasury_RemoveApprovalCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BagsList_Address20); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staking_WithdrawUnbondedCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FellowshipReferenda_NudgeReferendumCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_Raw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NominationPools_SetMetadataCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpCoreEd25519Signature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Referenda_Void); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_Raw6); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Referenda_RefundDecisionDepositCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Whitelist_RemoveWhitelistedCallCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_Raw17); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_TupleSpCoreCryptoAccountId32PalletIdentityTypesData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proxy_RemoveAnnouncementCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChildBountiesPallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Referenda_Inline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Scheduler_ScheduleNamedCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_Raw4); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_ClearIdentityCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElectionProviderMultiPhase_TupleUint32SpArithmeticPerThingsPerU16); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Treasury_RejectProposalCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FellowshipReferenda_Void); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NominationPools_Permissioned); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GearVoucher_PalletGearVoucherInternalVoucherId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinalityGrandpaPrevote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Referenda_ProposalOrigin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Scheduler_CancelCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proxy_Delegate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GearVoucher_CallDeprecatedCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GearVoucher_Some); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_AddRegistrarCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bounties_ApproveBountyCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NominationPools_Address20); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GearSchedulerPallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakingRewards_Raw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_Raw12); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Babe_PlanConfigChangeCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staking_IncreaseValidatorCountCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staking_RebondCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConvictionVoting_Locked2X); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Referenda_At); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_KillStorageCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImOnline_HeartbeatCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FellowshipCollective_VoteCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bounties_Curator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[193].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staking_Controller); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Treasury_Address32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConvictionVoting_Address32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FellowshipReferendaPallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_SetAccountIdCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staking_Address32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[199].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staking_SetPayeeCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[200].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staking_MinValidatorBond); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[201].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_KillIdentityCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[202].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Gear_SendReplyCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[203].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpConsensusSlotsSlot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[204].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrimitiveTypesH256); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[205].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_BlakeTwo256); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[206].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bounties_ExtendBountyExpiryCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[207].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Gear_UploadCodeCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[208].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_Raw2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[209].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes16Listuint32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[210].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Balances_Source); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[211].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BagsList_RebagCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[212].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staking_SetValidatorCountCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[213].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Treasury_Index); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[214].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FellowshipCollectivePallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[215].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staking_SetStakingConfigsCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[216].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Referenda_Lookup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[217].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vesting_VestCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[218].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staking_KickCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[219].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FellowshipReferenda_PlaceDecisionDepositCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[220].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Utility_DispatchAsCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[221].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NominationPools_NewNominator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[222].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_Value0); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[223].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_Twitter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[224].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_OutOfDate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[225].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Babe_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[226].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Treasury_Raw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[227].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FellowshipCollective_Id); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[228].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Scheduler_ScheduleNamedAfterCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[229].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Preimage_UnrequestPreimageCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[230].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes3Listuint32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[231].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_SetCodeWithoutChecksCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[232].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Balances_Address32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[233].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChildBounties_Id); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[234].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakingRewards_Address20); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[235].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConvictionVoting_Locked1X); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[236].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FellowshipCollective_RemoveMemberCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[237].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_Raw16); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[238].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[239].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes6Listuint32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[240].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpRuntimeGenericDigestDigest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[241].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FellowshipReferenda_Inline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[242].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_ProvideJudgementCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[243].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChildBounties_Curator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[244].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bounties_ClaimBountyCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[245].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staking_Remove); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[246].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staking_MinCommission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[247].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Signed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[248].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UtilityPallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[249].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proxy_Id); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[250].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Gear_SetExecuteInherentCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[251].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakingRewardsPallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[252].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GearVoucher_Call); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[253].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_RemarkCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[254].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpRuntimeGenericHeaderHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[255].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Scheduler_ScheduleCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[256].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChildBounties_ProposeCuratorCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[257].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NominationPools_AdjustPoolDepositCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[258].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staking_MaxNominatorCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[259].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Referenda_EnactmentMoment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[260].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NominationPools_PermissionlessCompound); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[261].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TupleNull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[262].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staking_ReapStashCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[263].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NominationPools_JoinCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[264].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FellowshipReferenda_RefundDecisionDepositCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[265].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_Raw27); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[266].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_RenameSubCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[267].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proxy_ProxyCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[268].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes15Listuint32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[269].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Balances_Address20); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[270].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vesting_Address20); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[271].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bounties_CloseBountyCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[272].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bounties_AcceptCuratorCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[273].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakingRewards_Id); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[274].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GearVoucher_UpdateCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[275].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinalityGrandpaEquivocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[276].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoricalPallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[277].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Utility_BatchAllCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[278].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Root); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[279].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes14Listuint32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[280].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staking_TupleNull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[281].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpRuntimeMultiaddressMultiAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[282].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakingPallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[283].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConvictionVoting_Vote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[284].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GearVoucher_RevokeCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[285].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NominationPools_ClaimCommissionCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[286].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vesting_Id); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[287].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferendaPallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[288].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FellowshipReferenda_SetMetadataCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[289].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_Raw31); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[290].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_TuplePalletIdentityTypesDatapalletIdentityTypesData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[291].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_SystemKeysList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[292].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Balances_Dest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[293].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proxy_Raw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[294].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bounties_TupleNull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[295].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrimarySlots); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[296].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrimaryAndSecondaryPlainSlots); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[297].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionPallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[298].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_Raw9); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[299].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proxy_RemoveProxiesCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[300].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Babe_Consensus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[301].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_KnownGood); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[302].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proxy_Real); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[303].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NominationPools_Noop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[304].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NominationPools_MaxPools); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[305].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Treasury_ProposeSpendCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[306].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConvictionVoting_TupleNull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[307].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConvictionVoting_UnlockCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[308].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_Sub); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[309].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bounties_Address32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[310].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_LowQuality); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[311].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultisigPallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[312].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElectionProviderMultiPhase_GovernanceFallbackCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[313].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Babe_V1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[314].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Grandpa_NoteStalledCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[315].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Session_SetKeysCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[316].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Treasury_Id); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[317].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_Raw19); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[318].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NominationPools_Address32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[319].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakingRewards_TupleNull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[320].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_CancelRequestCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[321].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_AddSubCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[322].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes7Listuint32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[323].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NominationPools_GlobalMaxCommission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[324].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpCoreSr25519Signature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[325].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Preimage_NotePreimageCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[326].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_Raw8); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[327].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[328].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_SetFeeCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[329].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TupleFinalityGrandpaPrecommitspConsensusGrandpaAppSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[330].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConvictionVoting_RemoveOtherVoteCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[331].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_QuitSubCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[332].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bounties_Index); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[333].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpNposElectionsSupport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[334].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChildBounties_AcceptCuratorCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[335].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NominationPools_NewBouncer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[336].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Balances_TransferKeepAliveCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[337].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staking_ForceApplyMinCommissionCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[338].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpWeightsWeightV2Weight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[339].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_Raw3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[340].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_Raw30); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[341].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Gear_UploadProgramCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[342].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GearVoucher_UploadCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[343].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Babe_BabeTrieNodesList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[344].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vesting_VestOtherCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[345].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staking_Staked); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[346].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConvictionVoting_Locked5X); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[347].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_Value1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[348].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpCoreSr25519Public); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[349].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Babe_ReportEquivocationUnsignedCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[350].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BagsList_TupleNull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[351].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Referenda_Origins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[352].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes4Listuint32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[353].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vesting_Target); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[354].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConvictionVoting_Target); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[355].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FellowshipCollective_Address20); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[356].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_Id); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[357].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Gear_CreateProgramCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[358].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NominationPools_Remove); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[359].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllowedSlots); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[360].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConvictionVoting_PalletConvictionVotingVoteVote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[361].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConvictionVotingPallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[362].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_Index); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[363].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_Account); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[364].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staking_Raw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[365].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proxy_KillPureCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[366].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Multisig_CancelAsMultiCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[367].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bounties_Address20); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[368].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GearPallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[369].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Balances_TransferAllCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[370].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NominationPools_FreeBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[371].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GearBuiltinPallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[372].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChildBounties_CloseChildBountyCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[373].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NominationPools_SetClaimPermissionCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[374].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Balances_Raw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[375].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FellowshipReferenda_Origins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[376].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_Raw5); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[377].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes5Listuint32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[378].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bounties_Id); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[379].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_Address20); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[380].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GprimitivesActorId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[381].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Referenda_After); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[382].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Referenda_SubmitCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[383].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_Email); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[384].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_Erroneous); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[385].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BTreeSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[386].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Treasury_SpendCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[387].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_Raw28); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[388].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proxy_Any); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[389].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NominationPools_MemberAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[390].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NominationPools_NominateCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[391].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BagsListPallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[392].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staking_ForceNewEraCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[393].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpAuthorityDiscoveryAppPublic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[394].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentityPallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[395].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GearGasPallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[396].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BagsList_Dislocated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[397].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_ShaThree256); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[398].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NominationPools_PoolWithdrawUnbondedCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[399].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakingRewards_To); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[400].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_Judgement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[401].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bounties_Raw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[402].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakingRewards_WithdrawCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[403].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Babe_PreRuntime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[404].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BalancesPallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[405].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BagsList_Lighter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[406].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Treasury_Address20); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[407].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_Legal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[408].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConvictionVoting_DelegateCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[409].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FellowshipReferenda_ProposalOrigin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[410].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChildBounties_Address32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[411].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staking_SetMinCommissionCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[412].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GearBankPallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[413].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemPallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[414].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BagsList_Address32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[415].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_Raw10); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[416].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_SetStorageCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[417].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VaraRuntimeNposSolution16); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[418].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bounties_AwardBountyCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[419].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NominationPools_Rewards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[420].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_Web); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[421].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GearMessengerPallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[422].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Babe_RuntimeEnvironmentUpdated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[423].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staking_CancelDeferredSlashCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[424].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staking_ChillThreshold); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[425].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElectionProviderMultiPhase_SubmitCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[426].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GearVoucher_SendReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[427].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Grandpa_ReportEquivocationUnsignedCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[428].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Treasury_Beneficiary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[429].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConvictionVoting_Conviction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[430].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FellowshipReferenda_Proposal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[431].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElectionProviderMultiPhase_SetEmergencyElectionResultCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[432].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Grandpa_Precommit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[433].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_Raw1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[434].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProxyPallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[435].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NominationPools_PalletNominationPoolsCommissionChangeRate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[436].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VestingPallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[437].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Referenda_Legacy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[438].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Referenda_PlaceDecisionDepositCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[439].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChildBounties_UnassignCuratorCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[440].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NominationPools_PermissionlessAll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[441].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Utility_System); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[442].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Utility_ForceBatchCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[443].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConvictionVoting_Locked4X); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[444].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FellowshipCollective_AddMemberCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[445].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NominationPools_Member); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[446].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Utility_BatchCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[447].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proxy_Spawner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[448].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NominationPoolsPallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[449].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Balances_Id); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[450].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staking_None); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[451].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FellowshipReferenda_SubmitCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[452].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Whitelist_DispatchWhitelistedCallWithPreimageCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[453].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proxy_Staking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[454].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staking_Account); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[455].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staking_BondCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[456].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BagsList_Id); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[457].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FellowshipReferenda_After); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[458].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpArithmeticPerThingsPerU16); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[459].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GearVoucher_DeclineVoucher); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[460].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinalityGrandpaPrecommit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[461].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proxy_RejectAnnouncementCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[462].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Gear_ClaimValueCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[463].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_Riot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[464].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proxy_TupleNull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[465].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes10Listuint32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[466].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Balances_TupleNull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[467].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staking_ValidateCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[468].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staking_Set); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[469].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staking_MinNominatorBond); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[470].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FellowshipCollective_DemoteMemberCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[471].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Gear_SendMessageCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[472].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakingRewards_Address32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[473].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElectionProviderMultiPhase_PalletElectionProviderMultiPhaseRawSolution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[474].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpArithmeticPerThingsPercent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[475].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Treasury_SpendLocalCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[476].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Utility_Void); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[477].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_Raw18); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[478].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Multisig_AsMultiThreshold1Call); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[479].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Balances_ForceSetBalanceCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[480].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_SetFieldsCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[481].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GearVoucher_CallCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[482].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TupleFinalityGrandpaPrevotespConsensusGrandpaAppSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[483].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FellowshipReferenda_OneFewerDecidingCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[484].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proxy_ProxyType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[485].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NominationPools_ChillCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[486].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChildBounties_AwardChildBountyCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[487].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpArithmeticPerThingsPerbill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[488].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoundedCollectionsBoundedVecBoundedVec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[489].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Referenda_Proposal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[490].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FellowshipCollective_TupleNull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[491].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_TupleNull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[492].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BagsList_Raw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[493].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImOnline_PalletImOnlineHeartbeat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[494].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proxy_RemoveProxyCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[495].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChildBounties_AddChildBountyCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[496].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GprimitivesMessageId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[497].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConvictionVoting_RemoveVoteCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[498].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proxy_IdentityJudgement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[499].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NominationPools_UnbondCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[500].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NominationPools_Blocked); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[501].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NominationPools_TupleSpArithmeticPerThingsPerbillspCoreCryptoAccountId32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[502].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NominationPools_NewRoot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[503].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GearVoucher_DeclineCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[504].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System_KillPrefixCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[505].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Utility_Origins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[506].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FellowshipCollective_PromoteMemberCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[507].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FellowshipReferenda_Legacy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[508].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NominationPools_Destroying); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[509].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Multisig_PalletMultisigTimepoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[510].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OffencesPallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[511].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChildBounties_Raw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[512].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorityDiscoveryPallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[513].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpCoreCryptoAccountId32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[514].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConvictionVoting_VoteCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[515].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FellowshipCollective_Address32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[516].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_FeePaid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[517].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpNposElectionsElectionScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[518].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NominationPools_BondExtraCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[519].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GearPaymentPallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[520].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staking_Id); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[521].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Scheduler_TupleUint32Uint32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[522].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Preimage_UnnotePreimageCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[523].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proxy_Governance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[524].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElectionProviderMultiPhase_TupleUint32ElectionProviderMultiPhaseVotes9Listuint32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[525].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VaraRuntimeSessionKeys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[526].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Utility_AsOrigin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[527].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FellowshipReferenda_At); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[528].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Timestamp_SetCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[529].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorshipPallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[530].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BabePallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[531].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImOnlinePallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[532].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staking_ChillOtherCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[533].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakingRewards_Index); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[534].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FellowshipReferenda_KillCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[535].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Scheduler_ScheduleAfterCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[536].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_PalletIdentitySimpleIdentityInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[537].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_RequestJudgementCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[538].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NominationPools_TupleNull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[539].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_Unknown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[540].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proxy_CreatePureCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[541].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GearProgramPallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[542].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_Raw25); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[543].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NominationPools_SetCommissionCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[544].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakingRewards_From); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[545].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staking_BondExtraCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[546].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staking_PayoutStakersCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[547].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Referenda_SetMetadataCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[548].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_Raw0); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[549].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_Raw11); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[550].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NominationPools_BondExtraOtherCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[551].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NominationPools_SetCommissionChangeRateCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[552].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpConsensusSlotsEquivocationProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[553].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vesting_PalletVestingVestingInfoVestingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[554].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staking_ForceNoErasCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[555].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_Raw7); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[556].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NominationPools_Index); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[557].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Balances_Index); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[558].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staking_SetControllerCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[559].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bounties_Beneficiary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[560].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NominationPools_Permission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[561].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_Raw15); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[562].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChildBounties_Beneficiary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[563].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimestampPallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[564].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NominationPools_Bouncer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[565].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NominationPools_CreateCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[566].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NominationPools_Id); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[567].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpSessionMembershipProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[568].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staking_ForceNewEraAlwaysCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[569].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VaraRuntimeRuntimeCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[570].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Referenda_OneFewerDecidingCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[571].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BountiesPallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[572].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staking_Who); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[573].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Whitelist_DispatchWhitelistedCallCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[574].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NominationPools_Root); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[575].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FellowshipReferenda_System); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[576].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_Raw13); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[577].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_RemoveSubCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[578].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpRuntimeGenericDigestDigestItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[579].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Balances_ForceUnreserveCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[580].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vesting_Address32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[581].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staking_Stash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[582].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConvictionVoting_Raw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[583].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GearVoucherPallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[584].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staking_Index); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[585].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staking_Noop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[586].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_Address32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[587].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_Target); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[588].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NominationPools_Open); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[589].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElectionProviderMultiPhasePallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[590].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NominationPools_Raw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[591].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NominationPools_PermissionlessWithdraw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[592].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpConsensusBabeAppPublic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[593].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Grandpa_Equivocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[594].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FellowshipCollective_CleanupPollCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[595].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Whitelist_WhitelistCallCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[596].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElectionProviderMultiPhase_PalletElectionProviderMultiPhaseSolutionOrSnapshotSize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[597].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NominationPools_WithdrawUnbondedCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[598].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NominationPools_MaxMembersPerPool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[599].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConvictionVoting_Address20); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[600].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Scheduler_CancelNamedCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[601].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_Raw32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[602].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proxy_Address32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[603].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElectionProviderMultiPhase_TupleSpCoreCryptoAccountId32SpNposElectionsSupport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[604].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Babe_TupleUint64Uint64); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[605].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FellowshipReferenda_CancelCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[606].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity_Raw20); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_metadata_type_v1_output_proto_msgTypes[607].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakingRewards_AlignSupplyCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*Multisig_AsMultiCall_System)(nil),
		(*Multisig_AsMultiCall_Timestamp)(nil),
		(*Multisig_AsMultiCall_Babe)(nil),
		(*Multisig_AsMultiCall_Grandpa)(nil),
		(*Multisig_AsMultiCall_Balances)(nil),
		(*Multisig_AsMultiCall_Vesting)(nil),
		(*Multisig_AsMultiCall_BagsList)(nil),
		(*Multisig_AsMultiCall_ImOnline)(nil),
		(*Multisig_AsMultiCall_Staking)(nil),
		(*Multisig_AsMultiCall_Session)(nil),
		(*Multisig_AsMultiCall_Treasury)(nil),
		(*Multisig_AsMultiCall_Utility)(nil),
		(*Multisig_AsMultiCall_ConvictionVoting)(nil),
		(*Multisig_AsMultiCall_Referenda)(nil),
		(*Multisig_AsMultiCall_FellowshipCollective)(nil),
		(*Multisig_AsMultiCall_FellowshipReferenda)(nil),
		(*Multisig_AsMultiCall_Whitelist)(nil),
		(*Multisig_AsMultiCall_Scheduler)(nil),
		(*Multisig_AsMultiCall_Preimage)(nil),
		(*Multisig_AsMultiCall_Identity)(nil),
		(*Multisig_AsMultiCall_Proxy)(nil),
		(*Multisig_AsMultiCall_Multisig)(nil),
		(*Multisig_AsMultiCall_ElectionProviderMultiPhase)(nil),
		(*Multisig_AsMultiCall_Bounties)(nil),
		(*Multisig_AsMultiCall_ChildBounties)(nil),
		(*Multisig_AsMultiCall_NominationPools)(nil),
		(*Multisig_AsMultiCall_Gear)(nil),
		(*Multisig_AsMultiCall_StakingRewards)(nil),
		(*Multisig_AsMultiCall_GearVoucher)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*NominationPools_MaxMembers_Noop)(nil),
		(*NominationPools_MaxMembers_Set)(nil),
		(*NominationPools_MaxMembers_Remove)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*ConvictionVoting_To_Id)(nil),
		(*ConvictionVoting_To_Index)(nil),
		(*ConvictionVoting_To_Raw)(nil),
		(*ConvictionVoting_To_Address32)(nil),
		(*ConvictionVoting_To_Address20)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*GearVoucher_AppendPrograms_None)(nil),
		(*GearVoucher_AppendPrograms_Some)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[21].OneofWrappers = []interface{}{
		(*TreasuryPallet_ProposeSpendCall)(nil),
		(*TreasuryPallet_RejectProposalCall)(nil),
		(*TreasuryPallet_ApproveProposalCall)(nil),
		(*TreasuryPallet_SpendLocalCall)(nil),
		(*TreasuryPallet_RemoveApprovalCall)(nil),
		(*TreasuryPallet_SpendCall)(nil),
		(*TreasuryPallet_PayoutCall)(nil),
		(*TreasuryPallet_CheckStatusCall)(nil),
		(*TreasuryPallet_VoidSpendCall)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[23].OneofWrappers = []interface{}{
		(*Proxy_ForceProxyType_Any)(nil),
		(*Proxy_ForceProxyType_NonTransfer)(nil),
		(*Proxy_ForceProxyType_Governance)(nil),
		(*Proxy_ForceProxyType_Staking)(nil),
		(*Proxy_ForceProxyType_IdentityJudgement)(nil),
		(*Proxy_ForceProxyType_CancelProxy)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[28].OneofWrappers = []interface{}{
		(*FellowshipReferenda_EnactmentMoment_At)(nil),
		(*FellowshipReferenda_EnactmentMoment_After)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[29].OneofWrappers = []interface{}{
		(*PreimagePallet_NotePreimageCall)(nil),
		(*PreimagePallet_UnnotePreimageCall)(nil),
		(*PreimagePallet_RequestPreimageCall)(nil),
		(*PreimagePallet_UnrequestPreimageCall)(nil),
		(*PreimagePallet_EnsureUpdatedCall)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[37].OneofWrappers = []interface{}{
		(*NominationPools_MinCreateBond_Noop)(nil),
		(*NominationPools_MinCreateBond_Set)(nil),
		(*NominationPools_MinCreateBond_Remove)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[41].OneofWrappers = []interface{}{
		(*NominationPools_Nominator_Id)(nil),
		(*NominationPools_Nominator_Index)(nil),
		(*NominationPools_Nominator_Raw)(nil),
		(*NominationPools_Nominator_Address32)(nil),
		(*NominationPools_Nominator_Address20)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[42].OneofWrappers = []interface{}{
		(*Babe_Logs_PreRuntime)(nil),
		(*Babe_Logs_Consensus)(nil),
		(*Babe_Logs_Seal)(nil),
		(*Babe_Logs_Other)(nil),
		(*Babe_Logs_RuntimeEnvironmentUpdated)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[47].OneofWrappers = []interface{}{
		(*Utility_WithWeightCall_System)(nil),
		(*Utility_WithWeightCall_Timestamp)(nil),
		(*Utility_WithWeightCall_Babe)(nil),
		(*Utility_WithWeightCall_Grandpa)(nil),
		(*Utility_WithWeightCall_Balances)(nil),
		(*Utility_WithWeightCall_Vesting)(nil),
		(*Utility_WithWeightCall_BagsList)(nil),
		(*Utility_WithWeightCall_ImOnline)(nil),
		(*Utility_WithWeightCall_Staking)(nil),
		(*Utility_WithWeightCall_Session)(nil),
		(*Utility_WithWeightCall_Treasury)(nil),
		(*Utility_WithWeightCall_Utility)(nil),
		(*Utility_WithWeightCall_ConvictionVoting)(nil),
		(*Utility_WithWeightCall_Referenda)(nil),
		(*Utility_WithWeightCall_FellowshipCollective)(nil),
		(*Utility_WithWeightCall_FellowshipReferenda)(nil),
		(*Utility_WithWeightCall_Whitelist)(nil),
		(*Utility_WithWeightCall_Scheduler)(nil),
		(*Utility_WithWeightCall_Preimage)(nil),
		(*Utility_WithWeightCall_Identity)(nil),
		(*Utility_WithWeightCall_Proxy)(nil),
		(*Utility_WithWeightCall_Multisig)(nil),
		(*Utility_WithWeightCall_ElectionProviderMultiPhase)(nil),
		(*Utility_WithWeightCall_Bounties)(nil),
		(*Utility_WithWeightCall_ChildBounties)(nil),
		(*Utility_WithWeightCall_NominationPools)(nil),
		(*Utility_WithWeightCall_Gear)(nil),
		(*Utility_WithWeightCall_StakingRewards)(nil),
		(*Utility_WithWeightCall_GearVoucher)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[50].OneofWrappers = []interface{}{
		(*Identity_New_Id)(nil),
		(*Identity_New_Index)(nil),
		(*Identity_New_Raw)(nil),
		(*Identity_New_Address32)(nil),
		(*Identity_New_Address20)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[54].OneofWrappers = []interface{}{
		(*Staking_MaxValidatorCount_Noop)(nil),
		(*Staking_MaxValidatorCount_Set)(nil),
		(*Staking_MaxValidatorCount_Remove)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[55].OneofWrappers = []interface{}{
		(*Utility_AsDerivativeCall_System)(nil),
		(*Utility_AsDerivativeCall_Timestamp)(nil),
		(*Utility_AsDerivativeCall_Babe)(nil),
		(*Utility_AsDerivativeCall_Grandpa)(nil),
		(*Utility_AsDerivativeCall_Balances)(nil),
		(*Utility_AsDerivativeCall_Vesting)(nil),
		(*Utility_AsDerivativeCall_BagsList)(nil),
		(*Utility_AsDerivativeCall_ImOnline)(nil),
		(*Utility_AsDerivativeCall_Staking)(nil),
		(*Utility_AsDerivativeCall_Session)(nil),
		(*Utility_AsDerivativeCall_Treasury)(nil),
		(*Utility_AsDerivativeCall_Utility)(nil),
		(*Utility_AsDerivativeCall_ConvictionVoting)(nil),
		(*Utility_AsDerivativeCall_Referenda)(nil),
		(*Utility_AsDerivativeCall_FellowshipCollective)(nil),
		(*Utility_AsDerivativeCall_FellowshipReferenda)(nil),
		(*Utility_AsDerivativeCall_Whitelist)(nil),
		(*Utility_AsDerivativeCall_Scheduler)(nil),
		(*Utility_AsDerivativeCall_Preimage)(nil),
		(*Utility_AsDerivativeCall_Identity)(nil),
		(*Utility_AsDerivativeCall_Proxy)(nil),
		(*Utility_AsDerivativeCall_Multisig)(nil),
		(*Utility_AsDerivativeCall_ElectionProviderMultiPhase)(nil),
		(*Utility_AsDerivativeCall_Bounties)(nil),
		(*Utility_AsDerivativeCall_ChildBounties)(nil),
		(*Utility_AsDerivativeCall_NominationPools)(nil),
		(*Utility_AsDerivativeCall_Gear)(nil),
		(*Utility_AsDerivativeCall_StakingRewards)(nil),
		(*Utility_AsDerivativeCall_GearVoucher)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[56].OneofWrappers = []interface{}{}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[73].OneofWrappers = []interface{}{
		(*Proxy_ProxyAnnouncedCall_System)(nil),
		(*Proxy_ProxyAnnouncedCall_Timestamp)(nil),
		(*Proxy_ProxyAnnouncedCall_Babe)(nil),
		(*Proxy_ProxyAnnouncedCall_Grandpa)(nil),
		(*Proxy_ProxyAnnouncedCall_Balances)(nil),
		(*Proxy_ProxyAnnouncedCall_Vesting)(nil),
		(*Proxy_ProxyAnnouncedCall_BagsList)(nil),
		(*Proxy_ProxyAnnouncedCall_ImOnline)(nil),
		(*Proxy_ProxyAnnouncedCall_Staking)(nil),
		(*Proxy_ProxyAnnouncedCall_Session)(nil),
		(*Proxy_ProxyAnnouncedCall_Treasury)(nil),
		(*Proxy_ProxyAnnouncedCall_Utility)(nil),
		(*Proxy_ProxyAnnouncedCall_ConvictionVoting)(nil),
		(*Proxy_ProxyAnnouncedCall_Referenda)(nil),
		(*Proxy_ProxyAnnouncedCall_FellowshipCollective)(nil),
		(*Proxy_ProxyAnnouncedCall_FellowshipReferenda)(nil),
		(*Proxy_ProxyAnnouncedCall_Whitelist)(nil),
		(*Proxy_ProxyAnnouncedCall_Scheduler)(nil),
		(*Proxy_ProxyAnnouncedCall_Preimage)(nil),
		(*Proxy_ProxyAnnouncedCall_Identity)(nil),
		(*Proxy_ProxyAnnouncedCall_Proxy)(nil),
		(*Proxy_ProxyAnnouncedCall_Multisig)(nil),
		(*Proxy_ProxyAnnouncedCall_ElectionProviderMultiPhase)(nil),
		(*Proxy_ProxyAnnouncedCall_Bounties)(nil),
		(*Proxy_ProxyAnnouncedCall_ChildBounties)(nil),
		(*Proxy_ProxyAnnouncedCall_NominationPools)(nil),
		(*Proxy_ProxyAnnouncedCall_Gear)(nil),
		(*Proxy_ProxyAnnouncedCall_StakingRewards)(nil),
		(*Proxy_ProxyAnnouncedCall_GearVoucher)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[81].OneofWrappers = []interface{}{
		(*Staking_Targets_Id)(nil),
		(*Staking_Targets_Index)(nil),
		(*Staking_Targets_Raw)(nil),
		(*Staking_Targets_Address32)(nil),
		(*Staking_Targets_Address20)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[84].OneofWrappers = []interface{}{
		(*GrandpaPallet_ReportEquivocationCall)(nil),
		(*GrandpaPallet_ReportEquivocationUnsignedCall)(nil),
		(*GrandpaPallet_NoteStalledCall)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[86].OneofWrappers = []interface{}{
		(*Vesting_Source_Id)(nil),
		(*Vesting_Source_Index)(nil),
		(*Vesting_Source_Raw)(nil),
		(*Vesting_Source_Address32)(nil),
		(*Vesting_Source_Address20)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[95].OneofWrappers = []interface{}{
		(*NominationPools_State_Open)(nil),
		(*NominationPools_State_Blocked)(nil),
		(*NominationPools_State_Destroying)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[104].OneofWrappers = []interface{}{
		(*Staking_Payee_Staked)(nil),
		(*Staking_Payee_Stash)(nil),
		(*Staking_Payee_Controller)(nil),
		(*Staking_Payee_Account)(nil),
		(*Staking_Payee_None)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[111].OneofWrappers = []interface{}{
		(*SchedulerPallet_ScheduleCall)(nil),
		(*SchedulerPallet_CancelCall)(nil),
		(*SchedulerPallet_ScheduleNamedCall)(nil),
		(*SchedulerPallet_CancelNamedCall)(nil),
		(*SchedulerPallet_ScheduleAfterCall)(nil),
		(*SchedulerPallet_ScheduleNamedAfterCall)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[114].OneofWrappers = []interface{}{
		(*BagsList_Heavier_Id)(nil),
		(*BagsList_Heavier_Index)(nil),
		(*BagsList_Heavier_Raw)(nil),
		(*BagsList_Heavier_Address32)(nil),
		(*BagsList_Heavier_Address20)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[118].OneofWrappers = []interface{}{
		(*Value0_Root)(nil),
		(*Value0_Signed)(nil),
		(*Value0_None)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[120].OneofWrappers = []interface{}{}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[121].OneofWrappers = []interface{}{
		(*NominationPools_MinJoinBond_Noop)(nil),
		(*NominationPools_MinJoinBond_Set)(nil),
		(*NominationPools_MinJoinBond_Remove)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[125].OneofWrappers = []interface{}{}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[128].OneofWrappers = []interface{}{
		(*FellowshipCollective_Who_Id)(nil),
		(*FellowshipCollective_Who_Index)(nil),
		(*FellowshipCollective_Who_Raw)(nil),
		(*FellowshipCollective_Who_Address32)(nil),
		(*FellowshipCollective_Who_Address20)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[129].OneofWrappers = []interface{}{
		(*Identity_Display_None)(nil),
		(*Identity_Display_Raw0)(nil),
		(*Identity_Display_Raw1)(nil),
		(*Identity_Display_Raw2)(nil),
		(*Identity_Display_Raw3)(nil),
		(*Identity_Display_Raw4)(nil),
		(*Identity_Display_Raw5)(nil),
		(*Identity_Display_Raw6)(nil),
		(*Identity_Display_Raw7)(nil),
		(*Identity_Display_Raw8)(nil),
		(*Identity_Display_Raw9)(nil),
		(*Identity_Display_Raw10)(nil),
		(*Identity_Display_Raw11)(nil),
		(*Identity_Display_Raw12)(nil),
		(*Identity_Display_Raw13)(nil),
		(*Identity_Display_Raw14)(nil),
		(*Identity_Display_Raw15)(nil),
		(*Identity_Display_Raw16)(nil),
		(*Identity_Display_Raw17)(nil),
		(*Identity_Display_Raw18)(nil),
		(*Identity_Display_Raw19)(nil),
		(*Identity_Display_Raw20)(nil),
		(*Identity_Display_Raw21)(nil),
		(*Identity_Display_Raw22)(nil),
		(*Identity_Display_Raw23)(nil),
		(*Identity_Display_Raw24)(nil),
		(*Identity_Display_Raw25)(nil),
		(*Identity_Display_Raw26)(nil),
		(*Identity_Display_Raw27)(nil),
		(*Identity_Display_Raw28)(nil),
		(*Identity_Display_Raw29)(nil),
		(*Identity_Display_Raw30)(nil),
		(*Identity_Display_Raw31)(nil),
		(*Identity_Display_Raw32)(nil),
		(*Identity_Display_BlakeTwo256)(nil),
		(*Identity_Display_Sha256)(nil),
		(*Identity_Display_Keccak256)(nil),
		(*Identity_Display_ShaThree256)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[133].OneofWrappers = []interface{}{
		(*NominationPools_Extra_FreeBalance)(nil),
		(*NominationPools_Extra_Rewards)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[134].OneofWrappers = []interface{}{}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[143].OneofWrappers = []interface{}{
		(*Balances_Who_Id)(nil),
		(*Balances_Who_Index)(nil),
		(*Balances_Who_Raw)(nil),
		(*Balances_Who_Address32)(nil),
		(*Balances_Who_Address20)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[144].OneofWrappers = []interface{}{
		(*WhitelistPallet_WhitelistCallCall)(nil),
		(*WhitelistPallet_RemoveWhitelistedCallCall)(nil),
		(*WhitelistPallet_DispatchWhitelistedCallCall)(nil),
		(*WhitelistPallet_DispatchWhitelistedCallWithPreimageCall)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[162].OneofWrappers = []interface{}{
		(*ChildBountiesPallet_AddChildBountyCall)(nil),
		(*ChildBountiesPallet_ProposeCuratorCall)(nil),
		(*ChildBountiesPallet_AcceptCuratorCall)(nil),
		(*ChildBountiesPallet_UnassignCuratorCall)(nil),
		(*ChildBountiesPallet_AwardChildBountyCall)(nil),
		(*ChildBountiesPallet_ClaimChildBountyCall)(nil),
		(*ChildBountiesPallet_CloseChildBountyCall)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[164].OneofWrappers = []interface{}{
		(*Scheduler_ScheduleNamedCall_System)(nil),
		(*Scheduler_ScheduleNamedCall_Timestamp)(nil),
		(*Scheduler_ScheduleNamedCall_Babe)(nil),
		(*Scheduler_ScheduleNamedCall_Grandpa)(nil),
		(*Scheduler_ScheduleNamedCall_Balances)(nil),
		(*Scheduler_ScheduleNamedCall_Vesting)(nil),
		(*Scheduler_ScheduleNamedCall_BagsList)(nil),
		(*Scheduler_ScheduleNamedCall_ImOnline)(nil),
		(*Scheduler_ScheduleNamedCall_Staking)(nil),
		(*Scheduler_ScheduleNamedCall_Session)(nil),
		(*Scheduler_ScheduleNamedCall_Treasury)(nil),
		(*Scheduler_ScheduleNamedCall_Utility)(nil),
		(*Scheduler_ScheduleNamedCall_ConvictionVoting)(nil),
		(*Scheduler_ScheduleNamedCall_Referenda)(nil),
		(*Scheduler_ScheduleNamedCall_FellowshipCollective)(nil),
		(*Scheduler_ScheduleNamedCall_FellowshipReferenda)(nil),
		(*Scheduler_ScheduleNamedCall_Whitelist)(nil),
		(*Scheduler_ScheduleNamedCall_Scheduler)(nil),
		(*Scheduler_ScheduleNamedCall_Preimage)(nil),
		(*Scheduler_ScheduleNamedCall_Identity)(nil),
		(*Scheduler_ScheduleNamedCall_Proxy)(nil),
		(*Scheduler_ScheduleNamedCall_Multisig)(nil),
		(*Scheduler_ScheduleNamedCall_ElectionProviderMultiPhase)(nil),
		(*Scheduler_ScheduleNamedCall_Bounties)(nil),
		(*Scheduler_ScheduleNamedCall_ChildBounties)(nil),
		(*Scheduler_ScheduleNamedCall_NominationPools)(nil),
		(*Scheduler_ScheduleNamedCall_Gear)(nil),
		(*Scheduler_ScheduleNamedCall_StakingRewards)(nil),
		(*Scheduler_ScheduleNamedCall_GearVoucher)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[173].OneofWrappers = []interface{}{
		(*Referenda_ProposalOrigin_System)(nil),
		(*Referenda_ProposalOrigin_Origins)(nil),
		(*Referenda_ProposalOrigin_Void)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[175].OneofWrappers = []interface{}{
		(*Proxy_Delegate_Id)(nil),
		(*Proxy_Delegate_Index)(nil),
		(*Proxy_Delegate_Raw)(nil),
		(*Proxy_Delegate_Address32)(nil),
		(*Proxy_Delegate_Address20)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[192].OneofWrappers = []interface{}{
		(*Bounties_Curator_Id)(nil),
		(*Bounties_Curator_Index)(nil),
		(*Bounties_Curator_Raw)(nil),
		(*Bounties_Curator_Address32)(nil),
		(*Bounties_Curator_Address20)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[196].OneofWrappers = []interface{}{
		(*FellowshipReferendaPallet_SubmitCall)(nil),
		(*FellowshipReferendaPallet_PlaceDecisionDepositCall)(nil),
		(*FellowshipReferendaPallet_RefundDecisionDepositCall)(nil),
		(*FellowshipReferendaPallet_CancelCall)(nil),
		(*FellowshipReferendaPallet_KillCall)(nil),
		(*FellowshipReferendaPallet_NudgeReferendumCall)(nil),
		(*FellowshipReferendaPallet_OneFewerDecidingCall)(nil),
		(*FellowshipReferendaPallet_RefundSubmissionDepositCall)(nil),
		(*FellowshipReferendaPallet_SetMetadataCall)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[200].OneofWrappers = []interface{}{
		(*Staking_MinValidatorBond_Noop)(nil),
		(*Staking_MinValidatorBond_Set)(nil),
		(*Staking_MinValidatorBond_Remove)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[210].OneofWrappers = []interface{}{
		(*Balances_Source_Id)(nil),
		(*Balances_Source_Index)(nil),
		(*Balances_Source_Raw)(nil),
		(*Balances_Source_Address32)(nil),
		(*Balances_Source_Address20)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[214].OneofWrappers = []interface{}{
		(*FellowshipCollectivePallet_AddMemberCall)(nil),
		(*FellowshipCollectivePallet_PromoteMemberCall)(nil),
		(*FellowshipCollectivePallet_DemoteMemberCall)(nil),
		(*FellowshipCollectivePallet_RemoveMemberCall)(nil),
		(*FellowshipCollectivePallet_VoteCall)(nil),
		(*FellowshipCollectivePallet_CleanupPollCall)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[220].OneofWrappers = []interface{}{
		(*Utility_DispatchAsCall_System)(nil),
		(*Utility_DispatchAsCall_Timestamp)(nil),
		(*Utility_DispatchAsCall_Babe)(nil),
		(*Utility_DispatchAsCall_Grandpa)(nil),
		(*Utility_DispatchAsCall_Balances)(nil),
		(*Utility_DispatchAsCall_Vesting)(nil),
		(*Utility_DispatchAsCall_BagsList)(nil),
		(*Utility_DispatchAsCall_ImOnline)(nil),
		(*Utility_DispatchAsCall_Staking)(nil),
		(*Utility_DispatchAsCall_Session)(nil),
		(*Utility_DispatchAsCall_Treasury)(nil),
		(*Utility_DispatchAsCall_Utility)(nil),
		(*Utility_DispatchAsCall_ConvictionVoting)(nil),
		(*Utility_DispatchAsCall_Referenda)(nil),
		(*Utility_DispatchAsCall_FellowshipCollective)(nil),
		(*Utility_DispatchAsCall_FellowshipReferenda)(nil),
		(*Utility_DispatchAsCall_Whitelist)(nil),
		(*Utility_DispatchAsCall_Scheduler)(nil),
		(*Utility_DispatchAsCall_Preimage)(nil),
		(*Utility_DispatchAsCall_Identity)(nil),
		(*Utility_DispatchAsCall_Proxy)(nil),
		(*Utility_DispatchAsCall_Multisig)(nil),
		(*Utility_DispatchAsCall_ElectionProviderMultiPhase)(nil),
		(*Utility_DispatchAsCall_Bounties)(nil),
		(*Utility_DispatchAsCall_ChildBounties)(nil),
		(*Utility_DispatchAsCall_NominationPools)(nil),
		(*Utility_DispatchAsCall_Gear)(nil),
		(*Utility_DispatchAsCall_StakingRewards)(nil),
		(*Utility_DispatchAsCall_GearVoucher)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[221].OneofWrappers = []interface{}{
		(*NominationPools_NewNominator_Noop)(nil),
		(*NominationPools_NewNominator_Set)(nil),
		(*NominationPools_NewNominator_Remove)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[222].OneofWrappers = []interface{}{
		(*Identity_Value0_None)(nil),
		(*Identity_Value0_Raw0)(nil),
		(*Identity_Value0_Raw1)(nil),
		(*Identity_Value0_Raw2)(nil),
		(*Identity_Value0_Raw3)(nil),
		(*Identity_Value0_Raw4)(nil),
		(*Identity_Value0_Raw5)(nil),
		(*Identity_Value0_Raw6)(nil),
		(*Identity_Value0_Raw7)(nil),
		(*Identity_Value0_Raw8)(nil),
		(*Identity_Value0_Raw9)(nil),
		(*Identity_Value0_Raw10)(nil),
		(*Identity_Value0_Raw11)(nil),
		(*Identity_Value0_Raw12)(nil),
		(*Identity_Value0_Raw13)(nil),
		(*Identity_Value0_Raw14)(nil),
		(*Identity_Value0_Raw15)(nil),
		(*Identity_Value0_Raw16)(nil),
		(*Identity_Value0_Raw17)(nil),
		(*Identity_Value0_Raw18)(nil),
		(*Identity_Value0_Raw19)(nil),
		(*Identity_Value0_Raw20)(nil),
		(*Identity_Value0_Raw21)(nil),
		(*Identity_Value0_Raw22)(nil),
		(*Identity_Value0_Raw23)(nil),
		(*Identity_Value0_Raw24)(nil),
		(*Identity_Value0_Raw25)(nil),
		(*Identity_Value0_Raw26)(nil),
		(*Identity_Value0_Raw27)(nil),
		(*Identity_Value0_Raw28)(nil),
		(*Identity_Value0_Raw29)(nil),
		(*Identity_Value0_Raw30)(nil),
		(*Identity_Value0_Raw31)(nil),
		(*Identity_Value0_Raw32)(nil),
		(*Identity_Value0_BlakeTwo256)(nil),
		(*Identity_Value0_Sha256)(nil),
		(*Identity_Value0_Keccak256)(nil),
		(*Identity_Value0_ShaThree256)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[223].OneofWrappers = []interface{}{
		(*Identity_Twitter_None)(nil),
		(*Identity_Twitter_Raw0)(nil),
		(*Identity_Twitter_Raw1)(nil),
		(*Identity_Twitter_Raw2)(nil),
		(*Identity_Twitter_Raw3)(nil),
		(*Identity_Twitter_Raw4)(nil),
		(*Identity_Twitter_Raw5)(nil),
		(*Identity_Twitter_Raw6)(nil),
		(*Identity_Twitter_Raw7)(nil),
		(*Identity_Twitter_Raw8)(nil),
		(*Identity_Twitter_Raw9)(nil),
		(*Identity_Twitter_Raw10)(nil),
		(*Identity_Twitter_Raw11)(nil),
		(*Identity_Twitter_Raw12)(nil),
		(*Identity_Twitter_Raw13)(nil),
		(*Identity_Twitter_Raw14)(nil),
		(*Identity_Twitter_Raw15)(nil),
		(*Identity_Twitter_Raw16)(nil),
		(*Identity_Twitter_Raw17)(nil),
		(*Identity_Twitter_Raw18)(nil),
		(*Identity_Twitter_Raw19)(nil),
		(*Identity_Twitter_Raw20)(nil),
		(*Identity_Twitter_Raw21)(nil),
		(*Identity_Twitter_Raw22)(nil),
		(*Identity_Twitter_Raw23)(nil),
		(*Identity_Twitter_Raw24)(nil),
		(*Identity_Twitter_Raw25)(nil),
		(*Identity_Twitter_Raw26)(nil),
		(*Identity_Twitter_Raw27)(nil),
		(*Identity_Twitter_Raw28)(nil),
		(*Identity_Twitter_Raw29)(nil),
		(*Identity_Twitter_Raw30)(nil),
		(*Identity_Twitter_Raw31)(nil),
		(*Identity_Twitter_Raw32)(nil),
		(*Identity_Twitter_BlakeTwo256)(nil),
		(*Identity_Twitter_Sha256)(nil),
		(*Identity_Twitter_Keccak256)(nil),
		(*Identity_Twitter_ShaThree256)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[225].OneofWrappers = []interface{}{
		(*Babe_Config_V1)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[228].OneofWrappers = []interface{}{
		(*Scheduler_ScheduleNamedAfterCall_System)(nil),
		(*Scheduler_ScheduleNamedAfterCall_Timestamp)(nil),
		(*Scheduler_ScheduleNamedAfterCall_Babe)(nil),
		(*Scheduler_ScheduleNamedAfterCall_Grandpa)(nil),
		(*Scheduler_ScheduleNamedAfterCall_Balances)(nil),
		(*Scheduler_ScheduleNamedAfterCall_Vesting)(nil),
		(*Scheduler_ScheduleNamedAfterCall_BagsList)(nil),
		(*Scheduler_ScheduleNamedAfterCall_ImOnline)(nil),
		(*Scheduler_ScheduleNamedAfterCall_Staking)(nil),
		(*Scheduler_ScheduleNamedAfterCall_Session)(nil),
		(*Scheduler_ScheduleNamedAfterCall_Treasury)(nil),
		(*Scheduler_ScheduleNamedAfterCall_Utility)(nil),
		(*Scheduler_ScheduleNamedAfterCall_ConvictionVoting)(nil),
		(*Scheduler_ScheduleNamedAfterCall_Referenda)(nil),
		(*Scheduler_ScheduleNamedAfterCall_FellowshipCollective)(nil),
		(*Scheduler_ScheduleNamedAfterCall_FellowshipReferenda)(nil),
		(*Scheduler_ScheduleNamedAfterCall_Whitelist)(nil),
		(*Scheduler_ScheduleNamedAfterCall_Scheduler)(nil),
		(*Scheduler_ScheduleNamedAfterCall_Preimage)(nil),
		(*Scheduler_ScheduleNamedAfterCall_Identity)(nil),
		(*Scheduler_ScheduleNamedAfterCall_Proxy)(nil),
		(*Scheduler_ScheduleNamedAfterCall_Multisig)(nil),
		(*Scheduler_ScheduleNamedAfterCall_ElectionProviderMultiPhase)(nil),
		(*Scheduler_ScheduleNamedAfterCall_Bounties)(nil),
		(*Scheduler_ScheduleNamedAfterCall_ChildBounties)(nil),
		(*Scheduler_ScheduleNamedAfterCall_NominationPools)(nil),
		(*Scheduler_ScheduleNamedAfterCall_Gear)(nil),
		(*Scheduler_ScheduleNamedAfterCall_StakingRewards)(nil),
		(*Scheduler_ScheduleNamedAfterCall_GearVoucher)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[238].OneofWrappers = []interface{}{
		(*Identity_Data_None)(nil),
		(*Identity_Data_Raw0)(nil),
		(*Identity_Data_Raw1)(nil),
		(*Identity_Data_Raw2)(nil),
		(*Identity_Data_Raw3)(nil),
		(*Identity_Data_Raw4)(nil),
		(*Identity_Data_Raw5)(nil),
		(*Identity_Data_Raw6)(nil),
		(*Identity_Data_Raw7)(nil),
		(*Identity_Data_Raw8)(nil),
		(*Identity_Data_Raw9)(nil),
		(*Identity_Data_Raw10)(nil),
		(*Identity_Data_Raw11)(nil),
		(*Identity_Data_Raw12)(nil),
		(*Identity_Data_Raw13)(nil),
		(*Identity_Data_Raw14)(nil),
		(*Identity_Data_Raw15)(nil),
		(*Identity_Data_Raw16)(nil),
		(*Identity_Data_Raw17)(nil),
		(*Identity_Data_Raw18)(nil),
		(*Identity_Data_Raw19)(nil),
		(*Identity_Data_Raw20)(nil),
		(*Identity_Data_Raw21)(nil),
		(*Identity_Data_Raw22)(nil),
		(*Identity_Data_Raw23)(nil),
		(*Identity_Data_Raw24)(nil),
		(*Identity_Data_Raw25)(nil),
		(*Identity_Data_Raw26)(nil),
		(*Identity_Data_Raw27)(nil),
		(*Identity_Data_Raw28)(nil),
		(*Identity_Data_Raw29)(nil),
		(*Identity_Data_Raw30)(nil),
		(*Identity_Data_Raw31)(nil),
		(*Identity_Data_Raw32)(nil),
		(*Identity_Data_BlakeTwo256)(nil),
		(*Identity_Data_Sha256)(nil),
		(*Identity_Data_Keccak256)(nil),
		(*Identity_Data_ShaThree256)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[243].OneofWrappers = []interface{}{
		(*ChildBounties_Curator_Id)(nil),
		(*ChildBounties_Curator_Index)(nil),
		(*ChildBounties_Curator_Raw)(nil),
		(*ChildBounties_Curator_Address32)(nil),
		(*ChildBounties_Curator_Address20)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[246].OneofWrappers = []interface{}{
		(*Staking_MinCommission_Noop)(nil),
		(*Staking_MinCommission_Set)(nil),
		(*Staking_MinCommission_Remove)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[248].OneofWrappers = []interface{}{
		(*UtilityPallet_BatchCall)(nil),
		(*UtilityPallet_AsDerivativeCall)(nil),
		(*UtilityPallet_BatchAllCall)(nil),
		(*UtilityPallet_DispatchAsCall)(nil),
		(*UtilityPallet_ForceBatchCall)(nil),
		(*UtilityPallet_WithWeightCall)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[251].OneofWrappers = []interface{}{
		(*StakingRewardsPallet_RefillCall)(nil),
		(*StakingRewardsPallet_ForceRefillCall)(nil),
		(*StakingRewardsPallet_WithdrawCall)(nil),
		(*StakingRewardsPallet_AlignSupplyCall)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[252].OneofWrappers = []interface{}{
		(*GearVoucher_Call_SendMessage)(nil),
		(*GearVoucher_Call_SendReply)(nil),
		(*GearVoucher_Call_UploadCode)(nil),
		(*GearVoucher_Call_DeclineVoucher)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[255].OneofWrappers = []interface{}{
		(*Scheduler_ScheduleCall_System)(nil),
		(*Scheduler_ScheduleCall_Timestamp)(nil),
		(*Scheduler_ScheduleCall_Babe)(nil),
		(*Scheduler_ScheduleCall_Grandpa)(nil),
		(*Scheduler_ScheduleCall_Balances)(nil),
		(*Scheduler_ScheduleCall_Vesting)(nil),
		(*Scheduler_ScheduleCall_BagsList)(nil),
		(*Scheduler_ScheduleCall_ImOnline)(nil),
		(*Scheduler_ScheduleCall_Staking)(nil),
		(*Scheduler_ScheduleCall_Session)(nil),
		(*Scheduler_ScheduleCall_Treasury)(nil),
		(*Scheduler_ScheduleCall_Utility)(nil),
		(*Scheduler_ScheduleCall_ConvictionVoting)(nil),
		(*Scheduler_ScheduleCall_Referenda)(nil),
		(*Scheduler_ScheduleCall_FellowshipCollective)(nil),
		(*Scheduler_ScheduleCall_FellowshipReferenda)(nil),
		(*Scheduler_ScheduleCall_Whitelist)(nil),
		(*Scheduler_ScheduleCall_Scheduler)(nil),
		(*Scheduler_ScheduleCall_Preimage)(nil),
		(*Scheduler_ScheduleCall_Identity)(nil),
		(*Scheduler_ScheduleCall_Proxy)(nil),
		(*Scheduler_ScheduleCall_Multisig)(nil),
		(*Scheduler_ScheduleCall_ElectionProviderMultiPhase)(nil),
		(*Scheduler_ScheduleCall_Bounties)(nil),
		(*Scheduler_ScheduleCall_ChildBounties)(nil),
		(*Scheduler_ScheduleCall_NominationPools)(nil),
		(*Scheduler_ScheduleCall_Gear)(nil),
		(*Scheduler_ScheduleCall_StakingRewards)(nil),
		(*Scheduler_ScheduleCall_GearVoucher)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[258].OneofWrappers = []interface{}{
		(*Staking_MaxNominatorCount_Noop)(nil),
		(*Staking_MaxNominatorCount_Set)(nil),
		(*Staking_MaxNominatorCount_Remove)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[259].OneofWrappers = []interface{}{
		(*Referenda_EnactmentMoment_At)(nil),
		(*Referenda_EnactmentMoment_After)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[267].OneofWrappers = []interface{}{
		(*Proxy_ProxyCall_System)(nil),
		(*Proxy_ProxyCall_Timestamp)(nil),
		(*Proxy_ProxyCall_Babe)(nil),
		(*Proxy_ProxyCall_Grandpa)(nil),
		(*Proxy_ProxyCall_Balances)(nil),
		(*Proxy_ProxyCall_Vesting)(nil),
		(*Proxy_ProxyCall_BagsList)(nil),
		(*Proxy_ProxyCall_ImOnline)(nil),
		(*Proxy_ProxyCall_Staking)(nil),
		(*Proxy_ProxyCall_Session)(nil),
		(*Proxy_ProxyCall_Treasury)(nil),
		(*Proxy_ProxyCall_Utility)(nil),
		(*Proxy_ProxyCall_ConvictionVoting)(nil),
		(*Proxy_ProxyCall_Referenda)(nil),
		(*Proxy_ProxyCall_FellowshipCollective)(nil),
		(*Proxy_ProxyCall_FellowshipReferenda)(nil),
		(*Proxy_ProxyCall_Whitelist)(nil),
		(*Proxy_ProxyCall_Scheduler)(nil),
		(*Proxy_ProxyCall_Preimage)(nil),
		(*Proxy_ProxyCall_Identity)(nil),
		(*Proxy_ProxyCall_Proxy)(nil),
		(*Proxy_ProxyCall_Multisig)(nil),
		(*Proxy_ProxyCall_ElectionProviderMultiPhase)(nil),
		(*Proxy_ProxyCall_Bounties)(nil),
		(*Proxy_ProxyCall_ChildBounties)(nil),
		(*Proxy_ProxyCall_NominationPools)(nil),
		(*Proxy_ProxyCall_Gear)(nil),
		(*Proxy_ProxyCall_StakingRewards)(nil),
		(*Proxy_ProxyCall_GearVoucher)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[274].OneofWrappers = []interface{}{}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[282].OneofWrappers = []interface{}{
		(*StakingPallet_BondCall)(nil),
		(*StakingPallet_BondExtraCall)(nil),
		(*StakingPallet_UnbondCall)(nil),
		(*StakingPallet_WithdrawUnbondedCall)(nil),
		(*StakingPallet_ValidateCall)(nil),
		(*StakingPallet_NominateCall)(nil),
		(*StakingPallet_ChillCall)(nil),
		(*StakingPallet_SetPayeeCall)(nil),
		(*StakingPallet_SetControllerCall)(nil),
		(*StakingPallet_SetValidatorCountCall)(nil),
		(*StakingPallet_IncreaseValidatorCountCall)(nil),
		(*StakingPallet_ScaleValidatorCountCall)(nil),
		(*StakingPallet_ForceNoErasCall)(nil),
		(*StakingPallet_ForceNewEraCall)(nil),
		(*StakingPallet_SetInvulnerablesCall)(nil),
		(*StakingPallet_ForceUnstakeCall)(nil),
		(*StakingPallet_ForceNewEraAlwaysCall)(nil),
		(*StakingPallet_CancelDeferredSlashCall)(nil),
		(*StakingPallet_PayoutStakersCall)(nil),
		(*StakingPallet_RebondCall)(nil),
		(*StakingPallet_ReapStashCall)(nil),
		(*StakingPallet_KickCall)(nil),
		(*StakingPallet_SetStakingConfigsCall)(nil),
		(*StakingPallet_ChillOtherCall)(nil),
		(*StakingPallet_ForceApplyMinCommissionCall)(nil),
		(*StakingPallet_SetMinCommissionCall)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[283].OneofWrappers = []interface{}{
		(*ConvictionVoting_Vote_Standard)(nil),
		(*ConvictionVoting_Vote_Split)(nil),
		(*ConvictionVoting_Vote_SplitAbstain)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[287].OneofWrappers = []interface{}{
		(*ReferendaPallet_SubmitCall)(nil),
		(*ReferendaPallet_PlaceDecisionDepositCall)(nil),
		(*ReferendaPallet_RefundDecisionDepositCall)(nil),
		(*ReferendaPallet_CancelCall)(nil),
		(*ReferendaPallet_KillCall)(nil),
		(*ReferendaPallet_NudgeReferendumCall)(nil),
		(*ReferendaPallet_OneFewerDecidingCall)(nil),
		(*ReferendaPallet_RefundSubmissionDepositCall)(nil),
		(*ReferendaPallet_SetMetadataCall)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[288].OneofWrappers = []interface{}{}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[292].OneofWrappers = []interface{}{
		(*Balances_Dest_Id)(nil),
		(*Balances_Dest_Index)(nil),
		(*Balances_Dest_Raw)(nil),
		(*Balances_Dest_Address32)(nil),
		(*Balances_Dest_Address20)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[297].OneofWrappers = []interface{}{
		(*SessionPallet_SetKeysCall)(nil),
		(*SessionPallet_PurgeKeysCall)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[302].OneofWrappers = []interface{}{
		(*Proxy_Real_Id)(nil),
		(*Proxy_Real_Index)(nil),
		(*Proxy_Real_Raw)(nil),
		(*Proxy_Real_Address32)(nil),
		(*Proxy_Real_Address20)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[304].OneofWrappers = []interface{}{
		(*NominationPools_MaxPools_Noop)(nil),
		(*NominationPools_MaxPools_Set)(nil),
		(*NominationPools_MaxPools_Remove)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[308].OneofWrappers = []interface{}{
		(*Identity_Sub_Id)(nil),
		(*Identity_Sub_Index)(nil),
		(*Identity_Sub_Raw)(nil),
		(*Identity_Sub_Address32)(nil),
		(*Identity_Sub_Address20)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[311].OneofWrappers = []interface{}{
		(*MultisigPallet_AsMultiThreshold1Call)(nil),
		(*MultisigPallet_AsMultiCall)(nil),
		(*MultisigPallet_ApproveAsMultiCall)(nil),
		(*MultisigPallet_CancelAsMultiCall)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[312].OneofWrappers = []interface{}{}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[323].OneofWrappers = []interface{}{
		(*NominationPools_GlobalMaxCommission_Noop)(nil),
		(*NominationPools_GlobalMaxCommission_Set)(nil),
		(*NominationPools_GlobalMaxCommission_Remove)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[327].OneofWrappers = []interface{}{
		(*Identity_Image_None)(nil),
		(*Identity_Image_Raw0)(nil),
		(*Identity_Image_Raw1)(nil),
		(*Identity_Image_Raw2)(nil),
		(*Identity_Image_Raw3)(nil),
		(*Identity_Image_Raw4)(nil),
		(*Identity_Image_Raw5)(nil),
		(*Identity_Image_Raw6)(nil),
		(*Identity_Image_Raw7)(nil),
		(*Identity_Image_Raw8)(nil),
		(*Identity_Image_Raw9)(nil),
		(*Identity_Image_Raw10)(nil),
		(*Identity_Image_Raw11)(nil),
		(*Identity_Image_Raw12)(nil),
		(*Identity_Image_Raw13)(nil),
		(*Identity_Image_Raw14)(nil),
		(*Identity_Image_Raw15)(nil),
		(*Identity_Image_Raw16)(nil),
		(*Identity_Image_Raw17)(nil),
		(*Identity_Image_Raw18)(nil),
		(*Identity_Image_Raw19)(nil),
		(*Identity_Image_Raw20)(nil),
		(*Identity_Image_Raw21)(nil),
		(*Identity_Image_Raw22)(nil),
		(*Identity_Image_Raw23)(nil),
		(*Identity_Image_Raw24)(nil),
		(*Identity_Image_Raw25)(nil),
		(*Identity_Image_Raw26)(nil),
		(*Identity_Image_Raw27)(nil),
		(*Identity_Image_Raw28)(nil),
		(*Identity_Image_Raw29)(nil),
		(*Identity_Image_Raw30)(nil),
		(*Identity_Image_Raw31)(nil),
		(*Identity_Image_Raw32)(nil),
		(*Identity_Image_BlakeTwo256)(nil),
		(*Identity_Image_Sha256)(nil),
		(*Identity_Image_Keccak256)(nil),
		(*Identity_Image_ShaThree256)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[335].OneofWrappers = []interface{}{
		(*NominationPools_NewBouncer_Noop)(nil),
		(*NominationPools_NewBouncer_Set)(nil),
		(*NominationPools_NewBouncer_Remove)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[347].OneofWrappers = []interface{}{
		(*Identity_Value1_None)(nil),
		(*Identity_Value1_Raw0)(nil),
		(*Identity_Value1_Raw1)(nil),
		(*Identity_Value1_Raw2)(nil),
		(*Identity_Value1_Raw3)(nil),
		(*Identity_Value1_Raw4)(nil),
		(*Identity_Value1_Raw5)(nil),
		(*Identity_Value1_Raw6)(nil),
		(*Identity_Value1_Raw7)(nil),
		(*Identity_Value1_Raw8)(nil),
		(*Identity_Value1_Raw9)(nil),
		(*Identity_Value1_Raw10)(nil),
		(*Identity_Value1_Raw11)(nil),
		(*Identity_Value1_Raw12)(nil),
		(*Identity_Value1_Raw13)(nil),
		(*Identity_Value1_Raw14)(nil),
		(*Identity_Value1_Raw15)(nil),
		(*Identity_Value1_Raw16)(nil),
		(*Identity_Value1_Raw17)(nil),
		(*Identity_Value1_Raw18)(nil),
		(*Identity_Value1_Raw19)(nil),
		(*Identity_Value1_Raw20)(nil),
		(*Identity_Value1_Raw21)(nil),
		(*Identity_Value1_Raw22)(nil),
		(*Identity_Value1_Raw23)(nil),
		(*Identity_Value1_Raw24)(nil),
		(*Identity_Value1_Raw25)(nil),
		(*Identity_Value1_Raw26)(nil),
		(*Identity_Value1_Raw27)(nil),
		(*Identity_Value1_Raw28)(nil),
		(*Identity_Value1_Raw29)(nil),
		(*Identity_Value1_Raw30)(nil),
		(*Identity_Value1_Raw31)(nil),
		(*Identity_Value1_Raw32)(nil),
		(*Identity_Value1_BlakeTwo256)(nil),
		(*Identity_Value1_Sha256)(nil),
		(*Identity_Value1_Keccak256)(nil),
		(*Identity_Value1_ShaThree256)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[353].OneofWrappers = []interface{}{
		(*Vesting_Target_Id)(nil),
		(*Vesting_Target_Index)(nil),
		(*Vesting_Target_Raw)(nil),
		(*Vesting_Target_Address32)(nil),
		(*Vesting_Target_Address20)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[354].OneofWrappers = []interface{}{
		(*ConvictionVoting_Target_Id)(nil),
		(*ConvictionVoting_Target_Index)(nil),
		(*ConvictionVoting_Target_Raw)(nil),
		(*ConvictionVoting_Target_Address32)(nil),
		(*ConvictionVoting_Target_Address20)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[359].OneofWrappers = []interface{}{
		(*AllowedSlots_PrimarySlots)(nil),
		(*AllowedSlots_PrimaryAndSecondaryPlainSlots)(nil),
		(*AllowedSlots_PrimaryAndSecondaryVrfSlots)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[361].OneofWrappers = []interface{}{
		(*ConvictionVotingPallet_VoteCall)(nil),
		(*ConvictionVotingPallet_DelegateCall)(nil),
		(*ConvictionVotingPallet_UndelegateCall)(nil),
		(*ConvictionVotingPallet_UnlockCall)(nil),
		(*ConvictionVotingPallet_RemoveVoteCall)(nil),
		(*ConvictionVotingPallet_RemoveOtherVoteCall)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[363].OneofWrappers = []interface{}{
		(*Identity_Account_Id)(nil),
		(*Identity_Account_Index)(nil),
		(*Identity_Account_Raw)(nil),
		(*Identity_Account_Address32)(nil),
		(*Identity_Account_Address20)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[368].OneofWrappers = []interface{}{
		(*GearPallet_UploadCodeCall)(nil),
		(*GearPallet_UploadProgramCall)(nil),
		(*GearPallet_CreateProgramCall)(nil),
		(*GearPallet_SendMessageCall)(nil),
		(*GearPallet_SendReplyCall)(nil),
		(*GearPallet_ClaimValueCall)(nil),
		(*GearPallet_RunCall)(nil),
		(*GearPallet_SetExecuteInherentCall)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[383].OneofWrappers = []interface{}{
		(*Identity_Email_None)(nil),
		(*Identity_Email_Raw0)(nil),
		(*Identity_Email_Raw1)(nil),
		(*Identity_Email_Raw2)(nil),
		(*Identity_Email_Raw3)(nil),
		(*Identity_Email_Raw4)(nil),
		(*Identity_Email_Raw5)(nil),
		(*Identity_Email_Raw6)(nil),
		(*Identity_Email_Raw7)(nil),
		(*Identity_Email_Raw8)(nil),
		(*Identity_Email_Raw9)(nil),
		(*Identity_Email_Raw10)(nil),
		(*Identity_Email_Raw11)(nil),
		(*Identity_Email_Raw12)(nil),
		(*Identity_Email_Raw13)(nil),
		(*Identity_Email_Raw14)(nil),
		(*Identity_Email_Raw15)(nil),
		(*Identity_Email_Raw16)(nil),
		(*Identity_Email_Raw17)(nil),
		(*Identity_Email_Raw18)(nil),
		(*Identity_Email_Raw19)(nil),
		(*Identity_Email_Raw20)(nil),
		(*Identity_Email_Raw21)(nil),
		(*Identity_Email_Raw22)(nil),
		(*Identity_Email_Raw23)(nil),
		(*Identity_Email_Raw24)(nil),
		(*Identity_Email_Raw25)(nil),
		(*Identity_Email_Raw26)(nil),
		(*Identity_Email_Raw27)(nil),
		(*Identity_Email_Raw28)(nil),
		(*Identity_Email_Raw29)(nil),
		(*Identity_Email_Raw30)(nil),
		(*Identity_Email_Raw31)(nil),
		(*Identity_Email_Raw32)(nil),
		(*Identity_Email_BlakeTwo256)(nil),
		(*Identity_Email_Sha256)(nil),
		(*Identity_Email_Keccak256)(nil),
		(*Identity_Email_ShaThree256)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[386].OneofWrappers = []interface{}{}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[389].OneofWrappers = []interface{}{
		(*NominationPools_MemberAccount_Id)(nil),
		(*NominationPools_MemberAccount_Index)(nil),
		(*NominationPools_MemberAccount_Raw)(nil),
		(*NominationPools_MemberAccount_Address32)(nil),
		(*NominationPools_MemberAccount_Address20)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[391].OneofWrappers = []interface{}{
		(*BagsListPallet_RebagCall)(nil),
		(*BagsListPallet_PutInFrontOfCall)(nil),
		(*BagsListPallet_PutInFrontOfOtherCall)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[394].OneofWrappers = []interface{}{
		(*IdentityPallet_AddRegistrarCall)(nil),
		(*IdentityPallet_SetIdentityCall)(nil),
		(*IdentityPallet_SetSubsCall)(nil),
		(*IdentityPallet_ClearIdentityCall)(nil),
		(*IdentityPallet_RequestJudgementCall)(nil),
		(*IdentityPallet_CancelRequestCall)(nil),
		(*IdentityPallet_SetFeeCall)(nil),
		(*IdentityPallet_SetAccountIdCall)(nil),
		(*IdentityPallet_SetFieldsCall)(nil),
		(*IdentityPallet_ProvideJudgementCall)(nil),
		(*IdentityPallet_KillIdentityCall)(nil),
		(*IdentityPallet_AddSubCall)(nil),
		(*IdentityPallet_RenameSubCall)(nil),
		(*IdentityPallet_RemoveSubCall)(nil),
		(*IdentityPallet_QuitSubCall)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[396].OneofWrappers = []interface{}{
		(*BagsList_Dislocated_Id)(nil),
		(*BagsList_Dislocated_Index)(nil),
		(*BagsList_Dislocated_Raw)(nil),
		(*BagsList_Dislocated_Address32)(nil),
		(*BagsList_Dislocated_Address20)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[399].OneofWrappers = []interface{}{
		(*StakingRewards_To_Id)(nil),
		(*StakingRewards_To_Index)(nil),
		(*StakingRewards_To_Raw)(nil),
		(*StakingRewards_To_Address32)(nil),
		(*StakingRewards_To_Address20)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[400].OneofWrappers = []interface{}{
		(*Identity_Judgement_Unknown)(nil),
		(*Identity_Judgement_FeePaid)(nil),
		(*Identity_Judgement_Reasonable)(nil),
		(*Identity_Judgement_KnownGood)(nil),
		(*Identity_Judgement_OutOfDate)(nil),
		(*Identity_Judgement_LowQuality)(nil),
		(*Identity_Judgement_Erroneous)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[404].OneofWrappers = []interface{}{
		(*BalancesPallet_TransferAllowDeathCall)(nil),
		(*BalancesPallet_ForceTransferCall)(nil),
		(*BalancesPallet_TransferKeepAliveCall)(nil),
		(*BalancesPallet_TransferAllCall)(nil),
		(*BalancesPallet_ForceUnreserveCall)(nil),
		(*BalancesPallet_UpgradeAccountsCall)(nil),
		(*BalancesPallet_ForceSetBalanceCall)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[405].OneofWrappers = []interface{}{
		(*BagsList_Lighter_Id)(nil),
		(*BagsList_Lighter_Index)(nil),
		(*BagsList_Lighter_Raw)(nil),
		(*BagsList_Lighter_Address32)(nil),
		(*BagsList_Lighter_Address20)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[407].OneofWrappers = []interface{}{
		(*Identity_Legal_None)(nil),
		(*Identity_Legal_Raw0)(nil),
		(*Identity_Legal_Raw1)(nil),
		(*Identity_Legal_Raw2)(nil),
		(*Identity_Legal_Raw3)(nil),
		(*Identity_Legal_Raw4)(nil),
		(*Identity_Legal_Raw5)(nil),
		(*Identity_Legal_Raw6)(nil),
		(*Identity_Legal_Raw7)(nil),
		(*Identity_Legal_Raw8)(nil),
		(*Identity_Legal_Raw9)(nil),
		(*Identity_Legal_Raw10)(nil),
		(*Identity_Legal_Raw11)(nil),
		(*Identity_Legal_Raw12)(nil),
		(*Identity_Legal_Raw13)(nil),
		(*Identity_Legal_Raw14)(nil),
		(*Identity_Legal_Raw15)(nil),
		(*Identity_Legal_Raw16)(nil),
		(*Identity_Legal_Raw17)(nil),
		(*Identity_Legal_Raw18)(nil),
		(*Identity_Legal_Raw19)(nil),
		(*Identity_Legal_Raw20)(nil),
		(*Identity_Legal_Raw21)(nil),
		(*Identity_Legal_Raw22)(nil),
		(*Identity_Legal_Raw23)(nil),
		(*Identity_Legal_Raw24)(nil),
		(*Identity_Legal_Raw25)(nil),
		(*Identity_Legal_Raw26)(nil),
		(*Identity_Legal_Raw27)(nil),
		(*Identity_Legal_Raw28)(nil),
		(*Identity_Legal_Raw29)(nil),
		(*Identity_Legal_Raw30)(nil),
		(*Identity_Legal_Raw31)(nil),
		(*Identity_Legal_Raw32)(nil),
		(*Identity_Legal_BlakeTwo256)(nil),
		(*Identity_Legal_Sha256)(nil),
		(*Identity_Legal_Keccak256)(nil),
		(*Identity_Legal_ShaThree256)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[409].OneofWrappers = []interface{}{
		(*FellowshipReferenda_ProposalOrigin_System)(nil),
		(*FellowshipReferenda_ProposalOrigin_Origins)(nil),
		(*FellowshipReferenda_ProposalOrigin_Void)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[413].OneofWrappers = []interface{}{
		(*SystemPallet_RemarkCall)(nil),
		(*SystemPallet_SetHeapPagesCall)(nil),
		(*SystemPallet_SetCodeCall)(nil),
		(*SystemPallet_SetCodeWithoutChecksCall)(nil),
		(*SystemPallet_SetStorageCall)(nil),
		(*SystemPallet_KillStorageCall)(nil),
		(*SystemPallet_KillPrefixCall)(nil),
		(*SystemPallet_RemarkWithEventCall)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[420].OneofWrappers = []interface{}{
		(*Identity_Web_None)(nil),
		(*Identity_Web_Raw0)(nil),
		(*Identity_Web_Raw1)(nil),
		(*Identity_Web_Raw2)(nil),
		(*Identity_Web_Raw3)(nil),
		(*Identity_Web_Raw4)(nil),
		(*Identity_Web_Raw5)(nil),
		(*Identity_Web_Raw6)(nil),
		(*Identity_Web_Raw7)(nil),
		(*Identity_Web_Raw8)(nil),
		(*Identity_Web_Raw9)(nil),
		(*Identity_Web_Raw10)(nil),
		(*Identity_Web_Raw11)(nil),
		(*Identity_Web_Raw12)(nil),
		(*Identity_Web_Raw13)(nil),
		(*Identity_Web_Raw14)(nil),
		(*Identity_Web_Raw15)(nil),
		(*Identity_Web_Raw16)(nil),
		(*Identity_Web_Raw17)(nil),
		(*Identity_Web_Raw18)(nil),
		(*Identity_Web_Raw19)(nil),
		(*Identity_Web_Raw20)(nil),
		(*Identity_Web_Raw21)(nil),
		(*Identity_Web_Raw22)(nil),
		(*Identity_Web_Raw23)(nil),
		(*Identity_Web_Raw24)(nil),
		(*Identity_Web_Raw25)(nil),
		(*Identity_Web_Raw26)(nil),
		(*Identity_Web_Raw27)(nil),
		(*Identity_Web_Raw28)(nil),
		(*Identity_Web_Raw29)(nil),
		(*Identity_Web_Raw30)(nil),
		(*Identity_Web_Raw31)(nil),
		(*Identity_Web_Raw32)(nil),
		(*Identity_Web_BlakeTwo256)(nil),
		(*Identity_Web_Sha256)(nil),
		(*Identity_Web_Keccak256)(nil),
		(*Identity_Web_ShaThree256)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[424].OneofWrappers = []interface{}{
		(*Staking_ChillThreshold_Noop)(nil),
		(*Staking_ChillThreshold_Set)(nil),
		(*Staking_ChillThreshold_Remove)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[428].OneofWrappers = []interface{}{
		(*Treasury_Beneficiary_Id)(nil),
		(*Treasury_Beneficiary_Index)(nil),
		(*Treasury_Beneficiary_Raw)(nil),
		(*Treasury_Beneficiary_Address32)(nil),
		(*Treasury_Beneficiary_Address20)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[429].OneofWrappers = []interface{}{
		(*ConvictionVoting_Conviction_None)(nil),
		(*ConvictionVoting_Conviction_Locked1X)(nil),
		(*ConvictionVoting_Conviction_Locked2X)(nil),
		(*ConvictionVoting_Conviction_Locked3X)(nil),
		(*ConvictionVoting_Conviction_Locked4X)(nil),
		(*ConvictionVoting_Conviction_Locked5X)(nil),
		(*ConvictionVoting_Conviction_Locked6X)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[430].OneofWrappers = []interface{}{
		(*FellowshipReferenda_Proposal_Legacy)(nil),
		(*FellowshipReferenda_Proposal_Inline)(nil),
		(*FellowshipReferenda_Proposal_Lookup)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[434].OneofWrappers = []interface{}{
		(*ProxyPallet_ProxyCall)(nil),
		(*ProxyPallet_AddProxyCall)(nil),
		(*ProxyPallet_RemoveProxyCall)(nil),
		(*ProxyPallet_RemoveProxiesCall)(nil),
		(*ProxyPallet_CreatePureCall)(nil),
		(*ProxyPallet_KillPureCall)(nil),
		(*ProxyPallet_AnnounceCall)(nil),
		(*ProxyPallet_RemoveAnnouncementCall)(nil),
		(*ProxyPallet_RejectAnnouncementCall)(nil),
		(*ProxyPallet_ProxyAnnouncedCall)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[436].OneofWrappers = []interface{}{
		(*VestingPallet_VestCall)(nil),
		(*VestingPallet_VestOtherCall)(nil),
		(*VestingPallet_VestedTransferCall)(nil),
		(*VestingPallet_ForceVestedTransferCall)(nil),
		(*VestingPallet_MergeSchedulesCall)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[445].OneofWrappers = []interface{}{
		(*NominationPools_Member_Id)(nil),
		(*NominationPools_Member_Index)(nil),
		(*NominationPools_Member_Raw)(nil),
		(*NominationPools_Member_Address32)(nil),
		(*NominationPools_Member_Address20)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[447].OneofWrappers = []interface{}{
		(*Proxy_Spawner_Id)(nil),
		(*Proxy_Spawner_Index)(nil),
		(*Proxy_Spawner_Raw)(nil),
		(*Proxy_Spawner_Address32)(nil),
		(*Proxy_Spawner_Address20)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[448].OneofWrappers = []interface{}{
		(*NominationPoolsPallet_JoinCall)(nil),
		(*NominationPoolsPallet_BondExtraCall)(nil),
		(*NominationPoolsPallet_ClaimPayoutCall)(nil),
		(*NominationPoolsPallet_UnbondCall)(nil),
		(*NominationPoolsPallet_PoolWithdrawUnbondedCall)(nil),
		(*NominationPoolsPallet_WithdrawUnbondedCall)(nil),
		(*NominationPoolsPallet_CreateCall)(nil),
		(*NominationPoolsPallet_CreateWithPoolIdCall)(nil),
		(*NominationPoolsPallet_NominateCall)(nil),
		(*NominationPoolsPallet_SetStateCall)(nil),
		(*NominationPoolsPallet_SetMetadataCall)(nil),
		(*NominationPoolsPallet_SetConfigsCall)(nil),
		(*NominationPoolsPallet_UpdateRolesCall)(nil),
		(*NominationPoolsPallet_ChillCall)(nil),
		(*NominationPoolsPallet_BondExtraOtherCall)(nil),
		(*NominationPoolsPallet_SetClaimPermissionCall)(nil),
		(*NominationPoolsPallet_ClaimPayoutOtherCall)(nil),
		(*NominationPoolsPallet_SetCommissionCall)(nil),
		(*NominationPoolsPallet_SetCommissionMaxCall)(nil),
		(*NominationPoolsPallet_SetCommissionChangeRateCall)(nil),
		(*NominationPoolsPallet_ClaimCommissionCall)(nil),
		(*NominationPoolsPallet_AdjustPoolDepositCall)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[452].OneofWrappers = []interface{}{
		(*Whitelist_DispatchWhitelistedCallWithPreimageCall_System)(nil),
		(*Whitelist_DispatchWhitelistedCallWithPreimageCall_Timestamp)(nil),
		(*Whitelist_DispatchWhitelistedCallWithPreimageCall_Babe)(nil),
		(*Whitelist_DispatchWhitelistedCallWithPreimageCall_Grandpa)(nil),
		(*Whitelist_DispatchWhitelistedCallWithPreimageCall_Balances)(nil),
		(*Whitelist_DispatchWhitelistedCallWithPreimageCall_Vesting)(nil),
		(*Whitelist_DispatchWhitelistedCallWithPreimageCall_BagsList)(nil),
		(*Whitelist_DispatchWhitelistedCallWithPreimageCall_ImOnline)(nil),
		(*Whitelist_DispatchWhitelistedCallWithPreimageCall_Staking)(nil),
		(*Whitelist_DispatchWhitelistedCallWithPreimageCall_Session)(nil),
		(*Whitelist_DispatchWhitelistedCallWithPreimageCall_Treasury)(nil),
		(*Whitelist_DispatchWhitelistedCallWithPreimageCall_Utility)(nil),
		(*Whitelist_DispatchWhitelistedCallWithPreimageCall_ConvictionVoting)(nil),
		(*Whitelist_DispatchWhitelistedCallWithPreimageCall_Referenda)(nil),
		(*Whitelist_DispatchWhitelistedCallWithPreimageCall_FellowshipCollective)(nil),
		(*Whitelist_DispatchWhitelistedCallWithPreimageCall_FellowshipReferenda)(nil),
		(*Whitelist_DispatchWhitelistedCallWithPreimageCall_Whitelist)(nil),
		(*Whitelist_DispatchWhitelistedCallWithPreimageCall_Scheduler)(nil),
		(*Whitelist_DispatchWhitelistedCallWithPreimageCall_Preimage)(nil),
		(*Whitelist_DispatchWhitelistedCallWithPreimageCall_Identity)(nil),
		(*Whitelist_DispatchWhitelistedCallWithPreimageCall_Proxy)(nil),
		(*Whitelist_DispatchWhitelistedCallWithPreimageCall_Multisig)(nil),
		(*Whitelist_DispatchWhitelistedCallWithPreimageCall_ElectionProviderMultiPhase)(nil),
		(*Whitelist_DispatchWhitelistedCallWithPreimageCall_Bounties)(nil),
		(*Whitelist_DispatchWhitelistedCallWithPreimageCall_ChildBounties)(nil),
		(*Whitelist_DispatchWhitelistedCallWithPreimageCall_NominationPools)(nil),
		(*Whitelist_DispatchWhitelistedCallWithPreimageCall_Gear)(nil),
		(*Whitelist_DispatchWhitelistedCallWithPreimageCall_StakingRewards)(nil),
		(*Whitelist_DispatchWhitelistedCallWithPreimageCall_GearVoucher)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[463].OneofWrappers = []interface{}{
		(*Identity_Riot_None)(nil),
		(*Identity_Riot_Raw0)(nil),
		(*Identity_Riot_Raw1)(nil),
		(*Identity_Riot_Raw2)(nil),
		(*Identity_Riot_Raw3)(nil),
		(*Identity_Riot_Raw4)(nil),
		(*Identity_Riot_Raw5)(nil),
		(*Identity_Riot_Raw6)(nil),
		(*Identity_Riot_Raw7)(nil),
		(*Identity_Riot_Raw8)(nil),
		(*Identity_Riot_Raw9)(nil),
		(*Identity_Riot_Raw10)(nil),
		(*Identity_Riot_Raw11)(nil),
		(*Identity_Riot_Raw12)(nil),
		(*Identity_Riot_Raw13)(nil),
		(*Identity_Riot_Raw14)(nil),
		(*Identity_Riot_Raw15)(nil),
		(*Identity_Riot_Raw16)(nil),
		(*Identity_Riot_Raw17)(nil),
		(*Identity_Riot_Raw18)(nil),
		(*Identity_Riot_Raw19)(nil),
		(*Identity_Riot_Raw20)(nil),
		(*Identity_Riot_Raw21)(nil),
		(*Identity_Riot_Raw22)(nil),
		(*Identity_Riot_Raw23)(nil),
		(*Identity_Riot_Raw24)(nil),
		(*Identity_Riot_Raw25)(nil),
		(*Identity_Riot_Raw26)(nil),
		(*Identity_Riot_Raw27)(nil),
		(*Identity_Riot_Raw28)(nil),
		(*Identity_Riot_Raw29)(nil),
		(*Identity_Riot_Raw30)(nil),
		(*Identity_Riot_Raw31)(nil),
		(*Identity_Riot_Raw32)(nil),
		(*Identity_Riot_BlakeTwo256)(nil),
		(*Identity_Riot_Sha256)(nil),
		(*Identity_Riot_Keccak256)(nil),
		(*Identity_Riot_ShaThree256)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[469].OneofWrappers = []interface{}{
		(*Staking_MinNominatorBond_Noop)(nil),
		(*Staking_MinNominatorBond_Set)(nil),
		(*Staking_MinNominatorBond_Remove)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[478].OneofWrappers = []interface{}{
		(*Multisig_AsMultiThreshold1Call_System)(nil),
		(*Multisig_AsMultiThreshold1Call_Timestamp)(nil),
		(*Multisig_AsMultiThreshold1Call_Babe)(nil),
		(*Multisig_AsMultiThreshold1Call_Grandpa)(nil),
		(*Multisig_AsMultiThreshold1Call_Balances)(nil),
		(*Multisig_AsMultiThreshold1Call_Vesting)(nil),
		(*Multisig_AsMultiThreshold1Call_BagsList)(nil),
		(*Multisig_AsMultiThreshold1Call_ImOnline)(nil),
		(*Multisig_AsMultiThreshold1Call_Staking)(nil),
		(*Multisig_AsMultiThreshold1Call_Session)(nil),
		(*Multisig_AsMultiThreshold1Call_Treasury)(nil),
		(*Multisig_AsMultiThreshold1Call_Utility)(nil),
		(*Multisig_AsMultiThreshold1Call_ConvictionVoting)(nil),
		(*Multisig_AsMultiThreshold1Call_Referenda)(nil),
		(*Multisig_AsMultiThreshold1Call_FellowshipCollective)(nil),
		(*Multisig_AsMultiThreshold1Call_FellowshipReferenda)(nil),
		(*Multisig_AsMultiThreshold1Call_Whitelist)(nil),
		(*Multisig_AsMultiThreshold1Call_Scheduler)(nil),
		(*Multisig_AsMultiThreshold1Call_Preimage)(nil),
		(*Multisig_AsMultiThreshold1Call_Identity)(nil),
		(*Multisig_AsMultiThreshold1Call_Proxy)(nil),
		(*Multisig_AsMultiThreshold1Call_Multisig)(nil),
		(*Multisig_AsMultiThreshold1Call_ElectionProviderMultiPhase)(nil),
		(*Multisig_AsMultiThreshold1Call_Bounties)(nil),
		(*Multisig_AsMultiThreshold1Call_ChildBounties)(nil),
		(*Multisig_AsMultiThreshold1Call_NominationPools)(nil),
		(*Multisig_AsMultiThreshold1Call_Gear)(nil),
		(*Multisig_AsMultiThreshold1Call_StakingRewards)(nil),
		(*Multisig_AsMultiThreshold1Call_GearVoucher)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[484].OneofWrappers = []interface{}{
		(*Proxy_ProxyType_Any)(nil),
		(*Proxy_ProxyType_NonTransfer)(nil),
		(*Proxy_ProxyType_Governance)(nil),
		(*Proxy_ProxyType_Staking)(nil),
		(*Proxy_ProxyType_IdentityJudgement)(nil),
		(*Proxy_ProxyType_CancelProxy)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[489].OneofWrappers = []interface{}{
		(*Referenda_Proposal_Legacy)(nil),
		(*Referenda_Proposal_Inline)(nil),
		(*Referenda_Proposal_Lookup)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[497].OneofWrappers = []interface{}{}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[502].OneofWrappers = []interface{}{
		(*NominationPools_NewRoot_Noop)(nil),
		(*NominationPools_NewRoot_Set)(nil),
		(*NominationPools_NewRoot_Remove)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[526].OneofWrappers = []interface{}{
		(*Utility_AsOrigin_System)(nil),
		(*Utility_AsOrigin_Origins)(nil),
		(*Utility_AsOrigin_Void)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[530].OneofWrappers = []interface{}{
		(*BabePallet_ReportEquivocationCall)(nil),
		(*BabePallet_ReportEquivocationUnsignedCall)(nil),
		(*BabePallet_PlanConfigChangeCall)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[531].OneofWrappers = []interface{}{
		(*ImOnlinePallet_HeartbeatCall)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[535].OneofWrappers = []interface{}{
		(*Scheduler_ScheduleAfterCall_System)(nil),
		(*Scheduler_ScheduleAfterCall_Timestamp)(nil),
		(*Scheduler_ScheduleAfterCall_Babe)(nil),
		(*Scheduler_ScheduleAfterCall_Grandpa)(nil),
		(*Scheduler_ScheduleAfterCall_Balances)(nil),
		(*Scheduler_ScheduleAfterCall_Vesting)(nil),
		(*Scheduler_ScheduleAfterCall_BagsList)(nil),
		(*Scheduler_ScheduleAfterCall_ImOnline)(nil),
		(*Scheduler_ScheduleAfterCall_Staking)(nil),
		(*Scheduler_ScheduleAfterCall_Session)(nil),
		(*Scheduler_ScheduleAfterCall_Treasury)(nil),
		(*Scheduler_ScheduleAfterCall_Utility)(nil),
		(*Scheduler_ScheduleAfterCall_ConvictionVoting)(nil),
		(*Scheduler_ScheduleAfterCall_Referenda)(nil),
		(*Scheduler_ScheduleAfterCall_FellowshipCollective)(nil),
		(*Scheduler_ScheduleAfterCall_FellowshipReferenda)(nil),
		(*Scheduler_ScheduleAfterCall_Whitelist)(nil),
		(*Scheduler_ScheduleAfterCall_Scheduler)(nil),
		(*Scheduler_ScheduleAfterCall_Preimage)(nil),
		(*Scheduler_ScheduleAfterCall_Identity)(nil),
		(*Scheduler_ScheduleAfterCall_Proxy)(nil),
		(*Scheduler_ScheduleAfterCall_Multisig)(nil),
		(*Scheduler_ScheduleAfterCall_ElectionProviderMultiPhase)(nil),
		(*Scheduler_ScheduleAfterCall_Bounties)(nil),
		(*Scheduler_ScheduleAfterCall_ChildBounties)(nil),
		(*Scheduler_ScheduleAfterCall_NominationPools)(nil),
		(*Scheduler_ScheduleAfterCall_Gear)(nil),
		(*Scheduler_ScheduleAfterCall_StakingRewards)(nil),
		(*Scheduler_ScheduleAfterCall_GearVoucher)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[543].OneofWrappers = []interface{}{}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[544].OneofWrappers = []interface{}{
		(*StakingRewards_From_Id)(nil),
		(*StakingRewards_From_Index)(nil),
		(*StakingRewards_From_Raw)(nil),
		(*StakingRewards_From_Address32)(nil),
		(*StakingRewards_From_Address20)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[547].OneofWrappers = []interface{}{}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[559].OneofWrappers = []interface{}{
		(*Bounties_Beneficiary_Id)(nil),
		(*Bounties_Beneficiary_Index)(nil),
		(*Bounties_Beneficiary_Raw)(nil),
		(*Bounties_Beneficiary_Address32)(nil),
		(*Bounties_Beneficiary_Address20)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[560].OneofWrappers = []interface{}{
		(*NominationPools_Permission_Permissioned)(nil),
		(*NominationPools_Permission_PermissionlessCompound)(nil),
		(*NominationPools_Permission_PermissionlessWithdraw)(nil),
		(*NominationPools_Permission_PermissionlessAll)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[562].OneofWrappers = []interface{}{
		(*ChildBounties_Beneficiary_Id)(nil),
		(*ChildBounties_Beneficiary_Index)(nil),
		(*ChildBounties_Beneficiary_Raw)(nil),
		(*ChildBounties_Beneficiary_Address32)(nil),
		(*ChildBounties_Beneficiary_Address20)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[563].OneofWrappers = []interface{}{
		(*TimestampPallet_SetCall)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[564].OneofWrappers = []interface{}{
		(*NominationPools_Bouncer_Id)(nil),
		(*NominationPools_Bouncer_Index)(nil),
		(*NominationPools_Bouncer_Raw)(nil),
		(*NominationPools_Bouncer_Address32)(nil),
		(*NominationPools_Bouncer_Address20)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[569].OneofWrappers = []interface{}{
		(*VaraRuntimeRuntimeCall_System)(nil),
		(*VaraRuntimeRuntimeCall_Timestamp)(nil),
		(*VaraRuntimeRuntimeCall_Babe)(nil),
		(*VaraRuntimeRuntimeCall_Grandpa)(nil),
		(*VaraRuntimeRuntimeCall_Balances)(nil),
		(*VaraRuntimeRuntimeCall_Vesting)(nil),
		(*VaraRuntimeRuntimeCall_BagsList)(nil),
		(*VaraRuntimeRuntimeCall_ImOnline)(nil),
		(*VaraRuntimeRuntimeCall_Staking)(nil),
		(*VaraRuntimeRuntimeCall_Session)(nil),
		(*VaraRuntimeRuntimeCall_Treasury)(nil),
		(*VaraRuntimeRuntimeCall_Utility)(nil),
		(*VaraRuntimeRuntimeCall_ConvictionVoting)(nil),
		(*VaraRuntimeRuntimeCall_Referenda)(nil),
		(*VaraRuntimeRuntimeCall_FellowshipCollective)(nil),
		(*VaraRuntimeRuntimeCall_FellowshipReferenda)(nil),
		(*VaraRuntimeRuntimeCall_Whitelist)(nil),
		(*VaraRuntimeRuntimeCall_Scheduler)(nil),
		(*VaraRuntimeRuntimeCall_Preimage)(nil),
		(*VaraRuntimeRuntimeCall_Identity)(nil),
		(*VaraRuntimeRuntimeCall_Proxy)(nil),
		(*VaraRuntimeRuntimeCall_Multisig)(nil),
		(*VaraRuntimeRuntimeCall_ElectionProviderMultiPhase)(nil),
		(*VaraRuntimeRuntimeCall_Bounties)(nil),
		(*VaraRuntimeRuntimeCall_ChildBounties)(nil),
		(*VaraRuntimeRuntimeCall_NominationPools)(nil),
		(*VaraRuntimeRuntimeCall_Gear)(nil),
		(*VaraRuntimeRuntimeCall_StakingRewards)(nil),
		(*VaraRuntimeRuntimeCall_GearVoucher)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[571].OneofWrappers = []interface{}{
		(*BountiesPallet_ProposeBountyCall)(nil),
		(*BountiesPallet_ApproveBountyCall)(nil),
		(*BountiesPallet_ProposeCuratorCall)(nil),
		(*BountiesPallet_UnassignCuratorCall)(nil),
		(*BountiesPallet_AcceptCuratorCall)(nil),
		(*BountiesPallet_AwardBountyCall)(nil),
		(*BountiesPallet_ClaimBountyCall)(nil),
		(*BountiesPallet_CloseBountyCall)(nil),
		(*BountiesPallet_ExtendBountyExpiryCall)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[572].OneofWrappers = []interface{}{
		(*Staking_Who_Id)(nil),
		(*Staking_Who_Index)(nil),
		(*Staking_Who_Raw)(nil),
		(*Staking_Who_Address32)(nil),
		(*Staking_Who_Address20)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[574].OneofWrappers = []interface{}{
		(*NominationPools_Root_Id)(nil),
		(*NominationPools_Root_Index)(nil),
		(*NominationPools_Root_Raw)(nil),
		(*NominationPools_Root_Address32)(nil),
		(*NominationPools_Root_Address20)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[583].OneofWrappers = []interface{}{
		(*GearVoucherPallet_IssueCall)(nil),
		(*GearVoucherPallet_CallCall)(nil),
		(*GearVoucherPallet_RevokeCall)(nil),
		(*GearVoucherPallet_UpdateCall)(nil),
		(*GearVoucherPallet_CallDeprecatedCall)(nil),
		(*GearVoucherPallet_DeclineCall)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[587].OneofWrappers = []interface{}{
		(*Identity_Target_Id)(nil),
		(*Identity_Target_Index)(nil),
		(*Identity_Target_Raw)(nil),
		(*Identity_Target_Address32)(nil),
		(*Identity_Target_Address20)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[589].OneofWrappers = []interface{}{
		(*ElectionProviderMultiPhasePallet_SubmitUnsignedCall)(nil),
		(*ElectionProviderMultiPhasePallet_SetMinimumUntrustedScoreCall)(nil),
		(*ElectionProviderMultiPhasePallet_SetEmergencyElectionResultCall)(nil),
		(*ElectionProviderMultiPhasePallet_SubmitCall)(nil),
		(*ElectionProviderMultiPhasePallet_GovernanceFallbackCall)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[593].OneofWrappers = []interface{}{
		(*Grandpa_Equivocation_Prevote)(nil),
		(*Grandpa_Equivocation_Precommit)(nil),
	}
	file_sf_gear_metadata_type_v1_output_proto_msgTypes[598].OneofWrappers = []interface{}{
		(*NominationPools_MaxMembersPerPool_Noop)(nil),
		(*NominationPools_MaxMembersPerPool_Set)(nil),
		(*NominationPools_MaxMembersPerPool_Remove)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sf_gear_metadata_type_v1_output_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   608,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sf_gear_metadata_type_v1_output_proto_goTypes,
		DependencyIndexes: file_sf_gear_metadata_type_v1_output_proto_depIdxs,
		MessageInfos:      file_sf_gear_metadata_type_v1_output_proto_msgTypes,
	}.Build()
	File_sf_gear_metadata_type_v1_output_proto = out.File
	file_sf_gear_metadata_type_v1_output_proto_rawDesc = nil
	file_sf_gear_metadata_type_v1_output_proto_goTypes = nil
	file_sf_gear_metadata_type_v1_output_proto_depIdxs = nil
}
