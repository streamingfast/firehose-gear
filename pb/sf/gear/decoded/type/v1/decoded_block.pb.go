// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: sf/gear/decoded/type/v1/decoded_block.proto

package pbgear

import (
	v11 "github.com/streamingfast/firehose-gear/pb/sf/gear/metadata/type/v1"
	v1 "github.com/streamingfast/firehose-gear/pb/sf/gear/type/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DecodedBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number            uint64              `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	Hash              []byte              `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	Header            *v1.Header          `protobuf:"bytes,3,opt,name=header,proto3" json:"header,omitempty"`
	Extrinsics        []*v1.Extrinsic     `protobuf:"bytes,4,rep,name=extrinsics,proto3" json:"extrinsics,omitempty"`
	Events            []*v1.Event         `protobuf:"bytes,5,rep,name=events,proto3" json:"events,omitempty"`
	DigestItems       []*v1.DigestItem    `protobuf:"bytes,6,rep,name=digest_items,json=digestItems,proto3" json:"digest_items,omitempty"`
	Justification     []byte              `protobuf:"bytes,7,opt,name=justification,proto3" json:"justification,omitempty"`
	RawEvents         []byte              `protobuf:"bytes,8,opt,name=raw_events,json=rawEvents,proto3" json:"raw_events,omitempty"`
	DecodedExtrinsics []*DecodedExtrinsic `protobuf:"bytes,9,rep,name=decoded_extrinsics,json=decodedExtrinsics,proto3" json:"decoded_extrinsics,omitempty"`
}

func (x *DecodedBlock) Reset() {
	*x = DecodedBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_decoded_type_v1_decoded_block_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecodedBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecodedBlock) ProtoMessage() {}

func (x *DecodedBlock) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_decoded_type_v1_decoded_block_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecodedBlock.ProtoReflect.Descriptor instead.
func (*DecodedBlock) Descriptor() ([]byte, []int) {
	return file_sf_gear_decoded_type_v1_decoded_block_proto_rawDescGZIP(), []int{0}
}

func (x *DecodedBlock) GetNumber() uint64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *DecodedBlock) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *DecodedBlock) GetHeader() *v1.Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *DecodedBlock) GetExtrinsics() []*v1.Extrinsic {
	if x != nil {
		return x.Extrinsics
	}
	return nil
}

func (x *DecodedBlock) GetEvents() []*v1.Event {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *DecodedBlock) GetDigestItems() []*v1.DigestItem {
	if x != nil {
		return x.DigestItems
	}
	return nil
}

func (x *DecodedBlock) GetJustification() []byte {
	if x != nil {
		return x.Justification
	}
	return nil
}

func (x *DecodedBlock) GetRawEvents() []byte {
	if x != nil {
		return x.RawEvents
	}
	return nil
}

func (x *DecodedBlock) GetDecodedExtrinsics() []*DecodedExtrinsic {
	if x != nil {
		return x.DecodedExtrinsics
	}
	return nil
}

type DecodedExtrinsic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Call *RuntimeCall `protobuf:"bytes,1,opt,name=call,proto3" json:"call,omitempty"`
}

func (x *DecodedExtrinsic) Reset() {
	*x = DecodedExtrinsic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_decoded_type_v1_decoded_block_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecodedExtrinsic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecodedExtrinsic) ProtoMessage() {}

func (x *DecodedExtrinsic) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_decoded_type_v1_decoded_block_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecodedExtrinsic.ProtoReflect.Descriptor instead.
func (*DecodedExtrinsic) Descriptor() ([]byte, []int) {
	return file_sf_gear_decoded_type_v1_decoded_block_proto_rawDescGZIP(), []int{1}
}

func (x *DecodedExtrinsic) GetCall() *RuntimeCall {
	if x != nil {
		return x.Call
	}
	return nil
}

type RuntimeCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Call:
	//
	//	*RuntimeCall_System
	//	*RuntimeCall_Timestamp
	//	*RuntimeCall_Babe
	//	*RuntimeCall_Grandpa
	//	*RuntimeCall_Balances
	//	*RuntimeCall_Vesting
	//	*RuntimeCall_BagsList
	//	*RuntimeCall_ImOnline
	//	*RuntimeCall_Staking
	//	*RuntimeCall_Session
	//	*RuntimeCall_Treasury
	//	*RuntimeCall_Utility
	//	*RuntimeCall_ConvictionVoting
	//	*RuntimeCall_Referenda
	//	*RuntimeCall_FellowshipCollective
	//	*RuntimeCall_FellowshipReferenda
	//	*RuntimeCall_Whitelist
	//	*RuntimeCall_Scheduler
	//	*RuntimeCall_Preimage
	//	*RuntimeCall_Identity
	//	*RuntimeCall_Proxy
	//	*RuntimeCall_Multisig
	//	*RuntimeCall_ElectionProviderMultiPhase
	//	*RuntimeCall_Bounties
	//	*RuntimeCall_ChildBounties
	//	*RuntimeCall_NominationPools
	//	*RuntimeCall_Gear
	//	*RuntimeCall_StakingRewards
	//	*RuntimeCall_GearVoucher
	Call isRuntimeCall_Call `protobuf_oneof:"call"`
}

func (x *RuntimeCall) Reset() {
	*x = RuntimeCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_gear_decoded_type_v1_decoded_block_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuntimeCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeCall) ProtoMessage() {}

func (x *RuntimeCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_gear_decoded_type_v1_decoded_block_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeCall.ProtoReflect.Descriptor instead.
func (*RuntimeCall) Descriptor() ([]byte, []int) {
	return file_sf_gear_decoded_type_v1_decoded_block_proto_rawDescGZIP(), []int{2}
}

func (m *RuntimeCall) GetCall() isRuntimeCall_Call {
	if m != nil {
		return m.Call
	}
	return nil
}

func (x *RuntimeCall) GetSystem() *v11.SystemPallet {
	if x, ok := x.GetCall().(*RuntimeCall_System); ok {
		return x.System
	}
	return nil
}

func (x *RuntimeCall) GetTimestamp() *v11.TimestampPallet {
	if x, ok := x.GetCall().(*RuntimeCall_Timestamp); ok {
		return x.Timestamp
	}
	return nil
}

func (x *RuntimeCall) GetBabe() *v11.BabePallet {
	if x, ok := x.GetCall().(*RuntimeCall_Babe); ok {
		return x.Babe
	}
	return nil
}

func (x *RuntimeCall) GetGrandpa() *v11.GrandpaPallet {
	if x, ok := x.GetCall().(*RuntimeCall_Grandpa); ok {
		return x.Grandpa
	}
	return nil
}

func (x *RuntimeCall) GetBalances() *v11.BalancesPallet {
	if x, ok := x.GetCall().(*RuntimeCall_Balances); ok {
		return x.Balances
	}
	return nil
}

func (x *RuntimeCall) GetVesting() *v11.VestingPallet {
	if x, ok := x.GetCall().(*RuntimeCall_Vesting); ok {
		return x.Vesting
	}
	return nil
}

func (x *RuntimeCall) GetBagsList() *v11.BagsListPallet {
	if x, ok := x.GetCall().(*RuntimeCall_BagsList); ok {
		return x.BagsList
	}
	return nil
}

func (x *RuntimeCall) GetImOnline() *v11.ImOnlinePallet {
	if x, ok := x.GetCall().(*RuntimeCall_ImOnline); ok {
		return x.ImOnline
	}
	return nil
}

func (x *RuntimeCall) GetStaking() *v11.StakingPallet {
	if x, ok := x.GetCall().(*RuntimeCall_Staking); ok {
		return x.Staking
	}
	return nil
}

func (x *RuntimeCall) GetSession() *v11.SessionPallet {
	if x, ok := x.GetCall().(*RuntimeCall_Session); ok {
		return x.Session
	}
	return nil
}

func (x *RuntimeCall) GetTreasury() *v11.TreasuryPallet {
	if x, ok := x.GetCall().(*RuntimeCall_Treasury); ok {
		return x.Treasury
	}
	return nil
}

func (x *RuntimeCall) GetUtility() *v11.UtilityPallet {
	if x, ok := x.GetCall().(*RuntimeCall_Utility); ok {
		return x.Utility
	}
	return nil
}

func (x *RuntimeCall) GetConvictionVoting() *v11.ConvictionVotingPallet {
	if x, ok := x.GetCall().(*RuntimeCall_ConvictionVoting); ok {
		return x.ConvictionVoting
	}
	return nil
}

func (x *RuntimeCall) GetReferenda() *v11.ReferendaPallet {
	if x, ok := x.GetCall().(*RuntimeCall_Referenda); ok {
		return x.Referenda
	}
	return nil
}

func (x *RuntimeCall) GetFellowshipCollective() *v11.FellowshipCollectivePallet {
	if x, ok := x.GetCall().(*RuntimeCall_FellowshipCollective); ok {
		return x.FellowshipCollective
	}
	return nil
}

func (x *RuntimeCall) GetFellowshipReferenda() *v11.FellowshipReferendaPallet {
	if x, ok := x.GetCall().(*RuntimeCall_FellowshipReferenda); ok {
		return x.FellowshipReferenda
	}
	return nil
}

func (x *RuntimeCall) GetWhitelist() *v11.WhitelistPallet {
	if x, ok := x.GetCall().(*RuntimeCall_Whitelist); ok {
		return x.Whitelist
	}
	return nil
}

func (x *RuntimeCall) GetScheduler() *v11.SchedulerPallet {
	if x, ok := x.GetCall().(*RuntimeCall_Scheduler); ok {
		return x.Scheduler
	}
	return nil
}

func (x *RuntimeCall) GetPreimage() *v11.PreimagePallet {
	if x, ok := x.GetCall().(*RuntimeCall_Preimage); ok {
		return x.Preimage
	}
	return nil
}

func (x *RuntimeCall) GetIdentity() *v11.IdentityPallet {
	if x, ok := x.GetCall().(*RuntimeCall_Identity); ok {
		return x.Identity
	}
	return nil
}

func (x *RuntimeCall) GetProxy() *v11.ProxyPallet {
	if x, ok := x.GetCall().(*RuntimeCall_Proxy); ok {
		return x.Proxy
	}
	return nil
}

func (x *RuntimeCall) GetMultisig() *v11.MultisigPallet {
	if x, ok := x.GetCall().(*RuntimeCall_Multisig); ok {
		return x.Multisig
	}
	return nil
}

func (x *RuntimeCall) GetElectionProviderMultiPhase() *v11.ElectionProviderMultiPhasePallet {
	if x, ok := x.GetCall().(*RuntimeCall_ElectionProviderMultiPhase); ok {
		return x.ElectionProviderMultiPhase
	}
	return nil
}

func (x *RuntimeCall) GetBounties() *v11.BountiesPallet {
	if x, ok := x.GetCall().(*RuntimeCall_Bounties); ok {
		return x.Bounties
	}
	return nil
}

func (x *RuntimeCall) GetChildBounties() *v11.ChildBountiesPallet {
	if x, ok := x.GetCall().(*RuntimeCall_ChildBounties); ok {
		return x.ChildBounties
	}
	return nil
}

func (x *RuntimeCall) GetNominationPools() *v11.NominationPoolsPallet {
	if x, ok := x.GetCall().(*RuntimeCall_NominationPools); ok {
		return x.NominationPools
	}
	return nil
}

func (x *RuntimeCall) GetGear() *v11.GearPallet {
	if x, ok := x.GetCall().(*RuntimeCall_Gear); ok {
		return x.Gear
	}
	return nil
}

func (x *RuntimeCall) GetStakingRewards() *v11.StakingRewardsPallet {
	if x, ok := x.GetCall().(*RuntimeCall_StakingRewards); ok {
		return x.StakingRewards
	}
	return nil
}

func (x *RuntimeCall) GetGearVoucher() *v11.GearVoucherPallet {
	if x, ok := x.GetCall().(*RuntimeCall_GearVoucher); ok {
		return x.GearVoucher
	}
	return nil
}

type isRuntimeCall_Call interface {
	isRuntimeCall_Call()
}

type RuntimeCall_System struct {
	System *v11.SystemPallet `protobuf:"bytes,1,opt,name=system,proto3,oneof"`
}

type RuntimeCall_Timestamp struct {
	Timestamp *v11.TimestampPallet `protobuf:"bytes,2,opt,name=timestamp,proto3,oneof"`
}

type RuntimeCall_Babe struct {
	Babe *v11.BabePallet `protobuf:"bytes,3,opt,name=babe,proto3,oneof"`
}

type RuntimeCall_Grandpa struct {
	Grandpa *v11.GrandpaPallet `protobuf:"bytes,4,opt,name=grandpa,proto3,oneof"`
}

type RuntimeCall_Balances struct {
	Balances *v11.BalancesPallet `protobuf:"bytes,5,opt,name=balances,proto3,oneof"`
}

type RuntimeCall_Vesting struct {
	Vesting *v11.VestingPallet `protobuf:"bytes,6,opt,name=vesting,proto3,oneof"`
}

type RuntimeCall_BagsList struct {
	BagsList *v11.BagsListPallet `protobuf:"bytes,7,opt,name=bags_list,json=bagsList,proto3,oneof"`
}

type RuntimeCall_ImOnline struct {
	ImOnline *v11.ImOnlinePallet `protobuf:"bytes,8,opt,name=im_online,json=imOnline,proto3,oneof"`
}

type RuntimeCall_Staking struct {
	Staking *v11.StakingPallet `protobuf:"bytes,9,opt,name=staking,proto3,oneof"`
}

type RuntimeCall_Session struct {
	Session *v11.SessionPallet `protobuf:"bytes,10,opt,name=session,proto3,oneof"`
}

type RuntimeCall_Treasury struct {
	Treasury *v11.TreasuryPallet `protobuf:"bytes,11,opt,name=treasury,proto3,oneof"`
}

type RuntimeCall_Utility struct {
	Utility *v11.UtilityPallet `protobuf:"bytes,12,opt,name=utility,proto3,oneof"`
}

type RuntimeCall_ConvictionVoting struct {
	ConvictionVoting *v11.ConvictionVotingPallet `protobuf:"bytes,13,opt,name=conviction_voting,json=convictionVoting,proto3,oneof"`
}

type RuntimeCall_Referenda struct {
	Referenda *v11.ReferendaPallet `protobuf:"bytes,14,opt,name=referenda,proto3,oneof"`
}

type RuntimeCall_FellowshipCollective struct {
	FellowshipCollective *v11.FellowshipCollectivePallet `protobuf:"bytes,15,opt,name=fellowship_collective,json=fellowshipCollective,proto3,oneof"`
}

type RuntimeCall_FellowshipReferenda struct {
	FellowshipReferenda *v11.FellowshipReferendaPallet `protobuf:"bytes,16,opt,name=fellowship_referenda,json=fellowshipReferenda,proto3,oneof"`
}

type RuntimeCall_Whitelist struct {
	Whitelist *v11.WhitelistPallet `protobuf:"bytes,17,opt,name=whitelist,proto3,oneof"`
}

type RuntimeCall_Scheduler struct {
	Scheduler *v11.SchedulerPallet `protobuf:"bytes,18,opt,name=scheduler,proto3,oneof"`
}

type RuntimeCall_Preimage struct {
	Preimage *v11.PreimagePallet `protobuf:"bytes,19,opt,name=preimage,proto3,oneof"`
}

type RuntimeCall_Identity struct {
	Identity *v11.IdentityPallet `protobuf:"bytes,20,opt,name=identity,proto3,oneof"`
}

type RuntimeCall_Proxy struct {
	Proxy *v11.ProxyPallet `protobuf:"bytes,21,opt,name=proxy,proto3,oneof"`
}

type RuntimeCall_Multisig struct {
	Multisig *v11.MultisigPallet `protobuf:"bytes,22,opt,name=multisig,proto3,oneof"`
}

type RuntimeCall_ElectionProviderMultiPhase struct {
	ElectionProviderMultiPhase *v11.ElectionProviderMultiPhasePallet `protobuf:"bytes,23,opt,name=election_provider_multi_phase,json=electionProviderMultiPhase,proto3,oneof"`
}

type RuntimeCall_Bounties struct {
	Bounties *v11.BountiesPallet `protobuf:"bytes,24,opt,name=bounties,proto3,oneof"`
}

type RuntimeCall_ChildBounties struct {
	ChildBounties *v11.ChildBountiesPallet `protobuf:"bytes,25,opt,name=child_bounties,json=childBounties,proto3,oneof"`
}

type RuntimeCall_NominationPools struct {
	NominationPools *v11.NominationPoolsPallet `protobuf:"bytes,26,opt,name=nomination_pools,json=nominationPools,proto3,oneof"`
}

type RuntimeCall_Gear struct {
	Gear *v11.GearPallet `protobuf:"bytes,27,opt,name=gear,proto3,oneof"`
}

type RuntimeCall_StakingRewards struct {
	StakingRewards *v11.StakingRewardsPallet `protobuf:"bytes,28,opt,name=staking_rewards,json=stakingRewards,proto3,oneof"`
}

type RuntimeCall_GearVoucher struct {
	GearVoucher *v11.GearVoucherPallet `protobuf:"bytes,29,opt,name=gear_voucher,json=gearVoucher,proto3,oneof"`
}

func (*RuntimeCall_System) isRuntimeCall_Call() {}

func (*RuntimeCall_Timestamp) isRuntimeCall_Call() {}

func (*RuntimeCall_Babe) isRuntimeCall_Call() {}

func (*RuntimeCall_Grandpa) isRuntimeCall_Call() {}

func (*RuntimeCall_Balances) isRuntimeCall_Call() {}

func (*RuntimeCall_Vesting) isRuntimeCall_Call() {}

func (*RuntimeCall_BagsList) isRuntimeCall_Call() {}

func (*RuntimeCall_ImOnline) isRuntimeCall_Call() {}

func (*RuntimeCall_Staking) isRuntimeCall_Call() {}

func (*RuntimeCall_Session) isRuntimeCall_Call() {}

func (*RuntimeCall_Treasury) isRuntimeCall_Call() {}

func (*RuntimeCall_Utility) isRuntimeCall_Call() {}

func (*RuntimeCall_ConvictionVoting) isRuntimeCall_Call() {}

func (*RuntimeCall_Referenda) isRuntimeCall_Call() {}

func (*RuntimeCall_FellowshipCollective) isRuntimeCall_Call() {}

func (*RuntimeCall_FellowshipReferenda) isRuntimeCall_Call() {}

func (*RuntimeCall_Whitelist) isRuntimeCall_Call() {}

func (*RuntimeCall_Scheduler) isRuntimeCall_Call() {}

func (*RuntimeCall_Preimage) isRuntimeCall_Call() {}

func (*RuntimeCall_Identity) isRuntimeCall_Call() {}

func (*RuntimeCall_Proxy) isRuntimeCall_Call() {}

func (*RuntimeCall_Multisig) isRuntimeCall_Call() {}

func (*RuntimeCall_ElectionProviderMultiPhase) isRuntimeCall_Call() {}

func (*RuntimeCall_Bounties) isRuntimeCall_Call() {}

func (*RuntimeCall_ChildBounties) isRuntimeCall_Call() {}

func (*RuntimeCall_NominationPools) isRuntimeCall_Call() {}

func (*RuntimeCall_Gear) isRuntimeCall_Call() {}

func (*RuntimeCall_StakingRewards) isRuntimeCall_Call() {}

func (*RuntimeCall_GearVoucher) isRuntimeCall_Call() {}

var File_sf_gear_decoded_type_v1_decoded_block_proto protoreflect.FileDescriptor

var file_sf_gear_decoded_type_v1_decoded_block_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x73, 0x66, 0x2f, 0x67, 0x65, 0x61, 0x72, 0x2f, 0x64, 0x65, 0x63, 0x6f, 0x64, 0x65,
	0x64, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x63, 0x6f, 0x64, 0x65,
	0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x64, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x25, 0x73, 0x66, 0x2f, 0x67, 0x65, 0x61, 0x72, 0x2f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x76, 0x31,
	0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x73,
	0x66, 0x2f, 0x67, 0x65, 0x61, 0x72, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb6, 0x03, 0x0a, 0x0c, 0x44,
	0x65, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x2f, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61,
	0x72, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72,
	0x69, 0x6e, 0x73, 0x69, 0x63, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x78, 0x74, 0x72, 0x69, 0x6e, 0x73, 0x69, 0x63, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x69, 0x6e,
	0x73, 0x69, 0x63, 0x73, 0x12, 0x2e, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x0c, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x67,
	0x65, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x6a, 0x75, 0x73, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6a, 0x75, 0x73,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x61,
	0x77, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x72, 0x61, 0x77, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x58, 0x0a, 0x12, 0x64, 0x65, 0x63,
	0x6f, 0x64, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x69, 0x6e, 0x73, 0x69, 0x63, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x64, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x45, 0x78, 0x74, 0x72, 0x69, 0x6e, 0x73, 0x69, 0x63,
	0x52, 0x11, 0x64, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x45, 0x78, 0x74, 0x72, 0x69, 0x6e, 0x73,
	0x69, 0x63, 0x73, 0x22, 0x4c, 0x0a, 0x10, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x45, 0x78,
	0x74, 0x72, 0x69, 0x6e, 0x73, 0x69, 0x63, 0x12, 0x38, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e,
	0x64, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x04, 0x63, 0x61, 0x6c,
	0x6c, 0x22, 0xf1, 0x11, 0x0a, 0x0b, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x61, 0x6c,
	0x6c, 0x12, 0x40, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x06, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x12, 0x49, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x50, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x48, 0x00, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3a,
	0x0a, 0x04, 0x62, 0x61, 0x62, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x62, 0x65, 0x50, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x48, 0x00, 0x52, 0x04, 0x62, 0x61, 0x62, 0x65, 0x12, 0x43, 0x0a, 0x07, 0x67, 0x72,
	0x61, 0x6e, 0x64, 0x70, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x50, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x07, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x70, 0x61, 0x12,
	0x46, 0x0a, 0x08, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x07, 0x76, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x48, 0x00, 0x52, 0x07, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x47, 0x0a, 0x09,
	0x62, 0x61, 0x67, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x67, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x62, 0x61, 0x67,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x09, 0x69, 0x6d, 0x5f, 0x6f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6d, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x43,
	0x0a, 0x07, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x07, 0x73, 0x74, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x12, 0x43, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52,
	0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x08, 0x74, 0x72, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e,
	0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x50, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79,
	0x12, 0x43, 0x0a, 0x07, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x74, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x07, 0x75, 0x74,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x5f, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x48, 0x00, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x49, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x64, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x50, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64,
	0x61, 0x12, 0x6b, 0x0a, 0x15, 0x66, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x5f,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x6c, 0x6c,
	0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x14, 0x66, 0x65, 0x6c, 0x6c, 0x6f, 0x77,
	0x73, 0x68, 0x69, 0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x68,
	0x0a, 0x14, 0x66, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68,
	0x69, 0x70, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x50, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x48, 0x00, 0x52, 0x13, 0x66, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x68, 0x69, 0x70, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x61, 0x12, 0x49, 0x0a, 0x09, 0x77, 0x68, 0x69, 0x74,
	0x65, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x66,
	0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74,
	0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x09, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x48, 0x00, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x12, 0x46,
	0x0a, 0x08, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x70, 0x72,
	0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x46, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x3d,
	0x0a, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x50, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x46, 0x0a,
	0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x73, 0x69, 0x67, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x73, 0x69, 0x67, 0x12, 0x7f, 0x0a, 0x1d, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x73,
	0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x68, 0x61,
	0x73, 0x65, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x1a, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x08, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65,
	0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x50, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x12, 0x56,
	0x0a, 0x0e, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x50,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x42, 0x6f,
	0x75, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x10, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x50, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x48, 0x00, 0x52, 0x0f, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x3a, 0x0a, 0x04, 0x67, 0x65, 0x61, 0x72, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x61, 0x72, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x04, 0x67, 0x65, 0x61, 0x72,
	0x12, 0x59, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x66, 0x2e, 0x67,
	0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x74, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x50, 0x0a, 0x0c, 0x67,
	0x65, 0x61, 0x72, 0x5f, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x66, 0x2e, 0x67, 0x65, 0x61, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x61,
	0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x50, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x48, 0x00,
	0x52, 0x0b, 0x67, 0x65, 0x61, 0x72, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x42, 0x06, 0x0a,
	0x04, 0x63, 0x61, 0x6c, 0x6c, 0x42, 0x4a, 0x5a, 0x48, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x66, 0x61, 0x73,
	0x74, 0x2f, 0x66, 0x69, 0x72, 0x65, 0x68, 0x6f, 0x73, 0x65, 0x2d, 0x67, 0x65, 0x61, 0x72, 0x2f,
	0x70, 0x62, 0x2f, 0x73, 0x66, 0x2f, 0x67, 0x65, 0x61, 0x72, 0x2f, 0x64, 0x65, 0x63, 0x6f, 0x64,
	0x65, 0x64, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x70, 0x62, 0x67, 0x65, 0x61,
	0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sf_gear_decoded_type_v1_decoded_block_proto_rawDescOnce sync.Once
	file_sf_gear_decoded_type_v1_decoded_block_proto_rawDescData = file_sf_gear_decoded_type_v1_decoded_block_proto_rawDesc
)

func file_sf_gear_decoded_type_v1_decoded_block_proto_rawDescGZIP() []byte {
	file_sf_gear_decoded_type_v1_decoded_block_proto_rawDescOnce.Do(func() {
		file_sf_gear_decoded_type_v1_decoded_block_proto_rawDescData = protoimpl.X.CompressGZIP(file_sf_gear_decoded_type_v1_decoded_block_proto_rawDescData)
	})
	return file_sf_gear_decoded_type_v1_decoded_block_proto_rawDescData
}

var file_sf_gear_decoded_type_v1_decoded_block_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_sf_gear_decoded_type_v1_decoded_block_proto_goTypes = []interface{}{
	(*DecodedBlock)(nil),                         // 0: sf.gear.decoded.type.v1.DecodedBlock
	(*DecodedExtrinsic)(nil),                     // 1: sf.gear.decoded.type.v1.DecodedExtrinsic
	(*RuntimeCall)(nil),                          // 2: sf.gear.decoded.type.v1.RuntimeCall
	(*v1.Header)(nil),                            // 3: sf.gear.type.v1.Header
	(*v1.Extrinsic)(nil),                         // 4: sf.gear.type.v1.Extrinsic
	(*v1.Event)(nil),                             // 5: sf.gear.type.v1.Event
	(*v1.DigestItem)(nil),                        // 6: sf.gear.type.v1.DigestItem
	(*v11.SystemPallet)(nil),                     // 7: sf.gear.metadata.type.v1.SystemPallet
	(*v11.TimestampPallet)(nil),                  // 8: sf.gear.metadata.type.v1.TimestampPallet
	(*v11.BabePallet)(nil),                       // 9: sf.gear.metadata.type.v1.BabePallet
	(*v11.GrandpaPallet)(nil),                    // 10: sf.gear.metadata.type.v1.GrandpaPallet
	(*v11.BalancesPallet)(nil),                   // 11: sf.gear.metadata.type.v1.BalancesPallet
	(*v11.VestingPallet)(nil),                    // 12: sf.gear.metadata.type.v1.VestingPallet
	(*v11.BagsListPallet)(nil),                   // 13: sf.gear.metadata.type.v1.BagsListPallet
	(*v11.ImOnlinePallet)(nil),                   // 14: sf.gear.metadata.type.v1.ImOnlinePallet
	(*v11.StakingPallet)(nil),                    // 15: sf.gear.metadata.type.v1.StakingPallet
	(*v11.SessionPallet)(nil),                    // 16: sf.gear.metadata.type.v1.SessionPallet
	(*v11.TreasuryPallet)(nil),                   // 17: sf.gear.metadata.type.v1.TreasuryPallet
	(*v11.UtilityPallet)(nil),                    // 18: sf.gear.metadata.type.v1.UtilityPallet
	(*v11.ConvictionVotingPallet)(nil),           // 19: sf.gear.metadata.type.v1.ConvictionVotingPallet
	(*v11.ReferendaPallet)(nil),                  // 20: sf.gear.metadata.type.v1.ReferendaPallet
	(*v11.FellowshipCollectivePallet)(nil),       // 21: sf.gear.metadata.type.v1.FellowshipCollectivePallet
	(*v11.FellowshipReferendaPallet)(nil),        // 22: sf.gear.metadata.type.v1.FellowshipReferendaPallet
	(*v11.WhitelistPallet)(nil),                  // 23: sf.gear.metadata.type.v1.WhitelistPallet
	(*v11.SchedulerPallet)(nil),                  // 24: sf.gear.metadata.type.v1.SchedulerPallet
	(*v11.PreimagePallet)(nil),                   // 25: sf.gear.metadata.type.v1.PreimagePallet
	(*v11.IdentityPallet)(nil),                   // 26: sf.gear.metadata.type.v1.IdentityPallet
	(*v11.ProxyPallet)(nil),                      // 27: sf.gear.metadata.type.v1.ProxyPallet
	(*v11.MultisigPallet)(nil),                   // 28: sf.gear.metadata.type.v1.MultisigPallet
	(*v11.ElectionProviderMultiPhasePallet)(nil), // 29: sf.gear.metadata.type.v1.ElectionProviderMultiPhasePallet
	(*v11.BountiesPallet)(nil),                   // 30: sf.gear.metadata.type.v1.BountiesPallet
	(*v11.ChildBountiesPallet)(nil),              // 31: sf.gear.metadata.type.v1.ChildBountiesPallet
	(*v11.NominationPoolsPallet)(nil),            // 32: sf.gear.metadata.type.v1.NominationPoolsPallet
	(*v11.GearPallet)(nil),                       // 33: sf.gear.metadata.type.v1.GearPallet
	(*v11.StakingRewardsPallet)(nil),             // 34: sf.gear.metadata.type.v1.StakingRewardsPallet
	(*v11.GearVoucherPallet)(nil),                // 35: sf.gear.metadata.type.v1.GearVoucherPallet
}
var file_sf_gear_decoded_type_v1_decoded_block_proto_depIdxs = []int32{
	3,  // 0: sf.gear.decoded.type.v1.DecodedBlock.header:type_name -> sf.gear.type.v1.Header
	4,  // 1: sf.gear.decoded.type.v1.DecodedBlock.extrinsics:type_name -> sf.gear.type.v1.Extrinsic
	5,  // 2: sf.gear.decoded.type.v1.DecodedBlock.events:type_name -> sf.gear.type.v1.Event
	6,  // 3: sf.gear.decoded.type.v1.DecodedBlock.digest_items:type_name -> sf.gear.type.v1.DigestItem
	1,  // 4: sf.gear.decoded.type.v1.DecodedBlock.decoded_extrinsics:type_name -> sf.gear.decoded.type.v1.DecodedExtrinsic
	2,  // 5: sf.gear.decoded.type.v1.DecodedExtrinsic.call:type_name -> sf.gear.decoded.type.v1.RuntimeCall
	7,  // 6: sf.gear.decoded.type.v1.RuntimeCall.system:type_name -> sf.gear.metadata.type.v1.SystemPallet
	8,  // 7: sf.gear.decoded.type.v1.RuntimeCall.timestamp:type_name -> sf.gear.metadata.type.v1.TimestampPallet
	9,  // 8: sf.gear.decoded.type.v1.RuntimeCall.babe:type_name -> sf.gear.metadata.type.v1.BabePallet
	10, // 9: sf.gear.decoded.type.v1.RuntimeCall.grandpa:type_name -> sf.gear.metadata.type.v1.GrandpaPallet
	11, // 10: sf.gear.decoded.type.v1.RuntimeCall.balances:type_name -> sf.gear.metadata.type.v1.BalancesPallet
	12, // 11: sf.gear.decoded.type.v1.RuntimeCall.vesting:type_name -> sf.gear.metadata.type.v1.VestingPallet
	13, // 12: sf.gear.decoded.type.v1.RuntimeCall.bags_list:type_name -> sf.gear.metadata.type.v1.BagsListPallet
	14, // 13: sf.gear.decoded.type.v1.RuntimeCall.im_online:type_name -> sf.gear.metadata.type.v1.ImOnlinePallet
	15, // 14: sf.gear.decoded.type.v1.RuntimeCall.staking:type_name -> sf.gear.metadata.type.v1.StakingPallet
	16, // 15: sf.gear.decoded.type.v1.RuntimeCall.session:type_name -> sf.gear.metadata.type.v1.SessionPallet
	17, // 16: sf.gear.decoded.type.v1.RuntimeCall.treasury:type_name -> sf.gear.metadata.type.v1.TreasuryPallet
	18, // 17: sf.gear.decoded.type.v1.RuntimeCall.utility:type_name -> sf.gear.metadata.type.v1.UtilityPallet
	19, // 18: sf.gear.decoded.type.v1.RuntimeCall.conviction_voting:type_name -> sf.gear.metadata.type.v1.ConvictionVotingPallet
	20, // 19: sf.gear.decoded.type.v1.RuntimeCall.referenda:type_name -> sf.gear.metadata.type.v1.ReferendaPallet
	21, // 20: sf.gear.decoded.type.v1.RuntimeCall.fellowship_collective:type_name -> sf.gear.metadata.type.v1.FellowshipCollectivePallet
	22, // 21: sf.gear.decoded.type.v1.RuntimeCall.fellowship_referenda:type_name -> sf.gear.metadata.type.v1.FellowshipReferendaPallet
	23, // 22: sf.gear.decoded.type.v1.RuntimeCall.whitelist:type_name -> sf.gear.metadata.type.v1.WhitelistPallet
	24, // 23: sf.gear.decoded.type.v1.RuntimeCall.scheduler:type_name -> sf.gear.metadata.type.v1.SchedulerPallet
	25, // 24: sf.gear.decoded.type.v1.RuntimeCall.preimage:type_name -> sf.gear.metadata.type.v1.PreimagePallet
	26, // 25: sf.gear.decoded.type.v1.RuntimeCall.identity:type_name -> sf.gear.metadata.type.v1.IdentityPallet
	27, // 26: sf.gear.decoded.type.v1.RuntimeCall.proxy:type_name -> sf.gear.metadata.type.v1.ProxyPallet
	28, // 27: sf.gear.decoded.type.v1.RuntimeCall.multisig:type_name -> sf.gear.metadata.type.v1.MultisigPallet
	29, // 28: sf.gear.decoded.type.v1.RuntimeCall.election_provider_multi_phase:type_name -> sf.gear.metadata.type.v1.ElectionProviderMultiPhasePallet
	30, // 29: sf.gear.decoded.type.v1.RuntimeCall.bounties:type_name -> sf.gear.metadata.type.v1.BountiesPallet
	31, // 30: sf.gear.decoded.type.v1.RuntimeCall.child_bounties:type_name -> sf.gear.metadata.type.v1.ChildBountiesPallet
	32, // 31: sf.gear.decoded.type.v1.RuntimeCall.nomination_pools:type_name -> sf.gear.metadata.type.v1.NominationPoolsPallet
	33, // 32: sf.gear.decoded.type.v1.RuntimeCall.gear:type_name -> sf.gear.metadata.type.v1.GearPallet
	34, // 33: sf.gear.decoded.type.v1.RuntimeCall.staking_rewards:type_name -> sf.gear.metadata.type.v1.StakingRewardsPallet
	35, // 34: sf.gear.decoded.type.v1.RuntimeCall.gear_voucher:type_name -> sf.gear.metadata.type.v1.GearVoucherPallet
	35, // [35:35] is the sub-list for method output_type
	35, // [35:35] is the sub-list for method input_type
	35, // [35:35] is the sub-list for extension type_name
	35, // [35:35] is the sub-list for extension extendee
	0,  // [0:35] is the sub-list for field type_name
}

func init() { file_sf_gear_decoded_type_v1_decoded_block_proto_init() }
func file_sf_gear_decoded_type_v1_decoded_block_proto_init() {
	if File_sf_gear_decoded_type_v1_decoded_block_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sf_gear_decoded_type_v1_decoded_block_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecodedBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_decoded_type_v1_decoded_block_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecodedExtrinsic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_gear_decoded_type_v1_decoded_block_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuntimeCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_sf_gear_decoded_type_v1_decoded_block_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*RuntimeCall_System)(nil),
		(*RuntimeCall_Timestamp)(nil),
		(*RuntimeCall_Babe)(nil),
		(*RuntimeCall_Grandpa)(nil),
		(*RuntimeCall_Balances)(nil),
		(*RuntimeCall_Vesting)(nil),
		(*RuntimeCall_BagsList)(nil),
		(*RuntimeCall_ImOnline)(nil),
		(*RuntimeCall_Staking)(nil),
		(*RuntimeCall_Session)(nil),
		(*RuntimeCall_Treasury)(nil),
		(*RuntimeCall_Utility)(nil),
		(*RuntimeCall_ConvictionVoting)(nil),
		(*RuntimeCall_Referenda)(nil),
		(*RuntimeCall_FellowshipCollective)(nil),
		(*RuntimeCall_FellowshipReferenda)(nil),
		(*RuntimeCall_Whitelist)(nil),
		(*RuntimeCall_Scheduler)(nil),
		(*RuntimeCall_Preimage)(nil),
		(*RuntimeCall_Identity)(nil),
		(*RuntimeCall_Proxy)(nil),
		(*RuntimeCall_Multisig)(nil),
		(*RuntimeCall_ElectionProviderMultiPhase)(nil),
		(*RuntimeCall_Bounties)(nil),
		(*RuntimeCall_ChildBounties)(nil),
		(*RuntimeCall_NominationPools)(nil),
		(*RuntimeCall_Gear)(nil),
		(*RuntimeCall_StakingRewards)(nil),
		(*RuntimeCall_GearVoucher)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sf_gear_decoded_type_v1_decoded_block_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sf_gear_decoded_type_v1_decoded_block_proto_goTypes,
		DependencyIndexes: file_sf_gear_decoded_type_v1_decoded_block_proto_depIdxs,
		MessageInfos:      file_sf_gear_decoded_type_v1_decoded_block_proto_msgTypes,
	}.Build()
	File_sf_gear_decoded_type_v1_decoded_block_proto = out.File
	file_sf_gear_decoded_type_v1_decoded_block_proto_rawDesc = nil
	file_sf_gear_decoded_type_v1_decoded_block_proto_goTypes = nil
	file_sf_gear_decoded_type_v1_decoded_block_proto_depIdxs = nil
}
